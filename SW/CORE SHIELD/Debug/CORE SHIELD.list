
CORE SHIELD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edd8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800efd8  0800efd8  0001efd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f128  0800f128  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800f128  0800f128  0001f128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f130  0800f130  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f130  0800f130  0001f130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f134  0800f134  0001f134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800f138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066fc  20000160  0800f298  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000685c  0800f298  0002685c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000281d7  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005890  00000000  00000000  000483a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f80  00000000  00000000  0004dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001856  00000000  00000000  0004fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000776b  00000000  00000000  0005140e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028414  00000000  00000000  00058b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113fa6  00000000  00000000  00080f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000899c  00000000  00000000  00194f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0019d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000160 	.word	0x20000160
 800021c:	00000000 	.word	0x00000000
 8000220:	0800efc0 	.word	0x0800efc0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000164 	.word	0x20000164
 800023c:	0800efc0 	.word	0x0800efc0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe57 	bl	80012a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f8e6 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa7a 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 fa5a 	bl	8000ab4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f94e 	bl	80008a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000604:	f000 f9ba 	bl	800097c <MX_CAN1_Init>
  MX_UART4_Init();
 8000608:	f000 fa24 	bl	8000a54 <MX_UART4_Init>
  MX_CAN2_Init();
 800060c:	f000 f9ec 	bl	80009e8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LECTURES_ADC, ADC_BUF_LEN); //ADC with DMA initialization.
 8000610:	2203      	movs	r2, #3
 8000612:	495a      	ldr	r1, [pc, #360]	; (800077c <main+0x190>)
 8000614:	485a      	ldr	r0, [pc, #360]	; (8000780 <main+0x194>)
 8000616:	f000 ffe9 	bl	80015ec <HAL_ADC_Start_DMA>
  	  	  	  	  	  	  	  	  	  	  	  	  		//(&hadc1): The function uses the ADC 1
	  	  	  	  										//LECTURES_ADC: It saves all the read data in the buffer
  	  	  	  	  	  	  	  	  	  	  	  	  		//"ADC_BUF_LEN": Number of read channels by the ADC..
//Receiving filter configuration
  canfil.FilterBank = 0;								//This refers to which filter is being configured. On this case is the filter number 0
 800061a:	4b5a      	ldr	r3, [pc, #360]	; (8000784 <main+0x198>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;			//FilterMode: How are we filtering the incoming messages. Only the messages that coincide with the mask and the filter are accepted
 8000620:	4b58      	ldr	r3, [pc, #352]	; (8000784 <main+0x198>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;			//Defines at which FIFO is this filter being configured to. In this case is the FIFO 0.
 8000626:	4b57      	ldr	r3, [pc, #348]	; (8000784 <main+0x198>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0x0000;							//MSB: Most Significant Bit. When it's in 0, accepts all the messages
 800062c:	4b55      	ldr	r3, [pc, #340]	; (8000784 <main+0x198>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;							//LSB: Least Significant Bit. When it's in 0, accepts all the messages
 8000632:	4b54      	ldr	r3, [pc, #336]	; (8000784 <main+0x198>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;						//Most Significant Bit of the mask. When it's in 0, accepts all the messages
 8000638:	4b52      	ldr	r3, [pc, #328]	; (8000784 <main+0x198>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;						//Least Significant Bit of the mask. When it's in 0, accepts all the messages
 800063e:	4b51      	ldr	r3, [pc, #324]	; (8000784 <main+0x198>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;			//Defines the Filter Scale. It will use the 32 bits of the mask and the identifier
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <main+0x198>)
 8000646:	2201      	movs	r2, #1
 8000648:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;						//This activates the filter as it is enable
 800064a:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <main+0x198>)
 800064c:	2201      	movs	r2, #1
 800064e:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;						//Indicates the first filter slave number. In this case it is the principal filter.
 8000650:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <main+0x198>)
 8000652:	220e      	movs	r2, #14
 8000654:	625a      	str	r2, [r3, #36]	; 0x24

//CAN controller configuration
  if(HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK) 	//Configures the CAN controller filter
 8000656:	494b      	ldr	r1, [pc, #300]	; (8000784 <main+0x198>)
 8000658:	484b      	ldr	r0, [pc, #300]	; (8000788 <main+0x19c>)
 800065a:	f001 fcb7 	bl	8001fcc <HAL_CAN_ConfigFilter>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <main+0x7c>
  {
  	Error_Handler();									//If the action goes wrong, call the Error_Handler function
 8000664:	f000 fb20 	bl	8000ca8 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)					//Initiates the CAN controller
 8000668:	4847      	ldr	r0, [pc, #284]	; (8000788 <main+0x19c>)
 800066a:	f001 fd9b 	bl	80021a4 <HAL_CAN_Start>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x8c>
  {
  	Error_Handler();									//If the action goes wrong, call the Error_Handler function
 8000674:	f000 fb18 	bl	8000ca8 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) //It activates the FIFO pending messages and empty mailboxes interruptions
 8000678:	2103      	movs	r1, #3
 800067a:	4843      	ldr	r0, [pc, #268]	; (8000788 <main+0x19c>)
 800067c:	f001 ffb8 	bl	80025f0 <HAL_CAN_ActivateNotification>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0x9e>
      {
      	Error_Handler();								//If the action goes wrong, call the Error_Handler function
 8000686:	f000 fb0f 	bl	8000ca8 <Error_Handler>
      }

//Transmission configuration
  TxHeader.DLC = 8; 									//Number of bites to be transmitted max- 8. DLC: Data Length Code
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <main+0x1a0>)
 800068c:	2208      	movs	r2, #8
 800068e:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;							//IDE: Identifier Extension. ID_STD: Standard Identifier. Dominant(0) = 11 bit ID, Recessive(1) = 29 bit ID
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <main+0x1a0>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;							//RTR: Remote Transmission Request, Dominant(0) = Data frame, Recessive (1) = Remote Frame. Type of trace
 8000696:	4b3d      	ldr	r3, [pc, #244]	; (800078c <main+0x1a0>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;								//Standard identifier ID
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <main+0x1a0>)
 800069e:	f240 3221 	movw	r2, #801	; 0x321
 80006a2:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;				//A temporal mark in the CAN message is not added
 80006a4:	4b39      	ldr	r3, [pc, #228]	; (800078c <main+0x1a0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	751a      	strb	r2, [r3, #20]
  TxData[0] = 1;										//Sent data. The TxData is the buffer where the data is saved
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <main+0x1a4>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;										//Sent data. The TxData is the buffer where the data is saved
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <main+0x1a4>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;										//Sent data. The TxData is the buffer where the data is saved
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <main+0x1a4>)
 80006b8:	2203      	movs	r2, #3
 80006ba:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;										//Sent data. The TxData is the buffer where the data is saved
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <main+0x1a4>)
 80006be:	2204      	movs	r2, #4
 80006c0:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;										//Sent data. The TxData is the buffer where the data is saved
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <main+0x1a4>)
 80006c4:	2205      	movs	r2, #5
 80006c6:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;										//Sent data. The TxData is the buffer where the data is saved
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <main+0x1a4>)
 80006ca:	2206      	movs	r2, #6
 80006cc:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;										//Sent data. The TxData is the buffer where the data is saved
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <main+0x1a4>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;										//Sent data. The TxData is the buffer where the data is saved
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0x1a4>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006da:	f00a fc59 	bl	800af90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Maquina_Estats */
  Maquina_EstatsHandle = osThreadNew(Maquina_estats, NULL, &Maquina_Estats_attributes);
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <main+0x1a8>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	482d      	ldr	r0, [pc, #180]	; (8000798 <main+0x1ac>)
 80006e4:	f00a fcbe 	bl	800b064 <osThreadNew>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <main+0x1b0>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX */
  CAN_TXHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_attributes);
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <main+0x1b4>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	482c      	ldr	r0, [pc, #176]	; (80007a4 <main+0x1b8>)
 80006f4:	f00a fcb6 	bl	800b064 <osThreadNew>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <main+0x1bc>)
 80006fc:	6013      	str	r3, [r2, #0]

  /* creation of USB_TASK */
  USB_TASKHandle = osThreadNew(usb_data, NULL, &USB_TASK_attributes);
 80006fe:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <main+0x1c0>)
 8000700:	2100      	movs	r1, #0
 8000702:	482b      	ldr	r0, [pc, #172]	; (80007b0 <main+0x1c4>)
 8000704:	f00a fcae 	bl	800b064 <osThreadNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <main+0x1c8>)
 800070c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070e:	f00a fc73 	bl	800aff8 <osKernelStart>
  while (1)												//Main while
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2108      	movs	r1, #8
 8000716:	4828      	ldr	r0, [pc, #160]	; (80007b8 <main+0x1cc>)
 8000718:	f003 f84e 	bl	80037b8 <HAL_GPIO_WritePin>
  	  HAL_Delay(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f000 fded 	bl	80012fc <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2108      	movs	r1, #8
 8000726:	4824      	ldr	r0, [pc, #144]	; (80007b8 <main+0x1cc>)
 8000728:	f003 f846 	bl	80037b8 <HAL_GPIO_WritePin>
  	  HAL_Delay(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 fde5 	bl	80012fc <HAL_Delay>
	  	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);	//Adds a message to the sending queue of the CAN controller
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0x1d0>)
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <main+0x1a4>)
 8000736:	4915      	ldr	r1, [pc, #84]	; (800078c <main+0x1a0>)
 8000738:	4821      	ldr	r0, [pc, #132]	; (80007c0 <main+0x1d4>)
 800073a:	f001 fd77 	bl	800222c <HAL_CAN_AddTxMessage>
	  	  HAL_Delay(500);													//Freertos delay of 500ms
 800073e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000742:	f000 fddb 	bl	80012fc <HAL_Delay>
	  	  TxData[7] = TxData[7] + 1;									//Adds 1 to the seventh element of the TxData buffer each time the loop is repeated
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <main+0x1a4>)
 8000748:	79db      	ldrb	r3, [r3, #7]
 800074a:	3301      	adds	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <main+0x1a4>)
 8000750:	71da      	strb	r2, [r3, #7]
	  	  HAL_Delay(1);													//Freertos delay of 1ms
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fdd2 	bl	80012fc <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2108      	movs	r1, #8
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0x1cc>)
 800075e:	f003 f82b 	bl	80037b8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 8000762:	2064      	movs	r0, #100	; 0x64
 8000764:	f000 fdca 	bl	80012fc <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2108      	movs	r1, #8
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <main+0x1cc>)
 800076e:	f003 f823 	bl	80037b8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f000 fdc2 	bl	80012fc <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000778:	e7cb      	b.n	8000712 <main+0x126>
 800077a:	bf00      	nop
 800077c:	20000378 	.word	0x20000378
 8000780:	2000017c 	.word	0x2000017c
 8000784:	2000034c 	.word	0x2000034c
 8000788:	20000224 	.word	0x20000224
 800078c:	20000324 	.word	0x20000324
 8000790:	2000033c 	.word	0x2000033c
 8000794:	0800f068 	.word	0x0800f068
 8000798:	08000c55 	.word	0x08000c55
 800079c:	200002fc 	.word	0x200002fc
 80007a0:	0800f08c 	.word	0x0800f08c
 80007a4:	08000c69 	.word	0x08000c69
 80007a8:	20000300 	.word	0x20000300
 80007ac:	0800f0b0 	.word	0x0800f0b0
 80007b0:	08000c73 	.word	0x08000c73
 80007b4:	20000304 	.word	0x20000304
 80007b8:	40020000 	.word	0x40020000
 80007bc:	20000374 	.word	0x20000374
 80007c0:	2000024c 	.word	0x2000024c

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2234      	movs	r2, #52	; 0x34
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00e f81c 	bl	800e810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <SystemClock_Config+0xd4>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <SystemClock_Config+0xd4>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemClock_Config+0xd4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <SystemClock_Config+0xd8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a25      	ldr	r2, [pc, #148]	; (800089c <SystemClock_Config+0xd8>)
 8000806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <SystemClock_Config+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 800082c:	230a      	movs	r3, #10
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000830:	23d8      	movs	r3, #216	; 0xd8
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000838:	2309      	movs	r3, #9
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4618      	mov	r0, r3
 8000846:	f004 faf3 	bl	8004e30 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000850:	f000 fa2a 	bl	8000ca8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000854:	f004 fa9c 	bl	8004d90 <HAL_PWREx_EnableOverDrive>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800085e:	f000 fa23 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2302      	movs	r3, #2
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2107      	movs	r1, #7
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fd83 	bl	800538c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800088c:	f000 fa0c 	bl	8000ca8 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3750      	adds	r7, #80	; 0x50
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008b4:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <MX_ADC1_Init+0xd4>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008e2:	4a25      	ldr	r2, [pc, #148]	; (8000978 <MX_ADC1_Init+0xd8>)
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC1_Init+0xd0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000900:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_ADC1_Init+0xd0>)
 8000902:	f000 fd1f 	bl	8001344 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 f9cc 	bl	8000ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_ADC1_Init+0xd0>)
 8000922:	f000 ff7b 	bl	800181c <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800092c:	f000 f9bc 	bl	8000ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000930:	2301      	movs	r3, #1
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000934:	2302      	movs	r3, #2
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_ADC1_Init+0xd0>)
 800093e:	f000 ff6d 	bl	800181c <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000948:	f000 f9ae 	bl	8000ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800094c:	2312      	movs	r3, #18
 800094e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000950:	2303      	movs	r3, #3
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_ADC1_Init+0xd0>)
 800095a:	f000 ff5f 	bl	800181c <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000964:	f000 f9a0 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000017c 	.word	0x2000017c
 8000974:	40012000 	.word	0x40012000
 8000978:	0f000001 	.word	0x0f000001

0800097c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_CAN1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000988:	220c      	movs	r2, #12
 800098a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_CAN1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_CAN1_Init+0x64>)
 800099a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800099e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_CAN1_Init+0x64>)
 80009ce:	f001 fa01 	bl	8001dd4 <HAL_CAN_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f966 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000224 	.word	0x20000224
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN2_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_CAN2_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN2_Init+0x64>)
 80009f4:	2210      	movs	r2, #16
 80009f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN2_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a10:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_CAN2_Init+0x64>)
 8000a38:	f001 f9cc 	bl	8001dd4 <HAL_CAN_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000a42:	f000 f931 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000024c 	.word	0x2000024c
 8000a50:	40006800 	.word	0x40006800

08000a54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_UART4_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_UART4_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_UART4_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_UART4_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_UART4_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_UART4_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_UART4_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_UART4_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_UART4_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_UART4_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_UART4_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_UART4_Init+0x58>)
 8000a98:	f005 fd98 	bl	80065cc <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f000 f901 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000274 	.word	0x20000274
 8000ab0:	40004c00 	.word	0x40004c00

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_DMA_Init+0x38>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_DMA_Init+0x38>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	2038      	movs	r0, #56	; 0x38
 8000ad8:	f002 f88e 	bl	8002bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000adc:	2038      	movs	r0, #56	; 0x38
 8000ade:	f002 f8a7 	bl	8002c30 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_GPIO_Init+0xa4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0xa8>)
 8000b6c:	f002 fe24 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b70:	2308      	movs	r3, #8
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0xa8>)
 8000b88:	f002 fc6a 	bl	8003460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)		//Completed CAN transmission function
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);								//It changes the LED state
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000ba8:	f002 fe1f 	bl	80037ea <HAL_GPIO_TogglePin>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)			//Received CAN function
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);		//Takes the data from the CAN channel
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000bc8:	f001 fc00 	bl	80023cc <HAL_CAN_GetRxMessage>
																		//&hadc1: The function uses the ADC 1
																		//CAN_RX_FIFO0: Where the received data is located, a FIFO, specifically the FIFO 0
																		//&RxHeader: CAN Bus Transmit Header
																		//RxData: The CAN Bus Receive Buffer
	HAL_UART_Transmit(&huart4, RxData, strlen((char*)RxData), HAL_MAX_DELAY);
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000bce:	f7ff fb37 	bl	8000240 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000bde:	f005 fd43 	bl	8006668 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);								//It changes the LED state
 8000be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000be8:	f002 fdff 	bl	80037ea <HAL_GPIO_TogglePin>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000344 	.word	0x20000344
 8000bf8:	20000308 	.word	0x20000308
 8000bfc:	20000224 	.word	0x20000224
 8000c00:	20000274 	.word	0x20000274
 8000c04:	40020400 	.word	0x40020400

08000c08 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)					//Function called each time the ADC finished the conversions
	  	  {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]

	  	    sprintf(USB_TX, "%d %d %d\n", LECTURES_ADC[0], LECTURES_ADC[1],LECTURES_ADC[2]); 		//Creates an string from each read value
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x40>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x40>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x40>)
 8000c1e:	889b      	ldrh	r3, [r3, #4]
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	460b      	mov	r3, r1
 8000c24:	4909      	ldr	r1, [pc, #36]	; (8000c4c <HAL_ADC_ConvCpltCallback+0x44>)
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c28:	f00d fdd2 	bl	800e7d0 <siprintf>
	  	    																						//USB_TX: Is the buffer where the read and operated data is stored
	  	    																						//%d\: Defines the type of variable, one for each saved variable
	  	    																						//"LECTURES_ADC[X]": Defines each variable, it is defined by the position in the buffer.
	  	    																						//Vbat channel works between 1.65V and 3.6V
	  	    CDC_Transmit_FS((uint8_t*)USB_TX, strlen(USB_TX));										//Sends the USB_TX buffer through USB
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c2e:	f7ff fb07 	bl	8000240 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c3a:	f00d f835 	bl	800dca8 <CDC_Transmit_FS>
	  	  }
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000378 	.word	0x20000378
 8000c4c:	0800effc 	.word	0x0800effc
 8000c50:	20000380 	.word	0x20000380

08000c54 <Maquina_estats>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Maquina_estats */
void Maquina_estats(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c5c:	f00c ff66 	bl	800db2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f00a faa5 	bl	800b1b0 <osDelay>
 8000c66:	e7fb      	b.n	8000c60 <Maquina_estats+0xc>

08000c68 <CAN_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Transmit */
  /* Infinite loop */
  for(;;)															//Infinite loop
 8000c70:	e7fe      	b.n	8000c70 <CAN_Transmit+0x8>

08000c72 <usb_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usb_data */
void usb_data(void *argument)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usb_data */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f00a fa98 	bl	800b1b0 <osDelay>
 8000c80:	e7fb      	b.n	8000c7a <usb_data+0x8>
	...

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f000 fb11 	bl	80012bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	210f      	movs	r1, #15
 8000cee:	f06f 0001 	mvn.w	r0, #1
 8000cf2:	f001 ff81 	bl	8002bf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <HAL_ADC_MspInit+0xe4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d15b      	bne.n	8000dde <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d56:	2303      	movs	r3, #3
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4821      	ldr	r0, [pc, #132]	; (8000df0 <HAL_ADC_MspInit+0xec>)
 8000d6a:	f002 fb79 	bl	8003460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_ADC_MspInit+0xf4>)
 8000d72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db2:	4810      	ldr	r0, [pc, #64]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000db4:	f001 ff4a 	bl	8002c4c <HAL_DMA_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000dbe:	f7ff ff73 	bl	8000ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2012      	movs	r0, #18
 8000dd4:	f001 ff10 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dd8:	2012      	movs	r0, #18
 8000dda:	f001 ff29 	bl	8002c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	200001c4 	.word	0x200001c4
 8000df8:	40026410 	.word	0x40026410

08000dfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a46      	ldr	r2, [pc, #280]	; (8000f34 <HAL_CAN_MspInit+0x138>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d142      	bne.n	8000ea4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a44      	ldr	r2, [pc, #272]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000e26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10b      	bne.n	8000e48 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e30:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a41      	ldr	r2, [pc, #260]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e72:	2309      	movs	r3, #9
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4830      	ldr	r0, [pc, #192]	; (8000f40 <HAL_CAN_MspInit+0x144>)
 8000e7e:	f002 faef 	bl	8003460 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	2014      	movs	r0, #20
 8000e88:	f001 feb6 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e8c:	2014      	movs	r0, #20
 8000e8e:	f001 fecf 	bl	8002c30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	2015      	movs	r0, #21
 8000e98:	f001 feae 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e9c:	2015      	movs	r0, #21
 8000e9e:	f001 fec7 	bl	8002c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ea2:	e042      	b.n	8000f2a <HAL_CAN_MspInit+0x12e>
  else if(hcan->Instance==CAN2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_CAN_MspInit+0x148>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d13d      	bne.n	8000f2a <HAL_CAN_MspInit+0x12e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000ece:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_CAN_MspInit+0x13c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d10b      	bne.n	8000ef0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_CAN_MspInit+0x140>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_CAN_MspInit+0x144>)
 8000f26:	f002 fa9b 	bl	8003460 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3730      	adds	r7, #48	; 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40006400 	.word	0x40006400
 8000f38:	2000038c 	.word	0x2000038c
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40006800 	.word	0x40006800

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	; 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2290      	movs	r2, #144	; 0x90
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00d fc51 	bl	800e810 <memset>
  if(huart->Instance==UART4)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_UART_MspInit+0xc0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d143      	bne.n	8001000 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fc18 	bl	80057bc <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f92:	f7ff fe89 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_MspInit+0xc4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_UART_MspInit+0xc8>)
 8000fec:	f002 fa38 	bl	8003460 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	2034      	movs	r0, #52	; 0x34
 8000ff6:	f001 fdff 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ffa:	2034      	movs	r0, #52	; 0x34
 8000ffc:	f001 fe18 	bl	8002c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	37b8      	adds	r7, #184	; 0xb8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40004c00 	.word	0x40004c00
 800100c:	40023800 	.word	0x40023800
 8001010:	40020c00 	.word	0x40020c00

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_InitTick+0xe0>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_InitTick+0xe0>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_InitTick+0xe0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800103c:	f107 0210 	add.w	r2, r7, #16
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fb86 	bl	8005758 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001056:	f004 fb57 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34
 800105c:	e004      	b.n	8001068 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800105e:	f004 fb53 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8001062:	4603      	mov	r3, r0
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_InitTick+0xe4>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	0c9b      	lsrs	r3, r3, #18
 8001072:	3b01      	subs	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_InitTick+0xe8>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_InitTick+0xec>)
 800107a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_InitTick+0xe8>)
 800107e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001082:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_InitTick+0xe8>)
 8001086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001088:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_InitTick+0xe8>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_InitTick+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_InitTick+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <HAL_InitTick+0xe8>)
 800109e:	f004 ffb5 	bl	800600c <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11b      	bne.n	80010e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <HAL_InitTick+0xe8>)
 80010b2:	f005 f80d 	bl	80060d0 <HAL_TIM_Base_Start_IT>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d111      	bne.n	80010e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c4:	2036      	movs	r0, #54	; 0x36
 80010c6:	f001 fdb3 	bl	8002c30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d808      	bhi.n	80010e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2036      	movs	r0, #54	; 0x36
 80010d6:	f001 fd8f 	bl	8002bf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_InitTick+0xf0>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e002      	b.n	80010e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3738      	adds	r7, #56	; 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	20000390 	.word	0x20000390
 8001100:	40001000 	.word	0x40001000
 8001104:	20000004 	.word	0x20000004

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <ADC_IRQHandler+0x10>)
 800113a:	f000 f947 	bl	80013cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000017c 	.word	0x2000017c

08001148 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <CAN1_RX0_IRQHandler+0x10>)
 800114e:	f001 fa75 	bl	800263c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000224 	.word	0x20000224

0800115c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <CAN1_RX1_IRQHandler+0x10>)
 8001162:	f001 fa6b 	bl	800263c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000224 	.word	0x20000224

08001170 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <UART4_IRQHandler+0x10>)
 8001176:	f005 fafb 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000274 	.word	0x20000274

08001184 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM6_DAC_IRQHandler+0x10>)
 800118a:	f005 f819 	bl	80061c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000390 	.word	0x20000390

08001198 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA2_Stream0_IRQHandler+0x10>)
 800119e:	f001 fef5 	bl	8002f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001c4 	.word	0x200001c4

080011ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <OTG_FS_IRQHandler+0x10>)
 80011b2:	f002 fc7a 	bl	8003aaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000620c 	.word	0x2000620c

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f00d fb26 	bl	800e840 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20080000 	.word	0x20080000
 8001220:	00000400 	.word	0x00000400
 8001224:	200003dc 	.word	0x200003dc
 8001228:	20006860 	.word	0x20006860

0800122c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopFillZerobss+0x26>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f00d fae5 	bl	800e84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff f9b3 	bl	80005ec <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001294:	0800f138 	.word	0x0800f138
  ldr r2, =_sbss
 8001298:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800129c:	2000685c 	.word	0x2000685c

080012a0 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <CAN1_SCE_IRQHandler>

080012a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f001 fc9b 	bl	8002be2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f7ff feb1 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b2:	f7ff fcff 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	200003e0 	.word	0x200003e0

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200003e0 	.word	0x200003e0

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e031      	b.n	80013be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fcce 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_ADC_Init+0x84>)
 8001388:	4013      	ands	r3, r2
 800138a:	f043 0202 	orr.w	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fb98 	bl	8001ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
 80013ae:	e001      	b.n	80013b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	ffffeefd 	.word	0xffffeefd

080013cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d049      	beq.n	8001496 <HAL_ADC_IRQHandler+0xca>
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d046      	beq.n	8001496 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d12b      	bne.n	8001486 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d127      	bne.n	8001486 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800144e:	2b00      	cmp	r3, #0
 8001450:	d119      	bne.n	8001486 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0220 	bic.w	r2, r2, #32
 8001460:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fbbe 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f06f 0212 	mvn.w	r2, #18
 8001494:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d057      	beq.n	800155c <HAL_ADC_IRQHandler+0x190>
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d054      	beq.n	800155c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d105      	bne.n	80014ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d139      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12b      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d124      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800150c:	2b00      	cmp	r3, #0
 800150e:	d11d      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d119      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001526:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fc37 	bl	8001dc0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 020c 	mvn.w	r2, #12
 800155a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x1d6>
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10d      	bne.n	80015a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f92e 	bl	80017f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d015      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x218>
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d012      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f043 0202 	orr.w	r2, r3, #2
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f06f 0220 	mvn.w	r2, #32
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f917 	bl	8001808 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0220 	mvn.w	r2, #32
 80015e2:	601a      	str	r2, [r3, #0]
  }
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_Start_DMA+0x1e>
 8001606:	2302      	movs	r3, #2
 8001608:	e0d4      	b.n	80017b4 <HAL_ADC_Start_DMA+0x1c8>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d018      	beq.n	8001652 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_ADC_Start_DMA+0x1d0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a62      	ldr	r2, [pc, #392]	; (80017c0 <HAL_ADC_Start_DMA+0x1d4>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9a      	lsrs	r2, r3, #18
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001644:	e002      	b.n	800164c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3b01      	subs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f9      	bne.n	8001646 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	f040 809c 	bne.w	800179a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_ADC_Start_DMA+0x1d8>)
 8001668:	4013      	ands	r3, r2
 800166a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001688:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169c:	d106      	bne.n	80016ac <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f023 0206 	bic.w	r2, r3, #6
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	645a      	str	r2, [r3, #68]	; 0x44
 80016aa:	e002      	b.n	80016b2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_ADC_Start_DMA+0x1dc>)
 80016c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c6:	4a41      	ldr	r2, [pc, #260]	; (80017cc <HAL_ADC_Start_DMA+0x1e0>)
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_ADC_Start_DMA+0x1e4>)
 80016d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	334c      	adds	r3, #76	; 0x4c
 8001706:	4619      	mov	r1, r3
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f001 fb4c 	bl	8002da8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_ADC_Start_DMA+0x1e8>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10f      	bne.n	800173c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d143      	bne.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	e03a      	b.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <HAL_ADC_Start_DMA+0x1ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10e      	bne.n	8001764 <HAL_ADC_Start_DMA+0x178>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001762:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_ADC_Start_DMA+0x1e8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d120      	bne.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_ADC_Start_DMA+0x1f0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d11b      	bne.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d114      	bne.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00b      	b.n	80017b2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	fffff8fe 	.word	0xfffff8fe
 80017c8:	08001cbd 	.word	0x08001cbd
 80017cc:	08001d77 	.word	0x08001d77
 80017d0:	08001d93 	.word	0x08001d93
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	40012200 	.word	0x40012200

080017e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1c>
 8001834:	2302      	movs	r3, #2
 8001836:	e136      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x28a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b09      	cmp	r3, #9
 8001846:	d93a      	bls.n	80018be <HAL_ADC_ConfigChannel+0xa2>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001850:	d035      	beq.n	80018be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68d9      	ldr	r1, [r3, #12]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	2207      	movs	r2, #7
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	400a      	ands	r2, r1
 8001876:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a8d      	ldr	r2, [pc, #564]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10a      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001896:	e035      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4403      	add	r3, r0
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	409a      	lsls	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018bc:	e022      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	2207      	movs	r2, #7
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43da      	mvns	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4403      	add	r3, r0
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b06      	cmp	r3, #6
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b05      	subs	r3, #5
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b05      	subs	r3, #5
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
 8001954:	e04c      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d824      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b23      	subs	r3, #35	; 0x23
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b23      	subs	r3, #35	; 0x23
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
 80019a6:	e023      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b41      	subs	r3, #65	; 0x41
 80019ba:	221f      	movs	r2, #31
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b41      	subs	r3, #65	; 0x41
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10a      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1f4>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10f      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x21e>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a22      	ldr	r2, [pc, #136]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d12b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x23a>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b11      	cmp	r3, #17
 8001a54:	d122      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d111      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f9      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	10000012 	.word	0x10000012
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	40012300 	.word	0x40012300
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	431bde83 	.word	0x431bde83

08001ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ad6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ada:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001adc:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4973      	ldr	r1, [pc, #460]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <ADC_Init+0x1f0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e00f      	b.n	8001bc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0202 	bic.w	r2, r2, #2
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	005a      	lsls	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	035a      	lsls	r2, r3, #13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e007      	b.n	8001c38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	051a      	lsls	r2, r3, #20
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7a:	025a      	lsls	r2, r3, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	029a      	lsls	r2, r3, #10
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	0f000001 	.word	0x0f000001

08001cbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d13c      	bne.n	8001d50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d12b      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d127      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d119      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0220 	bic.w	r2, r2, #32
 8001d22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7fe ff5d 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d4e:	e00e      	b.n	8001d6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fd53 	bl	8001808 <HAL_ADC_ErrorCallback>
}
 8001d62:	e004      	b.n	8001d6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fd2b 	bl	80017e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fd28 	bl	8001808 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0ed      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f802 	bl	8000dfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fa6c 	bl	80012e4 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e0e:	e012      	b.n	8001e36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e10:	f7ff fa68 	bl	80012e4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b0a      	cmp	r3, #10
 8001e1c:	d90b      	bls.n	8001e36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0c5      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0e5      	beq.n	8001e10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0202 	bic.w	r2, r2, #2
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff fa46 	bl	80012e4 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5a:	e012      	b.n	8001e82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e5c:	f7ff fa42 	bl	80012e4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b0a      	cmp	r3, #10
 8001e68:	d90b      	bls.n	8001e82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2205      	movs	r2, #5
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e09f      	b.n	8001fc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e5      	bne.n	8001e5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7e5b      	ldrb	r3, [r3, #25]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e9b      	ldrb	r3, [r3, #26]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0220 	bic.w	r2, r2, #32
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7edb      	ldrb	r3, [r3, #27]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0210 	bic.w	r2, r2, #16
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0210 	orr.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7f1b      	ldrb	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e007      	b.n	8001f62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7f5b      	ldrb	r3, [r3, #29]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e007      	b.n	8001f8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	ea42 0103 	orr.w	r1, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d003      	beq.n	8001ff2 <HAL_CAN_ConfigFilter+0x26>
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	f040 80c7 	bne.w	8002180 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_CAN_ConfigFilter+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d001      	beq.n	8002000 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ffe:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4a63      	ldr	r2, [pc, #396]	; (80021a0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800201e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2201      	movs	r2, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d123      	bne.n	80020ae <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002088:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3248      	adds	r2, #72	; 0x48
 800208e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a4:	6979      	ldr	r1, [r7, #20]
 80020a6:	3348      	adds	r3, #72	; 0x48
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d122      	bne.n	80020fc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	431a      	orrs	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3248      	adds	r2, #72	; 0x48
 80020dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f2:	6979      	ldr	r1, [r7, #20]
 80020f4:	3348      	adds	r3, #72	; 0x48
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002116:	e007      	b.n	8002128 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002142:	e007      	b.n	8002154 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	431a      	orrs	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002172:	f023 0201 	bic.w	r2, r3, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e006      	b.n	800218e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40003400 	.word	0x40003400
 80021a0:	40006400 	.word	0x40006400

080021a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d12e      	bne.n	8002216 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f888 	bl	80012e4 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021d6:	e012      	b.n	80021fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d8:	f7ff f884 	bl	80012e4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b0a      	cmp	r3, #10
 80021e4:	d90b      	bls.n	80021fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2205      	movs	r2, #5
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e012      	b.n	8002224 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e5      	bne.n	80021d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e006      	b.n	8002224 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002240:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d003      	beq.n	8002258 <HAL_CAN_AddTxMessage+0x2c>
 8002250:	7ffb      	ldrb	r3, [r7, #31]
 8002252:	2b02      	cmp	r3, #2
 8002254:	f040 80ad 	bne.w	80023b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10a      	bne.n	8002278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8095 	beq.w	80023a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	0e1b      	lsrs	r3, r3, #24
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002282:	2201      	movs	r2, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	6809      	ldr	r1, [r1, #0]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3318      	adds	r3, #24
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	440b      	add	r3, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e00f      	b.n	80022d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3318      	adds	r3, #24
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3318      	adds	r3, #24
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	440b      	add	r3, r1
 80022e0:	3304      	adds	r3, #4
 80022e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	7d1b      	ldrb	r3, [r3, #20]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d111      	bne.n	8002310 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3318      	adds	r3, #24
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6811      	ldr	r1, [r2, #0]
 8002300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3318      	adds	r3, #24
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	440b      	add	r3, r1
 800230c:	3304      	adds	r3, #4
 800230e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3307      	adds	r3, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	061a      	lsls	r2, r3, #24
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3306      	adds	r3, #6
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3305      	adds	r3, #5
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	4313      	orrs	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	3204      	adds	r2, #4
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4610      	mov	r0, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	ea43 0200 	orr.w	r2, r3, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	440b      	add	r3, r1
 8002342:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002346:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3303      	adds	r3, #3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	061a      	lsls	r2, r3, #24
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3302      	adds	r3, #2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3301      	adds	r3, #1
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	4313      	orrs	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	4610      	mov	r0, r2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	ea43 0200 	orr.w	r2, r3, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800237c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3318      	adds	r3, #24
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	6811      	ldr	r1, [r2, #0]
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3318      	adds	r3, #24
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	440b      	add	r3, r1
 800239c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e00e      	b.n	80023c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e006      	b.n	80023c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3724      	adds	r7, #36	; 0x24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_GetRxMessage+0x24>
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 80f3 	bne.w	80025d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10e      	bne.n	8002414 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0e7      	b.n	80025e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0d8      	b.n	80025e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	331b      	adds	r3, #27
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0204 	and.w	r2, r3, #4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	331b      	adds	r3, #27
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0d5b      	lsrs	r3, r3, #21
 8002460:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e00b      	b.n	8002482 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	331b      	adds	r3, #27
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	331b      	adds	r3, #27
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4413      	add	r3, r2
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0202 	and.w	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	331b      	adds	r3, #27
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	331b      	adds	r3, #27
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	331b      	adds	r3, #27
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0a1a      	lsrs	r2, r3, #8
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4413      	add	r3, r2
 800251a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0c1a      	lsrs	r2, r3, #16
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3302      	adds	r3, #2
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e1a      	lsrs	r2, r3, #24
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3303      	adds	r3, #3
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3304      	adds	r3, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0a1a      	lsrs	r2, r3, #8
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3305      	adds	r3, #5
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0c1a      	lsrs	r2, r3, #16
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3306      	adds	r3, #6
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e1a      	lsrs	r2, r3, #24
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3307      	adds	r3, #7
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	e007      	b.n	80025d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0220 	orr.w	r2, r2, #32
 80025d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e006      	b.n	80025e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002600:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d002      	beq.n	800260e <HAL_CAN_ActivateNotification+0x1e>
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d109      	bne.n	8002622 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6959      	ldr	r1, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e006      	b.n	8002630 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d07c      	beq.n	800277c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fa7c 	bl	8000b9c <HAL_CAN_TxMailbox0CompleteCallback>
 80026a4:	e016      	b.n	80026d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	e00c      	b.n	80026d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	e002      	b.n	80026d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f97f 	bl	80029d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f959 	bl	80029aa <HAL_CAN_TxMailbox1CompleteCallback>
 80026f8:	e016      	b.n	8002728 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	e00c      	b.n	8002728 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	e002      	b.n	8002728 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f95f 	bl	80029e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800273a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f939 	bl	80029be <HAL_CAN_TxMailbox2CompleteCallback>
 800274c:	e016      	b.n	800277c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	e00c      	b.n	800277c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e002      	b.n	800277c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f93f 	bl	80029fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f926 	bl	8002a0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe f9ec 	bl	8000bb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2208      	movs	r2, #8
 800281e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f908 	bl	8002a36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8ef 	bl	8002a22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8f2 	bl	8002a4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2208      	movs	r2, #8
 8002880:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8eb 	bl	8002a5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d07b      	beq.n	800298a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d072      	beq.n	8002982 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d043      	beq.n	8002982 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03e      	beq.n	8002982 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800290a:	2b60      	cmp	r3, #96	; 0x60
 800290c:	d02b      	beq.n	8002966 <HAL_CAN_IRQHandler+0x32a>
 800290e:	2b60      	cmp	r3, #96	; 0x60
 8002910:	d82e      	bhi.n	8002970 <HAL_CAN_IRQHandler+0x334>
 8002912:	2b50      	cmp	r3, #80	; 0x50
 8002914:	d022      	beq.n	800295c <HAL_CAN_IRQHandler+0x320>
 8002916:	2b50      	cmp	r3, #80	; 0x50
 8002918:	d82a      	bhi.n	8002970 <HAL_CAN_IRQHandler+0x334>
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d019      	beq.n	8002952 <HAL_CAN_IRQHandler+0x316>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d826      	bhi.n	8002970 <HAL_CAN_IRQHandler+0x334>
 8002922:	2b30      	cmp	r3, #48	; 0x30
 8002924:	d010      	beq.n	8002948 <HAL_CAN_IRQHandler+0x30c>
 8002926:	2b30      	cmp	r3, #48	; 0x30
 8002928:	d822      	bhi.n	8002970 <HAL_CAN_IRQHandler+0x334>
 800292a:	2b10      	cmp	r3, #16
 800292c:	d002      	beq.n	8002934 <HAL_CAN_IRQHandler+0x2f8>
 800292e:	2b20      	cmp	r3, #32
 8002930:	d005      	beq.n	800293e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002932:	e01d      	b.n	8002970 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800293c:	e019      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002946:	e014      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002950:	e00f      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800295a:	e00a      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002964:	e005      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800296e:	e000      	b.n	8002972 <HAL_CAN_IRQHandler+0x336>
            break;
 8002970:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002980:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2204      	movs	r2, #4
 8002988:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f868 	bl	8002a72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00
 8002acc:	05fa0000 	.word	0x05fa0000

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <__NVIC_EnableIRQ+0x38>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff4c 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0a:	f7ff ff61 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f7ff ffb1 	bl	8002b7c <NVIC_EncodePriority>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff80 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff54 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7fe fb44 	bl	80012e4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e099      	b.n	8002d9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c88:	e00f      	b.n	8002caa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8a:	f7fe fb2b 	bl	80012e4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d908      	bls.n	8002caa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e078      	b.n	8002d9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e8      	bne.n	8002c8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <HAL_DMA_Init+0x158>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d107      	bne.n	8002d14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0307 	bic.w	r3, r3, #7
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d117      	bne.n	8002d6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fb09 	bl	8003368 <DMA_CheckFifoParam>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2240      	movs	r2, #64	; 0x40
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e016      	b.n	8002d9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fac0 	bl	80032fc <DMA_CalcBaseAndBitshift>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	223f      	movs	r2, #63	; 0x3f
 8002d86:	409a      	lsls	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	e010803f 	.word	0xe010803f

08002da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA_Start_IT+0x26>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e048      	b.n	8002e60 <HAL_DMA_Start_IT+0xb8>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d137      	bne.n	8002e52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa52 	bl	80032a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	223f      	movs	r2, #63	; 0x3f
 8002e02:	409a      	lsls	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0216 	orr.w	r2, r2, #22
 8002e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0208 	orr.w	r2, r2, #8
 8002e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e005      	b.n	8002e5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e76:	f7fe fa35 	bl	80012e4 <HAL_GetTick>
 8002e7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d008      	beq.n	8002e9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e052      	b.n	8002f40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0216 	bic.w	r2, r2, #22
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <HAL_DMA_Abort+0x62>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0208 	bic.w	r2, r2, #8
 8002ed8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	e013      	b.n	8002f14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eec:	f7fe f9fa 	bl	80012e4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d90c      	bls.n	8002f14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2203      	movs	r2, #3
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e015      	b.n	8002f40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e4      	bne.n	8002eec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	223f      	movs	r2, #63	; 0x3f
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d004      	beq.n	8002f66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00c      	b.n	8002f80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f98:	4b8e      	ldr	r3, [pc, #568]	; (80031d4 <HAL_DMA_IRQHandler+0x248>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a8e      	ldr	r2, [pc, #568]	; (80031d8 <HAL_DMA_IRQHandler+0x24c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01a      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2201      	movs	r2, #1
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f043 0202 	orr.w	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2204      	movs	r2, #4
 8003034:	409a      	lsls	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2204      	movs	r2, #4
 8003052:	409a      	lsls	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	2210      	movs	r2, #16
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d043      	beq.n	80030fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03c      	beq.n	80030fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2210      	movs	r2, #16
 8003088:	409a      	lsls	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d024      	beq.n	80030fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
 80030ba:	e01f      	b.n	80030fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
 80030cc:	e016      	b.n	80030fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0208 	bic.w	r2, r2, #8
 80030ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2220      	movs	r2, #32
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 808f 	beq.w	800322c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8087 	beq.w	800322c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	2220      	movs	r2, #32
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b05      	cmp	r3, #5
 8003134:	d136      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0216 	bic.w	r2, r2, #22
 8003144:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003154:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <HAL_DMA_IRQHandler+0x1da>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0208 	bic.w	r2, r2, #8
 8003174:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	223f      	movs	r2, #63	; 0x3f
 800317c:	409a      	lsls	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	2b00      	cmp	r3, #0
 8003198:	d07e      	beq.n	8003298 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
        }
        return;
 80031a2:	e079      	b.n	8003298 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d031      	beq.n	800322c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
 80031d0:	e02c      	b.n	800322c <HAL_DMA_IRQHandler+0x2a0>
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000
 80031d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d023      	beq.n	800322c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e01e      	b.n	800322c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10f      	bne.n	800321c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0210 	bic.w	r2, r2, #16
 800320a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	2b00      	cmp	r3, #0
 8003232:	d032      	beq.n	800329a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d022      	beq.n	8003286 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2205      	movs	r2, #5
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3301      	adds	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	429a      	cmp	r2, r3
 8003262:	d307      	bcc.n	8003274 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f2      	bne.n	8003258 <HAL_DMA_IRQHandler+0x2cc>
 8003272:	e000      	b.n	8003276 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003274:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	e000      	b.n	800329a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003298:	bf00      	nop
    }
  }
}
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d108      	bne.n	80032e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032de:	e007      	b.n	80032f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b10      	subs	r3, #16
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <DMA_CalcBaseAndBitshift+0x60>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <DMA_CalcBaseAndBitshift+0x64>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d908      	bls.n	800333c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003332:	4013      	ands	r3, r2
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58
 800333a:	e006      	b.n	800334a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	0800f0ec 	.word	0x0800f0ec
 8003364:	fffffc00 	.word	0xfffffc00

08003368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d856      	bhi.n	8003436 <DMA_CheckFifoParam+0xce>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <DMA_CheckFifoParam+0x28>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033a1 	.word	0x080033a1
 800339c:	08003437 	.word	0x08003437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d046      	beq.n	800343a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e043      	b.n	800343a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ba:	d140      	bne.n	800343e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e03d      	b.n	800343e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d121      	bne.n	8003410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d837      	bhi.n	8003442 <DMA_CheckFifoParam+0xda>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033ef 	.word	0x080033ef
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e030      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e022      	b.n	8003446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003408:	d11f      	bne.n	800344a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340e:	e01c      	b.n	800344a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d903      	bls.n	800341e <DMA_CheckFifoParam+0xb6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800341c:	e018      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      break;
 8003422:	e015      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e00b      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003436:	bf00      	nop
 8003438:	e00a      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e008      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e006      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;   
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
    }
  } 
  
  return status; 
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e175      	b.n	800376c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003480:	2201      	movs	r2, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	429a      	cmp	r2, r3
 800349a:	f040 8164 	bne.w	8003766 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d005      	beq.n	80034b6 <HAL_GPIO_Init+0x56>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d130      	bne.n	8003518 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 0201 	and.w	r2, r3, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d017      	beq.n	8003554 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d123      	bne.n	80035a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	08da      	lsrs	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3208      	adds	r2, #8
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	220f      	movs	r2, #15
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	08da      	lsrs	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	69b9      	ldr	r1, [r7, #24]
 80035a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0203 	and.w	r2, r3, #3
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80be 	beq.w	8003766 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ea:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_GPIO_Init+0x324>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003602:	4a61      	ldr	r2, [pc, #388]	; (8003788 <HAL_GPIO_Init+0x328>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_GPIO_Init+0x32c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d037      	beq.n	800369e <HAL_GPIO_Init+0x23e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a57      	ldr	r2, [pc, #348]	; (8003790 <HAL_GPIO_Init+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_GPIO_Init+0x23a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a56      	ldr	r2, [pc, #344]	; (8003794 <HAL_GPIO_Init+0x334>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02b      	beq.n	8003696 <HAL_GPIO_Init+0x236>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a55      	ldr	r2, [pc, #340]	; (8003798 <HAL_GPIO_Init+0x338>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d025      	beq.n	8003692 <HAL_GPIO_Init+0x232>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_GPIO_Init+0x33c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01f      	beq.n	800368e <HAL_GPIO_Init+0x22e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a53      	ldr	r2, [pc, #332]	; (80037a0 <HAL_GPIO_Init+0x340>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x22a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_GPIO_Init+0x344>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x226>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a51      	ldr	r2, [pc, #324]	; (80037a8 <HAL_GPIO_Init+0x348>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x222>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a50      	ldr	r2, [pc, #320]	; (80037ac <HAL_GPIO_Init+0x34c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x21e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4f      	ldr	r2, [pc, #316]	; (80037b0 <HAL_GPIO_Init+0x350>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x21a>
 8003676:	2309      	movs	r3, #9
 8003678:	e012      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800367a:	230a      	movs	r3, #10
 800367c:	e010      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800367e:	2308      	movs	r3, #8
 8003680:	e00e      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003682:	2307      	movs	r3, #7
 8003684:	e00c      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003686:	2306      	movs	r3, #6
 8003688:	e00a      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800368a:	2305      	movs	r3, #5
 800368c:	e008      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800368e:	2304      	movs	r3, #4
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003692:	2303      	movs	r3, #3
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x240>
 800369e:	2300      	movs	r3, #0
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f002 0203 	and.w	r2, r2, #3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036b0:	4935      	ldr	r1, [pc, #212]	; (8003788 <HAL_GPIO_Init+0x328>)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e8:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_GPIO_Init+0x354>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_GPIO_Init+0x354>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003736:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_GPIO_Init+0x354>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_GPIO_Init+0x354>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3301      	adds	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f67f ae86 	bls.w	8003480 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40013800 	.word	0x40013800
 800378c:	40020000 	.word	0x40020000
 8003790:	40020400 	.word	0x40020400
 8003794:	40020800 	.word	0x40020800
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	40021400 	.word	0x40021400
 80037a4:	40021800 	.word	0x40021800
 80037a8:	40021c00 	.word	0x40021c00
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40022400 	.word	0x40022400
 80037b4:	40013c00 	.word	0x40013c00

080037b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
 80037c4:	4613      	mov	r3, r2
 80037c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037d4:	e003      	b.n	80037de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	041a      	lsls	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037fc:	887a      	ldrh	r2, [r7, #2]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	041a      	lsls	r2, r3, #16
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43d9      	mvns	r1, r3
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	400b      	ands	r3, r1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	619a      	str	r2, [r3, #24]
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800381e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003820:	b08f      	sub	sp, #60	; 0x3c
 8003822:	af0a      	add	r7, sp, #40	; 0x28
 8003824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e116      	b.n	8003a5e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f00a fb86 	bl	800df5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 f859 	bl	8007926 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	687e      	ldr	r6, [r7, #4]
 800387c:	466d      	mov	r5, sp
 800387e:	f106 0410 	add.w	r4, r6, #16
 8003882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003892:	1d33      	adds	r3, r6, #4
 8003894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	f003 ff3a 	bl	8007710 <USB_CoreInit>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0d7      	b.n	8003a5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 f847 	bl	8007948 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e04a      	b.n	8003956 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	333d      	adds	r3, #61	; 0x3d
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	333c      	adds	r3, #60	; 0x3c
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	b298      	uxth	r0, r3
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3344      	adds	r3, #68	; 0x44
 80038fc:	4602      	mov	r2, r0
 80038fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3340      	adds	r3, #64	; 0x40
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	334c      	adds	r3, #76	; 0x4c
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3354      	adds	r3, #84	; 0x54
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	3301      	adds	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d3af      	bcc.n	80038c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e044      	b.n	80039f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	3301      	adds	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3b5      	bcc.n	8003966 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	687e      	ldr	r6, [r7, #4]
 8003a02:	466d      	mov	r5, sp
 8003a04:	f106 0410 	add.w	r4, r6, #16
 8003a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a14:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a18:	1d33      	adds	r3, r6, #4
 8003a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f003 ffdf 	bl	80079e0 <USB_DevInit>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e014      	b.n	8003a5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 f97b 	bl	8004d48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 f92d 	bl	8008cb6 <USB_DevDisconnect>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_PCD_Start+0x16>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e012      	b.n	8003aa2 <HAL_PCD_Start+0x3c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 ff3b 	bl	8007904 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 f8ee 	bl	8008c74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003aaa:	b590      	push	{r4, r7, lr}
 8003aac:	b08d      	sub	sp, #52	; 0x34
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f005 f9ac 	bl	8008e1e <USB_GetMode>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 84b7 	bne.w	800443c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f005 f910 	bl	8008cf8 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 84ad 	beq.w	800443a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f005 f8fd 	bl	8008cf8 <USB_ReadInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d107      	bne.n	8003b18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f002 0202 	and.w	r2, r2, #2
 8003b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f005 f8eb 	bl	8008cf8 <USB_ReadInterrupts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d161      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0210 	bic.w	r2, r2, #16
 8003b3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	0c5b      	lsrs	r3, r3, #17
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d124      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d035      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	6a38      	ldr	r0, [r7, #32]
 8003b88:	f004 ff22 	bl	80089d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b98:	441a      	add	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003baa:	441a      	add	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e016      	b.n	8003be0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	0c5b      	lsrs	r3, r3, #17
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d110      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6a38      	ldr	r0, [r7, #32]
 8003bca:	f004 ff01 	bl	80089d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bda:	441a      	add	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0210 	orr.w	r2, r2, #16
 8003bee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 f87f 	bl	8008cf8 <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c04:	f040 80a7 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f005 f884 	bl	8008d1e <USB_ReadDevAllOutEpInterrupt>
 8003c16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c18:	e099      	b.n	8003d4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 808e 	beq.w	8003d42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f005 f8a8 	bl	8008d86 <USB_ReadDevOutEPInterrupt>
 8003c36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2301      	movs	r3, #1
 8003c52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fef0 	bl	8004a3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	2308      	movs	r3, #8
 8003c76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 ffc6 	bl	8004c0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	2310      	movs	r3, #16
 8003c9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d030      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d109      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	78db      	ldrb	r3, [r3, #3]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d108      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f00a fa67 	bl	800e1c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d02:	461a      	mov	r2, r3
 8003d04:	2302      	movs	r3, #2
 8003d06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2320      	movs	r3, #32
 8003d22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	3301      	adds	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f af62 	bne.w	8003c1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 ffcc 	bl	8008cf8 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d6a:	f040 80db 	bne.w	8003f24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 ffed 	bl	8008d52 <USB_ReadDevAllInEpInterrupt>
 8003d78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d7e:	e0cd      	b.n	8003f1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80c2 	beq.w	8003f10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f005 f813 	bl	8008dc2 <USB_ReadDevInEPInterrupt>
 8003d9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d057      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	2201      	movs	r2, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69f9      	ldr	r1, [r7, #28]
 8003dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc8:	4013      	ands	r3, r2
 8003dca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2301      	movs	r3, #1
 8003ddc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d132      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	334c      	adds	r3, #76	; 0x4c
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4403      	add	r3, r0
 8003e06:	3348      	adds	r3, #72	; 0x48
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4419      	add	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4403      	add	r3, r0
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d113      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x3a2>
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3354      	adds	r3, #84	; 0x54
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e44:	461a      	mov	r2, r3
 8003e46:	2101      	movs	r1, #1
 8003e48:	f005 f81c 	bl	8008e84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f00a f931 	bl	800e0ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2308      	movs	r3, #8
 8003e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d023      	beq.n	8003efe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb8:	6a38      	ldr	r0, [r7, #32]
 8003eba:	f003 feef 	bl	8007c9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3338      	adds	r3, #56	; 0x38
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	78db      	ldrb	r3, [r3, #3]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d108      	bne.n	8003eec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f00a f97e 	bl	800e1e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2302      	movs	r3, #2
 8003efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fd08 	bl	8004920 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	3301      	adds	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f47f af2e 	bne.w	8003d80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 fee5 	bl	8008cf8 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f38:	d122      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d108      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f60:	2100      	movs	r1, #0
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f00a faf8 	bl	800e558 <HAL_PCDEx_LPM_Callback>
 8003f68:	e002      	b.n	8003f70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f00a f91c 	bl	800e1a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 feb7 	bl	8008cf8 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	d112      	bne.n	8003fbc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f00a f8d8 	bl	800e15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 fe99 	bl	8008cf8 <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd0:	d121      	bne.n	8004016 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003fe0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d111      	bne.n	8004010 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004006:	2101      	movs	r1, #1
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f00a faa5 	bl	800e558 <HAL_PCDEx_LPM_Callback>
 800400e:	e002      	b.n	8004016 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f00a f8a3 	bl	800e15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f004 fe6c 	bl	8008cf8 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402a:	f040 80b7 	bne.w	800419c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2110      	movs	r1, #16
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fe27 	bl	8007c9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004052:	e046      	b.n	80040e2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	461a      	mov	r2, r3
 8004062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004066:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004086:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800409a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	3301      	adds	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3b3      	bcc.n	8004054 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004118:	f043 030b 	orr.w	r3, r3, #11
 800411c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412e:	f043 030b 	orr.w	r3, r3, #11
 8004132:	6453      	str	r3, [r2, #68]	; 0x44
 8004134:	e015      	b.n	8004162 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	4619      	mov	r1, r3
 8004146:	f242 032b 	movw	r3, #8235	; 0x202b
 800414a:	4313      	orrs	r3, r2
 800414c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415c:	f043 030b 	orr.w	r3, r3, #11
 8004160:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004170:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004174:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004186:	461a      	mov	r2, r3
 8004188:	f004 fe7c 	bl	8008e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800419a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f004 fda9 	bl	8008cf8 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b0:	d124      	bne.n	80041fc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 fe40 	bl	8008e3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 fde8 	bl	8007d96 <USB_GetDevSpeed>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	f001 fa8d 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 80041d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	4620      	mov	r0, r4
 80041e2:	f003 faed 	bl	80077c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f009 ff8f 	bl	800e10a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fd79 	bl	8008cf8 <USB_ReadInterrupts>
 8004206:	4603      	mov	r3, r0
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d10a      	bne.n	8004226 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f009 ff6c 	bl	800e0ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f002 0208 	and.w	r2, r2, #8
 8004224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fd64 	bl	8008cf8 <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d122      	bne.n	8004280 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004246:	2301      	movs	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	e014      	b.n	8004276 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fb27 	bl	80048be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	3301      	adds	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	429a      	cmp	r2, r3
 800427e:	d3e5      	bcc.n	800424c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f004 fd37 	bl	8008cf8 <USB_ReadInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004294:	d13b      	bne.n	800430e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e02b      	b.n	80042f4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3340      	adds	r3, #64	; 0x40
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d115      	bne.n	80042ee <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da12      	bge.n	80042ee <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	333f      	adds	r3, #63	; 0x3f
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fae8 	bl	80048be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d3ce      	bcc.n	800429c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800430c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fcf0 	bl	8008cf8 <USB_ReadInterrupts>
 8004318:	4603      	mov	r3, r0
 800431a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800431e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004322:	d155      	bne.n	80043d0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004324:	2301      	movs	r3, #1
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	e045      	b.n	80043b6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d12e      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004352:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	da2b      	bge.n	80043b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004364:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004368:	429a      	cmp	r2, r3
 800436a:	d121      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	4613      	mov	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ac:	6053      	str	r3, [r2, #4]
            break;
 80043ae:	e007      	b.n	80043c0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	3301      	adds	r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	429a      	cmp	r2, r3
 80043be:	d3b4      	bcc.n	800432a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 fc8f 	bl	8008cf8 <USB_ReadInterrupts>
 80043da:	4603      	mov	r3, r0
 80043dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d10a      	bne.n	80043fc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f009 ff10 	bl	800e20c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fc79 	bl	8008cf8 <USB_ReadInterrupts>
 8004406:	4603      	mov	r3, r0
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d115      	bne.n	800443c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f009 ff00 	bl	800e228 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	e000      	b.n	800443c <HAL_PCD_IRQHandler+0x992>
      return;
 800443a:	bf00      	nop
    }
  }
}
 800443c:	3734      	adds	r7, #52	; 0x34
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_PCD_SetAddress+0x1a>
 8004458:	2302      	movs	r3, #2
 800445a:	e013      	b.n	8004484 <HAL_PCD_SetAddress+0x42>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f004 fbd7 	bl	8008c28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	70fb      	strb	r3, [r7, #3]
 800449e:	460b      	mov	r3, r1
 80044a0:	803b      	strh	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da0f      	bge.n	80044d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	3338      	adds	r3, #56	; 0x38
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	3304      	adds	r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	705a      	strb	r2, [r3, #1]
 80044d0:	e00f      	b.n	80044f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	3304      	adds	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044fe:	883a      	ldrh	r2, [r7, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	78ba      	ldrb	r2, [r7, #2]
 8004508:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	785b      	ldrb	r3, [r3, #1]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800451c:	78bb      	ldrb	r3, [r7, #2]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d102      	bne.n	8004528 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_PCD_EP_Open+0xaa>
 8004532:	2302      	movs	r3, #2
 8004534:	e00e      	b.n	8004554 <HAL_PCD_EP_Open+0xc8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68f9      	ldr	r1, [r7, #12]
 8004544:	4618      	mov	r0, r3
 8004546:	f003 fc4b 	bl	8007de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004552:	7afb      	ldrb	r3, [r7, #11]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	da0f      	bge.n	8004590 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	3338      	adds	r3, #56	; 0x38
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	705a      	strb	r2, [r3, #1]
 800458e:	e00f      	b.n	80045b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 020f 	and.w	r2, r3, #15
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_PCD_EP_Close+0x6e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e00e      	b.n	80045e8 <HAL_PCD_EP_Close+0x8c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	4618      	mov	r0, r3
 80045da:	f003 fc89 	bl	8007ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	460b      	mov	r3, r1
 80045fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004600:	7afb      	ldrb	r3, [r7, #11]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	3304      	adds	r3, #4
 8004618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2200      	movs	r2, #0
 8004630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004632:	7afb      	ldrb	r3, [r7, #11]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	b2da      	uxtb	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800464c:	7afb      	ldrb	r3, [r7, #11]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6979      	ldr	r1, [r7, #20]
 8004664:	f003 ff70 	bl	8008548 <USB_EP0StartXfer>
 8004668:	e008      	b.n	800467c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	6979      	ldr	r1, [r7, #20]
 8004678:	f003 fd16 	bl	80080a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 020f 	and.w	r2, r3, #15
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80046a8:	681b      	ldr	r3, [r3, #0]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	460b      	mov	r3, r1
 80046c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	7afb      	ldrb	r3, [r7, #11]
 80046c8:	f003 020f 	and.w	r2, r3, #15
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	3338      	adds	r3, #56	; 0x38
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	3304      	adds	r3, #4
 80046dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2200      	movs	r2, #0
 80046ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2201      	movs	r2, #1
 80046f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046f6:	7afb      	ldrb	r3, [r7, #11]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004710:	7afb      	ldrb	r3, [r7, #11]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	f003 ff0e 	bl	8008548 <USB_EP0StartXfer>
 800472c:	e008      	b.n	8004740 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	f003 fcb4 	bl	80080a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d901      	bls.n	8004768 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e050      	b.n	800480a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da0f      	bge.n	8004790 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	3338      	adds	r3, #56	; 0x38
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	705a      	strb	r2, [r3, #1]
 800478e:	e00d      	b.n	80047ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_PCD_EP_SetStall+0x82>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e01e      	b.n	800480a <HAL_PCD_EP_SetStall+0xc0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	4618      	mov	r0, r3
 80047dc:	f004 f950 	bl	8008a80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	b2d9      	uxtb	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047fa:	461a      	mov	r2, r3
 80047fc:	f004 fb42 	bl	8008e84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	d901      	bls.n	8004830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e042      	b.n	80048b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004834:	2b00      	cmp	r3, #0
 8004836:	da0f      	bge.n	8004858 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	3338      	adds	r3, #56	; 0x38
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	3304      	adds	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	705a      	strb	r2, [r3, #1]
 8004856:	e00f      	b.n	8004878 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_PCD_EP_ClrStall+0x86>
 8004894:	2302      	movs	r3, #2
 8004896:	e00e      	b.n	80048b6 <HAL_PCD_EP_ClrStall+0xa4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 f958 	bl	8008b5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da0c      	bge.n	80048ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	3338      	adds	r3, #56	; 0x38
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e00c      	b.n	8004906 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	3304      	adds	r3, #4
 8004904:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 ff77 	bl	8008800 <USB_EPStopXfer>
 8004912:	4603      	mov	r3, r0
 8004914:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004916:	7afb      	ldrb	r3, [r7, #11]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3338      	adds	r3, #56	; 0x38
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d901      	bls.n	8004958 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e06c      	b.n	8004a32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d902      	bls.n	8004974 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3303      	adds	r3, #3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800497c:	e02b      	b.n	80049d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	429a      	cmp	r2, r3
 8004992:	d902      	bls.n	800499a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3303      	adds	r3, #3
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4603      	mov	r3, r0
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f003 ffcb 	bl	8008954 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	441a      	add	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d809      	bhi.n	8004a00 <PCD_WriteEmptyTxFifo+0xe0>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d203      	bcs.n	8004a00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1be      	bne.n	800497e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d811      	bhi.n	8004a30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	2201      	movs	r2, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	6939      	ldr	r1, [r7, #16]
 8004a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	333c      	adds	r3, #60	; 0x3c
 8004a54:	3304      	adds	r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d17b      	bne.n	8004b6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4a61      	ldr	r2, [pc, #388]	; (8004c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f240 80b9 	bls.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80b3 	beq.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa4:	6093      	str	r3, [r2, #8]
 8004aa6:	e0a7      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	6093      	str	r3, [r2, #8]
 8004ac4:	e098      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 8093 	bne.w	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a4b      	ldr	r2, [pc, #300]	; (8004c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d90f      	bls.n	8004afa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	e07e      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d114      	bne.n	8004b5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b44:	461a      	mov	r2, r3
 8004b46:	2101      	movs	r1, #1
 8004b48:	f004 f99c 	bl	8008e84 <USB_EP0_OutStart>
 8004b4c:	e006      	b.n	8004b5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f009 fa8e 	bl	800e084 <HAL_PCD_DataOutStageCallback>
 8004b68:	e046      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d124      	bne.n	8004bbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	e032      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f009 fa65 	bl	800e084 <HAL_PCD_DataOutStageCallback>
 8004bba:	e01d      	b.n	8004bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d114      	bne.n	8004bec <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004be4:	461a      	mov	r2, r3
 8004be6:	2100      	movs	r1, #0
 8004be8:	f004 f94c 	bl	8008e84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f009 fa46 	bl	800e084 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	4f54300a 	.word	0x4f54300a
 8004c08:	4f54310a 	.word	0x4f54310a

08004c0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	333c      	adds	r3, #60	; 0x3c
 8004c24:	3304      	adds	r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d90e      	bls.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f009 f9fd 	bl	800e060 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d90c      	bls.n	8004c88 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d108      	bne.n	8004c88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c80:	461a      	mov	r2, r3
 8004c82:	2101      	movs	r1, #1
 8004c84:	f004 f8fe 	bl	8008e84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	4f54300a 	.word	0x4f54300a

08004c98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb6:	883b      	ldrh	r3, [r7, #0]
 8004cb8:	0419      	lsls	r1, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc4:	e028      	b.n	8004d18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e00d      	b.n	8004cf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	3340      	adds	r3, #64	; 0x40
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3ec      	bcc.n	8004cda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d00:	883b      	ldrh	r3, [r7, #0]
 8004d02:	0418      	lsls	r0, r3, #16
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	3340      	adds	r3, #64	; 0x40
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_PCDEx_ActivateLPM+0x44>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	10000003 	.word	0x10000003

08004d90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a22      	ldr	r2, [pc, #136]	; (8004e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dbe:	f7fc fa91 	bl	80012e4 <HAL_GetTick>
 8004dc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dc4:	e009      	b.n	8004dda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dc6:	f7fc fa8d 	bl	80012e4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd4:	d901      	bls.n	8004dda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e022      	b.n	8004e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d1ee      	bne.n	8004dc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004de8:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0f      	ldr	r2, [pc, #60]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004df4:	f7fc fa76 	bl	80012e4 <HAL_GetTick>
 8004df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dfa:	e009      	b.n	8004e10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dfc:	f7fc fa72 	bl	80012e4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e0a:	d901      	bls.n	8004e10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e007      	b.n	8004e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40007000 	.word	0x40007000

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e29b      	b.n	800537e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8087 	beq.w	8004f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e54:	4b96      	ldr	r3, [pc, #600]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d00c      	beq.n	8004e7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e60:	4b93      	ldr	r3, [pc, #588]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d112      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62>
 8004e6c:	4b90      	ldr	r3, [pc, #576]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7a:	4b8d      	ldr	r3, [pc, #564]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d06c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x130>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d168      	bne.n	8004f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e275      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x7a>
 8004e9c:	4b84      	ldr	r3, [pc, #528]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a83      	ldr	r2, [pc, #524]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e02e      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x9c>
 8004eb2:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7e      	ldr	r2, [pc, #504]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b7c      	ldr	r3, [pc, #496]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7b      	ldr	r2, [pc, #492]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004ed6:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a75      	ldr	r2, [pc, #468]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b73      	ldr	r3, [pc, #460]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xd8>
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6e      	ldr	r2, [pc, #440]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6b      	ldr	r2, [pc, #428]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc f9e8 	bl	80012e4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fc f9e4 	bl	80012e4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e229      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	4b61      	ldr	r3, [pc, #388]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc f9d4 	bl	80012e4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fc f9d0 	bl	80012e4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e215      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	4b57      	ldr	r3, [pc, #348]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x110>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d069      	beq.n	8005042 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6e:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7a:	4b4d      	ldr	r3, [pc, #308]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d11c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x190>
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x17a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1e9      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	493d      	ldr	r1, [pc, #244]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	e040      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d023      	beq.n	8005010 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a38      	ldr	r2, [pc, #224]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fc f986 	bl	80012e4 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fdc:	f7fc f982 	bl	80012e4 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1c7      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b30      	ldr	r3, [pc, #192]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b2d      	ldr	r3, [pc, #180]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4929      	ldr	r1, [pc, #164]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
 800500e:	e018      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc f962 	bl	80012e4 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005024:	f7fc f95e 	bl	80012e4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e1a3      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d038      	beq.n	80050c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8005058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505a:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fc f93f 	bl	80012e4 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506a:	f7fc f93b 	bl	80012e4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e180      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x23a>
 8005088:	e01a      	b.n	80050c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508a:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <HAL_RCC_OscConfig+0x280>)
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fc f925 	bl	80012e4 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509e:	f7fc f921 	bl	80012e4 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d903      	bls.n	80050b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e166      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
 80050b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	4b92      	ldr	r3, [pc, #584]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80a4 	beq.w	8005216 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ce:	4b8c      	ldr	r3, [pc, #560]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	4b89      	ldr	r3, [pc, #548]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	4a88      	ldr	r2, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e4:	6413      	str	r3, [r2, #64]	; 0x40
 80050e6:	4b86      	ldr	r3, [pc, #536]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f6:	4b83      	ldr	r3, [pc, #524]	; (8005304 <HAL_RCC_OscConfig+0x4d4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d118      	bne.n	8005134 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005102:	4b80      	ldr	r3, [pc, #512]	; (8005304 <HAL_RCC_OscConfig+0x4d4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7f      	ldr	r2, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0x4d4>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510e:	f7fc f8e9 	bl	80012e4 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fc f8e5 	bl	80012e4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e12a      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005128:	4b76      	ldr	r3, [pc, #472]	; (8005304 <HAL_RCC_OscConfig+0x4d4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d106      	bne.n	800514a <HAL_RCC_OscConfig+0x31a>
 800513c:	4b70      	ldr	r3, [pc, #448]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a6f      	ldr	r2, [pc, #444]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	e02d      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10c      	bne.n	800516c <HAL_RCC_OscConfig+0x33c>
 8005152:	4b6b      	ldr	r3, [pc, #428]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a6a      	ldr	r2, [pc, #424]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
 800515e:	4b68      	ldr	r3, [pc, #416]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a67      	ldr	r2, [pc, #412]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
 800516a:	e01c      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d10c      	bne.n	800518e <HAL_RCC_OscConfig+0x35e>
 8005174:	4b62      	ldr	r3, [pc, #392]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a61      	ldr	r2, [pc, #388]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
 800518c:	e00b      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
 800518e:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
 800519a:	4b59      	ldr	r3, [pc, #356]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80051a0:	f023 0304 	bic.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d015      	beq.n	80051da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ae:	f7fc f899 	bl	80012e4 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f7fc f895 	bl	80012e4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0d8      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ee      	beq.n	80051b6 <HAL_RCC_OscConfig+0x386>
 80051d8:	e014      	b.n	8005204 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fc f883 	bl	80012e4 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fc f87f 	bl	80012e4 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0c2      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f8:	4b41      	ldr	r3, [pc, #260]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ee      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b3d      	ldr	r3, [pc, #244]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	4a3c      	ldr	r2, [pc, #240]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80ae 	beq.w	800537c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005220:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b08      	cmp	r3, #8
 800522a:	d06d      	beq.n	8005308 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d14b      	bne.n	80052cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005234:	4b32      	ldr	r3, [pc, #200]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800523a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800523e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fc f850 	bl	80012e4 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fc f84c 	bl	80012e4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e091      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b29      	ldr	r3, [pc, #164]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	071b      	lsls	r3, r3, #28
 8005292:	491b      	ldr	r1, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fc f81e 	bl	80012e4 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fc f81a 	bl	80012e4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e05f      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x47c>
 80052ca:	e057      	b.n	800537c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc f804 	bl	80012e4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fc f800 	bl	80012e4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e045      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b03      	ldr	r3, [pc, #12]	; (8005300 <HAL_RCC_OscConfig+0x4d0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4b0>
 80052fe:	e03d      	b.n	800537c <HAL_RCC_OscConfig+0x54c>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005308:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <HAL_RCC_OscConfig+0x558>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d030      	beq.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d129      	bne.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d122      	bne.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800533e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005340:	4293      	cmp	r3, r2
 8005342:	d119      	bne.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d10f      	bne.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d107      	bne.n	8005378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800

0800538c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0d0      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b67      	ldr	r3, [pc, #412]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	4965      	ldr	r1, [pc, #404]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d040      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d115      	bne.n	800546e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d107      	bne.n	800545e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544e:	4b41      	ldr	r3, [pc, #260]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e073      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545e:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e06b      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800546e:	4b39      	ldr	r3, [pc, #228]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 0203 	bic.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4936      	ldr	r1, [pc, #216]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005480:	f7fb ff30 	bl	80012e4 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	e00a      	b.n	800549e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005488:	f7fb ff2c 	bl	80012e4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	; 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e053      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 020c 	and.w	r2, r3, #12
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d1eb      	bne.n	8005488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d210      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 020f 	bic.w	r2, r3, #15
 80054c6:	4922      	ldr	r1, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f821 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x1c8>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x1cc>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1d0>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1d4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fb fd68 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	0800f0d4 	.word	0x0800f0d4
 800555c:	20000000 	.word	0x20000000
 8005560:	20000004 	.word	0x20000004

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b090      	sub	sp, #64	; 0x40
 800556a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	2300      	movs	r3, #0
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	2300      	movs	r3, #0
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d00d      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005588:	2b08      	cmp	r3, #8
 800558a:	f200 80a1 	bhi.w	80056d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x34>
 8005592:	2b04      	cmp	r3, #4
 8005594:	d003      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0x3a>
 8005596:	e09b      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800559a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800559c:	e09b      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800559e:	4b53      	ldr	r3, [pc, #332]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055a2:	e098      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055ae:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d028      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ba:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	099b      	lsrs	r3, r3, #6
 80055c0:	2200      	movs	r2, #0
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	627a      	str	r2, [r7, #36]	; 0x24
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055cc:	2100      	movs	r1, #0
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055d0:	fb03 f201 	mul.w	r2, r3, r1
 80055d4:	2300      	movs	r3, #0
 80055d6:	fb00 f303 	mul.w	r3, r0, r3
 80055da:	4413      	add	r3, r2
 80055dc:	4a43      	ldr	r2, [pc, #268]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055de:	fba0 1202 	umull	r1, r2, r0, r2
 80055e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e4:	460a      	mov	r2, r1
 80055e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80055e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ea:	4413      	add	r3, r2
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	2200      	movs	r2, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	61fa      	str	r2, [r7, #28]
 80055f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055fe:	f7fa fe77 	bl	80002f0 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4613      	mov	r3, r2
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	e053      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	099b      	lsrs	r3, r3, #6
 8005612:	2200      	movs	r2, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	617a      	str	r2, [r7, #20]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	4652      	mov	r2, sl
 8005624:	465b      	mov	r3, fp
 8005626:	f04f 0000 	mov.w	r0, #0
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	0159      	lsls	r1, r3, #5
 8005630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005634:	0150      	lsls	r0, r2, #5
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	ebb2 080a 	subs.w	r8, r2, sl
 800563e:	eb63 090b 	sbc.w	r9, r3, fp
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800564e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005656:	ebb2 0408 	subs.w	r4, r2, r8
 800565a:	eb63 0509 	sbc.w	r5, r3, r9
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	00eb      	lsls	r3, r5, #3
 8005668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566c:	00e2      	lsls	r2, r4, #3
 800566e:	4614      	mov	r4, r2
 8005670:	461d      	mov	r5, r3
 8005672:	eb14 030a 	adds.w	r3, r4, sl
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	eb45 030b 	adc.w	r3, r5, fp
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800568a:	4629      	mov	r1, r5
 800568c:	028b      	lsls	r3, r1, #10
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005694:	4621      	mov	r1, r4
 8005696:	028a      	lsls	r2, r1, #10
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	2200      	movs	r2, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a8:	f7fa fe22 	bl	80002f0 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4613      	mov	r3, r2
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	3301      	adds	r3, #1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80056c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3740      	adds	r7, #64	; 0x40
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	01312d00 	.word	0x01312d00

080056f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000000 	.word	0x20000000

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800570c:	f7ff fff0 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0a9b      	lsrs	r3, r3, #10
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	; (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	0800f0e4 	.word	0x0800f0e4

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005734:	f7ff ffdc 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0b5b      	lsrs	r3, r3, #13
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	0800f0e4 	.word	0x0800f0e4

08005758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	220f      	movs	r2, #15
 8005766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005768:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <HAL_RCC_GetClockConfig+0x5c>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0203 	and.w	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005774:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <HAL_RCC_GetClockConfig+0x60>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40023c00 	.word	0x40023c00

080057bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057e4:	4b69      	ldr	r3, [pc, #420]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a68      	ldr	r2, [pc, #416]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057ee:	6093      	str	r3, [r2, #8]
 80057f0:	4b66      	ldr	r3, [pc, #408]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	4964      	ldr	r1, [pc, #400]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005806:	2301      	movs	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d017      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005816:	4b5d      	ldr	r3, [pc, #372]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	4959      	ldr	r1, [pc, #356]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005834:	d101      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005852:	4b4e      	ldr	r3, [pc, #312]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	494a      	ldr	r1, [pc, #296]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005870:	d101      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 808b 	beq.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b3a      	ldr	r3, [pc, #232]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a39      	ldr	r2, [pc, #228]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
 80058ac:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a34      	ldr	r2, [pc, #208]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c4:	f7fb fd0e 	bl	80012e4 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058cc:	f7fb fd0a 	bl	80012e4 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b64      	cmp	r3, #100	; 0x64
 80058d8:	d901      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e38f      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058de:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ea:	4b28      	ldr	r3, [pc, #160]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d035      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	d02e      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a1a      	ldr	r2, [pc, #104]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005930:	4b16      	ldr	r3, [pc, #88]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d114      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fb fcd2 	bl	80012e4 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005942:	e00a      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fb fcce 	bl	80012e4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e351      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595a:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ee      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005972:	d111      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005982:	400b      	ands	r3, r1
 8005984:	4901      	ldr	r1, [pc, #4]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
 800598a:	e00b      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800598c:	40023800 	.word	0x40023800
 8005990:	40007000 	.word	0x40007000
 8005994:	0ffffcff 	.word	0x0ffffcff
 8005998:	4bac      	ldr	r3, [pc, #688]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4aab      	ldr	r2, [pc, #684]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800599e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059a2:	6093      	str	r3, [r2, #8]
 80059a4:	4ba9      	ldr	r3, [pc, #676]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b0:	49a6      	ldr	r1, [pc, #664]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059c2:	4ba2      	ldr	r3, [pc, #648]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c8:	4aa0      	ldr	r2, [pc, #640]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059d2:	4b9e      	ldr	r3, [pc, #632]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	499b      	ldr	r1, [pc, #620]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059f0:	4b96      	ldr	r3, [pc, #600]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fe:	4993      	ldr	r1, [pc, #588]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a12:	4b8e      	ldr	r3, [pc, #568]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	498a      	ldr	r1, [pc, #552]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a34:	4b85      	ldr	r3, [pc, #532]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a42:	4982      	ldr	r1, [pc, #520]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a56:	4b7d      	ldr	r3, [pc, #500]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4979      	ldr	r1, [pc, #484]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a78:	4b74      	ldr	r3, [pc, #464]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	f023 0203 	bic.w	r2, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	4971      	ldr	r1, [pc, #452]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a9a:	4b6c      	ldr	r3, [pc, #432]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	f023 020c 	bic.w	r2, r3, #12
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	4968      	ldr	r1, [pc, #416]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005abc:	4b63      	ldr	r3, [pc, #396]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aca:	4960      	ldr	r1, [pc, #384]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ade:	4b5b      	ldr	r3, [pc, #364]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aec:	4957      	ldr	r1, [pc, #348]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b00:	4b52      	ldr	r3, [pc, #328]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	494f      	ldr	r1, [pc, #316]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b22:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	4946      	ldr	r1, [pc, #280]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	493e      	ldr	r1, [pc, #248]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	4935      	ldr	r1, [pc, #212]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b88:	4b30      	ldr	r3, [pc, #192]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b96:	492d      	ldr	r1, [pc, #180]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d011      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005baa:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bb8:	4924      	ldr	r1, [pc, #144]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc8:	d101      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf8:	4914      	ldr	r1, [pc, #80]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c1c:	490b      	ldr	r1, [pc, #44]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00f      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c40:	4902      	ldr	r1, [pc, #8]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c48:	e002      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c5c:	4b8a      	ldr	r3, [pc, #552]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	4986      	ldr	r1, [pc, #536]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c80:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c90:	497d      	ldr	r1, [pc, #500]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d006      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80d6 	beq.w	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cac:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a75      	ldr	r2, [pc, #468]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fb fb14 	bl	80012e4 <HAL_GetTick>
 8005cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cc0:	f7fb fb10 	bl	80012e4 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	; 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e195      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd2:	4b6d      	ldr	r3, [pc, #436]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d021      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11d      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d00:	4b61      	ldr	r3, [pc, #388]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	019a      	lsls	r2, r3, #6
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	071b      	lsls	r3, r3, #28
 8005d26:	4958      	ldr	r1, [pc, #352]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02e      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d58:	d129      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d5a:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d68:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d6e:	0f1b      	lsrs	r3, r3, #28
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	019a      	lsls	r2, r3, #6
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	493e      	ldr	r1, [pc, #248]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d96:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d9c:	f023 021f 	bic.w	r2, r3, #31
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	3b01      	subs	r3, #1
 8005da6:	4938      	ldr	r1, [pc, #224]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01d      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dba:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	0e1b      	lsrs	r3, r3, #24
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dce:	0f1b      	lsrs	r3, r3, #28
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	019a      	lsls	r2, r3, #6
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	431a      	orrs	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	071b      	lsls	r3, r3, #28
 8005dee:	4926      	ldr	r1, [pc, #152]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	019a      	lsls	r2, r3, #6
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	491a      	ldr	r1, [pc, #104]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e32:	f7fb fa57 	bl	80012e4 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e3a:	f7fb fa53 	bl	80012e4 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b64      	cmp	r3, #100	; 0x64
 8005e46:	d901      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e0d8      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	f040 80ce 	bne.w	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6c:	f7fb fa3a 	bl	80012e4 <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e72:	e00b      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e74:	f7fb fa36 	bl	80012e4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d904      	bls.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0bb      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e8c:	4b5e      	ldr	r3, [pc, #376]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e98:	d0ec      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02e      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d12a      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ec2:	4b51      	ldr	r3, [pc, #324]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ed0:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	0f1b      	lsrs	r3, r3, #28
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	019a      	lsls	r2, r3, #6
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	071b      	lsls	r3, r3, #28
 8005ef6:	4944      	ldr	r1, [pc, #272]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	493d      	ldr	r1, [pc, #244]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d022      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2c:	d11d      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	0e1b      	lsrs	r3, r3, #24
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f3c:	4b32      	ldr	r3, [pc, #200]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	0f1b      	lsrs	r3, r3, #28
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	019a      	lsls	r2, r3, #6
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	431a      	orrs	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	071b      	lsls	r3, r3, #28
 8005f62:	4929      	ldr	r1, [pc, #164]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d028      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	0e1b      	lsrs	r3, r3, #24
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f84:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	019a      	lsls	r2, r3, #6
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	071b      	lsls	r3, r3, #28
 8005faa:	4917      	ldr	r1, [pc, #92]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4911      	ldr	r1, [pc, #68]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd4:	f7fb f986 	bl	80012e4 <HAL_GetTick>
 8005fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fdc:	f7fb f982 	bl	80012e4 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e007      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fee:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ffa:	d1ef      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800

0800600c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e049      	b.n	80060b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f841 	bl	80060ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f000 fa00 	bl	8006450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e054      	b.n	8006192 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d022      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d01d      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a22      	ldr	r2, [pc, #136]	; (80061a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <HAL_TIM_Base_Start_IT+0xdc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x80>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d115      	bne.n	800617c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	4b19      	ldr	r3, [pc, #100]	; (80061bc <HAL_TIM_Base_Start_IT+0xec>)
 8006158:	4013      	ands	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b06      	cmp	r3, #6
 8006160:	d015      	beq.n	800618e <HAL_TIM_Base_Start_IT+0xbe>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d011      	beq.n	800618e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	e008      	b.n	800618e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e000      	b.n	8006190 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40010400 	.word	0x40010400
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40001800 	.word	0x40001800
 80061bc:	00010007 	.word	0x00010007

080061c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d122      	bne.n	800621c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d11b      	bne.n	800621c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0202 	mvn.w	r2, #2
 80061ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f905 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8f7 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f908 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d122      	bne.n	8006270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d11b      	bne.n	8006270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0204 	mvn.w	r2, #4
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f8db 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 800625c:	e005      	b.n	800626a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8cd 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f8de 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b08      	cmp	r3, #8
 800627c:	d122      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b08      	cmp	r3, #8
 800628a:	d11b      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0208 	mvn.w	r2, #8
 8006294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2204      	movs	r2, #4
 800629a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8b1 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8a3 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8b4 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d122      	bne.n	8006318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d11b      	bne.n	8006318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0210 	mvn.w	r2, #16
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2208      	movs	r2, #8
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f887 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f879 	bl	80063fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f88a 	bl	8006426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0201 	mvn.w	r2, #1
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fa fca0 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	2b80      	cmp	r3, #128	; 0x80
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f91a 	bl	80065a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637e:	d10e      	bne.n	800639e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d107      	bne.n	800639e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f90d 	bl	80065b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f838 	bl	800643a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d10e      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d107      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0220 	mvn.w	r2, #32
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f8cd 	bl	8006590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a40      	ldr	r2, [pc, #256]	; (8006564 <TIM_Base_SetConfig+0x114>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d00f      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a3d      	ldr	r2, [pc, #244]	; (8006568 <TIM_Base_SetConfig+0x118>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00b      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a3c      	ldr	r2, [pc, #240]	; (800656c <TIM_Base_SetConfig+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a3b      	ldr	r2, [pc, #236]	; (8006570 <TIM_Base_SetConfig+0x120>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a3a      	ldr	r2, [pc, #232]	; (8006574 <TIM_Base_SetConfig+0x124>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d108      	bne.n	80064a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2f      	ldr	r2, [pc, #188]	; (8006564 <TIM_Base_SetConfig+0x114>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d027      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <TIM_Base_SetConfig+0x118>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d023      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2b      	ldr	r2, [pc, #172]	; (800656c <TIM_Base_SetConfig+0x11c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01f      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <TIM_Base_SetConfig+0x120>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a29      	ldr	r2, [pc, #164]	; (8006574 <TIM_Base_SetConfig+0x124>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d017      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a28      	ldr	r2, [pc, #160]	; (8006578 <TIM_Base_SetConfig+0x128>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a27      	ldr	r2, [pc, #156]	; (800657c <TIM_Base_SetConfig+0x12c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <TIM_Base_SetConfig+0x130>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a25      	ldr	r2, [pc, #148]	; (8006584 <TIM_Base_SetConfig+0x134>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a24      	ldr	r2, [pc, #144]	; (8006588 <TIM_Base_SetConfig+0x138>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a23      	ldr	r2, [pc, #140]	; (800658c <TIM_Base_SetConfig+0x13c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d108      	bne.n	8006514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <TIM_Base_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_Base_SetConfig+0xf8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a0c      	ldr	r2, [pc, #48]	; (8006574 <TIM_Base_SetConfig+0x124>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d103      	bne.n	8006550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	615a      	str	r2, [r3, #20]
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800
 8006584:	40001800 	.word	0x40001800
 8006588:	40001c00 	.word	0x40001c00
 800658c:	40002000 	.word	0x40002000

08006590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e040      	b.n	8006660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fa fcaa 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0201 	bic.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fbc2 	bl	8006d94 <UART_SetConfig>
 8006610:	4603      	mov	r3, r0
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e022      	b.n	8006660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fe1a 	bl	800725c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fea1 	bl	80073a0 <UART_CheckIdleState>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667c:	2b20      	cmp	r3, #32
 800667e:	d171      	bne.n	8006764 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Transmit+0x24>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e06a      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2221      	movs	r2, #33	; 0x21
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669e:	f7fa fe21 	bl	80012e4 <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066bc:	d108      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e003      	b.n	80066d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d8:	e02c      	b.n	8006734 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fea8 	bl	800743a <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e038      	b.n	8006766 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1cc      	bne.n	80066da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2140      	movs	r1, #64	; 0x40
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fe75 	bl	800743a <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e005      	b.n	8006766 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b0ba      	sub	sp, #232	; 0xe8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800679a:	f640 030f 	movw	r3, #2063	; 0x80f
 800679e:	4013      	ands	r3, r2
 80067a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d115      	bne.n	80067d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 82ac 	beq.w	8006d26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
      }
      return;
 80067d6:	e2a6      	b.n	8006d26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8117 	beq.w	8006a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067f2:	4b85      	ldr	r3, [pc, #532]	; (8006a08 <HAL_UART_IRQHandler+0x298>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 810a 	beq.w	8006a10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d011      	beq.n	800682c <HAL_UART_IRQHandler+0xbc>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d011      	beq.n	800685c <HAL_UART_IRQHandler+0xec>
 8006838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2202      	movs	r2, #2
 800684a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006852:	f043 0204 	orr.w	r2, r3, #4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <HAL_UART_IRQHandler+0x11c>
 8006868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2204      	movs	r2, #4
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068be:	f043 0208 	orr.w	r2, r3, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <HAL_UART_IRQHandler+0x18a>
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8212 	beq.w	8006d2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04f      	beq.n	80069f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fe37 	bl	80075c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d141      	bne.n	80069ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800697c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800699e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1d9      	bne.n	8006966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d013      	beq.n	80069e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <HAL_UART_IRQHandler+0x29c>)
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc fabe 	bl	8002f48 <HAL_DMA_Abort_IT>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d017      	beq.n	8006a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e00f      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9b6 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00b      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9b2 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e007      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f9ae 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006a00:	e193      	b.n	8006d2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a02:	bf00      	nop
    return;
 8006a04:	e191      	b.n	8006d2a <HAL_UART_IRQHandler+0x5ba>
 8006a06:	bf00      	nop
 8006a08:	04000120 	.word	0x04000120
 8006a0c:	0800768f 	.word	0x0800768f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	f040 814c 	bne.w	8006cb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8145 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 813e 	beq.w	8006cb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	f040 80b6 	bne.w	8006bba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8165 	beq.w	8006d2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f080 815d 	bcs.w	8006d2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	f000 8086 	beq.w	8006b98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1da      	bne.n	8006a8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e1      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3308      	adds	r3, #8
 8006b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e3      	bne.n	8006b12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	f023 0310 	bic.w	r3, r3, #16
 8006b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e4      	bne.n	8006b58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fc f968 	bl	8002e68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8d8 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bb8:	e0b9      	b.n	8006d2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80ab 	beq.w	8006d32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80a6 	beq.w	8006d32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c08:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e4      	bne.n	8006be6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c40:	633a      	str	r2, [r7, #48]	; 0x30
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e3      	bne.n	8006c1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	69b9      	ldr	r1, [r7, #24]
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	617b      	str	r3, [r7, #20]
   return(result);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e4      	bne.n	8006c68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f85c 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cb0:	e03f      	b.n	8006d32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <HAL_UART_IRQHandler+0x56c>
 8006cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f853 	bl	8006d80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cda:	e02d      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01c      	beq.n	8006d36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
    }
    return;
 8006d04:	e017      	b.n	8006d36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d012      	beq.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fccb 	bl	80076ba <UART_EndTransmit_IT>
    return;
 8006d24:	e008      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d26:	bf00      	nop
 8006d28:	e006      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d2a:	bf00      	nop
 8006d2c:	e004      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d36:	bf00      	nop
  }

}
 8006d38:	37e8      	adds	r7, #232	; 0xe8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4ba6      	ldr	r3, [pc, #664]	; (8007058 <UART_SetConfig+0x2c4>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a94      	ldr	r2, [pc, #592]	; (800705c <UART_SetConfig+0x2c8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d120      	bne.n	8006e52 <UART_SetConfig+0xbe>
 8006e10:	4b93      	ldr	r3, [pc, #588]	; (8007060 <UART_SetConfig+0x2cc>)
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d816      	bhi.n	8006e4c <UART_SetConfig+0xb8>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x90>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e41 	.word	0x08006e41
 8006e2c:	08006e3b 	.word	0x08006e3b
 8006e30:	08006e47 	.word	0x08006e47
 8006e34:	2301      	movs	r3, #1
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e150      	b.n	80070dc <UART_SetConfig+0x348>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e14d      	b.n	80070dc <UART_SetConfig+0x348>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e14a      	b.n	80070dc <UART_SetConfig+0x348>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e147      	b.n	80070dc <UART_SetConfig+0x348>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e144      	b.n	80070dc <UART_SetConfig+0x348>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a83      	ldr	r2, [pc, #524]	; (8007064 <UART_SetConfig+0x2d0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d132      	bne.n	8006ec2 <UART_SetConfig+0x12e>
 8006e5c:	4b80      	ldr	r3, [pc, #512]	; (8007060 <UART_SetConfig+0x2cc>)
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d828      	bhi.n	8006ebc <UART_SetConfig+0x128>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0xdc>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ebd 	.word	0x08006ebd
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006ebd 	.word	0x08006ebd
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006eab 	.word	0x08006eab
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ebd 	.word	0x08006ebd
 8006ea0:	08006eb7 	.word	0x08006eb7
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e118      	b.n	80070dc <UART_SetConfig+0x348>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e115      	b.n	80070dc <UART_SetConfig+0x348>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e112      	b.n	80070dc <UART_SetConfig+0x348>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e10f      	b.n	80070dc <UART_SetConfig+0x348>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e10c      	b.n	80070dc <UART_SetConfig+0x348>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a68      	ldr	r2, [pc, #416]	; (8007068 <UART_SetConfig+0x2d4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d120      	bne.n	8006f0e <UART_SetConfig+0x17a>
 8006ecc:	4b64      	ldr	r3, [pc, #400]	; (8007060 <UART_SetConfig+0x2cc>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	d013      	beq.n	8006f02 <UART_SetConfig+0x16e>
 8006eda:	2b30      	cmp	r3, #48	; 0x30
 8006edc:	d814      	bhi.n	8006f08 <UART_SetConfig+0x174>
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d009      	beq.n	8006ef6 <UART_SetConfig+0x162>
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d810      	bhi.n	8006f08 <UART_SetConfig+0x174>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <UART_SetConfig+0x15c>
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d006      	beq.n	8006efc <UART_SetConfig+0x168>
 8006eee:	e00b      	b.n	8006f08 <UART_SetConfig+0x174>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e0f2      	b.n	80070dc <UART_SetConfig+0x348>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e0ef      	b.n	80070dc <UART_SetConfig+0x348>
 8006efc:	2304      	movs	r3, #4
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e0ec      	b.n	80070dc <UART_SetConfig+0x348>
 8006f02:	2308      	movs	r3, #8
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e0e9      	b.n	80070dc <UART_SetConfig+0x348>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e0e6      	b.n	80070dc <UART_SetConfig+0x348>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a56      	ldr	r2, [pc, #344]	; (800706c <UART_SetConfig+0x2d8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d120      	bne.n	8006f5a <UART_SetConfig+0x1c6>
 8006f18:	4b51      	ldr	r3, [pc, #324]	; (8007060 <UART_SetConfig+0x2cc>)
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f22:	2bc0      	cmp	r3, #192	; 0xc0
 8006f24:	d013      	beq.n	8006f4e <UART_SetConfig+0x1ba>
 8006f26:	2bc0      	cmp	r3, #192	; 0xc0
 8006f28:	d814      	bhi.n	8006f54 <UART_SetConfig+0x1c0>
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d009      	beq.n	8006f42 <UART_SetConfig+0x1ae>
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d810      	bhi.n	8006f54 <UART_SetConfig+0x1c0>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <UART_SetConfig+0x1a8>
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d006      	beq.n	8006f48 <UART_SetConfig+0x1b4>
 8006f3a:	e00b      	b.n	8006f54 <UART_SetConfig+0x1c0>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e0cc      	b.n	80070dc <UART_SetConfig+0x348>
 8006f42:	2302      	movs	r3, #2
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e0c9      	b.n	80070dc <UART_SetConfig+0x348>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e0c6      	b.n	80070dc <UART_SetConfig+0x348>
 8006f4e:	2308      	movs	r3, #8
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e0c3      	b.n	80070dc <UART_SetConfig+0x348>
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e0c0      	b.n	80070dc <UART_SetConfig+0x348>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a44      	ldr	r2, [pc, #272]	; (8007070 <UART_SetConfig+0x2dc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0x21c>
 8006f64:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <UART_SetConfig+0x2cc>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f72:	d017      	beq.n	8006fa4 <UART_SetConfig+0x210>
 8006f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f78:	d817      	bhi.n	8006faa <UART_SetConfig+0x216>
 8006f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7e:	d00b      	beq.n	8006f98 <UART_SetConfig+0x204>
 8006f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f84:	d811      	bhi.n	8006faa <UART_SetConfig+0x216>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <UART_SetConfig+0x1fe>
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8e:	d006      	beq.n	8006f9e <UART_SetConfig+0x20a>
 8006f90:	e00b      	b.n	8006faa <UART_SetConfig+0x216>
 8006f92:	2300      	movs	r3, #0
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e0a1      	b.n	80070dc <UART_SetConfig+0x348>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e09e      	b.n	80070dc <UART_SetConfig+0x348>
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e09b      	b.n	80070dc <UART_SetConfig+0x348>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e098      	b.n	80070dc <UART_SetConfig+0x348>
 8006faa:	2310      	movs	r3, #16
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e095      	b.n	80070dc <UART_SetConfig+0x348>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <UART_SetConfig+0x2e0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d125      	bne.n	8007006 <UART_SetConfig+0x272>
 8006fba:	4b29      	ldr	r3, [pc, #164]	; (8007060 <UART_SetConfig+0x2cc>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fc8:	d017      	beq.n	8006ffa <UART_SetConfig+0x266>
 8006fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fce:	d817      	bhi.n	8007000 <UART_SetConfig+0x26c>
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd4:	d00b      	beq.n	8006fee <UART_SetConfig+0x25a>
 8006fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fda:	d811      	bhi.n	8007000 <UART_SetConfig+0x26c>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <UART_SetConfig+0x254>
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d006      	beq.n	8006ff4 <UART_SetConfig+0x260>
 8006fe6:	e00b      	b.n	8007000 <UART_SetConfig+0x26c>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e076      	b.n	80070dc <UART_SetConfig+0x348>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e073      	b.n	80070dc <UART_SetConfig+0x348>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e070      	b.n	80070dc <UART_SetConfig+0x348>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e06d      	b.n	80070dc <UART_SetConfig+0x348>
 8007000:	2310      	movs	r3, #16
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e06a      	b.n	80070dc <UART_SetConfig+0x348>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <UART_SetConfig+0x2e4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d138      	bne.n	8007082 <UART_SetConfig+0x2ee>
 8007010:	4b13      	ldr	r3, [pc, #76]	; (8007060 <UART_SetConfig+0x2cc>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007016:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800701a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800701e:	d017      	beq.n	8007050 <UART_SetConfig+0x2bc>
 8007020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007024:	d82a      	bhi.n	800707c <UART_SetConfig+0x2e8>
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702a:	d00b      	beq.n	8007044 <UART_SetConfig+0x2b0>
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007030:	d824      	bhi.n	800707c <UART_SetConfig+0x2e8>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <UART_SetConfig+0x2aa>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d006      	beq.n	800704a <UART_SetConfig+0x2b6>
 800703c:	e01e      	b.n	800707c <UART_SetConfig+0x2e8>
 800703e:	2300      	movs	r3, #0
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e04b      	b.n	80070dc <UART_SetConfig+0x348>
 8007044:	2302      	movs	r3, #2
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e048      	b.n	80070dc <UART_SetConfig+0x348>
 800704a:	2304      	movs	r3, #4
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e045      	b.n	80070dc <UART_SetConfig+0x348>
 8007050:	2308      	movs	r3, #8
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e042      	b.n	80070dc <UART_SetConfig+0x348>
 8007056:	bf00      	nop
 8007058:	efff69f3 	.word	0xefff69f3
 800705c:	40011000 	.word	0x40011000
 8007060:	40023800 	.word	0x40023800
 8007064:	40004400 	.word	0x40004400
 8007068:	40004800 	.word	0x40004800
 800706c:	40004c00 	.word	0x40004c00
 8007070:	40005000 	.word	0x40005000
 8007074:	40011400 	.word	0x40011400
 8007078:	40007800 	.word	0x40007800
 800707c:	2310      	movs	r3, #16
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e02c      	b.n	80070dc <UART_SetConfig+0x348>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a72      	ldr	r2, [pc, #456]	; (8007250 <UART_SetConfig+0x4bc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d125      	bne.n	80070d8 <UART_SetConfig+0x344>
 800708c:	4b71      	ldr	r3, [pc, #452]	; (8007254 <UART_SetConfig+0x4c0>)
 800708e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007096:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800709a:	d017      	beq.n	80070cc <UART_SetConfig+0x338>
 800709c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070a0:	d817      	bhi.n	80070d2 <UART_SetConfig+0x33e>
 80070a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a6:	d00b      	beq.n	80070c0 <UART_SetConfig+0x32c>
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ac:	d811      	bhi.n	80070d2 <UART_SetConfig+0x33e>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <UART_SetConfig+0x326>
 80070b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b6:	d006      	beq.n	80070c6 <UART_SetConfig+0x332>
 80070b8:	e00b      	b.n	80070d2 <UART_SetConfig+0x33e>
 80070ba:	2300      	movs	r3, #0
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e00d      	b.n	80070dc <UART_SetConfig+0x348>
 80070c0:	2302      	movs	r3, #2
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e00a      	b.n	80070dc <UART_SetConfig+0x348>
 80070c6:	2304      	movs	r3, #4
 80070c8:	77fb      	strb	r3, [r7, #31]
 80070ca:	e007      	b.n	80070dc <UART_SetConfig+0x348>
 80070cc:	2308      	movs	r3, #8
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e004      	b.n	80070dc <UART_SetConfig+0x348>
 80070d2:	2310      	movs	r3, #16
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e001      	b.n	80070dc <UART_SetConfig+0x348>
 80070d8:	2310      	movs	r3, #16
 80070da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e4:	d15b      	bne.n	800719e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80070e6:	7ffb      	ldrb	r3, [r7, #31]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d828      	bhi.n	800713e <UART_SetConfig+0x3aa>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x360>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007119 	.word	0x08007119
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007129 	.word	0x08007129
 8007100:	0800713f 	.word	0x0800713f
 8007104:	0800712f 	.word	0x0800712f
 8007108:	0800713f 	.word	0x0800713f
 800710c:	0800713f 	.word	0x0800713f
 8007110:	0800713f 	.word	0x0800713f
 8007114:	08007137 	.word	0x08007137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007118:	f7fe faf6 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 800711c:	61b8      	str	r0, [r7, #24]
        break;
 800711e:	e013      	b.n	8007148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007120:	f7fe fb06 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007124:	61b8      	str	r0, [r7, #24]
        break;
 8007126:	e00f      	b.n	8007148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007128:	4b4b      	ldr	r3, [pc, #300]	; (8007258 <UART_SetConfig+0x4c4>)
 800712a:	61bb      	str	r3, [r7, #24]
        break;
 800712c:	e00c      	b.n	8007148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800712e:	f7fe fa19 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8007132:	61b8      	str	r0, [r7, #24]
        break;
 8007134:	e008      	b.n	8007148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713a:	61bb      	str	r3, [r7, #24]
        break;
 800713c:	e004      	b.n	8007148 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	77bb      	strb	r3, [r7, #30]
        break;
 8007146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d074      	beq.n	8007238 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	005a      	lsls	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d916      	bls.n	8007198 <UART_SetConfig+0x404>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007170:	d212      	bcs.n	8007198 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f023 030f 	bic.w	r3, r3, #15
 800717a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	b29a      	uxth	r2, r3
 8007188:	89fb      	ldrh	r3, [r7, #14]
 800718a:	4313      	orrs	r3, r2
 800718c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	89fa      	ldrh	r2, [r7, #14]
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	e04f      	b.n	8007238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	77bb      	strb	r3, [r7, #30]
 800719c:	e04c      	b.n	8007238 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800719e:	7ffb      	ldrb	r3, [r7, #31]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d828      	bhi.n	80071f6 <UART_SetConfig+0x462>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x418>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071e1 	.word	0x080071e1
 80071b8:	080071f7 	.word	0x080071f7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071f7 	.word	0x080071f7
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	080071f7 	.word	0x080071f7
 80071cc:	080071ef 	.word	0x080071ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d0:	f7fe fa9a 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 80071d4:	61b8      	str	r0, [r7, #24]
        break;
 80071d6:	e013      	b.n	8007200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fe faaa 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 80071dc:	61b8      	str	r0, [r7, #24]
        break;
 80071de:	e00f      	b.n	8007200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <UART_SetConfig+0x4c4>)
 80071e2:	61bb      	str	r3, [r7, #24]
        break;
 80071e4:	e00c      	b.n	8007200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e6:	f7fe f9bd 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 80071ea:	61b8      	str	r0, [r7, #24]
        break;
 80071ec:	e008      	b.n	8007200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	61bb      	str	r3, [r7, #24]
        break;
 80071f4:	e004      	b.n	8007200 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77bb      	strb	r3, [r7, #30]
        break;
 80071fe:	bf00      	nop
    }

    if (pclk != 0U)
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d018      	beq.n	8007238 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	085a      	lsrs	r2, r3, #1
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	441a      	add	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d909      	bls.n	8007234 <UART_SetConfig+0x4a0>
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007226:	d205      	bcs.n	8007234 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	b29a      	uxth	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	e001      	b.n	8007238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007244:	7fbb      	ldrb	r3, [r7, #30]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40007c00 	.word	0x40007c00
 8007254:	40023800 	.word	0x40023800
 8007258:	00f42400 	.word	0x00f42400

0800725c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01a      	beq.n	8007372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d10a      	bne.n	8007372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b0:	f7f9 ff98 	bl	80012e4 <HAL_GetTick>
 80073b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d10e      	bne.n	80073e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f831 	bl	800743a <UART_WaitOnFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e027      	b.n	8007432 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d10e      	bne.n	800740e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f81b 	bl	800743a <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e011      	b.n	8007432 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b09c      	sub	sp, #112	; 0x70
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744a:	e0a7      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	f000 80a3 	beq.w	800759c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007456:	f7f9 ff45 	bl	80012e4 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007462:	429a      	cmp	r2, r3
 8007464:	d302      	bcc.n	800746c <UART_WaitOnFlagUntilTimeout+0x32>
 8007466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007468:	2b00      	cmp	r3, #0
 800746a:	d13f      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800747a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007480:	667b      	str	r3, [r7, #100]	; 0x64
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800748c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	663b      	str	r3, [r7, #96]	; 0x60
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074be:	64ba      	str	r2, [r7, #72]	; 0x48
 80074c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e068      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d050      	beq.n	800759c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007508:	d148      	bne.n	800759c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007512:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007528:	66fb      	str	r3, [r7, #108]	; 0x6c
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
 8007534:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e6      	bne.n	8007514 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	613b      	str	r3, [r7, #16]
   return(result);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	66bb      	str	r3, [r7, #104]	; 0x68
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007566:	623a      	str	r2, [r7, #32]
 8007568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	69f9      	ldr	r1, [r7, #28]
 800756c:	6a3a      	ldr	r2, [r7, #32]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	61bb      	str	r3, [r7, #24]
   return(result);
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e010      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f43f af48 	beq.w	800744c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3770      	adds	r7, #112	; 0x70
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b095      	sub	sp, #84	; 0x54
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ec:	643b      	str	r3, [r7, #64]	; 0x40
 80075ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e6      	bne.n	80075ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007638:	2b01      	cmp	r3, #1
 800763a:	d118      	bne.n	800766e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	60bb      	str	r3, [r7, #8]
   return(result);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f023 0310 	bic.w	r3, r3, #16
 8007650:	647b      	str	r3, [r7, #68]	; 0x44
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6979      	ldr	r1, [r7, #20]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	613b      	str	r3, [r7, #16]
   return(result);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e6      	bne.n	800763c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007682:	bf00      	nop
 8007684:	3754      	adds	r7, #84	; 0x54
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff fb51 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b088      	sub	sp, #32
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6979      	ldr	r1, [r7, #20]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	613b      	str	r3, [r7, #16]
   return(result);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fb1d 	bl	8006d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007710:	b084      	sub	sp, #16
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	f107 001c 	add.w	r0, r7, #28
 800771e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b01      	cmp	r3, #1
 8007726:	d120      	bne.n	800776a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <USB_CoreInit+0xac>)
 800773a:	4013      	ands	r3, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800774c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d105      	bne.n	800775e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fbee 	bl	8008f40 <USB_CoreReset>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
 8007768:	e010      	b.n	800778c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fbe2 	bl	8008f40 <USB_CoreReset>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	2b01      	cmp	r3, #1
 8007790:	d10b      	bne.n	80077aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f043 0206 	orr.w	r2, r3, #6
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b6:	b004      	add	sp, #16
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	ffbdffbf 	.word	0xffbdffbf

080077c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d165      	bne.n	80078a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a41      	ldr	r2, [pc, #260]	; (80078dc <USB_SetTurnaroundTime+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d906      	bls.n	80077ea <USB_SetTurnaroundTime+0x2a>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a40      	ldr	r2, [pc, #256]	; (80078e0 <USB_SetTurnaroundTime+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d202      	bcs.n	80077ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077e4:	230f      	movs	r3, #15
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e062      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <USB_SetTurnaroundTime+0x120>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d306      	bcc.n	8007800 <USB_SetTurnaroundTime+0x40>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4a3b      	ldr	r2, [pc, #236]	; (80078e4 <USB_SetTurnaroundTime+0x124>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d202      	bcs.n	8007800 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077fa:	230e      	movs	r3, #14
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e057      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a38      	ldr	r2, [pc, #224]	; (80078e4 <USB_SetTurnaroundTime+0x124>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d306      	bcc.n	8007816 <USB_SetTurnaroundTime+0x56>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4a37      	ldr	r2, [pc, #220]	; (80078e8 <USB_SetTurnaroundTime+0x128>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d202      	bcs.n	8007816 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007810:	230d      	movs	r3, #13
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e04c      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <USB_SetTurnaroundTime+0x128>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d306      	bcc.n	800782c <USB_SetTurnaroundTime+0x6c>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a32      	ldr	r2, [pc, #200]	; (80078ec <USB_SetTurnaroundTime+0x12c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d802      	bhi.n	800782c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007826:	230c      	movs	r3, #12
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e041      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <USB_SetTurnaroundTime+0x12c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d906      	bls.n	8007842 <USB_SetTurnaroundTime+0x82>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a2e      	ldr	r2, [pc, #184]	; (80078f0 <USB_SetTurnaroundTime+0x130>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d802      	bhi.n	8007842 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800783c:	230b      	movs	r3, #11
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e036      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <USB_SetTurnaroundTime+0x130>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d906      	bls.n	8007858 <USB_SetTurnaroundTime+0x98>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4a29      	ldr	r2, [pc, #164]	; (80078f4 <USB_SetTurnaroundTime+0x134>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d802      	bhi.n	8007858 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007852:	230a      	movs	r3, #10
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e02b      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <USB_SetTurnaroundTime+0x134>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d906      	bls.n	800786e <USB_SetTurnaroundTime+0xae>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <USB_SetTurnaroundTime+0x138>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d202      	bcs.n	800786e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007868:	2309      	movs	r3, #9
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e020      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <USB_SetTurnaroundTime+0x138>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d306      	bcc.n	8007884 <USB_SetTurnaroundTime+0xc4>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4a20      	ldr	r2, [pc, #128]	; (80078fc <USB_SetTurnaroundTime+0x13c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d802      	bhi.n	8007884 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800787e:	2308      	movs	r3, #8
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	e015      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <USB_SetTurnaroundTime+0x13c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d906      	bls.n	800789a <USB_SetTurnaroundTime+0xda>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <USB_SetTurnaroundTime+0x140>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d202      	bcs.n	800789a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007894:	2307      	movs	r3, #7
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e00a      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800789a:	2306      	movs	r3, #6
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e007      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078a6:	2309      	movs	r3, #9
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e001      	b.n	80078b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078ac:	2309      	movs	r3, #9
 80078ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80078c8:	431a      	orrs	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	00d8acbf 	.word	0x00d8acbf
 80078e0:	00e4e1c0 	.word	0x00e4e1c0
 80078e4:	00f42400 	.word	0x00f42400
 80078e8:	01067380 	.word	0x01067380
 80078ec:	011a499f 	.word	0x011a499f
 80078f0:	01312cff 	.word	0x01312cff
 80078f4:	014ca43f 	.word	0x014ca43f
 80078f8:	016e3600 	.word	0x016e3600
 80078fc:	01a6ab1f 	.word	0x01a6ab1f
 8007900:	01e84800 	.word	0x01e84800

08007904 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f043 0201 	orr.w	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f023 0201 	bic.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d115      	bne.n	8007996 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007976:	2001      	movs	r0, #1
 8007978:	f7f9 fcc0 	bl	80012fc <HAL_Delay>
      ms++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fa4b 	bl	8008e1e <USB_GetMode>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d01e      	beq.n	80079cc <USB_SetCurrentMode+0x84>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b31      	cmp	r3, #49	; 0x31
 8007992:	d9f0      	bls.n	8007976 <USB_SetCurrentMode+0x2e>
 8007994:	e01a      	b.n	80079cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d115      	bne.n	80079c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079a8:	2001      	movs	r0, #1
 80079aa:	f7f9 fca7 	bl	80012fc <HAL_Delay>
      ms++;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fa32 	bl	8008e1e <USB_GetMode>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <USB_SetCurrentMode+0x84>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b31      	cmp	r3, #49	; 0x31
 80079c4:	d9f0      	bls.n	80079a8 <USB_SetCurrentMode+0x60>
 80079c6:	e001      	b.n	80079cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e005      	b.n	80079d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b32      	cmp	r3, #50	; 0x32
 80079d0:	d101      	bne.n	80079d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e0:	b084      	sub	sp, #16
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	e009      	b.n	8007a14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3340      	adds	r3, #64	; 0x40
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3301      	adds	r3, #1
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b0e      	cmp	r3, #14
 8007a18:	d9f2      	bls.n	8007a00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11c      	bne.n	8007a5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a2e:	f043 0302 	orr.w	r3, r3, #2
 8007a32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e005      	b.n	8007a66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a80:	461a      	mov	r2, r3
 8007a82:	680b      	ldr	r3, [r1, #0]
 8007a84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d10c      	bne.n	8007aa6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a92:	2100      	movs	r1, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f965 	bl	8007d64 <USB_SetDevSpeed>
 8007a9a:	e008      	b.n	8007aae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f960 	bl	8007d64 <USB_SetDevSpeed>
 8007aa4:	e003      	b.n	8007aae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007aa6:	2103      	movs	r1, #3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f95b 	bl	8007d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aae:	2110      	movs	r1, #16
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f8f3 	bl	8007c9c <USB_FlushTxFifo>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f91f 	bl	8007d04 <USB_FlushRxFifo>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	e043      	b.n	8007b82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b10:	d118      	bne.n	8007b44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	461a      	mov	r2, r3
 8007b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	e013      	b.n	8007b56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	e008      	b.n	8007b56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	461a      	mov	r2, r3
 8007b52:	2300      	movs	r3, #0
 8007b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	461a      	mov	r2, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	461a      	mov	r2, r3
 8007b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d3b7      	bcc.n	8007afa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	e043      	b.n	8007c18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba6:	d118      	bne.n	8007bda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	e013      	b.n	8007bec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e008      	b.n	8007bec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	461a      	mov	r2, r3
 8007be8:	2300      	movs	r3, #0
 8007bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	3301      	adds	r3, #1
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d3b7      	bcc.n	8007b90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f043 0210 	orr.w	r2, r3, #16
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <USB_DevInit+0x2b4>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	f043 0208 	orr.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d105      	bne.n	8007c84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <USB_DevInit+0x2b8>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c90:	b004      	add	sp, #16
 8007c92:	4770      	bx	lr
 8007c94:	803c3800 	.word	0x803c3800
 8007c98:	40000004 	.word	0x40000004

08007c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <USB_FlushTxFifo+0x64>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e01b      	b.n	8007cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	daf2      	bge.n	8007caa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	019b      	lsls	r3, r3, #6
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <USB_FlushTxFifo+0x64>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d901      	bls.n	8007ce6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e006      	b.n	8007cf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d0f0      	beq.n	8007cd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00030d40 	.word	0x00030d40

08007d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <USB_FlushRxFifo+0x5c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d901      	bls.n	8007d22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e018      	b.n	8007d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	daf2      	bge.n	8007d10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2210      	movs	r2, #16
 8007d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <USB_FlushRxFifo+0x5c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d901      	bls.n	8007d46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e006      	b.n	8007d54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d0f0      	beq.n	8007d34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	00030d40 	.word	0x00030d40

08007d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d84:	4313      	orrs	r3, r2
 8007d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b087      	sub	sp, #28
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0306 	and.w	r3, r3, #6
 8007dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
 8007dba:	e00a      	b.n	8007dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d002      	beq.n	8007dc8 <USB_GetDevSpeed+0x32>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b06      	cmp	r3, #6
 8007dc6:	d102      	bne.n	8007dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	75fb      	strb	r3, [r7, #23]
 8007dcc:	e001      	b.n	8007dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007dce:	230f      	movs	r3, #15
 8007dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d139      	bne.n	8007e70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	68f9      	ldr	r1, [r7, #12]
 8007e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d153      	bne.n	8007edc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	059b      	lsls	r3, r3, #22
 8007e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	0159      	lsls	r1, r3, #5
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	440b      	add	r3, r1
 8007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e66:	4619      	mov	r1, r3
 8007e68:	4b20      	ldr	r3, [pc, #128]	; (8007eec <USB_ActivateEndpoint+0x10c>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]
 8007e6e:	e035      	b.n	8007edc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	2101      	movs	r1, #1
 8007e82:	fa01 f303 	lsl.w	r3, r1, r3
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	68f9      	ldr	r1, [r7, #12]
 8007e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d119      	bne.n	8007edc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	0159      	lsls	r1, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	440b      	add	r3, r1
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <USB_ActivateEndpoint+0x10c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	10008000 	.word	0x10008000

08007ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d161      	bne.n	8007fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f22:	d11f      	bne.n	8007f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f84:	4013      	ands	r3, r2
 8007f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	69da      	ldr	r2, [r3, #28]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	2101      	movs	r1, #1
 8007f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa8:	4013      	ands	r3, r2
 8007faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	0159      	lsls	r1, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	440b      	add	r3, r1
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4b35      	ldr	r3, [pc, #212]	; (80080a0 <USB_DeactivateEndpoint+0x1b0>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	e060      	b.n	8008092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe6:	d11f      	bne.n	8008028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	2101      	movs	r1, #1
 800803a:	fa01 f303 	lsl.w	r3, r1, r3
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	43db      	mvns	r3, r3
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008048:	4013      	ands	r3, r2
 800804a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2101      	movs	r1, #1
 800805e:	fa01 f303 	lsl.w	r3, r1, r3
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	43db      	mvns	r3, r3
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800806c:	4013      	ands	r3, r2
 800806e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	0159      	lsls	r1, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	440b      	add	r3, r1
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	4619      	mov	r1, r3
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <USB_DeactivateEndpoint+0x1b4>)
 800808e:	4013      	ands	r3, r2
 8008090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	ec337800 	.word	0xec337800
 80080a4:	eff37800 	.word	0xeff37800

080080a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	f040 8163 	bne.w	8008390 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d132      	bne.n	8008138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	0159      	lsls	r1, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	440b      	add	r3, r1
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	4619      	mov	r1, r3
 80080ee:	4ba5      	ldr	r3, [pc, #660]	; (8008384 <USB_EPStartXfer+0x2dc>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	0151      	lsls	r1, r2, #5
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	440a      	add	r2, r1
 800810a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008112:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	0159      	lsls	r1, r3, #5
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	440b      	add	r3, r1
 800812a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812e:	4619      	mov	r1, r3
 8008130:	4b95      	ldr	r3, [pc, #596]	; (8008388 <USB_EPStartXfer+0x2e0>)
 8008132:	4013      	ands	r3, r2
 8008134:	610b      	str	r3, [r1, #16]
 8008136:	e074      	b.n	8008222 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	0159      	lsls	r1, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	440b      	add	r3, r1
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	4619      	mov	r1, r3
 8008154:	4b8c      	ldr	r3, [pc, #560]	; (8008388 <USB_EPStartXfer+0x2e0>)
 8008156:	4013      	ands	r3, r2
 8008158:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	0159      	lsls	r1, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	440b      	add	r3, r1
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	4619      	mov	r1, r3
 8008176:	4b83      	ldr	r3, [pc, #524]	; (8008384 <USB_EPStartXfer+0x2dc>)
 8008178:	4013      	ands	r3, r2
 800817a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008188:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6999      	ldr	r1, [r3, #24]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	440b      	add	r3, r1
 8008194:	1e59      	subs	r1, r3, #1
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	fbb1 f3f3 	udiv	r3, r1, r3
 800819e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081a0:	4b7a      	ldr	r3, [pc, #488]	; (800838c <USB_EPStartXfer+0x2e4>)
 80081a2:	400b      	ands	r3, r1
 80081a4:	69b9      	ldr	r1, [r7, #24]
 80081a6:	0148      	lsls	r0, r1, #5
 80081a8:	69f9      	ldr	r1, [r7, #28]
 80081aa:	4401      	add	r1, r0
 80081ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081b0:	4313      	orrs	r3, r2
 80081b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ca:	69b9      	ldr	r1, [r7, #24]
 80081cc:	0148      	lsls	r0, r1, #5
 80081ce:	69f9      	ldr	r1, [r7, #28]
 80081d0:	4401      	add	r1, r0
 80081d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081d6:	4313      	orrs	r3, r2
 80081d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	791b      	ldrb	r3, [r3, #4]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d11f      	bne.n	8008222 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	0151      	lsls	r1, r2, #5
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	440a      	add	r2, r1
 80081f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d14b      	bne.n	80082c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	461a      	mov	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	791b      	ldrb	r3, [r3, #4]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d128      	bne.n	800829e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008258:	2b00      	cmp	r3, #0
 800825a:	d110      	bne.n	800827e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	69fa      	ldr	r2, [r7, #28]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	e00f      	b.n	800829e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	0151      	lsls	r1, r2, #5
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	440a      	add	r2, r1
 8008294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e137      	b.n	8008530 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	791b      	ldrb	r3, [r3, #4]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d015      	beq.n	8008314 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 811f 	beq.w	8008530 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	2101      	movs	r1, #1
 8008304:	fa01 f303 	lsl.w	r3, r1, r3
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800830e:	4313      	orrs	r3, r2
 8008310:	634b      	str	r3, [r1, #52]	; 0x34
 8008312:	e10d      	b.n	8008530 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	e00f      	b.n	8008366 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	0151      	lsls	r1, r2, #5
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	440a      	add	r2, r1
 800835c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6919      	ldr	r1, [r3, #16]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	b298      	uxth	r0, r3
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 faea 	bl	8008954 <USB_WritePacket>
 8008380:	e0d6      	b.n	8008530 <USB_EPStartXfer+0x488>
 8008382:	bf00      	nop
 8008384:	e007ffff 	.word	0xe007ffff
 8008388:	fff80000 	.word	0xfff80000
 800838c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	691a      	ldr	r2, [r3, #16]
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	0159      	lsls	r1, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	440b      	add	r3, r1
 80083a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083aa:	4619      	mov	r1, r3
 80083ac:	4b63      	ldr	r3, [pc, #396]	; (800853c <USB_EPStartXfer+0x494>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	0159      	lsls	r1, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	440b      	add	r3, r1
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	4619      	mov	r1, r3
 80083ce:	4b5c      	ldr	r3, [pc, #368]	; (8008540 <USB_EPStartXfer+0x498>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d123      	bne.n	8008424 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f2:	69b9      	ldr	r1, [r7, #24]
 80083f4:	0148      	lsls	r0, r1, #5
 80083f6:	69f9      	ldr	r1, [r7, #28]
 80083f8:	4401      	add	r1, r0
 80083fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083fe:	4313      	orrs	r3, r2
 8008400:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	440a      	add	r2, r1
 8008418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008420:	6113      	str	r3, [r2, #16]
 8008422:	e037      	b.n	8008494 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	4413      	add	r3, r2
 800842e:	1e5a      	subs	r2, r3, #1
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	fbb2 f3f3 	udiv	r3, r2, r3
 8008438:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	8afa      	ldrh	r2, [r7, #22]
 8008440:	fb03 f202 	mul.w	r2, r3, r2
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	691a      	ldr	r2, [r3, #16]
 8008456:	8afb      	ldrh	r3, [r7, #22]
 8008458:	04d9      	lsls	r1, r3, #19
 800845a:	4b3a      	ldr	r3, [pc, #232]	; (8008544 <USB_EPStartXfer+0x49c>)
 800845c:	400b      	ands	r3, r1
 800845e:	69b9      	ldr	r1, [r7, #24]
 8008460:	0148      	lsls	r0, r1, #5
 8008462:	69f9      	ldr	r1, [r7, #28]
 8008464:	4401      	add	r1, r0
 8008466:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800846a:	4313      	orrs	r3, r2
 800846c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008484:	69b9      	ldr	r1, [r7, #24]
 8008486:	0148      	lsls	r0, r1, #5
 8008488:	69f9      	ldr	r1, [r7, #28]
 800848a:	4401      	add	r1, r0
 800848c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008490:	4313      	orrs	r3, r2
 8008492:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d10d      	bne.n	80084b6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6919      	ldr	r1, [r3, #16]
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	460a      	mov	r2, r1
 80084b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d128      	bne.n	8008510 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d110      	bne.n	80084f0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e00f      	b.n	8008510 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800850a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800850e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800852e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	fff80000 	.word	0xfff80000
 8008540:	e007ffff 	.word	0xe007ffff
 8008544:	1ff80000 	.word	0x1ff80000

08008548 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	f040 80ce 	bne.w	8008706 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d132      	bne.n	80085d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	0159      	lsls	r1, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	440b      	add	r3, r1
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	4619      	mov	r1, r3
 800858e:	4b9a      	ldr	r3, [pc, #616]	; (80087f8 <USB_EP0StartXfer+0x2b0>)
 8008590:	4013      	ands	r3, r2
 8008592:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	691a      	ldr	r2, [r3, #16]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	0159      	lsls	r1, r3, #5
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	440b      	add	r3, r1
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	4619      	mov	r1, r3
 80085d0:	4b8a      	ldr	r3, [pc, #552]	; (80087fc <USB_EP0StartXfer+0x2b4>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	610b      	str	r3, [r1, #16]
 80085d6:	e04e      	b.n	8008676 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	0159      	lsls	r1, r3, #5
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	440b      	add	r3, r1
 80085ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f2:	4619      	mov	r1, r3
 80085f4:	4b81      	ldr	r3, [pc, #516]	; (80087fc <USB_EP0StartXfer+0x2b4>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	0159      	lsls	r1, r3, #5
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	440b      	add	r3, r1
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	4619      	mov	r1, r3
 8008616:	4b78      	ldr	r3, [pc, #480]	; (80087f8 <USB_EP0StartXfer+0x2b0>)
 8008618:	4013      	ands	r3, r2
 800861a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	429a      	cmp	r2, r3
 8008626:	d903      	bls.n	8008630 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800864e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008666:	6939      	ldr	r1, [r7, #16]
 8008668:	0148      	lsls	r0, r1, #5
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	4401      	add	r1, r0
 800866e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008672:	4313      	orrs	r3, r2
 8008674:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d11e      	bne.n	80086ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d009      	beq.n	8008698 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008690:	461a      	mov	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e097      	b.n	80087ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8083 	beq.w	80087ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2101      	movs	r1, #1
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	6979      	ldr	r1, [r7, #20]
 80086fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008700:	4313      	orrs	r3, r2
 8008702:	634b      	str	r3, [r1, #52]	; 0x34
 8008704:	e071      	b.n	80087ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	0159      	lsls	r1, r3, #5
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	440b      	add	r3, r1
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	4619      	mov	r1, r3
 8008722:	4b36      	ldr	r3, [pc, #216]	; (80087fc <USB_EP0StartXfer+0x2b4>)
 8008724:	4013      	ands	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	0159      	lsls	r1, r3, #5
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	440b      	add	r3, r1
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	4619      	mov	r1, r3
 8008744:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <USB_EP0StartXfer+0x2b0>)
 8008746:	4013      	ands	r3, r2
 8008748:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008798:	6939      	ldr	r1, [r7, #16]
 800879a:	0148      	lsls	r0, r1, #5
 800879c:	6979      	ldr	r1, [r7, #20]
 800879e:	4401      	add	r1, r0
 80087a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087a4:	4313      	orrs	r3, r2
 80087a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10d      	bne.n	80087ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6919      	ldr	r1, [r3, #16]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	460a      	mov	r2, r1
 80087c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	0151      	lsls	r1, r2, #5
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	440a      	add	r2, r1
 80087e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	e007ffff 	.word	0xe007ffff
 80087fc:	fff80000 	.word	0xfff80000

08008800 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d14a      	bne.n	80088b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008836:	f040 8086 	bne.w	8008946 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	7812      	ldrb	r2, [r2, #0]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	440a      	add	r2, r1
 8008854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008858:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800885c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	7812      	ldrb	r2, [r2, #0]
 8008872:	0151      	lsls	r1, r2, #5
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	440a      	add	r2, r1
 8008878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f242 7210 	movw	r2, #10000	; 0x2710
 800888e:	4293      	cmp	r3, r2
 8008890:	d902      	bls.n	8008898 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	75fb      	strb	r3, [r7, #23]
          break;
 8008896:	e056      	b.n	8008946 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b0:	d0e7      	beq.n	8008882 <USB_EPStopXfer+0x82>
 80088b2:	e048      	b.n	8008946 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088cc:	d13b      	bne.n	8008946 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	7812      	ldrb	r2, [r2, #0]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008914:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008922:	4293      	cmp	r3, r2
 8008924:	d902      	bls.n	800892c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
          break;
 800892a:	e00c      	b.n	8008946 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008944:	d0e7      	beq.n	8008916 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
}
 8008948:	4618      	mov	r0, r3
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008954:	b480      	push	{r7}
 8008956:	b089      	sub	sp, #36	; 0x24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	460b      	mov	r3, r1
 8008964:	71fb      	strb	r3, [r7, #7]
 8008966:	4613      	mov	r3, r2
 8008968:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d123      	bne.n	80089c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800897a:	88bb      	ldrh	r3, [r7, #4]
 800897c:	3303      	adds	r3, #3
 800897e:	089b      	lsrs	r3, r3, #2
 8008980:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	e018      	b.n	80089ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	031a      	lsls	r2, r3, #12
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008994:	461a      	mov	r2, r3
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	3301      	adds	r3, #1
 80089a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	3301      	adds	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	3301      	adds	r3, #1
 80089b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	3301      	adds	r3, #1
 80089b8:	61bb      	str	r3, [r7, #24]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3e2      	bcc.n	8008988 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3724      	adds	r7, #36	; 0x24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b08b      	sub	sp, #44	; 0x2c
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	4613      	mov	r3, r2
 80089dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	089b      	lsrs	r3, r3, #2
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089f6:	2300      	movs	r3, #0
 80089f8:	623b      	str	r3, [r7, #32]
 80089fa:	e014      	b.n	8008a26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	3301      	adds	r3, #1
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	3301      	adds	r3, #1
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	3301      	adds	r3, #1
 8008a24:	623b      	str	r3, [r7, #32]
 8008a26:	6a3a      	ldr	r2, [r7, #32]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d3e6      	bcc.n	80089fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a2e:	8bfb      	ldrh	r3, [r7, #30]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01e      	beq.n	8008a72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	fa22 f303 	lsr.w	r3, r2, r3
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	701a      	strb	r2, [r3, #0]
      i++;
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	3301      	adds	r3, #1
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a66:	8bfb      	ldrh	r3, [r7, #30]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a6c:	8bfb      	ldrh	r3, [r7, #30]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ea      	bne.n	8008a48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	372c      	adds	r7, #44	; 0x2c
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d12c      	bne.n	8008af6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	db12      	blt.n	8008ad4 <USB_EPSetStall+0x54>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00f      	beq.n	8008ad4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ad2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	e02b      	b.n	8008b4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	db12      	blt.n	8008b2e <USB_EPSetStall+0xae>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00f      	beq.n	8008b2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d128      	bne.n	8008bca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	0151      	lsls	r1, r2, #5
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	791b      	ldrb	r3, [r3, #4]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d003      	beq.n	8008ba8 <USB_EPClearStall+0x4c>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d138      	bne.n	8008c1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e027      	b.n	8008c1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008be8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d003      	beq.n	8008bfa <USB_EPClearStall+0x9e>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d10f      	bne.n	8008c1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca2:	f023 0302 	bic.w	r3, r3, #2
 8008ca6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cd0:	f023 0303 	bic.w	r3, r3, #3
 8008cd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	0c1b      	lsrs	r3, r3, #16
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	4013      	ands	r3, r2
 8008d74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	b29b      	uxth	r3, r3
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4013      	ands	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008db4:	68bb      	ldr	r3, [r7, #8]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	fa22 f303 	lsr.w	r3, r2, r3
 8008df2:	01db      	lsls	r3, r3, #7
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e10:	68bb      	ldr	r3, [r7, #8]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	4619      	mov	r1, r3
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <USB_ActivateSetup+0x44>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	fffff800 	.word	0xfffff800

08008e84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	333c      	adds	r3, #60	; 0x3c
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4a26      	ldr	r2, [pc, #152]	; (8008f3c <USB_EP0_OutStart+0xb8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d90a      	bls.n	8008ebe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb8:	d101      	bne.n	8008ebe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e037      	b.n	8008f2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eec:	f043 0318 	orr.w	r3, r3, #24
 8008ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d10f      	bne.n	8008f2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	4f54300a 	.word	0x4f54300a

08008f40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <USB_CoreReset+0x64>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d901      	bls.n	8008f5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e01b      	b.n	8008f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	daf2      	bge.n	8008f4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f043 0201 	orr.w	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <USB_CoreReset+0x64>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d901      	bls.n	8008f88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e006      	b.n	8008f96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d0f0      	beq.n	8008f76 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	00030d40 	.word	0x00030d40

08008fa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fb8:	f005 fb4e 	bl	800e658 <malloc>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	32b0      	adds	r2, #176	; 0xb0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	e0d4      	b.n	8009184 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008fda:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f005 fc15 	bl	800e810 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	32b0      	adds	r2, #176	; 0xb0
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32b0      	adds	r2, #176	; 0xb0
 8009000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d138      	bne.n	8009084 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009012:	4b5e      	ldr	r3, [pc, #376]	; (800918c <USBD_CDC_Init+0x1e4>)
 8009014:	7819      	ldrb	r1, [r3, #0]
 8009016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800901a:	2202      	movs	r2, #2
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f005 f978 	bl	800e312 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009022:	4b5a      	ldr	r3, [pc, #360]	; (800918c <USBD_CDC_Init+0x1e4>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 020f 	and.w	r2, r3, #15
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	3324      	adds	r3, #36	; 0x24
 8009038:	2201      	movs	r2, #1
 800903a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800903c:	4b54      	ldr	r3, [pc, #336]	; (8009190 <USBD_CDC_Init+0x1e8>)
 800903e:	7819      	ldrb	r1, [r3, #0]
 8009040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009044:	2202      	movs	r2, #2
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f005 f963 	bl	800e312 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800904c:	4b50      	ldr	r3, [pc, #320]	; (8009190 <USBD_CDC_Init+0x1e8>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 020f 	and.w	r2, r3, #15
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009064:	2201      	movs	r2, #1
 8009066:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009068:	4b4a      	ldr	r3, [pc, #296]	; (8009194 <USBD_CDC_Init+0x1ec>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	3326      	adds	r3, #38	; 0x26
 800907e:	2210      	movs	r2, #16
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	e035      	b.n	80090f0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009084:	4b41      	ldr	r3, [pc, #260]	; (800918c <USBD_CDC_Init+0x1e4>)
 8009086:	7819      	ldrb	r1, [r3, #0]
 8009088:	2340      	movs	r3, #64	; 0x40
 800908a:	2202      	movs	r2, #2
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f005 f940 	bl	800e312 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009092:	4b3e      	ldr	r3, [pc, #248]	; (800918c <USBD_CDC_Init+0x1e4>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	f003 020f 	and.w	r2, r3, #15
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	3324      	adds	r3, #36	; 0x24
 80090a8:	2201      	movs	r2, #1
 80090aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80090ac:	4b38      	ldr	r3, [pc, #224]	; (8009190 <USBD_CDC_Init+0x1e8>)
 80090ae:	7819      	ldrb	r1, [r3, #0]
 80090b0:	2340      	movs	r3, #64	; 0x40
 80090b2:	2202      	movs	r2, #2
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f005 f92c 	bl	800e312 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80090ba:	4b35      	ldr	r3, [pc, #212]	; (8009190 <USBD_CDC_Init+0x1e8>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	f003 020f 	and.w	r2, r3, #15
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090d2:	2201      	movs	r2, #1
 80090d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090d6:	4b2f      	ldr	r3, [pc, #188]	; (8009194 <USBD_CDC_Init+0x1ec>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	f003 020f 	and.w	r2, r3, #15
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	3326      	adds	r3, #38	; 0x26
 80090ec:	2210      	movs	r2, #16
 80090ee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090f0:	4b28      	ldr	r3, [pc, #160]	; (8009194 <USBD_CDC_Init+0x1ec>)
 80090f2:	7819      	ldrb	r1, [r3, #0]
 80090f4:	2308      	movs	r3, #8
 80090f6:	2203      	movs	r2, #3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f005 f90a 	bl	800e312 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80090fe:	4b25      	ldr	r3, [pc, #148]	; (8009194 <USBD_CDC_Init+0x1ec>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3324      	adds	r3, #36	; 0x24
 8009114:	2201      	movs	r2, #1
 8009116:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	33b0      	adds	r3, #176	; 0xb0
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800914e:	2302      	movs	r3, #2
 8009150:	e018      	b.n	8009184 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7c1b      	ldrb	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10a      	bne.n	8009170 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <USBD_CDC_Init+0x1e8>)
 800915c:	7819      	ldrb	r1, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f005 f9c1 	bl	800e4f0 <USBD_LL_PrepareReceive>
 800916e:	e008      	b.n	8009182 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <USBD_CDC_Init+0x1e8>)
 8009172:	7819      	ldrb	r1, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800917a:	2340      	movs	r3, #64	; 0x40
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f005 f9b7 	bl	800e4f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000093 	.word	0x20000093
 8009190:	20000094 	.word	0x20000094
 8009194:	20000095 	.word	0x20000095

08009198 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80091a4:	4b3a      	ldr	r3, [pc, #232]	; (8009290 <USBD_CDC_DeInit+0xf8>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f005 f8d7 	bl	800e35e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80091b0:	4b37      	ldr	r3, [pc, #220]	; (8009290 <USBD_CDC_DeInit+0xf8>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	f003 020f 	and.w	r2, r3, #15
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	3324      	adds	r3, #36	; 0x24
 80091c6:	2200      	movs	r2, #0
 80091c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80091ca:	4b32      	ldr	r3, [pc, #200]	; (8009294 <USBD_CDC_DeInit+0xfc>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f005 f8c4 	bl	800e35e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80091d6:	4b2f      	ldr	r3, [pc, #188]	; (8009294 <USBD_CDC_DeInit+0xfc>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	f003 020f 	and.w	r2, r3, #15
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	440b      	add	r3, r1
 80091ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091ee:	2200      	movs	r2, #0
 80091f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80091f2:	4b29      	ldr	r3, [pc, #164]	; (8009298 <USBD_CDC_DeInit+0x100>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f005 f8b0 	bl	800e35e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80091fe:	4b26      	ldr	r3, [pc, #152]	; (8009298 <USBD_CDC_DeInit+0x100>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 020f 	and.w	r2, r3, #15
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	3324      	adds	r3, #36	; 0x24
 8009214:	2200      	movs	r2, #0
 8009216:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009218:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <USBD_CDC_DeInit+0x100>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f003 020f 	and.w	r2, r3, #15
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	3326      	adds	r3, #38	; 0x26
 800922e:	2200      	movs	r2, #0
 8009230:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	32b0      	adds	r2, #176	; 0xb0
 800923c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01f      	beq.n	8009284 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	33b0      	adds	r3, #176	; 0xb0
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	32b0      	adds	r2, #176	; 0xb0
 8009262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009266:	4618      	mov	r0, r3
 8009268:	f005 f9fe 	bl	800e668 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	32b0      	adds	r2, #176	; 0xb0
 8009276:	2100      	movs	r1, #0
 8009278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000093 	.word	0x20000093
 8009294:	20000094 	.word	0x20000094
 8009298:	20000095 	.word	0x20000095

0800929c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	32b0      	adds	r2, #176	; 0xb0
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e0bf      	b.n	800944c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d050      	beq.n	800937a <USBD_CDC_Setup+0xde>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	f040 80af 	bne.w	800943c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b25b      	sxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da1b      	bge.n	8009328 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	33b0      	adds	r3, #176	; 0xb0
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009306:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	88d2      	ldrh	r2, [r2, #6]
 800930c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	88db      	ldrh	r3, [r3, #6]
 8009312:	2b07      	cmp	r3, #7
 8009314:	bf28      	it	cs
 8009316:	2307      	movcs	r3, #7
 8009318:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	89fa      	ldrh	r2, [r7, #14]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 fdad 	bl	800ae80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009326:	e090      	b.n	800944a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	785a      	ldrb	r2, [r3, #1]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	2b3f      	cmp	r3, #63	; 0x3f
 8009338:	d803      	bhi.n	8009342 <USBD_CDC_Setup+0xa6>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	e000      	b.n	8009344 <USBD_CDC_Setup+0xa8>
 8009342:	2240      	movs	r2, #64	; 0x40
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800934a:	6939      	ldr	r1, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009352:	461a      	mov	r2, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fdbf 	bl	800aed8 <USBD_CtlPrepareRx>
      break;
 800935a:	e076      	b.n	800944a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	33b0      	adds	r3, #176	; 0xb0
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	7850      	ldrb	r0, [r2, #1]
 8009372:	2200      	movs	r2, #0
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	4798      	blx	r3
      break;
 8009378:	e067      	b.n	800944a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	785b      	ldrb	r3, [r3, #1]
 800937e:	2b0b      	cmp	r3, #11
 8009380:	d851      	bhi.n	8009426 <USBD_CDC_Setup+0x18a>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USBD_CDC_Setup+0xec>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093b9 	.word	0x080093b9
 800938c:	08009435 	.word	0x08009435
 8009390:	08009427 	.word	0x08009427
 8009394:	08009427 	.word	0x08009427
 8009398:	08009427 	.word	0x08009427
 800939c:	08009427 	.word	0x08009427
 80093a0:	08009427 	.word	0x08009427
 80093a4:	08009427 	.word	0x08009427
 80093a8:	08009427 	.word	0x08009427
 80093ac:	08009427 	.word	0x08009427
 80093b0:	080093e3 	.word	0x080093e3
 80093b4:	0800940d 	.word	0x0800940d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d107      	bne.n	80093d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093c4:	f107 030a 	add.w	r3, r7, #10
 80093c8:	2202      	movs	r2, #2
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fd57 	bl	800ae80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093d2:	e032      	b.n	800943a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fce1 	bl	800ad9e <USBD_CtlError>
            ret = USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	75fb      	strb	r3, [r7, #23]
          break;
 80093e0:	e02b      	b.n	800943a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d107      	bne.n	80093fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093ee:	f107 030d 	add.w	r3, r7, #13
 80093f2:	2201      	movs	r2, #1
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fd42 	bl	800ae80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093fc:	e01d      	b.n	800943a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fccc 	bl	800ad9e <USBD_CtlError>
            ret = USBD_FAIL;
 8009406:	2303      	movs	r3, #3
 8009408:	75fb      	strb	r3, [r7, #23]
          break;
 800940a:	e016      	b.n	800943a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b03      	cmp	r3, #3
 8009416:	d00f      	beq.n	8009438 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fcbf 	bl	800ad9e <USBD_CtlError>
            ret = USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009424:	e008      	b.n	8009438 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 fcb8 	bl	800ad9e <USBD_CtlError>
          ret = USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	75fb      	strb	r3, [r7, #23]
          break;
 8009432:	e002      	b.n	800943a <USBD_CDC_Setup+0x19e>
          break;
 8009434:	bf00      	nop
 8009436:	e008      	b.n	800944a <USBD_CDC_Setup+0x1ae>
          break;
 8009438:	bf00      	nop
      }
      break;
 800943a:	e006      	b.n	800944a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f001 fcad 	bl	800ad9e <USBD_CtlError>
      ret = USBD_FAIL;
 8009444:	2303      	movs	r3, #3
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	bf00      	nop
  }

  return (uint8_t)ret;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009466:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	32b0      	adds	r2, #176	; 0xb0
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	e065      	b.n	800954a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	32b0      	adds	r2, #176	; 0xb0
 8009488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3318      	adds	r3, #24
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d02f      	beq.n	8009508 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	f003 020f 	and.w	r2, r3, #15
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	3318      	adds	r3, #24
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	f003 010f 	and.w	r1, r3, #15
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	460b      	mov	r3, r1
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	440b      	add	r3, r1
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4403      	add	r3, r0
 80094d0:	3348      	adds	r3, #72	; 0x48
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d112      	bne.n	8009508 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3318      	adds	r3, #24
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094fa:	78f9      	ldrb	r1, [r7, #3]
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f004 ffd4 	bl	800e4ae <USBD_LL_Transmit>
 8009506:	e01f      	b.n	8009548 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2200      	movs	r2, #0
 800950c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	33b0      	adds	r3, #176	; 0xb0
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d010      	beq.n	8009548 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	33b0      	adds	r3, #176	; 0xb0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009544:	78fa      	ldrb	r2, [r7, #3]
 8009546:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	32b0      	adds	r2, #176	; 0xb0
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	32b0      	adds	r2, #176	; 0xb0
 8009578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	e01a      	b.n	80095ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f004 ffd2 	bl	800e532 <USBD_LL_GetRxDataSize>
 800958e:	4602      	mov	r2, r0
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	33b0      	adds	r3, #176	; 0xb0
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80095b4:	4611      	mov	r1, r2
 80095b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	32b0      	adds	r2, #176	; 0xb0
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e025      	b.n	8009630 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	33b0      	adds	r3, #176	; 0xb0
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01a      	beq.n	800962e <USBD_CDC_EP0_RxReady+0x6c>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80095fe:	2bff      	cmp	r3, #255	; 0xff
 8009600:	d015      	beq.n	800962e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	33b0      	adds	r3, #176	; 0xb0
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800961a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009622:	b292      	uxth	r2, r2
 8009624:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	22ff      	movs	r2, #255	; 0xff
 800962a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009640:	2182      	movs	r1, #130	; 0x82
 8009642:	4818      	ldr	r0, [pc, #96]	; (80096a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009644:	f000 fd49 	bl	800a0da <USBD_GetEpDesc>
 8009648:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800964a:	2101      	movs	r1, #1
 800964c:	4815      	ldr	r0, [pc, #84]	; (80096a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800964e:	f000 fd44 	bl	800a0da <USBD_GetEpDesc>
 8009652:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009654:	2181      	movs	r1, #129	; 0x81
 8009656:	4813      	ldr	r0, [pc, #76]	; (80096a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009658:	f000 fd3f 	bl	800a0da <USBD_GetEpDesc>
 800965c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2210      	movs	r2, #16
 8009668:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d006      	beq.n	800967e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2200      	movs	r2, #0
 8009674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009678:	711a      	strb	r2, [r3, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800968c:	711a      	strb	r2, [r3, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2243      	movs	r2, #67	; 0x43
 8009696:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000050 	.word	0x20000050

080096a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096b0:	2182      	movs	r1, #130	; 0x82
 80096b2:	4818      	ldr	r0, [pc, #96]	; (8009714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80096b4:	f000 fd11 	bl	800a0da <USBD_GetEpDesc>
 80096b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096ba:	2101      	movs	r1, #1
 80096bc:	4815      	ldr	r0, [pc, #84]	; (8009714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80096be:	f000 fd0c 	bl	800a0da <USBD_GetEpDesc>
 80096c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096c4:	2181      	movs	r1, #129	; 0x81
 80096c6:	4813      	ldr	r0, [pc, #76]	; (8009714 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80096c8:	f000 fd07 	bl	800a0da <USBD_GetEpDesc>
 80096cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2210      	movs	r2, #16
 80096d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d006      	beq.n	80096ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2200      	movs	r2, #0
 80096e4:	711a      	strb	r2, [r3, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f042 0202 	orr.w	r2, r2, #2
 80096ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	711a      	strb	r2, [r3, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f042 0202 	orr.w	r2, r2, #2
 8009700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2243      	movs	r2, #67	; 0x43
 8009706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000050 	.word	0x20000050

08009718 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009720:	2182      	movs	r1, #130	; 0x82
 8009722:	4818      	ldr	r0, [pc, #96]	; (8009784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009724:	f000 fcd9 	bl	800a0da <USBD_GetEpDesc>
 8009728:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800972a:	2101      	movs	r1, #1
 800972c:	4815      	ldr	r0, [pc, #84]	; (8009784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800972e:	f000 fcd4 	bl	800a0da <USBD_GetEpDesc>
 8009732:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009734:	2181      	movs	r1, #129	; 0x81
 8009736:	4813      	ldr	r0, [pc, #76]	; (8009784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009738:	f000 fccf 	bl	800a0da <USBD_GetEpDesc>
 800973c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2210      	movs	r2, #16
 8009748:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d006      	beq.n	800975e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2200      	movs	r2, #0
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	711a      	strb	r2, [r3, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d006      	beq.n	8009772 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800976c:	711a      	strb	r2, [r3, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2243      	movs	r2, #67	; 0x43
 8009776:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009778:	4b02      	ldr	r3, [pc, #8]	; (8009784 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000050 	.word	0x20000050

08009788 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	220a      	movs	r2, #10
 8009794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009796:	4b03      	ldr	r3, [pc, #12]	; (80097a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	2000000c 	.word	0x2000000c

080097a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e009      	b.n	80097d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	33b0      	adds	r3, #176	; 0xb0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	32b0      	adds	r2, #176	; 0xb0
 80097f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80097fe:	2303      	movs	r3, #3
 8009800:	e008      	b.n	8009814 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32b0      	adds	r2, #176	; 0xb0
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e004      	b.n	800984e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32b0      	adds	r2, #176	; 0xb0
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009874:	2301      	movs	r3, #1
 8009876:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	e025      	b.n	80098ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11f      	bne.n	80098cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2201      	movs	r2, #1
 8009890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009894:	4b10      	ldr	r3, [pc, #64]	; (80098d8 <USBD_CDC_TransmitPacket+0x7c>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 020f 	and.w	r2, r3, #15
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4403      	add	r3, r0
 80098ae:	3318      	adds	r3, #24
 80098b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80098b2:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <USBD_CDC_TransmitPacket+0x7c>)
 80098b4:	7819      	ldrb	r1, [r3, #0]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f004 fdf3 	bl	800e4ae <USBD_LL_Transmit>

    ret = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000093 	.word	0x20000093

080098dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	32b0      	adds	r2, #176	; 0xb0
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	32b0      	adds	r2, #176	; 0xb0
 80098fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009906:	2303      	movs	r3, #3
 8009908:	e018      	b.n	800993c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7c1b      	ldrb	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009912:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <USBD_CDC_ReceivePacket+0x68>)
 8009914:	7819      	ldrb	r1, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800991c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f004 fde5 	bl	800e4f0 <USBD_LL_PrepareReceive>
 8009926:	e008      	b.n	800993a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <USBD_CDC_ReceivePacket+0x68>)
 800992a:	7819      	ldrb	r1, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009932:	2340      	movs	r3, #64	; 0x40
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f004 fddb 	bl	800e4f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20000094 	.word	0x20000094

08009948 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800995c:	2303      	movs	r3, #3
 800995e:	e01f      	b.n	80099a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	79fa      	ldrb	r2, [r7, #7]
 8009992:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f004 fc55 	bl	800e244 <USBD_LL_Init>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	e025      	b.n	8009a0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32ae      	adds	r2, #174	; 0xae
 80099d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00f      	beq.n	80099fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	32ae      	adds	r2, #174	; 0xae
 80099e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	f107 020e 	add.w	r2, r7, #14
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	4602      	mov	r2, r0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f004 fc5d 	bl	800e2dc <USBD_LL_Start>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d009      	beq.n	8009a70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	4611      	mov	r1, r2
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	4611      	mov	r1, r2
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	4798      	blx	r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f001 f932 	bl	800ad2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ae2:	f003 031f 	and.w	r3, r3, #31
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d01a      	beq.n	8009b20 <USBD_LL_SetupStage+0x72>
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d822      	bhi.n	8009b34 <USBD_LL_SetupStage+0x86>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <USBD_LL_SetupStage+0x4a>
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d00a      	beq.n	8009b0c <USBD_LL_SetupStage+0x5e>
 8009af6:	e01d      	b.n	8009b34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb5f 	bl	800a1c4 <USBD_StdDevReq>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73fb      	strb	r3, [r7, #15]
      break;
 8009b0a:	e020      	b.n	8009b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fbc7 	bl	800a2a8 <USBD_StdItfReq>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b1e:	e016      	b.n	8009b4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fc29 	bl	800a380 <USBD_StdEPReq>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
      break;
 8009b32:	e00c      	b.n	8009b4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f004 fc2a 	bl	800e39c <USBD_LL_StallEP>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4c:	bf00      	nop
  }

  return ret;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	460b      	mov	r3, r1
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d16e      	bne.n	8009c4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	f040 8098 	bne.w	8009cb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d913      	bls.n	8009bb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	1ad2      	subs	r2, r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	bf28      	it	cs
 8009baa:	4613      	movcs	r3, r2
 8009bac:	461a      	mov	r2, r3
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f001 f9ae 	bl	800af12 <USBD_CtlContinueRx>
 8009bb6:	e07d      	b.n	8009cb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bbe:	f003 031f 	and.w	r3, r3, #31
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d014      	beq.n	8009bf0 <USBD_LL_DataOutStage+0x98>
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d81d      	bhi.n	8009c06 <USBD_LL_DataOutStage+0xae>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <USBD_LL_DataOutStage+0x7c>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d003      	beq.n	8009bda <USBD_LL_DataOutStage+0x82>
 8009bd2:	e018      	b.n	8009c06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8009bd8:	e018      	b.n	8009c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	4619      	mov	r1, r3
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 fa5e 	bl	800a0a6 <USBD_CoreFindIF>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75bb      	strb	r3, [r7, #22]
            break;
 8009bee:	e00d      	b.n	8009c0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fa60 	bl	800a0c0 <USBD_CoreFindEP>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75bb      	strb	r3, [r7, #22]
            break;
 8009c04:	e002      	b.n	8009c0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75bb      	strb	r3, [r7, #22]
            break;
 8009c0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c0c:	7dbb      	ldrb	r3, [r7, #22]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d119      	bne.n	8009c46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d113      	bne.n	8009c46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009c1e:	7dba      	ldrb	r2, [r7, #22]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	32ae      	adds	r2, #174	; 0xae
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c2e:	7dba      	ldrb	r2, [r7, #22]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c36:	7dba      	ldrb	r2, [r7, #22]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	32ae      	adds	r2, #174	; 0xae
 8009c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f001 f974 	bl	800af34 <USBD_CtlSendStatus>
 8009c4c:	e032      	b.n	8009cb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c4e:	7afb      	ldrb	r3, [r7, #11]
 8009c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fa31 	bl	800a0c0 <USBD_CoreFindEP>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c62:	7dbb      	ldrb	r3, [r7, #22]
 8009c64:	2bff      	cmp	r3, #255	; 0xff
 8009c66:	d025      	beq.n	8009cb4 <USBD_LL_DataOutStage+0x15c>
 8009c68:	7dbb      	ldrb	r3, [r7, #22]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d122      	bne.n	8009cb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d117      	bne.n	8009caa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c7a:	7dba      	ldrb	r2, [r7, #22]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	32ae      	adds	r2, #174	; 0xae
 8009c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00f      	beq.n	8009caa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c8a:	7dba      	ldrb	r2, [r7, #22]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c92:	7dba      	ldrb	r2, [r7, #22]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	32ae      	adds	r2, #174	; 0xae
 8009c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	7afa      	ldrb	r2, [r7, #11]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	4798      	blx	r3
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	e000      	b.n	8009cb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	607a      	str	r2, [r7, #4]
 8009cca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d16f      	bne.n	8009db2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d15a      	bne.n	8009d98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d914      	bls.n	8009d18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f001 f8d6 	bl	800aeb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f004 fbed 	bl	800e4f0 <USBD_LL_PrepareReceive>
 8009d16:	e03f      	b.n	8009d98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d11c      	bne.n	8009d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d316      	bcc.n	8009d5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d20f      	bcs.n	8009d5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f001 f8b7 	bl	800aeb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d50:	2300      	movs	r3, #0
 8009d52:	2200      	movs	r2, #0
 8009d54:	2100      	movs	r1, #0
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f004 fbca 	bl	800e4f0 <USBD_LL_PrepareReceive>
 8009d5c:	e01c      	b.n	8009d98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d10f      	bne.n	8009d8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d8a:	2180      	movs	r1, #128	; 0x80
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f004 fb05 	bl	800e39c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f001 f8e1 	bl	800af5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d03a      	beq.n	8009e18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7ff fe42 	bl	8009a2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009db0:	e032      	b.n	8009e18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 f97f 	bl	800a0c0 <USBD_CoreFindEP>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	2bff      	cmp	r3, #255	; 0xff
 8009dca:	d025      	beq.n	8009e18 <USBD_LL_DataInStage+0x15a>
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d122      	bne.n	8009e18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d11c      	bne.n	8009e18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009dde:	7dfa      	ldrb	r2, [r7, #23]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	32ae      	adds	r2, #174	; 0xae
 8009de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d014      	beq.n	8009e18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009dee:	7dfa      	ldrb	r2, [r7, #23]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009df6:	7dfa      	ldrb	r2, [r7, #23]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	32ae      	adds	r2, #174	; 0xae
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	7afa      	ldrb	r2, [r7, #11]
 8009e04:	4611      	mov	r1, r2
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	4798      	blx	r3
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e0e:	7dbb      	ldrb	r3, [r7, #22]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009e14:	7dbb      	ldrb	r3, [r7, #22]
 8009e16:	e000      	b.n	8009e1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d014      	beq.n	8009e88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00e      	beq.n	8009e88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	6852      	ldr	r2, [r2, #4]
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	4611      	mov	r1, r2
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e88:	2340      	movs	r3, #64	; 0x40
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f004 fa3f 	bl	800e312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2240      	movs	r2, #64	; 0x40
 8009ea0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ea4:	2340      	movs	r3, #64	; 0x40
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2180      	movs	r1, #128	; 0x80
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f004 fa31 	bl	800e312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2240      	movs	r2, #64	; 0x40
 8009eba:	621a      	str	r2, [r3, #32]

  return ret;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2204      	movs	r2, #4
 8009f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d106      	bne.n	8009f34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d110      	bne.n	8009f78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	32ae      	adds	r2, #174	; 0xae
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e01c      	b.n	8009fde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d115      	bne.n	8009fdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	32ae      	adds	r2, #174	; 0xae
 8009fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00b      	beq.n	8009fdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	32ae      	adds	r2, #174	; 0xae
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	78fa      	ldrb	r2, [r7, #3]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	e01c      	b.n	800a042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b03      	cmp	r3, #3
 800a012:	d115      	bne.n	800a040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	32ae      	adds	r2, #174	; 0xae
 800a01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	; 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	4611      	mov	r1, r2
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6852      	ldr	r2, [r2, #4]
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	4611      	mov	r1, r2
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	4798      	blx	r3
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a098:	2303      	movs	r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d920      	bls.n	800a144 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a10a:	e013      	b.n	800a134 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a10c:	f107 030a 	add.w	r3, r7, #10
 800a110:	4619      	mov	r1, r3
 800a112:	6978      	ldr	r0, [r7, #20]
 800a114:	f000 f81b 	bl	800a14e <USBD_GetNextDesc>
 800a118:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	785b      	ldrb	r3, [r3, #1]
 800a11e:	2b05      	cmp	r3, #5
 800a120:	d108      	bne.n	800a134 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	789b      	ldrb	r3, [r3, #2]
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d008      	beq.n	800a142 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	885b      	ldrh	r3, [r3, #2]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	897b      	ldrh	r3, [r7, #10]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d8e5      	bhi.n	800a10c <USBD_GetEpDesc+0x32>
 800a140:	e000      	b.n	800a144 <USBD_GetEpDesc+0x6a>
          break;
 800a142:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a144:	693b      	ldr	r3, [r7, #16]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a14e:	b480      	push	{r7}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	881a      	ldrh	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	4413      	add	r3, r2
 800a168:	b29a      	uxth	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4413      	add	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	3301      	adds	r3, #1
 800a19e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1a6:	8a3b      	ldrh	r3, [r7, #16]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	b21a      	sxth	r2, r3
 800a1ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	b21b      	sxth	r3, r3
 800a1b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a1b6:	89fb      	ldrh	r3, [r7, #14]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	371c      	adds	r7, #28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1da:	2b40      	cmp	r3, #64	; 0x40
 800a1dc:	d005      	beq.n	800a1ea <USBD_StdDevReq+0x26>
 800a1de:	2b40      	cmp	r3, #64	; 0x40
 800a1e0:	d857      	bhi.n	800a292 <USBD_StdDevReq+0xce>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00f      	beq.n	800a206 <USBD_StdDevReq+0x42>
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d153      	bne.n	800a292 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	32ae      	adds	r2, #174	; 0xae
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
      break;
 800a204:	e04a      	b.n	800a29c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	785b      	ldrb	r3, [r3, #1]
 800a20a:	2b09      	cmp	r3, #9
 800a20c:	d83b      	bhi.n	800a286 <USBD_StdDevReq+0xc2>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <USBD_StdDevReq+0x50>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a269 	.word	0x0800a269
 800a218:	0800a27d 	.word	0x0800a27d
 800a21c:	0800a287 	.word	0x0800a287
 800a220:	0800a273 	.word	0x0800a273
 800a224:	0800a287 	.word	0x0800a287
 800a228:	0800a247 	.word	0x0800a247
 800a22c:	0800a23d 	.word	0x0800a23d
 800a230:	0800a287 	.word	0x0800a287
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	0800a251 	.word	0x0800a251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fa3c 	bl	800a6bc <USBD_GetDescriptor>
          break;
 800a244:	e024      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fbcb 	bl	800a9e4 <USBD_SetAddress>
          break;
 800a24e:	e01f      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fc0a 	bl	800aa6c <USBD_SetConfig>
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
          break;
 800a25c:	e018      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fcad 	bl	800abc0 <USBD_GetConfig>
          break;
 800a266:	e013      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fcde 	bl	800ac2c <USBD_GetStatus>
          break;
 800a270:	e00e      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fd0d 	bl	800ac94 <USBD_SetFeature>
          break;
 800a27a:	e009      	b.n	800a290 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fd31 	bl	800ace6 <USBD_ClrFeature>
          break;
 800a284:	e004      	b.n	800a290 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fd88 	bl	800ad9e <USBD_CtlError>
          break;
 800a28e:	bf00      	nop
      }
      break;
 800a290:	e004      	b.n	800a29c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fd82 	bl	800ad9e <USBD_CtlError>
      break;
 800a29a:	bf00      	nop
  }

  return ret;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop

0800a2a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2be:	2b40      	cmp	r3, #64	; 0x40
 800a2c0:	d005      	beq.n	800a2ce <USBD_StdItfReq+0x26>
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	d852      	bhi.n	800a36c <USBD_StdItfReq+0xc4>
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <USBD_StdItfReq+0x26>
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d14e      	bne.n	800a36c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d840      	bhi.n	800a35e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	889b      	ldrh	r3, [r3, #4]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d836      	bhi.n	800a354 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	889b      	ldrh	r3, [r3, #4]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff fed9 	bl	800a0a6 <USBD_CoreFindIF>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	2bff      	cmp	r3, #255	; 0xff
 800a2fc:	d01d      	beq.n	800a33a <USBD_StdItfReq+0x92>
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d11a      	bne.n	800a33a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a304:	7bba      	ldrb	r2, [r7, #14]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	32ae      	adds	r2, #174	; 0xae
 800a30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00f      	beq.n	800a334 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a314:	7bba      	ldrb	r2, [r7, #14]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a31c:	7bba      	ldrb	r2, [r7, #14]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32ae      	adds	r2, #174	; 0xae
 800a322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a332:	e004      	b.n	800a33e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a338:	e001      	b.n	800a33e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	88db      	ldrh	r3, [r3, #6]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d110      	bne.n	800a368 <USBD_StdItfReq+0xc0>
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10d      	bne.n	800a368 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fdf1 	bl	800af34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a352:	e009      	b.n	800a368 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fd21 	bl	800ad9e <USBD_CtlError>
          break;
 800a35c:	e004      	b.n	800a368 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fd1c 	bl	800ad9e <USBD_CtlError>
          break;
 800a366:	e000      	b.n	800a36a <USBD_StdItfReq+0xc2>
          break;
 800a368:	bf00      	nop
      }
      break;
 800a36a:	e004      	b.n	800a376 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fd15 	bl	800ad9e <USBD_CtlError>
      break;
 800a374:	bf00      	nop
  }

  return ret;
 800a376:	7bfb      	ldrb	r3, [r7, #15]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	889b      	ldrh	r3, [r3, #4]
 800a392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a39c:	2b40      	cmp	r3, #64	; 0x40
 800a39e:	d007      	beq.n	800a3b0 <USBD_StdEPReq+0x30>
 800a3a0:	2b40      	cmp	r3, #64	; 0x40
 800a3a2:	f200 817f 	bhi.w	800a6a4 <USBD_StdEPReq+0x324>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d02a      	beq.n	800a400 <USBD_StdEPReq+0x80>
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	f040 817a 	bne.w	800a6a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fe83 	bl	800a0c0 <USBD_CoreFindEP>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3be:	7b7b      	ldrb	r3, [r7, #13]
 800a3c0:	2bff      	cmp	r3, #255	; 0xff
 800a3c2:	f000 8174 	beq.w	800a6ae <USBD_StdEPReq+0x32e>
 800a3c6:	7b7b      	ldrb	r3, [r7, #13]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f040 8170 	bne.w	800a6ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a3ce:	7b7a      	ldrb	r2, [r7, #13]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a3d6:	7b7a      	ldrb	r2, [r7, #13]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	32ae      	adds	r2, #174	; 0xae
 800a3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 8163 	beq.w	800a6ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a3e8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	32ae      	adds	r2, #174	; 0xae
 800a3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	4798      	blx	r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3fe:	e156      	b.n	800a6ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	785b      	ldrb	r3, [r3, #1]
 800a404:	2b03      	cmp	r3, #3
 800a406:	d008      	beq.n	800a41a <USBD_StdEPReq+0x9a>
 800a408:	2b03      	cmp	r3, #3
 800a40a:	f300 8145 	bgt.w	800a698 <USBD_StdEPReq+0x318>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 809b 	beq.w	800a54a <USBD_StdEPReq+0x1ca>
 800a414:	2b01      	cmp	r3, #1
 800a416:	d03c      	beq.n	800a492 <USBD_StdEPReq+0x112>
 800a418:	e13e      	b.n	800a698 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d002      	beq.n	800a42c <USBD_StdEPReq+0xac>
 800a426:	2b03      	cmp	r3, #3
 800a428:	d016      	beq.n	800a458 <USBD_StdEPReq+0xd8>
 800a42a:	e02c      	b.n	800a486 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00d      	beq.n	800a44e <USBD_StdEPReq+0xce>
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b80      	cmp	r3, #128	; 0x80
 800a436:	d00a      	beq.n	800a44e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f003 ffad 	bl	800e39c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a442:	2180      	movs	r1, #128	; 0x80
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f003 ffa9 	bl	800e39c <USBD_LL_StallEP>
 800a44a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a44c:	e020      	b.n	800a490 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fca4 	bl	800ad9e <USBD_CtlError>
              break;
 800a456:	e01b      	b.n	800a490 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	885b      	ldrh	r3, [r3, #2]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10e      	bne.n	800a47e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <USBD_StdEPReq+0xfe>
 800a466:	7bbb      	ldrb	r3, [r7, #14]
 800a468:	2b80      	cmp	r3, #128	; 0x80
 800a46a:	d008      	beq.n	800a47e <USBD_StdEPReq+0xfe>
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	88db      	ldrh	r3, [r3, #6]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a474:	7bbb      	ldrb	r3, [r7, #14]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f003 ff8f 	bl	800e39c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fd58 	bl	800af34 <USBD_CtlSendStatus>

              break;
 800a484:	e004      	b.n	800a490 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fc88 	bl	800ad9e <USBD_CtlError>
              break;
 800a48e:	bf00      	nop
          }
          break;
 800a490:	e107      	b.n	800a6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d002      	beq.n	800a4a4 <USBD_StdEPReq+0x124>
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d016      	beq.n	800a4d0 <USBD_StdEPReq+0x150>
 800a4a2:	e04b      	b.n	800a53c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00d      	beq.n	800a4c6 <USBD_StdEPReq+0x146>
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	2b80      	cmp	r3, #128	; 0x80
 800a4ae:	d00a      	beq.n	800a4c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f003 ff71 	bl	800e39c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4ba:	2180      	movs	r1, #128	; 0x80
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f003 ff6d 	bl	800e39c <USBD_LL_StallEP>
 800a4c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4c4:	e040      	b.n	800a548 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fc68 	bl	800ad9e <USBD_CtlError>
              break;
 800a4ce:	e03b      	b.n	800a548 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	885b      	ldrh	r3, [r3, #2]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d136      	bne.n	800a546 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f003 ff77 	bl	800e3da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fd21 	bl	800af34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff fde2 	bl	800a0c0 <USBD_CoreFindEP>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a500:	7b7b      	ldrb	r3, [r7, #13]
 800a502:	2bff      	cmp	r3, #255	; 0xff
 800a504:	d01f      	beq.n	800a546 <USBD_StdEPReq+0x1c6>
 800a506:	7b7b      	ldrb	r3, [r7, #13]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d11c      	bne.n	800a546 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a50c:	7b7a      	ldrb	r2, [r7, #13]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a514:	7b7a      	ldrb	r2, [r7, #13]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	32ae      	adds	r2, #174	; 0xae
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d010      	beq.n	800a546 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a524:	7b7a      	ldrb	r2, [r7, #13]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32ae      	adds	r2, #174	; 0xae
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a53a:	e004      	b.n	800a546 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fc2d 	bl	800ad9e <USBD_CtlError>
              break;
 800a544:	e000      	b.n	800a548 <USBD_StdEPReq+0x1c8>
              break;
 800a546:	bf00      	nop
          }
          break;
 800a548:	e0ab      	b.n	800a6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d002      	beq.n	800a55c <USBD_StdEPReq+0x1dc>
 800a556:	2b03      	cmp	r3, #3
 800a558:	d032      	beq.n	800a5c0 <USBD_StdEPReq+0x240>
 800a55a:	e097      	b.n	800a68c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <USBD_StdEPReq+0x1f2>
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d004      	beq.n	800a572 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fc17 	bl	800ad9e <USBD_CtlError>
                break;
 800a570:	e091      	b.n	800a696 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a576:	2b00      	cmp	r3, #0
 800a578:	da0b      	bge.n	800a592 <USBD_StdEPReq+0x212>
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	3310      	adds	r3, #16
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	3304      	adds	r3, #4
 800a590:	e00b      	b.n	800a5aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a598:	4613      	mov	r3, r2
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fc61 	bl	800ae80 <USBD_CtlSendData>
              break;
 800a5be:	e06a      	b.n	800a696 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	da11      	bge.n	800a5ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	f003 020f 	and.w	r2, r3, #15
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	3324      	adds	r3, #36	; 0x24
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d117      	bne.n	800a612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fbda 	bl	800ad9e <USBD_CtlError>
                  break;
 800a5ea:	e054      	b.n	800a696 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	f003 020f 	and.w	r2, r3, #15
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fbc7 	bl	800ad9e <USBD_CtlError>
                  break;
 800a610:	e041      	b.n	800a696 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a616:	2b00      	cmp	r3, #0
 800a618:	da0b      	bge.n	800a632 <USBD_StdEPReq+0x2b2>
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	3310      	adds	r3, #16
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	4413      	add	r3, r2
 800a62e:	3304      	adds	r3, #4
 800a630:	e00b      	b.n	800a64a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	4413      	add	r3, r2
 800a648:	3304      	adds	r3, #4
 800a64a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <USBD_StdEPReq+0x2d8>
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	2b80      	cmp	r3, #128	; 0x80
 800a656:	d103      	bne.n	800a660 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e00e      	b.n	800a67e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f003 fed7 	bl	800e418 <USBD_LL_IsStallEP>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2201      	movs	r2, #1
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	e002      	b.n	800a67e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2202      	movs	r2, #2
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fbfb 	bl	800ae80 <USBD_CtlSendData>
              break;
 800a68a:	e004      	b.n	800a696 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fb85 	bl	800ad9e <USBD_CtlError>
              break;
 800a694:	bf00      	nop
          }
          break;
 800a696:	e004      	b.n	800a6a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fb7f 	bl	800ad9e <USBD_CtlError>
          break;
 800a6a0:	bf00      	nop
      }
      break;
 800a6a2:	e005      	b.n	800a6b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fb79 	bl	800ad9e <USBD_CtlError>
      break;
 800a6ac:	e000      	b.n	800a6b0 <USBD_StdEPReq+0x330>
      break;
 800a6ae:	bf00      	nop
  }

  return ret;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	885b      	ldrh	r3, [r3, #2]
 800a6d6:	0a1b      	lsrs	r3, r3, #8
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	2b0e      	cmp	r3, #14
 800a6de:	f200 8152 	bhi.w	800a986 <USBD_GetDescriptor+0x2ca>
 800a6e2:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <USBD_GetDescriptor+0x2c>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a759 	.word	0x0800a759
 800a6ec:	0800a771 	.word	0x0800a771
 800a6f0:	0800a7b1 	.word	0x0800a7b1
 800a6f4:	0800a987 	.word	0x0800a987
 800a6f8:	0800a987 	.word	0x0800a987
 800a6fc:	0800a927 	.word	0x0800a927
 800a700:	0800a953 	.word	0x0800a953
 800a704:	0800a987 	.word	0x0800a987
 800a708:	0800a987 	.word	0x0800a987
 800a70c:	0800a987 	.word	0x0800a987
 800a710:	0800a987 	.word	0x0800a987
 800a714:	0800a987 	.word	0x0800a987
 800a718:	0800a987 	.word	0x0800a987
 800a71c:	0800a987 	.word	0x0800a987
 800a720:	0800a725 	.word	0x0800a725
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	7c12      	ldrb	r2, [r2, #16]
 800a73c:	f107 0108 	add.w	r1, r7, #8
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a746:	e126      	b.n	800a996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fb27 	bl	800ad9e <USBD_CtlError>
        err++;
 800a750:	7afb      	ldrb	r3, [r7, #11]
 800a752:	3301      	adds	r3, #1
 800a754:	72fb      	strb	r3, [r7, #11]
      break;
 800a756:	e11e      	b.n	800a996 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	7c12      	ldrb	r2, [r2, #16]
 800a764:	f107 0108 	add.w	r1, r7, #8
 800a768:	4610      	mov	r0, r2
 800a76a:	4798      	blx	r3
 800a76c:	60f8      	str	r0, [r7, #12]
      break;
 800a76e:	e112      	b.n	800a996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	7c1b      	ldrb	r3, [r3, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10d      	bne.n	800a794 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a780:	f107 0208 	add.w	r2, r7, #8
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3
 800a788:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	2202      	movs	r2, #2
 800a790:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a792:	e100      	b.n	800a996 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	f107 0208 	add.w	r2, r7, #8
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
 800a7a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	701a      	strb	r2, [r3, #0]
      break;
 800a7ae:	e0f2      	b.n	800a996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	885b      	ldrh	r3, [r3, #2]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b05      	cmp	r3, #5
 800a7b8:	f200 80ac 	bhi.w	800a914 <USBD_GetDescriptor+0x258>
 800a7bc:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <USBD_GetDescriptor+0x108>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a7dd 	.word	0x0800a7dd
 800a7c8:	0800a811 	.word	0x0800a811
 800a7cc:	0800a845 	.word	0x0800a845
 800a7d0:	0800a879 	.word	0x0800a879
 800a7d4:	0800a8ad 	.word	0x0800a8ad
 800a7d8:	0800a8e1 	.word	0x0800a8e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	7c12      	ldrb	r2, [r2, #16]
 800a7f4:	f107 0108 	add.w	r1, r7, #8
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	4798      	blx	r3
 800a7fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fe:	e091      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 facb 	bl	800ad9e <USBD_CtlError>
            err++;
 800a808:	7afb      	ldrb	r3, [r7, #11]
 800a80a:	3301      	adds	r3, #1
 800a80c:	72fb      	strb	r3, [r7, #11]
          break;
 800a80e:	e089      	b.n	800a924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7c12      	ldrb	r2, [r2, #16]
 800a828:	f107 0108 	add.w	r1, r7, #8
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a832:	e077      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fab1 	bl	800ad9e <USBD_CtlError>
            err++;
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	3301      	adds	r3, #1
 800a840:	72fb      	strb	r3, [r7, #11]
          break;
 800a842:	e06f      	b.n	800a924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	7c12      	ldrb	r2, [r2, #16]
 800a85c:	f107 0108 	add.w	r1, r7, #8
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a866:	e05d      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa97 	bl	800ad9e <USBD_CtlError>
            err++;
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	3301      	adds	r3, #1
 800a874:	72fb      	strb	r3, [r7, #11]
          break;
 800a876:	e055      	b.n	800a924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	7c12      	ldrb	r2, [r2, #16]
 800a890:	f107 0108 	add.w	r1, r7, #8
 800a894:	4610      	mov	r0, r2
 800a896:	4798      	blx	r3
 800a898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a89a:	e043      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fa7d 	bl	800ad9e <USBD_CtlError>
            err++;
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8aa:	e03b      	b.n	800a924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7c12      	ldrb	r2, [r2, #16]
 800a8c4:	f107 0108 	add.w	r1, r7, #8
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ce:	e029      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa63 	bl	800ad9e <USBD_CtlError>
            err++;
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8de:	e021      	b.n	800a924 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7c12      	ldrb	r2, [r2, #16]
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a902:	e00f      	b.n	800a924 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa49 	bl	800ad9e <USBD_CtlError>
            err++;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	3301      	adds	r3, #1
 800a910:	72fb      	strb	r3, [r7, #11]
          break;
 800a912:	e007      	b.n	800a924 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa41 	bl	800ad9e <USBD_CtlError>
          err++;
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	3301      	adds	r3, #1
 800a920:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a922:	bf00      	nop
      }
      break;
 800a924:	e037      	b.n	800a996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	7c1b      	ldrb	r3, [r3, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	f107 0208 	add.w	r2, r7, #8
 800a93a:	4610      	mov	r0, r2
 800a93c:	4798      	blx	r3
 800a93e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a940:	e029      	b.n	800a996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa2a 	bl	800ad9e <USBD_CtlError>
        err++;
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	3301      	adds	r3, #1
 800a94e:	72fb      	strb	r3, [r7, #11]
      break;
 800a950:	e021      	b.n	800a996 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7c1b      	ldrb	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10d      	bne.n	800a976 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a962:	f107 0208 	add.w	r2, r7, #8
 800a966:	4610      	mov	r0, r2
 800a968:	4798      	blx	r3
 800a96a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	2207      	movs	r2, #7
 800a972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a974:	e00f      	b.n	800a996 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa10 	bl	800ad9e <USBD_CtlError>
        err++;
 800a97e:	7afb      	ldrb	r3, [r7, #11]
 800a980:	3301      	adds	r3, #1
 800a982:	72fb      	strb	r3, [r7, #11]
      break;
 800a984:	e007      	b.n	800a996 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa08 	bl	800ad9e <USBD_CtlError>
      err++;
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	3301      	adds	r3, #1
 800a992:	72fb      	strb	r3, [r7, #11]
      break;
 800a994:	bf00      	nop
  }

  if (err != 0U)
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d11e      	bne.n	800a9da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	88db      	ldrh	r3, [r3, #6]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d016      	beq.n	800a9d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a9a4:	893b      	ldrh	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	88da      	ldrh	r2, [r3, #6]
 800a9ae:	893b      	ldrh	r3, [r7, #8]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	bf28      	it	cs
 800a9b4:	4613      	movcs	r3, r2
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9ba:	893b      	ldrh	r3, [r7, #8]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa5d 	bl	800ae80 <USBD_CtlSendData>
 800a9c6:	e009      	b.n	800a9dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f9e7 	bl	800ad9e <USBD_CtlError>
 800a9d0:	e004      	b.n	800a9dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 faae 	bl	800af34 <USBD_CtlSendStatus>
 800a9d8:	e000      	b.n	800a9dc <USBD_GetDescriptor+0x320>
    return;
 800a9da:	bf00      	nop
  }
}
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop

0800a9e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	889b      	ldrh	r3, [r3, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d131      	bne.n	800aa5a <USBD_SetAddress+0x76>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	88db      	ldrh	r3, [r3, #6]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d12d      	bne.n	800aa5a <USBD_SetAddress+0x76>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	2b7f      	cmp	r3, #127	; 0x7f
 800aa04:	d829      	bhi.n	800aa5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	885b      	ldrh	r3, [r3, #2]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d104      	bne.n	800aa28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f9bc 	bl	800ad9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa26:	e01d      	b.n	800aa64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7bfa      	ldrb	r2, [r7, #15]
 800aa2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f003 fd1b 	bl	800e470 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fa7a 	bl	800af34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d004      	beq.n	800aa50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4e:	e009      	b.n	800aa64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa58:	e004      	b.n	800aa64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f99e 	bl	800ad9e <USBD_CtlError>
  }
}
 800aa62:	bf00      	nop
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	885b      	ldrh	r3, [r3, #2]
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	4b4e      	ldr	r3, [pc, #312]	; (800abbc <USBD_SetConfig+0x150>)
 800aa82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa84:	4b4d      	ldr	r3, [pc, #308]	; (800abbc <USBD_SetConfig+0x150>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d905      	bls.n	800aa98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f985 	bl	800ad9e <USBD_CtlError>
    return USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e08c      	b.n	800abb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d002      	beq.n	800aaaa <USBD_SetConfig+0x3e>
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d029      	beq.n	800aafc <USBD_SetConfig+0x90>
 800aaa8:	e075      	b.n	800ab96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aaaa:	4b44      	ldr	r3, [pc, #272]	; (800abbc <USBD_SetConfig+0x150>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d020      	beq.n	800aaf4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aab2:	4b42      	ldr	r3, [pc, #264]	; (800abbc <USBD_SetConfig+0x150>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aabc:	4b3f      	ldr	r3, [pc, #252]	; (800abbc <USBD_SetConfig+0x150>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7fe ffbd 	bl	8009a42 <USBD_SetClassConfig>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d008      	beq.n	800aae4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f962 	bl	800ad9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aae2:	e065      	b.n	800abb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fa25 	bl	800af34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2203      	movs	r2, #3
 800aaee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aaf2:	e05d      	b.n	800abb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa1d 	bl	800af34 <USBD_CtlSendStatus>
      break;
 800aafa:	e059      	b.n	800abb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aafc:	4b2f      	ldr	r3, [pc, #188]	; (800abbc <USBD_SetConfig+0x150>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d112      	bne.n	800ab2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab0c:	4b2b      	ldr	r3, [pc, #172]	; (800abbc <USBD_SetConfig+0x150>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab16:	4b29      	ldr	r3, [pc, #164]	; (800abbc <USBD_SetConfig+0x150>)
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7fe ffac 	bl	8009a7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fa06 	bl	800af34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab28:	e042      	b.n	800abb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab2a:	4b24      	ldr	r3, [pc, #144]	; (800abbc <USBD_SetConfig+0x150>)
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d02a      	beq.n	800ab8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7fe ff9a 	bl	8009a7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab46:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <USBD_SetConfig+0x150>)
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab50:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <USBD_SetConfig+0x150>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fe ff73 	bl	8009a42 <USBD_SetClassConfig>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00f      	beq.n	800ab86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f918 	bl	800ad9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fe ff7f 	bl	8009a7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab84:	e014      	b.n	800abb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9d4 	bl	800af34 <USBD_CtlSendStatus>
      break;
 800ab8c:	e010      	b.n	800abb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f9d0 	bl	800af34 <USBD_CtlSendStatus>
      break;
 800ab94:	e00c      	b.n	800abb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f900 	bl	800ad9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab9e:	4b07      	ldr	r3, [pc, #28]	; (800abbc <USBD_SetConfig+0x150>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7fe ff68 	bl	8009a7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
      break;
 800abae:	bf00      	nop
  }

  return ret;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	200003e4 	.word	0x200003e4

0800abc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d004      	beq.n	800abdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f8e2 	bl	800ad9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abda:	e023      	b.n	800ac24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	dc02      	bgt.n	800abee <USBD_GetConfig+0x2e>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dc03      	bgt.n	800abf4 <USBD_GetConfig+0x34>
 800abec:	e015      	b.n	800ac1a <USBD_GetConfig+0x5a>
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d00b      	beq.n	800ac0a <USBD_GetConfig+0x4a>
 800abf2:	e012      	b.n	800ac1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3308      	adds	r3, #8
 800abfe:	2201      	movs	r2, #1
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f93c 	bl	800ae80 <USBD_CtlSendData>
        break;
 800ac08:	e00c      	b.n	800ac24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f934 	bl	800ae80 <USBD_CtlSendData>
        break;
 800ac18:	e004      	b.n	800ac24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f8be 	bl	800ad9e <USBD_CtlError>
        break;
 800ac22:	bf00      	nop
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d81e      	bhi.n	800ac82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	88db      	ldrh	r3, [r3, #6]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d004      	beq.n	800ac56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f8a5 	bl	800ad9e <USBD_CtlError>
        break;
 800ac54:	e01a      	b.n	800ac8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	f043 0202 	orr.w	r2, r3, #2
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	330c      	adds	r3, #12
 800ac76:	2202      	movs	r2, #2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f900 	bl	800ae80 <USBD_CtlSendData>
      break;
 800ac80:	e004      	b.n	800ac8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f88a 	bl	800ad9e <USBD_CtlError>
      break;
 800ac8a:	bf00      	nop
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	885b      	ldrh	r3, [r3, #2]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d107      	bne.n	800acb6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f940 	bl	800af34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acb4:	e013      	b.n	800acde <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d10b      	bne.n	800acd6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	889b      	ldrh	r3, [r3, #4]
 800acc2:	0a1b      	lsrs	r3, r3, #8
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f930 	bl	800af34 <USBD_CtlSendStatus>
}
 800acd4:	e003      	b.n	800acde <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f860 	bl	800ad9e <USBD_CtlError>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	3b01      	subs	r3, #1
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d80b      	bhi.n	800ad16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d10c      	bne.n	800ad20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f910 	bl	800af34 <USBD_CtlSendStatus>
      }
      break;
 800ad14:	e004      	b.n	800ad20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f840 	bl	800ad9e <USBD_CtlError>
      break;
 800ad1e:	e000      	b.n	800ad22 <USBD_ClrFeature+0x3c>
      break;
 800ad20:	bf00      	nop
  }
}
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	781a      	ldrb	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3301      	adds	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff fa17 	bl	800a188 <SWAPBYTE>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7ff fa0a 	bl	800a188 <SWAPBYTE>
 800ad74:	4603      	mov	r3, r0
 800ad76:	461a      	mov	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3301      	adds	r3, #1
 800ad86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff f9fd 	bl	800a188 <SWAPBYTE>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	461a      	mov	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	80da      	strh	r2, [r3, #6]
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f003 faf6 	bl	800e39c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adb0:	2100      	movs	r1, #0
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f003 faf2 	bl	800e39c <USBD_LL_StallEP>
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adcc:	2300      	movs	r3, #0
 800adce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d036      	beq.n	800ae44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f000 f836 	bl	800ae4c <USBD_GetLen>
 800ade0:	4603      	mov	r3, r0
 800ade2:	3301      	adds	r3, #1
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	b29a      	uxth	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	4413      	add	r3, r2
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7812      	ldrb	r2, [r2, #0]
 800adf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	3301      	adds	r3, #1
 800adfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	4413      	add	r3, r2
 800ae06:	2203      	movs	r2, #3
 800ae08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae10:	e013      	b.n	800ae3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	4413      	add	r3, r2
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	7812      	ldrb	r2, [r2, #0]
 800ae1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3301      	adds	r3, #1
 800ae22:	613b      	str	r3, [r7, #16]
    idx++;
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	3301      	adds	r3, #1
 800ae28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	4413      	add	r3, r2
 800ae30:	2200      	movs	r2, #0
 800ae32:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	3301      	adds	r3, #1
 800ae38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e7      	bne.n	800ae12 <USBD_GetString+0x52>
 800ae42:	e000      	b.n	800ae46 <USBD_GetString+0x86>
    return;
 800ae44:	bf00      	nop
  }
}
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae5c:	e005      	b.n	800ae6a <USBD_GetLen+0x1e>
  {
    len++;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	3301      	adds	r3, #1
 800ae62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	3301      	adds	r3, #1
 800ae68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1f5      	bne.n	800ae5e <USBD_GetLen+0x12>
  }

  return len;
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	2100      	movs	r1, #0
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f003 fb01 	bl	800e4ae <USBD_LL_Transmit>

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	2100      	movs	r1, #0
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f003 faf0 	bl	800e4ae <USBD_LL_Transmit>

  return USBD_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2203      	movs	r2, #3
 800aee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	2100      	movs	r1, #0
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f003 faf4 	bl	800e4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	2100      	movs	r1, #0
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f003 fae3 	bl	800e4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2204      	movs	r2, #4
 800af40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af44:	2300      	movs	r3, #0
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f003 faaf 	bl	800e4ae <USBD_LL_Transmit>

  return USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2205      	movs	r2, #5
 800af66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af6a:	2300      	movs	r3, #0
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f003 fabd 	bl	800e4f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800af84:	bf00      	nop
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
	...

0800af90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af96:	f3ef 8305 	mrs	r3, IPSR
 800af9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10f      	bne.n	800afc2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa2:	f3ef 8310 	mrs	r3, PRIMASK
 800afa6:	607b      	str	r3, [r7, #4]
  return(result);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800afae:	f3ef 8311 	mrs	r3, BASEPRI
 800afb2:	603b      	str	r3, [r7, #0]
  return(result);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <osKernelInitialize+0x3a>
 800afba:	4b0e      	ldr	r3, [pc, #56]	; (800aff4 <osKernelInitialize+0x64>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d103      	bne.n	800afca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800afc2:	f06f 0305 	mvn.w	r3, #5
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e00c      	b.n	800afe4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afca:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <osKernelInitialize+0x64>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d105      	bne.n	800afde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afd2:	4b08      	ldr	r3, [pc, #32]	; (800aff4 <osKernelInitialize+0x64>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e002      	b.n	800afe4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800afde:	f04f 33ff 	mov.w	r3, #4294967295
 800afe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800afe4:	68fb      	ldr	r3, [r7, #12]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	200003e8 	.word	0x200003e8

0800aff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800affe:	f3ef 8305 	mrs	r3, IPSR
 800b002:	60bb      	str	r3, [r7, #8]
  return(result);
 800b004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10f      	bne.n	800b02a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b00a:	f3ef 8310 	mrs	r3, PRIMASK
 800b00e:	607b      	str	r3, [r7, #4]
  return(result);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d105      	bne.n	800b022 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b016:	f3ef 8311 	mrs	r3, BASEPRI
 800b01a:	603b      	str	r3, [r7, #0]
  return(result);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <osKernelStart+0x3a>
 800b022:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <osKernelStart+0x68>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d103      	bne.n	800b032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b02a:	f06f 0305 	mvn.w	r3, #5
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e010      	b.n	800b054 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <osKernelStart+0x68>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d109      	bne.n	800b04e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b03a:	f7ff ffa1 	bl	800af80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b03e:	4b08      	ldr	r3, [pc, #32]	; (800b060 <osKernelStart+0x68>)
 800b040:	2202      	movs	r2, #2
 800b042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b044:	f001 f8b4 	bl	800c1b0 <vTaskStartScheduler>
      stat = osOK;
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	e002      	b.n	800b054 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b04e:	f04f 33ff 	mov.w	r3, #4294967295
 800b052:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b054:	68fb      	ldr	r3, [r7, #12]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200003e8 	.word	0x200003e8

0800b064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b064:	b580      	push	{r7, lr}
 800b066:	b090      	sub	sp, #64	; 0x40
 800b068:	af04      	add	r7, sp, #16
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b074:	f3ef 8305 	mrs	r3, IPSR
 800b078:	61fb      	str	r3, [r7, #28]
  return(result);
 800b07a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f040 808f 	bne.w	800b1a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b082:	f3ef 8310 	mrs	r3, PRIMASK
 800b086:	61bb      	str	r3, [r7, #24]
  return(result);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d105      	bne.n	800b09a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b08e:	f3ef 8311 	mrs	r3, BASEPRI
 800b092:	617b      	str	r3, [r7, #20]
  return(result);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <osThreadNew+0x3e>
 800b09a:	4b44      	ldr	r3, [pc, #272]	; (800b1ac <osThreadNew+0x148>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d07e      	beq.n	800b1a0 <osThreadNew+0x13c>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d07b      	beq.n	800b1a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b0a8:	2380      	movs	r3, #128	; 0x80
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b0ac:	2318      	movs	r3, #24
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d045      	beq.n	800b14c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <osThreadNew+0x6a>
        name = attr->name;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d008      	beq.n	800b0f4 <osThreadNew+0x90>
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	2b38      	cmp	r3, #56	; 0x38
 800b0e6:	d805      	bhi.n	800b0f4 <osThreadNew+0x90>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <osThreadNew+0x94>
        return (NULL);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e054      	b.n	800b1a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00e      	beq.n	800b12e <osThreadNew+0xca>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	2b5b      	cmp	r3, #91	; 0x5b
 800b116:	d90a      	bls.n	800b12e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d006      	beq.n	800b12e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <osThreadNew+0xca>
        mem = 1;
 800b128:	2301      	movs	r3, #1
 800b12a:	623b      	str	r3, [r7, #32]
 800b12c:	e010      	b.n	800b150 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10c      	bne.n	800b150 <osThreadNew+0xec>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d108      	bne.n	800b150 <osThreadNew+0xec>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <osThreadNew+0xec>
          mem = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	623b      	str	r3, [r7, #32]
 800b14a:	e001      	b.n	800b150 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d110      	bne.n	800b178 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b15e:	9202      	str	r2, [sp, #8]
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 fe3f 	bl	800bdf0 <xTaskCreateStatic>
 800b172:	4603      	mov	r3, r0
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	e013      	b.n	800b1a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d110      	bne.n	800b1a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	b29a      	uxth	r2, r3
 800b182:	f107 0310 	add.w	r3, r7, #16
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 fe90 	bl	800beb6 <xTaskCreate>
 800b196:	4603      	mov	r3, r0
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d001      	beq.n	800b1a0 <osThreadNew+0x13c>
          hTask = NULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1a0:	693b      	ldr	r3, [r7, #16]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3730      	adds	r7, #48	; 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200003e8 	.word	0x200003e8

0800b1b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1b8:	f3ef 8305 	mrs	r3, IPSR
 800b1bc:	613b      	str	r3, [r7, #16]
  return(result);
 800b1be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10f      	bne.n	800b1e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d105      	bne.n	800b1dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b1d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b1d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <osDelay+0x3c>
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <osDelay+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d103      	bne.n	800b1ec <osDelay+0x3c>
    stat = osErrorISR;
 800b1e4:	f06f 0305 	mvn.w	r3, #5
 800b1e8:	617b      	str	r3, [r7, #20]
 800b1ea:	e007      	b.n	800b1fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <osDelay+0x4c>
      vTaskDelay(ticks);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 ffa4 	bl	800c144 <vTaskDelay>
    }
  }

  return (stat);
 800b1fc:	697b      	ldr	r3, [r7, #20]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200003e8 	.word	0x200003e8

0800b20c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4a07      	ldr	r2, [pc, #28]	; (800b238 <vApplicationGetIdleTaskMemory+0x2c>)
 800b21c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4a06      	ldr	r2, [pc, #24]	; (800b23c <vApplicationGetIdleTaskMemory+0x30>)
 800b222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2280      	movs	r2, #128	; 0x80
 800b228:	601a      	str	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	200003ec 	.word	0x200003ec
 800b23c:	20000448 	.word	0x20000448

0800b240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	4a07      	ldr	r2, [pc, #28]	; (800b26c <vApplicationGetTimerTaskMemory+0x2c>)
 800b250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4a06      	ldr	r2, [pc, #24]	; (800b270 <vApplicationGetTimerTaskMemory+0x30>)
 800b256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b25e:	601a      	str	r2, [r3, #0]
}
 800b260:	bf00      	nop
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	20000648 	.word	0x20000648
 800b270:	200006a4 	.word	0x200006a4

0800b274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f103 0208 	add.w	r2, r3, #8
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f04f 32ff 	mov.w	r2, #4294967295
 800b28c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f103 0208 	add.w	r2, r3, #8
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f103 0208 	add.w	r2, r3, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32c:	d103      	bne.n	800b336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e00c      	b.n	800b350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3308      	adds	r3, #8
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	e002      	b.n	800b344 <vListInsert+0x2e>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d2f6      	bcs.n	800b33e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	601a      	str	r2, [r3, #0]
}
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	6892      	ldr	r2, [r2, #8]
 800b39e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6852      	ldr	r2, [r2, #4]
 800b3a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d103      	bne.n	800b3bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	1e5a      	subs	r2, r3, #1
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10c      	bne.n	800b40a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	b672      	cpsid	i
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	b662      	cpsie	i
 800b404:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b40a:	f002 f87f 	bl	800d50c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b416:	68f9      	ldr	r1, [r7, #12]
 800b418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	441a      	add	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43a:	3b01      	subs	r3, #1
 800b43c:	68f9      	ldr	r1, [r7, #12]
 800b43e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b440:	fb01 f303 	mul.w	r3, r1, r3
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	22ff      	movs	r2, #255	; 0xff
 800b44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	22ff      	movs	r2, #255	; 0xff
 800b456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d114      	bne.n	800b48a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01a      	beq.n	800b49e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3310      	adds	r3, #16
 800b46c:	4618      	mov	r0, r3
 800b46e:	f001 f937 	bl	800c6e0 <xTaskRemoveFromEventList>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d012      	beq.n	800b49e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b478:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <xQueueGenericReset+0xd0>)
 800b47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	e009      	b.n	800b49e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3310      	adds	r3, #16
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fef0 	bl	800b274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3324      	adds	r3, #36	; 0x24
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff feeb 	bl	800b274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b49e:	f002 f869 	bl	800d574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4a2:	2301      	movs	r3, #1
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	e000ed04 	.word	0xe000ed04

0800b4b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08e      	sub	sp, #56	; 0x38
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10c      	bne.n	800b4de <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	b672      	cpsid	i
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	b662      	cpsie	i
 800b4d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10c      	bne.n	800b4fe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	b672      	cpsid	i
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	b662      	cpsie	i
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <xQueueGenericCreateStatic+0x5a>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <xQueueGenericCreateStatic+0x5e>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e000      	b.n	800b510 <xQueueGenericCreateStatic+0x60>
 800b50e:	2300      	movs	r3, #0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10c      	bne.n	800b52e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	b672      	cpsid	i
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	b662      	cpsie	i
 800b528:	623b      	str	r3, [r7, #32]
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <xQueueGenericCreateStatic+0x8a>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <xQueueGenericCreateStatic+0x8e>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueGenericCreateStatic+0x90>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10c      	bne.n	800b55e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	61fb      	str	r3, [r7, #28]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b55e:	2350      	movs	r3, #80	; 0x50
 800b560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b50      	cmp	r3, #80	; 0x50
 800b566:	d00c      	beq.n	800b582 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	b672      	cpsid	i
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	b662      	cpsie	i
 800b57c:	61bb      	str	r3, [r7, #24]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b582:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	68b9      	ldr	r1, [r7, #8]
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f805 	bl	800b5b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3730      	adds	r7, #48	; 0x30
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d103      	bne.n	800b5d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	69b8      	ldr	r0, [r7, #24]
 800b5e6:	f7ff fef9 	bl	800b3dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	78fa      	ldrb	r2, [r7, #3]
 800b5ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	; 0x38
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10c      	bne.n	800b632 <xQueueGenericSend+0x36>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	b672      	cpsid	i
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	b662      	cpsie	i
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <xQueueGenericSend+0x44>
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <xQueueGenericSend+0x48>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <xQueueGenericSend+0x4a>
 800b644:	2300      	movs	r3, #0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <xQueueGenericSend+0x68>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	b672      	cpsid	i
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	b662      	cpsie	i
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d103      	bne.n	800b672 <xQueueGenericSend+0x76>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <xQueueGenericSend+0x7a>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueGenericSend+0x7c>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10c      	bne.n	800b696 <xQueueGenericSend+0x9a>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	b672      	cpsid	i
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	b662      	cpsie	i
 800b690:	623b      	str	r3, [r7, #32]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b696:	f001 f9e9 	bl	800ca6c <xTaskGetSchedulerState>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <xQueueGenericSend+0xaa>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d101      	bne.n	800b6aa <xQueueGenericSend+0xae>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e000      	b.n	800b6ac <xQueueGenericSend+0xb0>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10c      	bne.n	800b6ca <xQueueGenericSend+0xce>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	b672      	cpsid	i
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	b662      	cpsie	i
 800b6c4:	61fb      	str	r3, [r7, #28]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6ca:	f001 ff1f 	bl	800d50c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d302      	bcc.n	800b6e0 <xQueueGenericSend+0xe4>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d129      	bne.n	800b734 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e6:	f000 fa15 	bl	800bb14 <prvCopyDataToQueue>
 800b6ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d010      	beq.n	800b716 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	3324      	adds	r3, #36	; 0x24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fff1 	bl	800c6e0 <xTaskRemoveFromEventList>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d013      	beq.n	800b72c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b704:	4b3f      	ldr	r3, [pc, #252]	; (800b804 <xQueueGenericSend+0x208>)
 800b706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	e00a      	b.n	800b72c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d007      	beq.n	800b72c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b71c:	4b39      	ldr	r3, [pc, #228]	; (800b804 <xQueueGenericSend+0x208>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b72c:	f001 ff22 	bl	800d574 <vPortExitCritical>
				return pdPASS;
 800b730:	2301      	movs	r3, #1
 800b732:	e063      	b.n	800b7fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d103      	bne.n	800b742 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b73a:	f001 ff1b 	bl	800d574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	e05c      	b.n	800b7fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b748:	f107 0314 	add.w	r3, r7, #20
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 f82d 	bl	800c7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b752:	2301      	movs	r3, #1
 800b754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b756:	f001 ff0d 	bl	800d574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b75a:	f000 fd93 	bl	800c284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b75e:	f001 fed5 	bl	800d50c <vPortEnterCritical>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <xQueueGenericSend+0x17c>
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b77e:	b25b      	sxtb	r3, r3
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d103      	bne.n	800b78e <xQueueGenericSend+0x192>
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b78e:	f001 fef1 	bl	800d574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b792:	1d3a      	adds	r2, r7, #4
 800b794:	f107 0314 	add.w	r3, r7, #20
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 f81c 	bl	800c7d8 <xTaskCheckForTimeOut>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d124      	bne.n	800b7f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7a8:	f000 faac 	bl	800bd04 <prvIsQueueFull>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	3310      	adds	r3, #16
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 ff3c 	bl	800c638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7c2:	f000 fa37 	bl	800bc34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7c6:	f000 fd6b 	bl	800c2a0 <xTaskResumeAll>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f47f af7c 	bne.w	800b6ca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <xQueueGenericSend+0x208>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	e772      	b.n	800b6ca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7e6:	f000 fa25 	bl	800bc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7ea:	f000 fd59 	bl	800c2a0 <xTaskResumeAll>
 800b7ee:	e76c      	b.n	800b6ca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7f2:	f000 fa1f 	bl	800bc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7f6:	f000 fd53 	bl	800c2a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3738      	adds	r7, #56	; 0x38
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	e000ed04 	.word	0xe000ed04

0800b808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	; 0x38
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10c      	bne.n	800b83a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d103      	bne.n	800b848 <xQueueGenericSendFromISR+0x40>
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <xQueueGenericSendFromISR+0x44>
 800b848:	2301      	movs	r3, #1
 800b84a:	e000      	b.n	800b84e <xQueueGenericSendFromISR+0x46>
 800b84c:	2300      	movs	r3, #0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10c      	bne.n	800b86c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	b672      	cpsid	i
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	b662      	cpsie	i
 800b866:	623b      	str	r3, [r7, #32]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d103      	bne.n	800b87a <xQueueGenericSendFromISR+0x72>
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <xQueueGenericSendFromISR+0x76>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <xQueueGenericSendFromISR+0x78>
 800b87e:	2300      	movs	r3, #0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10c      	bne.n	800b89e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	b672      	cpsid	i
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	b662      	cpsie	i
 800b898:	61fb      	str	r3, [r7, #28]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b89e:	f001 ff1d 	bl	800d6dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	b672      	cpsid	i
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	b662      	cpsie	i
 800b8ba:	61ba      	str	r2, [r7, #24]
 800b8bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d302      	bcc.n	800b8d4 <xQueueGenericSendFromISR+0xcc>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d12c      	bne.n	800b92e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e4:	f000 f916 	bl	800bb14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f0:	d112      	bne.n	800b918 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d016      	beq.n	800b928 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	3324      	adds	r3, #36	; 0x24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 feee 	bl	800c6e0 <xTaskRemoveFromEventList>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00e      	beq.n	800b928 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e007      	b.n	800b928 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b91c:	3301      	adds	r3, #1
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	b25a      	sxtb	r2, r3
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b928:	2301      	movs	r3, #1
 800b92a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b92c:	e001      	b.n	800b932 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	637b      	str	r3, [r7, #52]	; 0x34
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b93c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b940:	4618      	mov	r0, r3
 800b942:	3738      	adds	r7, #56	; 0x38
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08c      	sub	sp, #48	; 0x30
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b954:	2300      	movs	r3, #0
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10c      	bne.n	800b97c <xQueueReceive+0x34>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	623b      	str	r3, [r7, #32]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d103      	bne.n	800b98a <xQueueReceive+0x42>
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <xQueueReceive+0x46>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e000      	b.n	800b990 <xQueueReceive+0x48>
 800b98e:	2300      	movs	r3, #0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10c      	bne.n	800b9ae <xQueueReceive+0x66>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	b672      	cpsid	i
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	b662      	cpsie	i
 800b9a8:	61fb      	str	r3, [r7, #28]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ae:	f001 f85d 	bl	800ca6c <xTaskGetSchedulerState>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <xQueueReceive+0x76>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <xQueueReceive+0x7a>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <xQueueReceive+0x7c>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10c      	bne.n	800b9e2 <xQueueReceive+0x9a>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	b672      	cpsid	i
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	b662      	cpsie	i
 800b9dc:	61bb      	str	r3, [r7, #24]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9e2:	f001 fd93 	bl	800d50c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d01f      	beq.n	800ba32 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f6:	f000 f8f7 	bl	800bbe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00f      	beq.n	800ba2a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fe66 	bl	800c6e0 <xTaskRemoveFromEventList>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba1a:	4b3d      	ldr	r3, [pc, #244]	; (800bb10 <xQueueReceive+0x1c8>)
 800ba1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba2a:	f001 fda3 	bl	800d574 <vPortExitCritical>
				return pdPASS;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e069      	b.n	800bb06 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d103      	bne.n	800ba40 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba38:	f001 fd9c 	bl	800d574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e062      	b.n	800bb06 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba46:	f107 0310 	add.w	r3, r7, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 feae 	bl	800c7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba54:	f001 fd8e 	bl	800d574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba58:	f000 fc14 	bl	800c284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba5c:	f001 fd56 	bl	800d50c <vPortEnterCritical>
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba66:	b25b      	sxtb	r3, r3
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6c:	d103      	bne.n	800ba76 <xQueueReceive+0x12e>
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba7c:	b25b      	sxtb	r3, r3
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba82:	d103      	bne.n	800ba8c <xQueueReceive+0x144>
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba8c:	f001 fd72 	bl	800d574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba90:	1d3a      	adds	r2, r7, #4
 800ba92:	f107 0310 	add.w	r3, r7, #16
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fe9d 	bl	800c7d8 <xTaskCheckForTimeOut>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d123      	bne.n	800baec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa6:	f000 f917 	bl	800bcd8 <prvIsQueueEmpty>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d017      	beq.n	800bae0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	3324      	adds	r3, #36	; 0x24
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	4611      	mov	r1, r2
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fdbd 	bl	800c638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800babe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac0:	f000 f8b8 	bl	800bc34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bac4:	f000 fbec 	bl	800c2a0 <xTaskResumeAll>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d189      	bne.n	800b9e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bace:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xQueueReceive+0x1c8>)
 800bad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	e780      	b.n	800b9e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae2:	f000 f8a7 	bl	800bc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bae6:	f000 fbdb 	bl	800c2a0 <xTaskResumeAll>
 800baea:	e77a      	b.n	800b9e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baee:	f000 f8a1 	bl	800bc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baf2:	f000 fbd5 	bl	800c2a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf8:	f000 f8ee 	bl	800bcd8 <prvIsQueueEmpty>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f43f af6f 	beq.w	800b9e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	; 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10d      	bne.n	800bb4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d14d      	bne.n	800bbd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ffb2 	bl	800caa8 <xTaskPriorityDisinherit>
 800bb44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	609a      	str	r2, [r3, #8]
 800bb4c:	e043      	b.n	800bbd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d119      	bne.n	800bb88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6858      	ldr	r0, [r3, #4]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	f002 fe9a 	bl	800e898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	441a      	add	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d32b      	bcc.n	800bbd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	605a      	str	r2, [r3, #4]
 800bb86:	e026      	b.n	800bbd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	68d8      	ldr	r0, [r3, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	461a      	mov	r2, r3
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	f002 fe80 	bl	800e898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	425b      	negs	r3, r3
 800bba2:	441a      	add	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d207      	bcs.n	800bbc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	425b      	negs	r3, r3
 800bbbe:	441a      	add	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d105      	bne.n	800bbd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d018      	beq.n	800bc2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc02:	441a      	add	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d303      	bcc.n	800bc1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68d9      	ldr	r1, [r3, #12]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc24:	461a      	mov	r2, r3
 800bc26:	6838      	ldr	r0, [r7, #0]
 800bc28:	f002 fe36 	bl	800e898 <memcpy>
	}
}
 800bc2c:	bf00      	nop
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc3c:	f001 fc66 	bl	800d50c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc48:	e011      	b.n	800bc6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d012      	beq.n	800bc78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	3324      	adds	r3, #36	; 0x24
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 fd42 	bl	800c6e0 <xTaskRemoveFromEventList>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc62:	f000 fe1f 	bl	800c8a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dce9      	bgt.n	800bc4a <prvUnlockQueue+0x16>
 800bc76:	e000      	b.n	800bc7a <prvUnlockQueue+0x46>
					break;
 800bc78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	22ff      	movs	r2, #255	; 0xff
 800bc7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc82:	f001 fc77 	bl	800d574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc86:	f001 fc41 	bl	800d50c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc92:	e011      	b.n	800bcb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d012      	beq.n	800bcc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3310      	adds	r3, #16
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fd1d 	bl	800c6e0 <xTaskRemoveFromEventList>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcac:	f000 fdfa 	bl	800c8a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dce9      	bgt.n	800bc94 <prvUnlockQueue+0x60>
 800bcc0:	e000      	b.n	800bcc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	22ff      	movs	r2, #255	; 0xff
 800bcc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bccc:	f001 fc52 	bl	800d574 <vPortExitCritical>
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bce0:	f001 fc14 	bl	800d50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bcec:	2301      	movs	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e001      	b.n	800bcf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcf6:	f001 fc3d 	bl	800d574 <vPortExitCritical>

	return xReturn;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd0c:	f001 fbfe 	bl	800d50c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d102      	bne.n	800bd22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e001      	b.n	800bd26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd26:	f001 fc25 	bl	800d574 <vPortExitCritical>

	return xReturn;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e014      	b.n	800bd6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd44:	4a0f      	ldr	r2, [pc, #60]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10b      	bne.n	800bd68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd50:	490c      	ldr	r1, [pc, #48]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd5a:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	4413      	add	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd66:	e006      	b.n	800bd76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b07      	cmp	r3, #7
 800bd72:	d9e7      	bls.n	800bd44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20000aa4 	.word	0x20000aa4

0800bd88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd98:	f001 fbb8 	bl	800d50c <vPortEnterCritical>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda2:	b25b      	sxtb	r3, r3
 800bda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda8:	d103      	bne.n	800bdb2 <vQueueWaitForMessageRestricted+0x2a>
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb8:	b25b      	sxtb	r3, r3
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbe:	d103      	bne.n	800bdc8 <vQueueWaitForMessageRestricted+0x40>
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdc8:	f001 fbd4 	bl	800d574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d106      	bne.n	800bde2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	3324      	adds	r3, #36	; 0x24
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fc51 	bl	800c684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bde2:	6978      	ldr	r0, [r7, #20]
 800bde4:	f7ff ff26 	bl	800bc34 <prvUnlockQueue>
	}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08e      	sub	sp, #56	; 0x38
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10c      	bne.n	800be1e <xTaskCreateStatic+0x2e>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	b672      	cpsid	i
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	b662      	cpsie	i
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10c      	bne.n	800be3e <xTaskCreateStatic+0x4e>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	b672      	cpsid	i
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	b662      	cpsie	i
 800be38:	61fb      	str	r3, [r7, #28]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be3e:	235c      	movs	r3, #92	; 0x5c
 800be40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	2b5c      	cmp	r3, #92	; 0x5c
 800be46:	d00c      	beq.n	800be62 <xTaskCreateStatic+0x72>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	b672      	cpsid	i
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	b662      	cpsie	i
 800be5c:	61bb      	str	r3, [r7, #24]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	2b00      	cmp	r3, #0
 800be68:	d01e      	beq.n	800bea8 <xTaskCreateStatic+0xb8>
 800be6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01b      	beq.n	800bea8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2202      	movs	r2, #2
 800be7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be82:	2300      	movs	r3, #0
 800be84:	9303      	str	r3, [sp, #12]
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	9302      	str	r3, [sp, #8]
 800be8a:	f107 0314 	add.w	r3, r7, #20
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	68b9      	ldr	r1, [r7, #8]
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 f850 	bl	800bf40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bea2:	f000 f8df 	bl	800c064 <prvAddNewTaskToReadyList>
 800bea6:	e001      	b.n	800beac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800beac:	697b      	ldr	r3, [r7, #20]
	}
 800beae:	4618      	mov	r0, r3
 800beb0:	3728      	adds	r7, #40	; 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b08c      	sub	sp, #48	; 0x30
 800beba:	af04      	add	r7, sp, #16
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	603b      	str	r3, [r7, #0]
 800bec2:	4613      	mov	r3, r2
 800bec4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4618      	mov	r0, r3
 800becc:	f001 fc4a 	bl	800d764 <pvPortMalloc>
 800bed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00e      	beq.n	800bef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bed8:	205c      	movs	r0, #92	; 0x5c
 800beda:	f001 fc43 	bl	800d764 <pvPortMalloc>
 800bede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	631a      	str	r2, [r3, #48]	; 0x30
 800beec:	e005      	b.n	800befa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800beee:	6978      	ldr	r0, [r7, #20]
 800bef0:	f001 fd02 	bl	800d8f8 <vPortFree>
 800bef4:	e001      	b.n	800befa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d017      	beq.n	800bf30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf08:	88fa      	ldrh	r2, [r7, #6]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	9302      	str	r3, [sp, #8]
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 f80e 	bl	800bf40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf24:	69f8      	ldr	r0, [r7, #28]
 800bf26:	f000 f89d 	bl	800c064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	61bb      	str	r3, [r7, #24]
 800bf2e:	e002      	b.n	800bf36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf30:	f04f 33ff 	mov.w	r3, #4294967295
 800bf34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf36:	69bb      	ldr	r3, [r7, #24]
	}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3720      	adds	r7, #32
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	461a      	mov	r2, r3
 800bf58:	21a5      	movs	r1, #165	; 0xa5
 800bf5a:	f002 fc59 	bl	800e810 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bf68:	440b      	add	r3, r1
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f023 0307 	bic.w	r3, r3, #7
 800bf76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	f003 0307 	and.w	r3, r3, #7
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00c      	beq.n	800bf9c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	b672      	cpsid	i
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	b662      	cpsie	i
 800bf96:	617b      	str	r3, [r7, #20]
}
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d01f      	beq.n	800bfe2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
 800bfa6:	e012      	b.n	800bfce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	4413      	add	r3, r2
 800bfae:	7819      	ldrb	r1, [r3, #0]
 800bfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3334      	adds	r3, #52	; 0x34
 800bfb8:	460a      	mov	r2, r1
 800bfba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d006      	beq.n	800bfd6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	61fb      	str	r3, [r7, #28]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	2b0f      	cmp	r3, #15
 800bfd2:	d9e9      	bls.n	800bfa8 <prvInitialiseNewTask+0x68>
 800bfd4:	e000      	b.n	800bfd8 <prvInitialiseNewTask+0x98>
			{
				break;
 800bfd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfe0:	e003      	b.n	800bfea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	2b37      	cmp	r3, #55	; 0x37
 800bfee:	d901      	bls.n	800bff4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bff0:	2337      	movs	r3, #55	; 0x37
 800bff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bffe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	2200      	movs	r2, #0
 800c004:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	3304      	adds	r3, #4
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff f952 	bl	800b2b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c012:	3318      	adds	r3, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff f94d 	bl	800b2b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	2200      	movs	r2, #0
 800c034:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	68f9      	ldr	r1, [r7, #12]
 800c042:	69b8      	ldr	r0, [r7, #24]
 800c044:	f001 f952 	bl	800d2ec <pxPortInitialiseStack>
 800c048:	4602      	mov	r2, r0
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c05a:	bf00      	nop
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c06c:	f001 fa4e 	bl	800d50c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c070:	4b2d      	ldr	r3, [pc, #180]	; (800c128 <prvAddNewTaskToReadyList+0xc4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3301      	adds	r3, #1
 800c076:	4a2c      	ldr	r2, [pc, #176]	; (800c128 <prvAddNewTaskToReadyList+0xc4>)
 800c078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c07a:	4b2c      	ldr	r3, [pc, #176]	; (800c12c <prvAddNewTaskToReadyList+0xc8>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c082:	4a2a      	ldr	r2, [pc, #168]	; (800c12c <prvAddNewTaskToReadyList+0xc8>)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c088:	4b27      	ldr	r3, [pc, #156]	; (800c128 <prvAddNewTaskToReadyList+0xc4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d110      	bne.n	800c0b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c090:	f000 fc2c 	bl	800c8ec <prvInitialiseTaskLists>
 800c094:	e00d      	b.n	800c0b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c096:	4b26      	ldr	r3, [pc, #152]	; (800c130 <prvAddNewTaskToReadyList+0xcc>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d109      	bne.n	800c0b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c09e:	4b23      	ldr	r3, [pc, #140]	; (800c12c <prvAddNewTaskToReadyList+0xc8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d802      	bhi.n	800c0b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0ac:	4a1f      	ldr	r2, [pc, #124]	; (800c12c <prvAddNewTaskToReadyList+0xc8>)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0b2:	4b20      	ldr	r3, [pc, #128]	; (800c134 <prvAddNewTaskToReadyList+0xd0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	4a1e      	ldr	r2, [pc, #120]	; (800c134 <prvAddNewTaskToReadyList+0xd0>)
 800c0ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0bc:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <prvAddNewTaskToReadyList+0xd0>)
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c8:	4b1b      	ldr	r3, [pc, #108]	; (800c138 <prvAddNewTaskToReadyList+0xd4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d903      	bls.n	800c0d8 <prvAddNewTaskToReadyList+0x74>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	4a18      	ldr	r2, [pc, #96]	; (800c138 <prvAddNewTaskToReadyList+0xd4>)
 800c0d6:	6013      	str	r3, [r2, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4a15      	ldr	r2, [pc, #84]	; (800c13c <prvAddNewTaskToReadyList+0xd8>)
 800c0e6:	441a      	add	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4610      	mov	r0, r2
 800c0f0:	f7ff f8ed 	bl	800b2ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0f4:	f001 fa3e 	bl	800d574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0f8:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <prvAddNewTaskToReadyList+0xcc>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00e      	beq.n	800c11e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <prvAddNewTaskToReadyList+0xc8>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d207      	bcs.n	800c11e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c10e:	4b0c      	ldr	r3, [pc, #48]	; (800c140 <prvAddNewTaskToReadyList+0xdc>)
 800c110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c11e:	bf00      	nop
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20000fb8 	.word	0x20000fb8
 800c12c:	20000ae4 	.word	0x20000ae4
 800c130:	20000fc4 	.word	0x20000fc4
 800c134:	20000fd4 	.word	0x20000fd4
 800c138:	20000fc0 	.word	0x20000fc0
 800c13c:	20000ae8 	.word	0x20000ae8
 800c140:	e000ed04 	.word	0xe000ed04

0800c144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d019      	beq.n	800c18a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <vTaskDelay+0x64>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00c      	beq.n	800c178 <vTaskDelay+0x34>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	60bb      	str	r3, [r7, #8]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c178:	f000 f884 	bl	800c284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c17c:	2100      	movs	r1, #0
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fd04 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c184:	f000 f88c 	bl	800c2a0 <xTaskResumeAll>
 800c188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d107      	bne.n	800c1a0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c190:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <vTaskDelay+0x68>)
 800c192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1a0:	bf00      	nop
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000fe0 	.word	0x20000fe0
 800c1ac:	e000ed04 	.word	0xe000ed04

0800c1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08a      	sub	sp, #40	; 0x28
 800c1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1be:	463a      	mov	r2, r7
 800c1c0:	1d39      	adds	r1, r7, #4
 800c1c2:	f107 0308 	add.w	r3, r7, #8
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff f820 	bl	800b20c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	9202      	str	r2, [sp, #8]
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	460a      	mov	r2, r1
 800c1de:	4923      	ldr	r1, [pc, #140]	; (800c26c <vTaskStartScheduler+0xbc>)
 800c1e0:	4823      	ldr	r0, [pc, #140]	; (800c270 <vTaskStartScheduler+0xc0>)
 800c1e2:	f7ff fe05 	bl	800bdf0 <xTaskCreateStatic>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	4a22      	ldr	r2, [pc, #136]	; (800c274 <vTaskStartScheduler+0xc4>)
 800c1ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1ec:	4b21      	ldr	r3, [pc, #132]	; (800c274 <vTaskStartScheduler+0xc4>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]
 800c1f8:	e001      	b.n	800c1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d102      	bne.n	800c20a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c204:	f000 fd16 	bl	800cc34 <xTimerCreateTimerTask>
 800c208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d118      	bne.n	800c242 <vTaskStartScheduler+0x92>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	b672      	cpsid	i
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	b662      	cpsie	i
 800c224:	613b      	str	r3, [r7, #16]
}
 800c226:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c228:	4b13      	ldr	r3, [pc, #76]	; (800c278 <vTaskStartScheduler+0xc8>)
 800c22a:	f04f 32ff 	mov.w	r2, #4294967295
 800c22e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c230:	4b12      	ldr	r3, [pc, #72]	; (800c27c <vTaskStartScheduler+0xcc>)
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c236:	4b12      	ldr	r3, [pc, #72]	; (800c280 <vTaskStartScheduler+0xd0>)
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c23c:	f001 f8e8 	bl	800d410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c240:	e010      	b.n	800c264 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c248:	d10c      	bne.n	800c264 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	b672      	cpsid	i
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	b662      	cpsie	i
 800c25e:	60fb      	str	r3, [r7, #12]
}
 800c260:	bf00      	nop
 800c262:	e7fe      	b.n	800c262 <vTaskStartScheduler+0xb2>
}
 800c264:	bf00      	nop
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	0800f008 	.word	0x0800f008
 800c270:	0800c8bd 	.word	0x0800c8bd
 800c274:	20000fdc 	.word	0x20000fdc
 800c278:	20000fd8 	.word	0x20000fd8
 800c27c:	20000fc4 	.word	0x20000fc4
 800c280:	20000fbc 	.word	0x20000fbc

0800c284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c288:	4b04      	ldr	r3, [pc, #16]	; (800c29c <vTaskSuspendAll+0x18>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3301      	adds	r3, #1
 800c28e:	4a03      	ldr	r2, [pc, #12]	; (800c29c <vTaskSuspendAll+0x18>)
 800c290:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c292:	bf00      	nop
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	20000fe0 	.word	0x20000fe0

0800c2a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2ae:	4b43      	ldr	r3, [pc, #268]	; (800c3bc <xTaskResumeAll+0x11c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10c      	bne.n	800c2d0 <xTaskResumeAll+0x30>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	b672      	cpsid	i
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	b662      	cpsie	i
 800c2ca:	603b      	str	r3, [r7, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2d0:	f001 f91c 	bl	800d50c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2d4:	4b39      	ldr	r3, [pc, #228]	; (800c3bc <xTaskResumeAll+0x11c>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	4a38      	ldr	r2, [pc, #224]	; (800c3bc <xTaskResumeAll+0x11c>)
 800c2dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2de:	4b37      	ldr	r3, [pc, #220]	; (800c3bc <xTaskResumeAll+0x11c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d162      	bne.n	800c3ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2e6:	4b36      	ldr	r3, [pc, #216]	; (800c3c0 <xTaskResumeAll+0x120>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d05e      	beq.n	800c3ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ee:	e02f      	b.n	800c350 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f0:	4b34      	ldr	r3, [pc, #208]	; (800c3c4 <xTaskResumeAll+0x124>)
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	3318      	adds	r3, #24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff f843 	bl	800b388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3304      	adds	r3, #4
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff f83e 	bl	800b388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c310:	4b2d      	ldr	r3, [pc, #180]	; (800c3c8 <xTaskResumeAll+0x128>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d903      	bls.n	800c320 <xTaskResumeAll+0x80>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	4a2a      	ldr	r2, [pc, #168]	; (800c3c8 <xTaskResumeAll+0x128>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4a27      	ldr	r2, [pc, #156]	; (800c3cc <xTaskResumeAll+0x12c>)
 800c32e:	441a      	add	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f7fe ffc9 	bl	800b2ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c340:	4b23      	ldr	r3, [pc, #140]	; (800c3d0 <xTaskResumeAll+0x130>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c346:	429a      	cmp	r2, r3
 800c348:	d302      	bcc.n	800c350 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c34a:	4b22      	ldr	r3, [pc, #136]	; (800c3d4 <xTaskResumeAll+0x134>)
 800c34c:	2201      	movs	r2, #1
 800c34e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c350:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <xTaskResumeAll+0x124>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1cb      	bne.n	800c2f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c35e:	f000 fb65 	bl	800ca2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c362:	4b1d      	ldr	r3, [pc, #116]	; (800c3d8 <xTaskResumeAll+0x138>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d010      	beq.n	800c390 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c36e:	f000 f847 	bl	800c400 <xTaskIncrementTick>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c378:	4b16      	ldr	r3, [pc, #88]	; (800c3d4 <xTaskResumeAll+0x134>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3b01      	subs	r3, #1
 800c382:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1f1      	bne.n	800c36e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c38a:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <xTaskResumeAll+0x138>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c390:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <xTaskResumeAll+0x134>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d009      	beq.n	800c3ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c398:	2301      	movs	r3, #1
 800c39a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c39c:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <xTaskResumeAll+0x13c>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3ac:	f001 f8e2 	bl	800d574 <vPortExitCritical>

	return xAlreadyYielded;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000fe0 	.word	0x20000fe0
 800c3c0:	20000fb8 	.word	0x20000fb8
 800c3c4:	20000f78 	.word	0x20000f78
 800c3c8:	20000fc0 	.word	0x20000fc0
 800c3cc:	20000ae8 	.word	0x20000ae8
 800c3d0:	20000ae4 	.word	0x20000ae4
 800c3d4:	20000fcc 	.word	0x20000fcc
 800c3d8:	20000fc8 	.word	0x20000fc8
 800c3dc:	e000ed04 	.word	0xe000ed04

0800c3e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <xTaskGetTickCount+0x1c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3ec:	687b      	ldr	r3, [r7, #4]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	20000fbc 	.word	0x20000fbc

0800c400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c40a:	4b50      	ldr	r3, [pc, #320]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 808b 	bne.w	800c52a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c414:	4b4e      	ldr	r3, [pc, #312]	; (800c550 <xTaskIncrementTick+0x150>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c41c:	4a4c      	ldr	r2, [pc, #304]	; (800c550 <xTaskIncrementTick+0x150>)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d122      	bne.n	800c46e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c428:	4b4a      	ldr	r3, [pc, #296]	; (800c554 <xTaskIncrementTick+0x154>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <xTaskIncrementTick+0x4c>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	b672      	cpsid	i
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	b662      	cpsie	i
 800c446:	603b      	str	r3, [r7, #0]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <xTaskIncrementTick+0x4a>
 800c44c:	4b41      	ldr	r3, [pc, #260]	; (800c554 <xTaskIncrementTick+0x154>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	4b41      	ldr	r3, [pc, #260]	; (800c558 <xTaskIncrementTick+0x158>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a3f      	ldr	r2, [pc, #252]	; (800c554 <xTaskIncrementTick+0x154>)
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	4a3f      	ldr	r2, [pc, #252]	; (800c558 <xTaskIncrementTick+0x158>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b3e      	ldr	r3, [pc, #248]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a3d      	ldr	r2, [pc, #244]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	f000 fadf 	bl	800ca2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c46e:	4b3c      	ldr	r3, [pc, #240]	; (800c560 <xTaskIncrementTick+0x160>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	429a      	cmp	r2, r3
 800c476:	d349      	bcc.n	800c50c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c478:	4b36      	ldr	r3, [pc, #216]	; (800c554 <xTaskIncrementTick+0x154>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d104      	bne.n	800c48c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c482:	4b37      	ldr	r3, [pc, #220]	; (800c560 <xTaskIncrementTick+0x160>)
 800c484:	f04f 32ff 	mov.w	r2, #4294967295
 800c488:	601a      	str	r2, [r3, #0]
					break;
 800c48a:	e03f      	b.n	800c50c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c48c:	4b31      	ldr	r3, [pc, #196]	; (800c554 <xTaskIncrementTick+0x154>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d203      	bcs.n	800c4ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4a4:	4a2e      	ldr	r2, [pc, #184]	; (800c560 <xTaskIncrementTick+0x160>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4aa:	e02f      	b.n	800c50c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe ff69 	bl	800b388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3318      	adds	r3, #24
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe ff60 	bl	800b388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	4b25      	ldr	r3, [pc, #148]	; (800c564 <xTaskIncrementTick+0x164>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d903      	bls.n	800c4dc <xTaskIncrementTick+0xdc>
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	4a22      	ldr	r2, [pc, #136]	; (800c564 <xTaskIncrementTick+0x164>)
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4a1f      	ldr	r2, [pc, #124]	; (800c568 <xTaskIncrementTick+0x168>)
 800c4ea:	441a      	add	r2, r3
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	f7fe feeb 	bl	800b2ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fc:	4b1b      	ldr	r3, [pc, #108]	; (800c56c <xTaskIncrementTick+0x16c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	429a      	cmp	r2, r3
 800c504:	d3b8      	bcc.n	800c478 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c506:	2301      	movs	r3, #1
 800c508:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c50a:	e7b5      	b.n	800c478 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c50c:	4b17      	ldr	r3, [pc, #92]	; (800c56c <xTaskIncrementTick+0x16c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c512:	4915      	ldr	r1, [pc, #84]	; (800c568 <xTaskIncrementTick+0x168>)
 800c514:	4613      	mov	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	440b      	add	r3, r1
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d907      	bls.n	800c534 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e004      	b.n	800c534 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c52a:	4b11      	ldr	r3, [pc, #68]	; (800c570 <xTaskIncrementTick+0x170>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3301      	adds	r3, #1
 800c530:	4a0f      	ldr	r2, [pc, #60]	; (800c570 <xTaskIncrementTick+0x170>)
 800c532:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <xTaskIncrementTick+0x174>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c540:	697b      	ldr	r3, [r7, #20]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000fe0 	.word	0x20000fe0
 800c550:	20000fbc 	.word	0x20000fbc
 800c554:	20000f70 	.word	0x20000f70
 800c558:	20000f74 	.word	0x20000f74
 800c55c:	20000fd0 	.word	0x20000fd0
 800c560:	20000fd8 	.word	0x20000fd8
 800c564:	20000fc0 	.word	0x20000fc0
 800c568:	20000ae8 	.word	0x20000ae8
 800c56c:	20000ae4 	.word	0x20000ae4
 800c570:	20000fc8 	.word	0x20000fc8
 800c574:	20000fcc 	.word	0x20000fcc

0800c578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c57e:	4b29      	ldr	r3, [pc, #164]	; (800c624 <vTaskSwitchContext+0xac>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c586:	4b28      	ldr	r3, [pc, #160]	; (800c628 <vTaskSwitchContext+0xb0>)
 800c588:	2201      	movs	r2, #1
 800c58a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c58c:	e043      	b.n	800c616 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c58e:	4b26      	ldr	r3, [pc, #152]	; (800c628 <vTaskSwitchContext+0xb0>)
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c594:	4b25      	ldr	r3, [pc, #148]	; (800c62c <vTaskSwitchContext+0xb4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e012      	b.n	800c5c2 <vTaskSwitchContext+0x4a>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <vTaskSwitchContext+0x44>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	b672      	cpsid	i
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	b662      	cpsie	i
 800c5b6:	607b      	str	r3, [r7, #4]
}
 800c5b8:	bf00      	nop
 800c5ba:	e7fe      	b.n	800c5ba <vTaskSwitchContext+0x42>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	491b      	ldr	r1, [pc, #108]	; (800c630 <vTaskSwitchContext+0xb8>)
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0e2      	beq.n	800c59c <vTaskSwitchContext+0x24>
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4a13      	ldr	r2, [pc, #76]	; (800c630 <vTaskSwitchContext+0xb8>)
 800c5e2:	4413      	add	r3, r2
 800c5e4:	60bb      	str	r3, [r7, #8]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	605a      	str	r2, [r3, #4]
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d104      	bne.n	800c606 <vTaskSwitchContext+0x8e>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	605a      	str	r2, [r3, #4]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	4a09      	ldr	r2, [pc, #36]	; (800c634 <vTaskSwitchContext+0xbc>)
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	4a06      	ldr	r2, [pc, #24]	; (800c62c <vTaskSwitchContext+0xb4>)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6013      	str	r3, [r2, #0]
}
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20000fe0 	.word	0x20000fe0
 800c628:	20000fcc 	.word	0x20000fcc
 800c62c:	20000fc0 	.word	0x20000fc0
 800c630:	20000ae8 	.word	0x20000ae8
 800c634:	20000ae4 	.word	0x20000ae4

0800c638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10c      	bne.n	800c662 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64c:	b672      	cpsid	i
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	b662      	cpsie	i
 800c65c:	60fb      	str	r3, [r7, #12]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <vTaskPlaceOnEventList+0x48>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3318      	adds	r3, #24
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7fe fe53 	bl	800b316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c670:	2101      	movs	r1, #1
 800c672:	6838      	ldr	r0, [r7, #0]
 800c674:	f000 fa8a 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20000ae4 	.word	0x20000ae4

0800c684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10c      	bne.n	800c6b0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	b672      	cpsid	i
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	b662      	cpsie	i
 800c6aa:	617b      	str	r3, [r7, #20]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <vTaskPlaceOnEventListRestricted+0x58>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3318      	adds	r3, #24
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f7fe fe08 	bl	800b2ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6ca:	6879      	ldr	r1, [r7, #4]
 800c6cc:	68b8      	ldr	r0, [r7, #8]
 800c6ce:	f000 fa5d 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
	}
 800c6d2:	bf00      	nop
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000ae4 	.word	0x20000ae4

0800c6e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10c      	bne.n	800c710 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	b672      	cpsid	i
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	b662      	cpsie	i
 800c70a:	60fb      	str	r3, [r7, #12]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	3318      	adds	r3, #24
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe fe37 	bl	800b388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c71a:	4b1e      	ldr	r3, [pc, #120]	; (800c794 <xTaskRemoveFromEventList+0xb4>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d11d      	bne.n	800c75e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3304      	adds	r3, #4
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe fe2e 	bl	800b388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	4b19      	ldr	r3, [pc, #100]	; (800c798 <xTaskRemoveFromEventList+0xb8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	d903      	bls.n	800c740 <xTaskRemoveFromEventList+0x60>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73c:	4a16      	ldr	r2, [pc, #88]	; (800c798 <xTaskRemoveFromEventList+0xb8>)
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4a13      	ldr	r2, [pc, #76]	; (800c79c <xTaskRemoveFromEventList+0xbc>)
 800c74e:	441a      	add	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	3304      	adds	r3, #4
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7fe fdb9 	bl	800b2ce <vListInsertEnd>
 800c75c:	e005      	b.n	800c76a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	3318      	adds	r3, #24
 800c762:	4619      	mov	r1, r3
 800c764:	480e      	ldr	r0, [pc, #56]	; (800c7a0 <xTaskRemoveFromEventList+0xc0>)
 800c766:	f7fe fdb2 	bl	800b2ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c76e:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <xTaskRemoveFromEventList+0xc4>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c774:	429a      	cmp	r2, r3
 800c776:	d905      	bls.n	800c784 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c778:	2301      	movs	r3, #1
 800c77a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <xTaskRemoveFromEventList+0xc8>)
 800c77e:	2201      	movs	r2, #1
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	e001      	b.n	800c788 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c788:	697b      	ldr	r3, [r7, #20]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	20000fe0 	.word	0x20000fe0
 800c798:	20000fc0 	.word	0x20000fc0
 800c79c:	20000ae8 	.word	0x20000ae8
 800c7a0:	20000f78 	.word	0x20000f78
 800c7a4:	20000ae4 	.word	0x20000ae4
 800c7a8:	20000fcc 	.word	0x20000fcc

0800c7ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <vTaskInternalSetTimeOutState+0x24>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7bc:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <vTaskInternalSetTimeOutState+0x28>)
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	605a      	str	r2, [r3, #4]
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	20000fd0 	.word	0x20000fd0
 800c7d4:	20000fbc 	.word	0x20000fbc

0800c7d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10c      	bne.n	800c802 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	b672      	cpsid	i
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	b662      	cpsie	i
 800c7fc:	613b      	str	r3, [r7, #16]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10c      	bne.n	800c822 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	b672      	cpsid	i
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	b662      	cpsie	i
 800c81c:	60fb      	str	r3, [r7, #12]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c822:	f000 fe73 	bl	800d50c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c826:	4b1d      	ldr	r3, [pc, #116]	; (800c89c <xTaskCheckForTimeOut+0xc4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83e:	d102      	bne.n	800c846 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]
 800c844:	e023      	b.n	800c88e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	4b15      	ldr	r3, [pc, #84]	; (800c8a0 <xTaskCheckForTimeOut+0xc8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d007      	beq.n	800c862 <xTaskCheckForTimeOut+0x8a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d302      	bcc.n	800c862 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c85c:	2301      	movs	r3, #1
 800c85e:	61fb      	str	r3, [r7, #28]
 800c860:	e015      	b.n	800c88e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d20b      	bcs.n	800c884 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	1ad2      	subs	r2, r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff ff97 	bl	800c7ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c87e:	2300      	movs	r3, #0
 800c880:	61fb      	str	r3, [r7, #28]
 800c882:	e004      	b.n	800c88e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c88a:	2301      	movs	r3, #1
 800c88c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c88e:	f000 fe71 	bl	800d574 <vPortExitCritical>

	return xReturn;
 800c892:	69fb      	ldr	r3, [r7, #28]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3720      	adds	r7, #32
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20000fbc 	.word	0x20000fbc
 800c8a0:	20000fd0 	.word	0x20000fd0

0800c8a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8a8:	4b03      	ldr	r3, [pc, #12]	; (800c8b8 <vTaskMissedYield+0x14>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	601a      	str	r2, [r3, #0]
}
 800c8ae:	bf00      	nop
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	20000fcc 	.word	0x20000fcc

0800c8bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8c4:	f000 f852 	bl	800c96c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8c8:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <prvIdleTask+0x28>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d9f9      	bls.n	800c8c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <prvIdleTask+0x2c>)
 800c8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8e0:	e7f0      	b.n	800c8c4 <prvIdleTask+0x8>
 800c8e2:	bf00      	nop
 800c8e4:	20000ae8 	.word	0x20000ae8
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	e00c      	b.n	800c912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4a12      	ldr	r2, [pc, #72]	; (800c94c <prvInitialiseTaskLists+0x60>)
 800c904:	4413      	add	r3, r2
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe fcb4 	bl	800b274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3301      	adds	r3, #1
 800c910:	607b      	str	r3, [r7, #4]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b37      	cmp	r3, #55	; 0x37
 800c916:	d9ef      	bls.n	800c8f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c918:	480d      	ldr	r0, [pc, #52]	; (800c950 <prvInitialiseTaskLists+0x64>)
 800c91a:	f7fe fcab 	bl	800b274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c91e:	480d      	ldr	r0, [pc, #52]	; (800c954 <prvInitialiseTaskLists+0x68>)
 800c920:	f7fe fca8 	bl	800b274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c924:	480c      	ldr	r0, [pc, #48]	; (800c958 <prvInitialiseTaskLists+0x6c>)
 800c926:	f7fe fca5 	bl	800b274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c92a:	480c      	ldr	r0, [pc, #48]	; (800c95c <prvInitialiseTaskLists+0x70>)
 800c92c:	f7fe fca2 	bl	800b274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c930:	480b      	ldr	r0, [pc, #44]	; (800c960 <prvInitialiseTaskLists+0x74>)
 800c932:	f7fe fc9f 	bl	800b274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c936:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <prvInitialiseTaskLists+0x78>)
 800c938:	4a05      	ldr	r2, [pc, #20]	; (800c950 <prvInitialiseTaskLists+0x64>)
 800c93a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c93c:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <prvInitialiseTaskLists+0x7c>)
 800c93e:	4a05      	ldr	r2, [pc, #20]	; (800c954 <prvInitialiseTaskLists+0x68>)
 800c940:	601a      	str	r2, [r3, #0]
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20000ae8 	.word	0x20000ae8
 800c950:	20000f48 	.word	0x20000f48
 800c954:	20000f5c 	.word	0x20000f5c
 800c958:	20000f78 	.word	0x20000f78
 800c95c:	20000f8c 	.word	0x20000f8c
 800c960:	20000fa4 	.word	0x20000fa4
 800c964:	20000f70 	.word	0x20000f70
 800c968:	20000f74 	.word	0x20000f74

0800c96c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c972:	e019      	b.n	800c9a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c974:	f000 fdca 	bl	800d50c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c978:	4b10      	ldr	r3, [pc, #64]	; (800c9bc <prvCheckTasksWaitingTermination+0x50>)
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3304      	adds	r3, #4
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe fcff 	bl	800b388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c98a:	4b0d      	ldr	r3, [pc, #52]	; (800c9c0 <prvCheckTasksWaitingTermination+0x54>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3b01      	subs	r3, #1
 800c990:	4a0b      	ldr	r2, [pc, #44]	; (800c9c0 <prvCheckTasksWaitingTermination+0x54>)
 800c992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c994:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <prvCheckTasksWaitingTermination+0x58>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3b01      	subs	r3, #1
 800c99a:	4a0a      	ldr	r2, [pc, #40]	; (800c9c4 <prvCheckTasksWaitingTermination+0x58>)
 800c99c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c99e:	f000 fde9 	bl	800d574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 f810 	bl	800c9c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <prvCheckTasksWaitingTermination+0x58>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e1      	bne.n	800c974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20000f8c 	.word	0x20000f8c
 800c9c0:	20000fb8 	.word	0x20000fb8
 800c9c4:	20000fa0 	.word	0x20000fa0

0800c9c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d108      	bne.n	800c9ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 ff8a 	bl	800d8f8 <vPortFree>
				vPortFree( pxTCB );
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 ff87 	bl	800d8f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9ea:	e01a      	b.n	800ca22 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d103      	bne.n	800c9fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 ff7e 	bl	800d8f8 <vPortFree>
	}
 800c9fc:	e011      	b.n	800ca22 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d00c      	beq.n	800ca22 <prvDeleteTCB+0x5a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	b672      	cpsid	i
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	b662      	cpsie	i
 800ca1c:	60fb      	str	r3, [r7, #12]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <prvDeleteTCB+0x58>
	}
 800ca22:	bf00      	nop
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <prvResetNextTaskUnblockTime+0x38>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d104      	bne.n	800ca46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <prvResetNextTaskUnblockTime+0x3c>)
 800ca3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca44:	e008      	b.n	800ca58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca46:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <prvResetNextTaskUnblockTime+0x38>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvResetNextTaskUnblockTime+0x3c>)
 800ca56:	6013      	str	r3, [r2, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	20000f70 	.word	0x20000f70
 800ca68:	20000fd8 	.word	0x20000fd8

0800ca6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca72:	4b0b      	ldr	r3, [pc, #44]	; (800caa0 <xTaskGetSchedulerState+0x34>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	607b      	str	r3, [r7, #4]
 800ca7e:	e008      	b.n	800ca92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca80:	4b08      	ldr	r3, [pc, #32]	; (800caa4 <xTaskGetSchedulerState+0x38>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	607b      	str	r3, [r7, #4]
 800ca8c:	e001      	b.n	800ca92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca92:	687b      	ldr	r3, [r7, #4]
	}
 800ca94:	4618      	mov	r0, r3
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	20000fc4 	.word	0x20000fc4
 800caa4:	20000fe0 	.word	0x20000fe0

0800caa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b086      	sub	sp, #24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d05a      	beq.n	800cb74 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cabe:	4b30      	ldr	r3, [pc, #192]	; (800cb80 <xTaskPriorityDisinherit+0xd8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d00c      	beq.n	800cae2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	b672      	cpsid	i
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	b662      	cpsie	i
 800cadc:	60fb      	str	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10c      	bne.n	800cb04 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	b672      	cpsid	i
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	b662      	cpsie	i
 800cafe:	60bb      	str	r3, [r7, #8]
}
 800cb00:	bf00      	nop
 800cb02:	e7fe      	b.n	800cb02 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb08:	1e5a      	subs	r2, r3, #1
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d02c      	beq.n	800cb74 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d128      	bne.n	800cb74 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fe fc2e 	bl	800b388 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb44:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <xTaskPriorityDisinherit+0xdc>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d903      	bls.n	800cb54 <xTaskPriorityDisinherit+0xac>
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb50:	4a0c      	ldr	r2, [pc, #48]	; (800cb84 <xTaskPriorityDisinherit+0xdc>)
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb58:	4613      	mov	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4a09      	ldr	r2, [pc, #36]	; (800cb88 <xTaskPriorityDisinherit+0xe0>)
 800cb62:	441a      	add	r2, r3
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	3304      	adds	r3, #4
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	f7fe fbaf 	bl	800b2ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb70:	2301      	movs	r3, #1
 800cb72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb74:	697b      	ldr	r3, [r7, #20]
	}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000ae4 	.word	0x20000ae4
 800cb84:	20000fc0 	.word	0x20000fc0
 800cb88:	20000ae8 	.word	0x20000ae8

0800cb8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb96:	4b21      	ldr	r3, [pc, #132]	; (800cc1c <prvAddCurrentTaskToDelayedList+0x90>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb9c:	4b20      	ldr	r3, [pc, #128]	; (800cc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fbf0 	bl	800b388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbae:	d10a      	bne.n	800cbc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d007      	beq.n	800cbc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbb6:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4819      	ldr	r0, [pc, #100]	; (800cc24 <prvAddCurrentTaskToDelayedList+0x98>)
 800cbc0:	f7fe fb85 	bl	800b2ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbc4:	e026      	b.n	800cc14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4413      	add	r3, r2
 800cbcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbce:	4b14      	ldr	r3, [pc, #80]	; (800cc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d209      	bcs.n	800cbf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbde:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	4619      	mov	r1, r3
 800cbea:	4610      	mov	r0, r2
 800cbec:	f7fe fb93 	bl	800b316 <vListInsert>
}
 800cbf0:	e010      	b.n	800cc14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbf2:	4b0e      	ldr	r3, [pc, #56]	; (800cc2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b0a      	ldr	r3, [pc, #40]	; (800cc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe fb89 	bl	800b316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d202      	bcs.n	800cc14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc0e:	4a08      	ldr	r2, [pc, #32]	; (800cc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	6013      	str	r3, [r2, #0]
}
 800cc14:	bf00      	nop
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000fbc 	.word	0x20000fbc
 800cc20:	20000ae4 	.word	0x20000ae4
 800cc24:	20000fa4 	.word	0x20000fa4
 800cc28:	20000f74 	.word	0x20000f74
 800cc2c:	20000f70 	.word	0x20000f70
 800cc30:	20000fd8 	.word	0x20000fd8

0800cc34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08a      	sub	sp, #40	; 0x28
 800cc38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc3e:	f000 fb15 	bl	800d26c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc42:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <xTimerCreateTimerTask+0x84>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d021      	beq.n	800cc8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc52:	1d3a      	adds	r2, r7, #4
 800cc54:	f107 0108 	add.w	r1, r7, #8
 800cc58:	f107 030c 	add.w	r3, r7, #12
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fe faef 	bl	800b240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	9202      	str	r2, [sp, #8]
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2300      	movs	r3, #0
 800cc72:	460a      	mov	r2, r1
 800cc74:	4911      	ldr	r1, [pc, #68]	; (800ccbc <xTimerCreateTimerTask+0x88>)
 800cc76:	4812      	ldr	r0, [pc, #72]	; (800ccc0 <xTimerCreateTimerTask+0x8c>)
 800cc78:	f7ff f8ba 	bl	800bdf0 <xTaskCreateStatic>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	4a11      	ldr	r2, [pc, #68]	; (800ccc4 <xTimerCreateTimerTask+0x90>)
 800cc80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <xTimerCreateTimerTask+0x90>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10c      	bne.n	800ccae <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	b672      	cpsid	i
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	b662      	cpsie	i
 800cca8:	613b      	str	r3, [r7, #16]
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ccae:	697b      	ldr	r3, [r7, #20]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20001014 	.word	0x20001014
 800ccbc:	0800f010 	.word	0x0800f010
 800ccc0:	0800ce05 	.word	0x0800ce05
 800ccc4:	20001018 	.word	0x20001018

0800ccc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10c      	bne.n	800ccfa <xTimerGenericCommand+0x32>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	b672      	cpsid	i
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	b662      	cpsie	i
 800ccf4:	623b      	str	r3, [r7, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccfa:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <xTimerGenericCommand+0x9c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d02a      	beq.n	800cd58 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2b05      	cmp	r3, #5
 800cd12:	dc18      	bgt.n	800cd46 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd14:	f7ff feaa 	bl	800ca6c <xTaskGetSchedulerState>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d109      	bne.n	800cd32 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd1e:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <xTimerGenericCommand+0x9c>)
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f107 0110 	add.w	r1, r7, #16
 800cd26:	2300      	movs	r3, #0
 800cd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2a:	f7fe fc67 	bl	800b5fc <xQueueGenericSend>
 800cd2e:	6278      	str	r0, [r7, #36]	; 0x24
 800cd30:	e012      	b.n	800cd58 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd32:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <xTimerGenericCommand+0x9c>)
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	f107 0110 	add.w	r1, r7, #16
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f7fe fc5d 	bl	800b5fc <xQueueGenericSend>
 800cd42:	6278      	str	r0, [r7, #36]	; 0x24
 800cd44:	e008      	b.n	800cd58 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd46:	4b07      	ldr	r3, [pc, #28]	; (800cd64 <xTimerGenericCommand+0x9c>)
 800cd48:	6818      	ldr	r0, [r3, #0]
 800cd4a:	f107 0110 	add.w	r1, r7, #16
 800cd4e:	2300      	movs	r3, #0
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	f7fe fd59 	bl	800b808 <xQueueGenericSendFromISR>
 800cd56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3728      	adds	r7, #40	; 0x28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20001014 	.word	0x20001014

0800cd68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd72:	4b23      	ldr	r3, [pc, #140]	; (800ce00 <prvProcessExpiredTimer+0x98>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fe fb01 	bl	800b388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d024      	beq.n	800cdde <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	699a      	ldr	r2, [r3, #24]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	18d1      	adds	r1, r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	6978      	ldr	r0, [r7, #20]
 800cda2:	f000 f8d3 	bl	800cf4c <prvInsertTimerInActiveList>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d021      	beq.n	800cdf0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdac:	2300      	movs	r3, #0
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	6978      	ldr	r0, [r7, #20]
 800cdb8:	f7ff ff86 	bl	800ccc8 <xTimerGenericCommand>
 800cdbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d115      	bne.n	800cdf0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	b672      	cpsid	i
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	b662      	cpsie	i
 800cdd8:	60fb      	str	r3, [r7, #12]
}
 800cdda:	bf00      	nop
 800cddc:	e7fe      	b.n	800cddc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cde4:	f023 0301 	bic.w	r3, r3, #1
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	6978      	ldr	r0, [r7, #20]
 800cdf6:	4798      	blx	r3
}
 800cdf8:	bf00      	nop
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	2000100c 	.word	0x2000100c

0800ce04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce0c:	f107 0308 	add.w	r3, r7, #8
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f857 	bl	800cec4 <prvGetNextExpireTime>
 800ce16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f803 	bl	800ce28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce22:	f000 f8d5 	bl	800cfd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce26:	e7f1      	b.n	800ce0c <prvTimerTask+0x8>

0800ce28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce32:	f7ff fa27 	bl	800c284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 f866 	bl	800cf0c <prvSampleTimeNow>
 800ce40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d130      	bne.n	800ceaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <prvProcessTimerOrBlockTask+0x3c>
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d806      	bhi.n	800ce64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce56:	f7ff fa23 	bl	800c2a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff ff83 	bl	800cd68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce62:	e024      	b.n	800ceae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d008      	beq.n	800ce7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <prvProcessTimerOrBlockTask+0x90>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <prvProcessTimerOrBlockTask+0x50>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e000      	b.n	800ce7a <prvProcessTimerOrBlockTask+0x52>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce7c:	4b0f      	ldr	r3, [pc, #60]	; (800cebc <prvProcessTimerOrBlockTask+0x94>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	f7fe ff7d 	bl	800bd88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce8e:	f7ff fa07 	bl	800c2a0 <xTaskResumeAll>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce98:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <prvProcessTimerOrBlockTask+0x98>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
}
 800cea8:	e001      	b.n	800ceae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ceaa:	f7ff f9f9 	bl	800c2a0 <xTaskResumeAll>
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20001010 	.word	0x20001010
 800cebc:	20001014 	.word	0x20001014
 800cec0:	e000ed04 	.word	0xe000ed04

0800cec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cecc:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <prvGetNextExpireTime+0x44>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <prvGetNextExpireTime+0x16>
 800ced6:	2201      	movs	r2, #1
 800ced8:	e000      	b.n	800cedc <prvGetNextExpireTime+0x18>
 800ceda:	2200      	movs	r2, #0
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cee8:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <prvGetNextExpireTime+0x44>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	e001      	b.n	800cef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cef4:	2300      	movs	r3, #0
 800cef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cef8:	68fb      	ldr	r3, [r7, #12]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	2000100c 	.word	0x2000100c

0800cf0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf14:	f7ff fa64 	bl	800c3e0 <xTaskGetTickCount>
 800cf18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf1a:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <prvSampleTimeNow+0x3c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d205      	bcs.n	800cf30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf24:	f000 f93c 	bl	800d1a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	e002      	b.n	800cf36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cf36:	4a04      	ldr	r2, [pc, #16]	; (800cf48 <prvSampleTimeNow+0x3c>)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	2000101c 	.word	0x2000101c

0800cf4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d812      	bhi.n	800cf98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	1ad2      	subs	r2, r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d302      	bcc.n	800cf86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf80:	2301      	movs	r3, #1
 800cf82:	617b      	str	r3, [r7, #20]
 800cf84:	e01b      	b.n	800cfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf86:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <prvInsertTimerInActiveList+0x7c>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4610      	mov	r0, r2
 800cf92:	f7fe f9c0 	bl	800b316 <vListInsert>
 800cf96:	e012      	b.n	800cfbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d206      	bcs.n	800cfae <prvInsertTimerInActiveList+0x62>
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d302      	bcc.n	800cfae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	e007      	b.n	800cfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfae:	4b07      	ldr	r3, [pc, #28]	; (800cfcc <prvInsertTimerInActiveList+0x80>)
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	4610      	mov	r0, r2
 800cfba:	f7fe f9ac 	bl	800b316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cfbe:	697b      	ldr	r3, [r7, #20]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20001010 	.word	0x20001010
 800cfcc:	2000100c 	.word	0x2000100c

0800cfd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08e      	sub	sp, #56	; 0x38
 800cfd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfd6:	e0d0      	b.n	800d17a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da1a      	bge.n	800d014 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cfde:	1d3b      	adds	r3, r7, #4
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10c      	bne.n	800d004 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfee:	b672      	cpsid	i
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	b662      	cpsie	i
 800cffe:	61fb      	str	r3, [r7, #28]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d00a:	6850      	ldr	r0, [r2, #4]
 800d00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d00e:	6892      	ldr	r2, [r2, #8]
 800d010:	4611      	mov	r1, r2
 800d012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f2c0 80af 	blt.w	800d17a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	3304      	adds	r3, #4
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe f9ab 	bl	800b388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d032:	463b      	mov	r3, r7
 800d034:	4618      	mov	r0, r3
 800d036:	f7ff ff69 	bl	800cf0c <prvSampleTimeNow>
 800d03a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b09      	cmp	r3, #9
 800d040:	f200 809a 	bhi.w	800d178 <prvProcessReceivedCommands+0x1a8>
 800d044:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <prvProcessReceivedCommands+0x7c>)
 800d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04a:	bf00      	nop
 800d04c:	0800d075 	.word	0x0800d075
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d075 	.word	0x0800d075
 800d058:	0800d0ed 	.word	0x0800d0ed
 800d05c:	0800d101 	.word	0x0800d101
 800d060:	0800d14f 	.word	0x0800d14f
 800d064:	0800d075 	.word	0x0800d075
 800d068:	0800d075 	.word	0x0800d075
 800d06c:	0800d0ed 	.word	0x0800d0ed
 800d070:	0800d101 	.word	0x0800d101
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d07a:	f043 0301 	orr.w	r3, r3, #1
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	18d1      	adds	r1, r2, r3
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d094:	f7ff ff5a 	bl	800cf4c <prvInsertTimerInActiveList>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d06d      	beq.n	800d17a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d062      	beq.n	800d17a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	441a      	add	r2, r3
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0c6:	f7ff fdff 	bl	800ccc8 <xTimerGenericCommand>
 800d0ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d153      	bne.n	800d17a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	b672      	cpsid	i
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	b662      	cpsie	i
 800d0e6:	61bb      	str	r3, [r7, #24]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f2:	f023 0301 	bic.w	r3, r3, #1
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d0fe:	e03c      	b.n	800d17a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10c      	bne.n	800d13a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	b672      	cpsid	i
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	b662      	cpsie	i
 800d134:	617b      	str	r3, [r7, #20]
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	699a      	ldr	r2, [r3, #24]
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	18d1      	adds	r1, r2, r3
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d148:	f7ff ff00 	bl	800cf4c <prvInsertTimerInActiveList>
					break;
 800d14c:	e015      	b.n	800d17a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d15e:	f000 fbcb 	bl	800d8f8 <vPortFree>
 800d162:	e00a      	b.n	800d17a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16a:	f023 0301 	bic.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d176:	e000      	b.n	800d17a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800d178:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d17a:	4b08      	ldr	r3, [pc, #32]	; (800d19c <prvProcessReceivedCommands+0x1cc>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	1d39      	adds	r1, r7, #4
 800d180:	2200      	movs	r2, #0
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fbe0 	bl	800b948 <xQueueReceive>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f47f af24 	bne.w	800cfd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	3730      	adds	r7, #48	; 0x30
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	20001014 	.word	0x20001014

0800d1a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1a6:	e04a      	b.n	800d23e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1a8:	4b2e      	ldr	r3, [pc, #184]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b2:	4b2c      	ldr	r3, [pc, #176]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe f8e1 	bl	800b388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1d4:	f003 0304 	and.w	r3, r3, #4
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d030      	beq.n	800d23e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	699b      	ldr	r3, [r3, #24]
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d90e      	bls.n	800d20c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1fa:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3304      	adds	r3, #4
 800d202:	4619      	mov	r1, r3
 800d204:	4610      	mov	r0, r2
 800d206:	f7fe f886 	bl	800b316 <vListInsert>
 800d20a:	e018      	b.n	800d23e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d20c:	2300      	movs	r3, #0
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	2300      	movs	r3, #0
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	2100      	movs	r1, #0
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f7ff fd56 	bl	800ccc8 <xTimerGenericCommand>
 800d21c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10c      	bne.n	800d23e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	b672      	cpsid	i
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	b662      	cpsie	i
 800d238:	603b      	str	r3, [r7, #0]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d23e:	4b09      	ldr	r3, [pc, #36]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1af      	bne.n	800d1a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <prvSwitchTimerLists+0xc8>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a04      	ldr	r2, [pc, #16]	; (800d264 <prvSwitchTimerLists+0xc4>)
 800d254:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d256:	4a04      	ldr	r2, [pc, #16]	; (800d268 <prvSwitchTimerLists+0xc8>)
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	6013      	str	r3, [r2, #0]
}
 800d25c:	bf00      	nop
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	2000100c 	.word	0x2000100c
 800d268:	20001010 	.word	0x20001010

0800d26c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d272:	f000 f94b 	bl	800d50c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d276:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d120      	bne.n	800d2c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d27e:	4814      	ldr	r0, [pc, #80]	; (800d2d0 <prvCheckForValidListAndQueue+0x64>)
 800d280:	f7fd fff8 	bl	800b274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d284:	4813      	ldr	r0, [pc, #76]	; (800d2d4 <prvCheckForValidListAndQueue+0x68>)
 800d286:	f7fd fff5 	bl	800b274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d28a:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <prvCheckForValidListAndQueue+0x6c>)
 800d28c:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <prvCheckForValidListAndQueue+0x64>)
 800d28e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d290:	4b12      	ldr	r3, [pc, #72]	; (800d2dc <prvCheckForValidListAndQueue+0x70>)
 800d292:	4a10      	ldr	r2, [pc, #64]	; (800d2d4 <prvCheckForValidListAndQueue+0x68>)
 800d294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d296:	2300      	movs	r3, #0
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	4b11      	ldr	r3, [pc, #68]	; (800d2e0 <prvCheckForValidListAndQueue+0x74>)
 800d29c:	4a11      	ldr	r2, [pc, #68]	; (800d2e4 <prvCheckForValidListAndQueue+0x78>)
 800d29e:	2110      	movs	r1, #16
 800d2a0:	200a      	movs	r0, #10
 800d2a2:	f7fe f905 	bl	800b4b0 <xQueueGenericCreateStatic>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a08      	ldr	r2, [pc, #32]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d2ac:	4b07      	ldr	r3, [pc, #28]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	490b      	ldr	r1, [pc, #44]	; (800d2e8 <prvCheckForValidListAndQueue+0x7c>)
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fe fd3a 	bl	800bd34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2c0:	f000 f958 	bl	800d574 <vPortExitCritical>
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20001014 	.word	0x20001014
 800d2d0:	20000fe4 	.word	0x20000fe4
 800d2d4:	20000ff8 	.word	0x20000ff8
 800d2d8:	2000100c 	.word	0x2000100c
 800d2dc:	20001010 	.word	0x20001010
 800d2e0:	200010c0 	.word	0x200010c0
 800d2e4:	20001020 	.word	0x20001020
 800d2e8:	0800f018 	.word	0x0800f018

0800d2ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3b04      	subs	r3, #4
 800d2fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b04      	subs	r3, #4
 800d30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f023 0201 	bic.w	r2, r3, #1
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3b04      	subs	r3, #4
 800d31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d31c:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <pxPortInitialiseStack+0x64>)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3b14      	subs	r3, #20
 800d326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	3b04      	subs	r3, #4
 800d332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f06f 0202 	mvn.w	r2, #2
 800d33a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3b20      	subs	r3, #32
 800d340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d342:	68fb      	ldr	r3, [r7, #12]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	0800d355 	.word	0x0800d355

0800d354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <prvTaskExitError+0x5c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d366:	d00c      	beq.n	800d382 <prvTaskExitError+0x2e>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	b672      	cpsid	i
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	b662      	cpsie	i
 800d37c:	60fb      	str	r3, [r7, #12]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <prvTaskExitError+0x2c>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d386:	b672      	cpsid	i
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	b662      	cpsie	i
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d39a:	bf00      	nop
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d0fc      	beq.n	800d39c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3a2:	bf00      	nop
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	20000098 	.word	0x20000098
	...

0800d3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <pxCurrentTCBConst2>)
 800d3c2:	6819      	ldr	r1, [r3, #0]
 800d3c4:	6808      	ldr	r0, [r1, #0]
 800d3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ca:	f380 8809 	msr	PSP, r0
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f04f 0000 	mov.w	r0, #0
 800d3d6:	f380 8811 	msr	BASEPRI, r0
 800d3da:	4770      	bx	lr
 800d3dc:	f3af 8000 	nop.w

0800d3e0 <pxCurrentTCBConst2>:
 800d3e0:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop

0800d3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3e8:	4808      	ldr	r0, [pc, #32]	; (800d40c <prvPortStartFirstTask+0x24>)
 800d3ea:	6800      	ldr	r0, [r0, #0]
 800d3ec:	6800      	ldr	r0, [r0, #0]
 800d3ee:	f380 8808 	msr	MSP, r0
 800d3f2:	f04f 0000 	mov.w	r0, #0
 800d3f6:	f380 8814 	msr	CONTROL, r0
 800d3fa:	b662      	cpsie	i
 800d3fc:	b661      	cpsie	f
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	df00      	svc	0
 800d408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d40a:	bf00      	nop
 800d40c:	e000ed08 	.word	0xe000ed08

0800d410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d416:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <xPortStartScheduler+0xe4>)
 800d418:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	22ff      	movs	r2, #255	; 0xff
 800d426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	b2db      	uxtb	r3, r3
 800d434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	4b2f      	ldr	r3, [pc, #188]	; (800d4f8 <xPortStartScheduler+0xe8>)
 800d43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d43e:	4b2f      	ldr	r3, [pc, #188]	; (800d4fc <xPortStartScheduler+0xec>)
 800d440:	2207      	movs	r2, #7
 800d442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d444:	e009      	b.n	800d45a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d446:	4b2d      	ldr	r3, [pc, #180]	; (800d4fc <xPortStartScheduler+0xec>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	4a2b      	ldr	r2, [pc, #172]	; (800d4fc <xPortStartScheduler+0xec>)
 800d44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	b2db      	uxtb	r3, r3
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	b2db      	uxtb	r3, r3
 800d458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d45a:	78fb      	ldrb	r3, [r7, #3]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d462:	2b80      	cmp	r3, #128	; 0x80
 800d464:	d0ef      	beq.n	800d446 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d466:	4b25      	ldr	r3, [pc, #148]	; (800d4fc <xPortStartScheduler+0xec>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f1c3 0307 	rsb	r3, r3, #7
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d00c      	beq.n	800d48c <xPortStartScheduler+0x7c>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	b672      	cpsid	i
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	b662      	cpsie	i
 800d486:	60bb      	str	r3, [r7, #8]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d48c:	4b1b      	ldr	r3, [pc, #108]	; (800d4fc <xPortStartScheduler+0xec>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	4a1a      	ldr	r2, [pc, #104]	; (800d4fc <xPortStartScheduler+0xec>)
 800d494:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d496:	4b19      	ldr	r3, [pc, #100]	; (800d4fc <xPortStartScheduler+0xec>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d49e:	4a17      	ldr	r2, [pc, #92]	; (800d4fc <xPortStartScheduler+0xec>)
 800d4a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4aa:	4b15      	ldr	r3, [pc, #84]	; (800d500 <xPortStartScheduler+0xf0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a14      	ldr	r2, [pc, #80]	; (800d500 <xPortStartScheduler+0xf0>)
 800d4b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4b6:	4b12      	ldr	r3, [pc, #72]	; (800d500 <xPortStartScheduler+0xf0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a11      	ldr	r2, [pc, #68]	; (800d500 <xPortStartScheduler+0xf0>)
 800d4bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4c2:	f000 f8dd 	bl	800d680 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4c6:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <xPortStartScheduler+0xf4>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4cc:	f000 f8fc 	bl	800d6c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4d0:	4b0d      	ldr	r3, [pc, #52]	; (800d508 <xPortStartScheduler+0xf8>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a0c      	ldr	r2, [pc, #48]	; (800d508 <xPortStartScheduler+0xf8>)
 800d4d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d4da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4dc:	f7ff ff84 	bl	800d3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4e0:	f7ff f84a 	bl	800c578 <vTaskSwitchContext>
	prvTaskExitError();
 800d4e4:	f7ff ff36 	bl	800d354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	e000e400 	.word	0xe000e400
 800d4f8:	20001110 	.word	0x20001110
 800d4fc:	20001114 	.word	0x20001114
 800d500:	e000ed20 	.word	0xe000ed20
 800d504:	20000098 	.word	0x20000098
 800d508:	e000ef34 	.word	0xe000ef34

0800d50c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
	__asm volatile
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	b672      	cpsid	i
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	b662      	cpsie	i
 800d526:	607b      	str	r3, [r7, #4]
}
 800d528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d52a:	4b10      	ldr	r3, [pc, #64]	; (800d56c <vPortEnterCritical+0x60>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	4a0e      	ldr	r2, [pc, #56]	; (800d56c <vPortEnterCritical+0x60>)
 800d532:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d534:	4b0d      	ldr	r3, [pc, #52]	; (800d56c <vPortEnterCritical+0x60>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d111      	bne.n	800d560 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d53c:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <vPortEnterCritical+0x64>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00c      	beq.n	800d560 <vPortEnterCritical+0x54>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	b672      	cpsid	i
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	b662      	cpsie	i
 800d55a:	603b      	str	r3, [r7, #0]
}
 800d55c:	bf00      	nop
 800d55e:	e7fe      	b.n	800d55e <vPortEnterCritical+0x52>
	}
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	20000098 	.word	0x20000098
 800d570:	e000ed04 	.word	0xe000ed04

0800d574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <vPortExitCritical+0x54>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10c      	bne.n	800d59c <vPortExitCritical+0x28>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	607b      	str	r3, [r7, #4]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <vPortExitCritical+0x54>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	4a09      	ldr	r2, [pc, #36]	; (800d5c8 <vPortExitCritical+0x54>)
 800d5a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5a6:	4b08      	ldr	r3, [pc, #32]	; (800d5c8 <vPortExitCritical+0x54>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d105      	bne.n	800d5ba <vPortExitCritical+0x46>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	f383 8811 	msr	BASEPRI, r3
}
 800d5b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5ba:	bf00      	nop
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	20000098 	.word	0x20000098
 800d5cc:	00000000 	.word	0x00000000

0800d5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5d0:	f3ef 8009 	mrs	r0, PSP
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4b15      	ldr	r3, [pc, #84]	; (800d630 <pxCurrentTCBConst>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	f01e 0f10 	tst.w	lr, #16
 800d5e0:	bf08      	it	eq
 800d5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ea:	6010      	str	r0, [r2, #0]
 800d5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5f4:	b672      	cpsid	i
 800d5f6:	f380 8811 	msr	BASEPRI, r0
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	b662      	cpsie	i
 800d604:	f7fe ffb8 	bl	800c578 <vTaskSwitchContext>
 800d608:	f04f 0000 	mov.w	r0, #0
 800d60c:	f380 8811 	msr	BASEPRI, r0
 800d610:	bc09      	pop	{r0, r3}
 800d612:	6819      	ldr	r1, [r3, #0]
 800d614:	6808      	ldr	r0, [r1, #0]
 800d616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	f01e 0f10 	tst.w	lr, #16
 800d61e:	bf08      	it	eq
 800d620:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d624:	f380 8809 	msr	PSP, r0
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <pxCurrentTCBConst>:
 800d630:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d634:	bf00      	nop
 800d636:	bf00      	nop

0800d638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	b672      	cpsid	i
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	b662      	cpsie	i
 800d652:	607b      	str	r3, [r7, #4]
}
 800d654:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d656:	f7fe fed3 	bl	800c400 <xTaskIncrementTick>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d003      	beq.n	800d668 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <SysTick_Handler+0x44>)
 800d662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	f383 8811 	msr	BASEPRI, r3
}
 800d672:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	e000ed04 	.word	0xe000ed04

0800d680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d680:	b480      	push	{r7}
 800d682:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d684:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <vPortSetupTimerInterrupt+0x34>)
 800d686:	2200      	movs	r2, #0
 800d688:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d68a:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <vPortSetupTimerInterrupt+0x38>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d690:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <vPortSetupTimerInterrupt+0x3c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a0a      	ldr	r2, [pc, #40]	; (800d6c0 <vPortSetupTimerInterrupt+0x40>)
 800d696:	fba2 2303 	umull	r2, r3, r2, r3
 800d69a:	099b      	lsrs	r3, r3, #6
 800d69c:	4a09      	ldr	r2, [pc, #36]	; (800d6c4 <vPortSetupTimerInterrupt+0x44>)
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6a2:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <vPortSetupTimerInterrupt+0x34>)
 800d6a4:	2207      	movs	r2, #7
 800d6a6:	601a      	str	r2, [r3, #0]
}
 800d6a8:	bf00      	nop
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	e000e010 	.word	0xe000e010
 800d6b8:	e000e018 	.word	0xe000e018
 800d6bc:	20000000 	.word	0x20000000
 800d6c0:	10624dd3 	.word	0x10624dd3
 800d6c4:	e000e014 	.word	0xe000e014

0800d6c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d6d8 <vPortEnableVFP+0x10>
 800d6cc:	6801      	ldr	r1, [r0, #0]
 800d6ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6d2:	6001      	str	r1, [r0, #0]
 800d6d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6d6:	bf00      	nop
 800d6d8:	e000ed88 	.word	0xe000ed88

0800d6dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6e2:	f3ef 8305 	mrs	r3, IPSR
 800d6e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b0f      	cmp	r3, #15
 800d6ec:	d916      	bls.n	800d71c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6ee:	4a19      	ldr	r2, [pc, #100]	; (800d754 <vPortValidateInterruptPriority+0x78>)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6f8:	4b17      	ldr	r3, [pc, #92]	; (800d758 <vPortValidateInterruptPriority+0x7c>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	7afa      	ldrb	r2, [r7, #11]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d20c      	bcs.n	800d71c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	b672      	cpsid	i
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	b662      	cpsie	i
 800d716:	607b      	str	r3, [r7, #4]
}
 800d718:	bf00      	nop
 800d71a:	e7fe      	b.n	800d71a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d71c:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <vPortValidateInterruptPriority+0x80>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d724:	4b0e      	ldr	r3, [pc, #56]	; (800d760 <vPortValidateInterruptPriority+0x84>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d90c      	bls.n	800d746 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	b672      	cpsid	i
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	b662      	cpsie	i
 800d740:	603b      	str	r3, [r7, #0]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <vPortValidateInterruptPriority+0x68>
	}
 800d746:	bf00      	nop
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	e000e3f0 	.word	0xe000e3f0
 800d758:	20001110 	.word	0x20001110
 800d75c:	e000ed0c 	.word	0xe000ed0c
 800d760:	20001114 	.word	0x20001114

0800d764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b08a      	sub	sp, #40	; 0x28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d770:	f7fe fd88 	bl	800c284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d774:	4b5b      	ldr	r3, [pc, #364]	; (800d8e4 <pvPortMalloc+0x180>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d77c:	f000 f91a 	bl	800d9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d780:	4b59      	ldr	r3, [pc, #356]	; (800d8e8 <pvPortMalloc+0x184>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4013      	ands	r3, r2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f040 8092 	bne.w	800d8b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d01f      	beq.n	800d7d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d794:	2208      	movs	r2, #8
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4413      	add	r3, r2
 800d79a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f003 0307 	and.w	r3, r3, #7
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d016      	beq.n	800d7d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f023 0307 	bic.w	r3, r3, #7
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00c      	beq.n	800d7d4 <pvPortMalloc+0x70>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	b672      	cpsid	i
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	b662      	cpsie	i
 800d7ce:	617b      	str	r3, [r7, #20]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d06b      	beq.n	800d8b2 <pvPortMalloc+0x14e>
 800d7da:	4b44      	ldr	r3, [pc, #272]	; (800d8ec <pvPortMalloc+0x188>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d866      	bhi.n	800d8b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7e4:	4b42      	ldr	r3, [pc, #264]	; (800d8f0 <pvPortMalloc+0x18c>)
 800d7e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7e8:	4b41      	ldr	r3, [pc, #260]	; (800d8f0 <pvPortMalloc+0x18c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ee:	e004      	b.n	800d7fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	429a      	cmp	r2, r3
 800d802:	d903      	bls.n	800d80c <pvPortMalloc+0xa8>
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1f1      	bne.n	800d7f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d80c:	4b35      	ldr	r3, [pc, #212]	; (800d8e4 <pvPortMalloc+0x180>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d812:	429a      	cmp	r2, r3
 800d814:	d04d      	beq.n	800d8b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2208      	movs	r2, #8
 800d81c:	4413      	add	r3, r2
 800d81e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	2308      	movs	r3, #8
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	429a      	cmp	r2, r3
 800d836:	d921      	bls.n	800d87c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4413      	add	r3, r2
 800d83e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f003 0307 	and.w	r3, r3, #7
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00c      	beq.n	800d864 <pvPortMalloc+0x100>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	b672      	cpsid	i
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	b662      	cpsie	i
 800d85e:	613b      	str	r3, [r7, #16]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	1ad2      	subs	r2, r2, r3
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d876:	69b8      	ldr	r0, [r7, #24]
 800d878:	f000 f8fe 	bl	800da78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d87c:	4b1b      	ldr	r3, [pc, #108]	; (800d8ec <pvPortMalloc+0x188>)
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	4a19      	ldr	r2, [pc, #100]	; (800d8ec <pvPortMalloc+0x188>)
 800d888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d88a:	4b18      	ldr	r3, [pc, #96]	; (800d8ec <pvPortMalloc+0x188>)
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	4b19      	ldr	r3, [pc, #100]	; (800d8f4 <pvPortMalloc+0x190>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	429a      	cmp	r2, r3
 800d894:	d203      	bcs.n	800d89e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d896:	4b15      	ldr	r3, [pc, #84]	; (800d8ec <pvPortMalloc+0x188>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a16      	ldr	r2, [pc, #88]	; (800d8f4 <pvPortMalloc+0x190>)
 800d89c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	685a      	ldr	r2, [r3, #4]
 800d8a2:	4b11      	ldr	r3, [pc, #68]	; (800d8e8 <pvPortMalloc+0x184>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8b2:	f7fe fcf5 	bl	800c2a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f003 0307 	and.w	r3, r3, #7
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00c      	beq.n	800d8da <pvPortMalloc+0x176>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	b672      	cpsid	i
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	b662      	cpsie	i
 800d8d4:	60fb      	str	r3, [r7, #12]
}
 800d8d6:	bf00      	nop
 800d8d8:	e7fe      	b.n	800d8d8 <pvPortMalloc+0x174>
	return pvReturn;
 800d8da:	69fb      	ldr	r3, [r7, #28]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3728      	adds	r7, #40	; 0x28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20004d20 	.word	0x20004d20
 800d8e8:	20004d2c 	.word	0x20004d2c
 800d8ec:	20004d24 	.word	0x20004d24
 800d8f0:	20004d18 	.word	0x20004d18
 800d8f4:	20004d28 	.word	0x20004d28

0800d8f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d04c      	beq.n	800d9a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d90a:	2308      	movs	r3, #8
 800d90c:	425b      	negs	r3, r3
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	4413      	add	r3, r2
 800d912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b23      	ldr	r3, [pc, #140]	; (800d9ac <vPortFree+0xb4>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4013      	ands	r3, r2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10c      	bne.n	800d940 <vPortFree+0x48>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	b672      	cpsid	i
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	b662      	cpsie	i
 800d93a:	60fb      	str	r3, [r7, #12]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00c      	beq.n	800d962 <vPortFree+0x6a>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	b672      	cpsid	i
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	b662      	cpsie	i
 800d95c:	60bb      	str	r3, [r7, #8]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <vPortFree+0xb4>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4013      	ands	r3, r2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d019      	beq.n	800d9a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d115      	bne.n	800d9a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <vPortFree+0xb4>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	43db      	mvns	r3, r3
 800d982:	401a      	ands	r2, r3
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d988:	f7fe fc7c 	bl	800c284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <vPortFree+0xb8>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4413      	add	r3, r2
 800d996:	4a06      	ldr	r2, [pc, #24]	; (800d9b0 <vPortFree+0xb8>)
 800d998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d99a:	6938      	ldr	r0, [r7, #16]
 800d99c:	f000 f86c 	bl	800da78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d9a0:	f7fe fc7e 	bl	800c2a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9a4:	bf00      	nop
 800d9a6:	3718      	adds	r7, #24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	20004d2c 	.word	0x20004d2c
 800d9b0:	20004d24 	.word	0x20004d24

0800d9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9c0:	4b27      	ldr	r3, [pc, #156]	; (800da60 <prvHeapInit+0xac>)
 800d9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0307 	and.w	r3, r3, #7
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00c      	beq.n	800d9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3307      	adds	r3, #7
 800d9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f023 0307 	bic.w	r3, r3, #7
 800d9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	4a1f      	ldr	r2, [pc, #124]	; (800da60 <prvHeapInit+0xac>)
 800d9e4:	4413      	add	r3, r2
 800d9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9ec:	4a1d      	ldr	r2, [pc, #116]	; (800da64 <prvHeapInit+0xb0>)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9f2:	4b1c      	ldr	r3, [pc, #112]	; (800da64 <prvHeapInit+0xb0>)
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da00:	2208      	movs	r2, #8
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	1a9b      	subs	r3, r3, r2
 800da06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f023 0307 	bic.w	r3, r3, #7
 800da0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4a15      	ldr	r2, [pc, #84]	; (800da68 <prvHeapInit+0xb4>)
 800da14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da16:	4b14      	ldr	r3, [pc, #80]	; (800da68 <prvHeapInit+0xb4>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2200      	movs	r2, #0
 800da1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da1e:	4b12      	ldr	r3, [pc, #72]	; (800da68 <prvHeapInit+0xb4>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2200      	movs	r2, #0
 800da24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	1ad2      	subs	r2, r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da34:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <prvHeapInit+0xb4>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4a0a      	ldr	r2, [pc, #40]	; (800da6c <prvHeapInit+0xb8>)
 800da42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	4a09      	ldr	r2, [pc, #36]	; (800da70 <prvHeapInit+0xbc>)
 800da4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da4c:	4b09      	ldr	r3, [pc, #36]	; (800da74 <prvHeapInit+0xc0>)
 800da4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da52:	601a      	str	r2, [r3, #0]
}
 800da54:	bf00      	nop
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	20001118 	.word	0x20001118
 800da64:	20004d18 	.word	0x20004d18
 800da68:	20004d20 	.word	0x20004d20
 800da6c:	20004d28 	.word	0x20004d28
 800da70:	20004d24 	.word	0x20004d24
 800da74:	20004d2c 	.word	0x20004d2c

0800da78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da80:	4b28      	ldr	r3, [pc, #160]	; (800db24 <prvInsertBlockIntoFreeList+0xac>)
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	e002      	b.n	800da8c <prvInsertBlockIntoFreeList+0x14>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d8f7      	bhi.n	800da86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	4413      	add	r3, r2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d108      	bne.n	800daba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	441a      	add	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	441a      	add	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d118      	bne.n	800db00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	4b15      	ldr	r3, [pc, #84]	; (800db28 <prvInsertBlockIntoFreeList+0xb0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d00d      	beq.n	800daf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	441a      	add	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	e008      	b.n	800db08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800daf6:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <prvInsertBlockIntoFreeList+0xb0>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	e003      	b.n	800db08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d002      	beq.n	800db16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db16:	bf00      	nop
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	20004d18 	.word	0x20004d18
 800db28:	20004d20 	.word	0x20004d20

0800db2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db30:	2200      	movs	r2, #0
 800db32:	4912      	ldr	r1, [pc, #72]	; (800db7c <MX_USB_DEVICE_Init+0x50>)
 800db34:	4812      	ldr	r0, [pc, #72]	; (800db80 <MX_USB_DEVICE_Init+0x54>)
 800db36:	f7fb ff07 	bl	8009948 <USBD_Init>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db40:	f7f3 f8b2 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db44:	490f      	ldr	r1, [pc, #60]	; (800db84 <MX_USB_DEVICE_Init+0x58>)
 800db46:	480e      	ldr	r0, [pc, #56]	; (800db80 <MX_USB_DEVICE_Init+0x54>)
 800db48:	f7fb ff2e 	bl	80099a8 <USBD_RegisterClass>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db52:	f7f3 f8a9 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db56:	490c      	ldr	r1, [pc, #48]	; (800db88 <MX_USB_DEVICE_Init+0x5c>)
 800db58:	4809      	ldr	r0, [pc, #36]	; (800db80 <MX_USB_DEVICE_Init+0x54>)
 800db5a:	f7fb fe25 	bl	80097a8 <USBD_CDC_RegisterInterface>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db64:	f7f3 f8a0 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db68:	4805      	ldr	r0, [pc, #20]	; (800db80 <MX_USB_DEVICE_Init+0x54>)
 800db6a:	f7fb ff53 	bl	8009a14 <USBD_Start>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db74:	f7f3 f898 	bl	8000ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db78:	bf00      	nop
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	200000b0 	.word	0x200000b0
 800db80:	20004d30 	.word	0x20004d30
 800db84:	20000018 	.word	0x20000018
 800db88:	2000009c 	.word	0x2000009c

0800db8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db90:	2200      	movs	r2, #0
 800db92:	4905      	ldr	r1, [pc, #20]	; (800dba8 <CDC_Init_FS+0x1c>)
 800db94:	4805      	ldr	r0, [pc, #20]	; (800dbac <CDC_Init_FS+0x20>)
 800db96:	f7fb fe21 	bl	80097dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db9a:	4905      	ldr	r1, [pc, #20]	; (800dbb0 <CDC_Init_FS+0x24>)
 800db9c:	4803      	ldr	r0, [pc, #12]	; (800dbac <CDC_Init_FS+0x20>)
 800db9e:	f7fb fe3f 	bl	8009820 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dba2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	2000580c 	.word	0x2000580c
 800dbac:	20004d30 	.word	0x20004d30
 800dbb0:	2000500c 	.word	0x2000500c

0800dbb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	6039      	str	r1, [r7, #0]
 800dbce:	71fb      	strb	r3, [r7, #7]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbd4:	79fb      	ldrb	r3, [r7, #7]
 800dbd6:	2b23      	cmp	r3, #35	; 0x23
 800dbd8:	d84a      	bhi.n	800dc70 <CDC_Control_FS+0xac>
 800dbda:	a201      	add	r2, pc, #4	; (adr r2, 800dbe0 <CDC_Control_FS+0x1c>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dc71 	.word	0x0800dc71
 800dbe4:	0800dc71 	.word	0x0800dc71
 800dbe8:	0800dc71 	.word	0x0800dc71
 800dbec:	0800dc71 	.word	0x0800dc71
 800dbf0:	0800dc71 	.word	0x0800dc71
 800dbf4:	0800dc71 	.word	0x0800dc71
 800dbf8:	0800dc71 	.word	0x0800dc71
 800dbfc:	0800dc71 	.word	0x0800dc71
 800dc00:	0800dc71 	.word	0x0800dc71
 800dc04:	0800dc71 	.word	0x0800dc71
 800dc08:	0800dc71 	.word	0x0800dc71
 800dc0c:	0800dc71 	.word	0x0800dc71
 800dc10:	0800dc71 	.word	0x0800dc71
 800dc14:	0800dc71 	.word	0x0800dc71
 800dc18:	0800dc71 	.word	0x0800dc71
 800dc1c:	0800dc71 	.word	0x0800dc71
 800dc20:	0800dc71 	.word	0x0800dc71
 800dc24:	0800dc71 	.word	0x0800dc71
 800dc28:	0800dc71 	.word	0x0800dc71
 800dc2c:	0800dc71 	.word	0x0800dc71
 800dc30:	0800dc71 	.word	0x0800dc71
 800dc34:	0800dc71 	.word	0x0800dc71
 800dc38:	0800dc71 	.word	0x0800dc71
 800dc3c:	0800dc71 	.word	0x0800dc71
 800dc40:	0800dc71 	.word	0x0800dc71
 800dc44:	0800dc71 	.word	0x0800dc71
 800dc48:	0800dc71 	.word	0x0800dc71
 800dc4c:	0800dc71 	.word	0x0800dc71
 800dc50:	0800dc71 	.word	0x0800dc71
 800dc54:	0800dc71 	.word	0x0800dc71
 800dc58:	0800dc71 	.word	0x0800dc71
 800dc5c:	0800dc71 	.word	0x0800dc71
 800dc60:	0800dc71 	.word	0x0800dc71
 800dc64:	0800dc71 	.word	0x0800dc71
 800dc68:	0800dc71 	.word	0x0800dc71
 800dc6c:	0800dc71 	.word	0x0800dc71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc70:	bf00      	nop
  }

  return (USBD_OK);
 800dc72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc8a:	6879      	ldr	r1, [r7, #4]
 800dc8c:	4805      	ldr	r0, [pc, #20]	; (800dca4 <CDC_Receive_FS+0x24>)
 800dc8e:	f7fb fdc7 	bl	8009820 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc92:	4804      	ldr	r0, [pc, #16]	; (800dca4 <CDC_Receive_FS+0x24>)
 800dc94:	f7fb fe22 	bl	80098dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20004d30 	.word	0x20004d30

0800dca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dcb8:	4b0d      	ldr	r3, [pc, #52]	; (800dcf0 <CDC_Transmit_FS+0x48>)
 800dcba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e00b      	b.n	800dce6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dcce:	887b      	ldrh	r3, [r7, #2]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4806      	ldr	r0, [pc, #24]	; (800dcf0 <CDC_Transmit_FS+0x48>)
 800dcd6:	f7fb fd81 	bl	80097dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dcda:	4805      	ldr	r0, [pc, #20]	; (800dcf0 <CDC_Transmit_FS+0x48>)
 800dcdc:	f7fb fdbe 	bl	800985c <USBD_CDC_TransmitPacket>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20004d30 	.word	0x20004d30

0800dcf4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
	...

0800dd18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	4603      	mov	r3, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2212      	movs	r2, #18
 800dd28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd2a:	4b03      	ldr	r3, [pc, #12]	; (800dd38 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	200000d0 	.word	0x200000d0

0800dd3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	4603      	mov	r3, r0
 800dd44:	6039      	str	r1, [r7, #0]
 800dd46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2204      	movs	r2, #4
 800dd4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd4e:	4b03      	ldr	r3, [pc, #12]	; (800dd5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	200000f0 	.word	0x200000f0

0800dd60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4603      	mov	r3, r0
 800dd68:	6039      	str	r1, [r7, #0]
 800dd6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd6c:	79fb      	ldrb	r3, [r7, #7]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d105      	bne.n	800dd7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	4907      	ldr	r1, [pc, #28]	; (800dd94 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd76:	4808      	ldr	r0, [pc, #32]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd78:	f7fd f822 	bl	800adc0 <USBD_GetString>
 800dd7c:	e004      	b.n	800dd88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd7e:	683a      	ldr	r2, [r7, #0]
 800dd80:	4904      	ldr	r1, [pc, #16]	; (800dd94 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd82:	4805      	ldr	r0, [pc, #20]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd84:	f7fd f81c 	bl	800adc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd88:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	2000600c 	.word	0x2000600c
 800dd98:	0800f020 	.word	0x0800f020

0800dd9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	6039      	str	r1, [r7, #0]
 800dda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	4904      	ldr	r1, [pc, #16]	; (800ddbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ddac:	4804      	ldr	r0, [pc, #16]	; (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ddae:	f7fd f807 	bl	800adc0 <USBD_GetString>
  return USBD_StrDesc;
 800ddb2:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	2000600c 	.word	0x2000600c
 800ddc0:	0800f038 	.word	0x0800f038

0800ddc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	6039      	str	r1, [r7, #0]
 800ddce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	221a      	movs	r2, #26
 800ddd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddd6:	f000 f855 	bl	800de84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddda:	4b02      	ldr	r3, [pc, #8]	; (800dde4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	200000f4 	.word	0x200000f4

0800dde8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	6039      	str	r1, [r7, #0]
 800ddf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddf4:	79fb      	ldrb	r3, [r7, #7]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d105      	bne.n	800de06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	4907      	ldr	r1, [pc, #28]	; (800de1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddfe:	4808      	ldr	r0, [pc, #32]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de00:	f7fc ffde 	bl	800adc0 <USBD_GetString>
 800de04:	e004      	b.n	800de10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	4904      	ldr	r1, [pc, #16]	; (800de1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800de0a:	4805      	ldr	r0, [pc, #20]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de0c:	f7fc ffd8 	bl	800adc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de10:	4b02      	ldr	r3, [pc, #8]	; (800de1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2000600c 	.word	0x2000600c
 800de20:	0800f04c 	.word	0x0800f04c

0800de24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	6039      	str	r1, [r7, #0]
 800de2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de30:	79fb      	ldrb	r3, [r7, #7]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d105      	bne.n	800de42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	4907      	ldr	r1, [pc, #28]	; (800de58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de3a:	4808      	ldr	r0, [pc, #32]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de3c:	f7fc ffc0 	bl	800adc0 <USBD_GetString>
 800de40:	e004      	b.n	800de4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	4904      	ldr	r1, [pc, #16]	; (800de58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de46:	4805      	ldr	r0, [pc, #20]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de48:	f7fc ffba 	bl	800adc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de4c:	4b02      	ldr	r3, [pc, #8]	; (800de58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	2000600c 	.word	0x2000600c
 800de5c:	0800f058 	.word	0x0800f058

0800de60 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	6039      	str	r1, [r7, #0]
 800de6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	220c      	movs	r2, #12
 800de70:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800de72:	4b03      	ldr	r3, [pc, #12]	; (800de80 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800de74:	4618      	mov	r0, r3
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	200000e4 	.word	0x200000e4

0800de84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de8a:	4b0f      	ldr	r3, [pc, #60]	; (800dec8 <Get_SerialNum+0x44>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de90:	4b0e      	ldr	r3, [pc, #56]	; (800decc <Get_SerialNum+0x48>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de96:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <Get_SerialNum+0x4c>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4413      	add	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d009      	beq.n	800debe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800deaa:	2208      	movs	r2, #8
 800deac:	4909      	ldr	r1, [pc, #36]	; (800ded4 <Get_SerialNum+0x50>)
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 f814 	bl	800dedc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800deb4:	2204      	movs	r2, #4
 800deb6:	4908      	ldr	r1, [pc, #32]	; (800ded8 <Get_SerialNum+0x54>)
 800deb8:	68b8      	ldr	r0, [r7, #8]
 800deba:	f000 f80f 	bl	800dedc <IntToUnicode>
  }
}
 800debe:	bf00      	nop
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	1ff0f420 	.word	0x1ff0f420
 800decc:	1ff0f424 	.word	0x1ff0f424
 800ded0:	1ff0f428 	.word	0x1ff0f428
 800ded4:	200000f6 	.word	0x200000f6
 800ded8:	20000106 	.word	0x20000106

0800dedc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	4613      	mov	r3, r2
 800dee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800deee:	2300      	movs	r3, #0
 800def0:	75fb      	strb	r3, [r7, #23]
 800def2:	e027      	b.n	800df44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	0f1b      	lsrs	r3, r3, #28
 800def8:	2b09      	cmp	r3, #9
 800defa:	d80b      	bhi.n	800df14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	0f1b      	lsrs	r3, r3, #28
 800df00:	b2da      	uxtb	r2, r3
 800df02:	7dfb      	ldrb	r3, [r7, #23]
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4619      	mov	r1, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	440b      	add	r3, r1
 800df0c:	3230      	adds	r2, #48	; 0x30
 800df0e:	b2d2      	uxtb	r2, r2
 800df10:	701a      	strb	r2, [r3, #0]
 800df12:	e00a      	b.n	800df2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	0f1b      	lsrs	r3, r3, #28
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	7dfb      	ldrb	r3, [r7, #23]
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	4619      	mov	r1, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	440b      	add	r3, r1
 800df24:	3237      	adds	r2, #55	; 0x37
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	011b      	lsls	r3, r3, #4
 800df2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df30:	7dfb      	ldrb	r3, [r7, #23]
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	3301      	adds	r3, #1
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	4413      	add	r3, r2
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	3301      	adds	r3, #1
 800df42:	75fb      	strb	r3, [r7, #23]
 800df44:	7dfa      	ldrb	r2, [r7, #23]
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d3d3      	bcc.n	800def4 <IntToUnicode+0x18>
  }
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b0ae      	sub	sp, #184	; 0xb8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	605a      	str	r2, [r3, #4]
 800df6e:	609a      	str	r2, [r3, #8]
 800df70:	60da      	str	r2, [r3, #12]
 800df72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df74:	f107 0314 	add.w	r3, r7, #20
 800df78:	2290      	movs	r2, #144	; 0x90
 800df7a:	2100      	movs	r1, #0
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 fc47 	bl	800e810 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df8a:	d161      	bne.n	800e050 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800df8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800df90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800df92:	2300      	movs	r3, #0
 800df94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df98:	f107 0314 	add.w	r3, r7, #20
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f7 fc0d 	bl	80057bc <HAL_RCCEx_PeriphCLKConfig>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dfa8:	f7f2 fe7e 	bl	8000ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfac:	4b2a      	ldr	r3, [pc, #168]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800dfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb0:	4a29      	ldr	r2, [pc, #164]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800dfb2:	f043 0301 	orr.w	r3, r3, #1
 800dfb6:	6313      	str	r3, [r2, #48]	; 0x30
 800dfb8:	4b27      	ldr	r3, [pc, #156]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800dfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	613b      	str	r3, [r7, #16]
 800dfc2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dfc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dfdc:	4619      	mov	r1, r3
 800dfde:	481f      	ldr	r0, [pc, #124]	; (800e05c <HAL_PCD_MspInit+0x100>)
 800dfe0:	f7f5 fa3e 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dfe4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dfe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfec:	2302      	movs	r3, #2
 800dfee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dff8:	2303      	movs	r3, #3
 800dffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dffe:	230a      	movs	r3, #10
 800e000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e008:	4619      	mov	r1, r3
 800e00a:	4814      	ldr	r0, [pc, #80]	; (800e05c <HAL_PCD_MspInit+0x100>)
 800e00c:	f7f5 fa28 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e010:	4b11      	ldr	r3, [pc, #68]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e014:	4a10      	ldr	r2, [pc, #64]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e01a:	6353      	str	r3, [r2, #52]	; 0x34
 800e01c:	4b0e      	ldr	r3, [pc, #56]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4b0b      	ldr	r3, [pc, #44]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02c:	4a0a      	ldr	r2, [pc, #40]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e02e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e032:	6453      	str	r3, [r2, #68]	; 0x44
 800e034:	4b08      	ldr	r3, [pc, #32]	; (800e058 <HAL_PCD_MspInit+0xfc>)
 800e036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e03c:	60bb      	str	r3, [r7, #8]
 800e03e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e040:	2200      	movs	r2, #0
 800e042:	2105      	movs	r1, #5
 800e044:	2043      	movs	r0, #67	; 0x43
 800e046:	f7f4 fdd7 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e04a:	2043      	movs	r0, #67	; 0x43
 800e04c:	f7f4 fdf0 	bl	8002c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e050:	bf00      	nop
 800e052:	37b8      	adds	r7, #184	; 0xb8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	40023800 	.word	0x40023800
 800e05c:	40020000 	.word	0x40020000

0800e060 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f7fb fd19 	bl	8009aae <USBD_LL_SetupStage>
}
 800e07c:	bf00      	nop
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	460b      	mov	r3, r1
 800e08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e096:	78fa      	ldrb	r2, [r7, #3]
 800e098:	6879      	ldr	r1, [r7, #4]
 800e09a:	4613      	mov	r3, r2
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	440b      	add	r3, r1
 800e0a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f7fb fd53 	bl	8009b58 <USBD_LL_DataOutStage>
}
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e0cc:	78fa      	ldrb	r2, [r7, #3]
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	440b      	add	r3, r1
 800e0da:	334c      	adds	r3, #76	; 0x4c
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	78fb      	ldrb	r3, [r7, #3]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	f7fb fdec 	bl	8009cbe <USBD_LL_DataInStage>
}
 800e0e6:	bf00      	nop
 800e0e8:	3708      	adds	r7, #8
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b082      	sub	sp, #8
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fb ff20 	bl	8009f42 <USBD_LL_SOF>
}
 800e102:	bf00      	nop
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b084      	sub	sp, #16
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e112:	2301      	movs	r3, #1
 800e114:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d102      	bne.n	800e124 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e11e:	2300      	movs	r3, #0
 800e120:	73fb      	strb	r3, [r7, #15]
 800e122:	e008      	b.n	800e136 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d102      	bne.n	800e132 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e12c:	2301      	movs	r3, #1
 800e12e:	73fb      	strb	r3, [r7, #15]
 800e130:	e001      	b.n	800e136 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e132:	f7f2 fdb9 	bl	8000ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e13c:	7bfa      	ldrb	r2, [r7, #15]
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f7fb fec0 	bl	8009ec6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fb fe68 	bl	8009e22 <USBD_LL_Reset>
}
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fb febb 	bl	8009ee6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	6812      	ldr	r2, [r2, #0]
 800e17e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e182:	f043 0301 	orr.w	r3, r3, #1
 800e186:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a1b      	ldr	r3, [r3, #32]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d005      	beq.n	800e19c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e190:	4b04      	ldr	r3, [pc, #16]	; (800e1a4 <HAL_PCD_SuspendCallback+0x48>)
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	4a03      	ldr	r2, [pc, #12]	; (800e1a4 <HAL_PCD_SuspendCallback+0x48>)
 800e196:	f043 0306 	orr.w	r3, r3, #6
 800e19a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	e000ed00 	.word	0xe000ed00

0800e1a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fb feab 	bl	8009f12 <USBD_LL_Resume>
}
 800e1bc:	bf00      	nop
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1d6:	78fa      	ldrb	r2, [r7, #3]
 800e1d8:	4611      	mov	r1, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fb ff03 	bl	8009fe6 <USBD_LL_IsoOUTIncomplete>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1fa:	78fa      	ldrb	r2, [r7, #3]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fb febf 	bl	8009f82 <USBD_LL_IsoINIncomplete>
}
 800e204:	bf00      	nop
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fb ff15 	bl	800a04a <USBD_LL_DevConnected>
}
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e236:	4618      	mov	r0, r3
 800e238:	f7fb ff12 	bl	800a060 <USBD_LL_DevDisconnected>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d13c      	bne.n	800e2ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e254:	4a20      	ldr	r2, [pc, #128]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a1e      	ldr	r2, [pc, #120]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e260:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e264:	4b1c      	ldr	r3, [pc, #112]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e266:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e26a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e26c:	4b1a      	ldr	r3, [pc, #104]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e26e:	2206      	movs	r2, #6
 800e270:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e272:	4b19      	ldr	r3, [pc, #100]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e274:	2202      	movs	r2, #2
 800e276:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e278:	4b17      	ldr	r3, [pc, #92]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e27e:	4b16      	ldr	r3, [pc, #88]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e280:	2202      	movs	r2, #2
 800e282:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e284:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e286:	2200      	movs	r2, #0
 800e288:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e28a:	4b13      	ldr	r3, [pc, #76]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e290:	4b11      	ldr	r3, [pc, #68]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e292:	2200      	movs	r2, #0
 800e294:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e296:	4b10      	ldr	r3, [pc, #64]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e298:	2201      	movs	r2, #1
 800e29a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e29c:	4b0e      	ldr	r3, [pc, #56]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2a2:	480d      	ldr	r0, [pc, #52]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e2a4:	f7f5 fabb 	bl	800381e <HAL_PCD_Init>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2ae:	f7f2 fcfb 	bl	8000ca8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2b2:	2180      	movs	r1, #128	; 0x80
 800e2b4:	4808      	ldr	r0, [pc, #32]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e2b6:	f7f6 fd36 	bl	8004d26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2ba:	2240      	movs	r2, #64	; 0x40
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4806      	ldr	r0, [pc, #24]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e2c0:	f7f6 fcea 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2c4:	2280      	movs	r2, #128	; 0x80
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	4803      	ldr	r0, [pc, #12]	; (800e2d8 <USBD_LL_Init+0x94>)
 800e2ca:	f7f6 fce5 	bl	8004c98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	2000620c 	.word	0x2000620c

0800e2dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f5 fbb7 	bl	8003a66 <HAL_PCD_Start>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 f97e 	bl	800e600 <USBD_Get_USB_Status>
 800e304:	4603      	mov	r3, r0
 800e306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e308:	7bbb      	ldrb	r3, [r7, #14]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	4608      	mov	r0, r1
 800e31c:	4611      	mov	r1, r2
 800e31e:	461a      	mov	r2, r3
 800e320:	4603      	mov	r3, r0
 800e322:	70fb      	strb	r3, [r7, #3]
 800e324:	460b      	mov	r3, r1
 800e326:	70bb      	strb	r3, [r7, #2]
 800e328:	4613      	mov	r3, r2
 800e32a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e33a:	78bb      	ldrb	r3, [r7, #2]
 800e33c:	883a      	ldrh	r2, [r7, #0]
 800e33e:	78f9      	ldrb	r1, [r7, #3]
 800e340:	f7f6 f8a4 	bl	800448c <HAL_PCD_EP_Open>
 800e344:	4603      	mov	r3, r0
 800e346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 f958 	bl	800e600 <USBD_Get_USB_Status>
 800e350:	4603      	mov	r3, r0
 800e352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e354:	7bbb      	ldrb	r3, [r7, #14]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b084      	sub	sp, #16
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	460b      	mov	r3, r1
 800e368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e378:	78fa      	ldrb	r2, [r7, #3]
 800e37a:	4611      	mov	r1, r2
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f6 f8ed 	bl	800455c <HAL_PCD_EP_Close>
 800e382:	4603      	mov	r3, r0
 800e384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e386:	7bfb      	ldrb	r3, [r7, #15]
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 f939 	bl	800e600 <USBD_Get_USB_Status>
 800e38e:	4603      	mov	r3, r0
 800e390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e392:	7bbb      	ldrb	r3, [r7, #14]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3b6:	78fa      	ldrb	r2, [r7, #3]
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7f6 f9c5 	bl	800474a <HAL_PCD_EP_SetStall>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 f91a 	bl	800e600 <USBD_Get_USB_Status>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b084      	sub	sp, #16
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3f4:	78fa      	ldrb	r2, [r7, #3]
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f6 fa0a 	bl	8004812 <HAL_PCD_EP_ClrStall>
 800e3fe:	4603      	mov	r3, r0
 800e400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	4618      	mov	r0, r3
 800e406:	f000 f8fb 	bl	800e600 <USBD_Get_USB_Status>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e42a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e42c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e430:	2b00      	cmp	r3, #0
 800e432:	da0b      	bge.n	800e44c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e434:	78fb      	ldrb	r3, [r7, #3]
 800e436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e43a:	68f9      	ldr	r1, [r7, #12]
 800e43c:	4613      	mov	r3, r2
 800e43e:	00db      	lsls	r3, r3, #3
 800e440:	4413      	add	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	440b      	add	r3, r1
 800e446:	333e      	adds	r3, #62	; 0x3e
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	e00b      	b.n	800e464 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e44c:	78fb      	ldrb	r3, [r7, #3]
 800e44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e452:	68f9      	ldr	r1, [r7, #12]
 800e454:	4613      	mov	r3, r2
 800e456:	00db      	lsls	r3, r3, #3
 800e458:	4413      	add	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	440b      	add	r3, r1
 800e45e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e462:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	460b      	mov	r3, r1
 800e47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e48a:	78fa      	ldrb	r2, [r7, #3]
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f5 ffd7 	bl	8004442 <HAL_PCD_SetAddress>
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 f8b0 	bl	800e600 <USBD_Get_USB_Status>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b086      	sub	sp, #24
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	60f8      	str	r0, [r7, #12]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	603b      	str	r3, [r7, #0]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4cc:	7af9      	ldrb	r1, [r7, #11]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	f7f6 f8f0 	bl	80046b6 <HAL_PCD_EP_Transmit>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 f88f 	bl	800e600 <USBD_Get_USB_Status>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	607a      	str	r2, [r7, #4]
 800e4fa:	603b      	str	r3, [r7, #0]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e50e:	7af9      	ldrb	r1, [r7, #11]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	f7f6 f86c 	bl	80045f0 <HAL_PCD_EP_Receive>
 800e518:	4603      	mov	r3, r0
 800e51a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	4618      	mov	r0, r3
 800e520:	f000 f86e 	bl	800e600 <USBD_Get_USB_Status>
 800e524:	4603      	mov	r3, r0
 800e526:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e528:	7dbb      	ldrb	r3, [r7, #22]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e544:	78fa      	ldrb	r2, [r7, #3]
 800e546:	4611      	mov	r1, r2
 800e548:	4618      	mov	r0, r3
 800e54a:	f7f6 f89c 	bl	8004686 <HAL_PCD_EP_GetRxCount>
 800e54e:	4603      	mov	r3, r0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <HAL_PCDEx_LPM_Callback+0x18>
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d01f      	beq.n	800e5ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e56e:	e03b      	b.n	800e5e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d007      	beq.n	800e588 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e578:	f000 f83c 	bl	800e5f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e57c:	4b1c      	ldr	r3, [pc, #112]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	4a1b      	ldr	r2, [pc, #108]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e582:	f023 0306 	bic.w	r3, r3, #6
 800e586:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	6812      	ldr	r2, [r2, #0]
 800e596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e59a:	f023 0301 	bic.w	r3, r3, #1
 800e59e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fb fcb3 	bl	8009f12 <USBD_LL_Resume>
    break;
 800e5ac:	e01c      	b.n	800e5e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5c0:	f043 0301 	orr.w	r3, r3, #1
 800e5c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fb fc8a 	bl	8009ee6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d005      	beq.n	800e5e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	4a04      	ldr	r2, [pc, #16]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e0:	f043 0306 	orr.w	r3, r3, #6
 800e5e4:	6113      	str	r3, [r2, #16]
    break;
 800e5e6:	bf00      	nop
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	e000ed00 	.word	0xe000ed00

0800e5f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e5f8:	f7f2 f8e4 	bl	80007c4 <SystemClock_Config>
}
 800e5fc:	bf00      	nop
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	2b03      	cmp	r3, #3
 800e612:	d817      	bhi.n	800e644 <USBD_Get_USB_Status+0x44>
 800e614:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <USBD_Get_USB_Status+0x1c>)
 800e616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61a:	bf00      	nop
 800e61c:	0800e62d 	.word	0x0800e62d
 800e620:	0800e633 	.word	0x0800e633
 800e624:	0800e639 	.word	0x0800e639
 800e628:	0800e63f 	.word	0x0800e63f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73fb      	strb	r3, [r7, #15]
    break;
 800e630:	e00b      	b.n	800e64a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e632:	2303      	movs	r3, #3
 800e634:	73fb      	strb	r3, [r7, #15]
    break;
 800e636:	e008      	b.n	800e64a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e638:	2301      	movs	r3, #1
 800e63a:	73fb      	strb	r3, [r7, #15]
    break;
 800e63c:	e005      	b.n	800e64a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e63e:	2303      	movs	r3, #3
 800e640:	73fb      	strb	r3, [r7, #15]
    break;
 800e642:	e002      	b.n	800e64a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e644:	2303      	movs	r3, #3
 800e646:	73fb      	strb	r3, [r7, #15]
    break;
 800e648:	bf00      	nop
  }
  return usb_status;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3714      	adds	r7, #20
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <malloc>:
 800e658:	4b02      	ldr	r3, [pc, #8]	; (800e664 <malloc+0xc>)
 800e65a:	4601      	mov	r1, r0
 800e65c:	6818      	ldr	r0, [r3, #0]
 800e65e:	f000 b82b 	b.w	800e6b8 <_malloc_r>
 800e662:	bf00      	nop
 800e664:	2000015c 	.word	0x2000015c

0800e668 <free>:
 800e668:	4b02      	ldr	r3, [pc, #8]	; (800e674 <free+0xc>)
 800e66a:	4601      	mov	r1, r0
 800e66c:	6818      	ldr	r0, [r3, #0]
 800e66e:	f000 b921 	b.w	800e8b4 <_free_r>
 800e672:	bf00      	nop
 800e674:	2000015c 	.word	0x2000015c

0800e678 <sbrk_aligned>:
 800e678:	b570      	push	{r4, r5, r6, lr}
 800e67a:	4e0e      	ldr	r6, [pc, #56]	; (800e6b4 <sbrk_aligned+0x3c>)
 800e67c:	460c      	mov	r4, r1
 800e67e:	6831      	ldr	r1, [r6, #0]
 800e680:	4605      	mov	r5, r0
 800e682:	b911      	cbnz	r1, 800e68a <sbrk_aligned+0x12>
 800e684:	f000 f8cc 	bl	800e820 <_sbrk_r>
 800e688:	6030      	str	r0, [r6, #0]
 800e68a:	4621      	mov	r1, r4
 800e68c:	4628      	mov	r0, r5
 800e68e:	f000 f8c7 	bl	800e820 <_sbrk_r>
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	d00a      	beq.n	800e6ac <sbrk_aligned+0x34>
 800e696:	1cc4      	adds	r4, r0, #3
 800e698:	f024 0403 	bic.w	r4, r4, #3
 800e69c:	42a0      	cmp	r0, r4
 800e69e:	d007      	beq.n	800e6b0 <sbrk_aligned+0x38>
 800e6a0:	1a21      	subs	r1, r4, r0
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 f8bc 	bl	800e820 <_sbrk_r>
 800e6a8:	3001      	adds	r0, #1
 800e6aa:	d101      	bne.n	800e6b0 <sbrk_aligned+0x38>
 800e6ac:	f04f 34ff 	mov.w	r4, #4294967295
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	20006718 	.word	0x20006718

0800e6b8 <_malloc_r>:
 800e6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6bc:	1ccd      	adds	r5, r1, #3
 800e6be:	f025 0503 	bic.w	r5, r5, #3
 800e6c2:	3508      	adds	r5, #8
 800e6c4:	2d0c      	cmp	r5, #12
 800e6c6:	bf38      	it	cc
 800e6c8:	250c      	movcc	r5, #12
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	db01      	blt.n	800e6d4 <_malloc_r+0x1c>
 800e6d0:	42a9      	cmp	r1, r5
 800e6d2:	d905      	bls.n	800e6e0 <_malloc_r+0x28>
 800e6d4:	230c      	movs	r3, #12
 800e6d6:	603b      	str	r3, [r7, #0]
 800e6d8:	2600      	movs	r6, #0
 800e6da:	4630      	mov	r0, r6
 800e6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e7b4 <_malloc_r+0xfc>
 800e6e4:	f000 f868 	bl	800e7b8 <__malloc_lock>
 800e6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ec:	461c      	mov	r4, r3
 800e6ee:	bb5c      	cbnz	r4, 800e748 <_malloc_r+0x90>
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	f7ff ffc0 	bl	800e678 <sbrk_aligned>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	d155      	bne.n	800e7aa <_malloc_r+0xf2>
 800e6fe:	f8d8 4000 	ldr.w	r4, [r8]
 800e702:	4626      	mov	r6, r4
 800e704:	2e00      	cmp	r6, #0
 800e706:	d145      	bne.n	800e794 <_malloc_r+0xdc>
 800e708:	2c00      	cmp	r4, #0
 800e70a:	d048      	beq.n	800e79e <_malloc_r+0xe6>
 800e70c:	6823      	ldr	r3, [r4, #0]
 800e70e:	4631      	mov	r1, r6
 800e710:	4638      	mov	r0, r7
 800e712:	eb04 0903 	add.w	r9, r4, r3
 800e716:	f000 f883 	bl	800e820 <_sbrk_r>
 800e71a:	4581      	cmp	r9, r0
 800e71c:	d13f      	bne.n	800e79e <_malloc_r+0xe6>
 800e71e:	6821      	ldr	r1, [r4, #0]
 800e720:	1a6d      	subs	r5, r5, r1
 800e722:	4629      	mov	r1, r5
 800e724:	4638      	mov	r0, r7
 800e726:	f7ff ffa7 	bl	800e678 <sbrk_aligned>
 800e72a:	3001      	adds	r0, #1
 800e72c:	d037      	beq.n	800e79e <_malloc_r+0xe6>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	442b      	add	r3, r5
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	f8d8 3000 	ldr.w	r3, [r8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d038      	beq.n	800e7ae <_malloc_r+0xf6>
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	42a2      	cmp	r2, r4
 800e740:	d12b      	bne.n	800e79a <_malloc_r+0xe2>
 800e742:	2200      	movs	r2, #0
 800e744:	605a      	str	r2, [r3, #4]
 800e746:	e00f      	b.n	800e768 <_malloc_r+0xb0>
 800e748:	6822      	ldr	r2, [r4, #0]
 800e74a:	1b52      	subs	r2, r2, r5
 800e74c:	d41f      	bmi.n	800e78e <_malloc_r+0xd6>
 800e74e:	2a0b      	cmp	r2, #11
 800e750:	d917      	bls.n	800e782 <_malloc_r+0xca>
 800e752:	1961      	adds	r1, r4, r5
 800e754:	42a3      	cmp	r3, r4
 800e756:	6025      	str	r5, [r4, #0]
 800e758:	bf18      	it	ne
 800e75a:	6059      	strne	r1, [r3, #4]
 800e75c:	6863      	ldr	r3, [r4, #4]
 800e75e:	bf08      	it	eq
 800e760:	f8c8 1000 	streq.w	r1, [r8]
 800e764:	5162      	str	r2, [r4, r5]
 800e766:	604b      	str	r3, [r1, #4]
 800e768:	4638      	mov	r0, r7
 800e76a:	f104 060b 	add.w	r6, r4, #11
 800e76e:	f000 f829 	bl	800e7c4 <__malloc_unlock>
 800e772:	f026 0607 	bic.w	r6, r6, #7
 800e776:	1d23      	adds	r3, r4, #4
 800e778:	1af2      	subs	r2, r6, r3
 800e77a:	d0ae      	beq.n	800e6da <_malloc_r+0x22>
 800e77c:	1b9b      	subs	r3, r3, r6
 800e77e:	50a3      	str	r3, [r4, r2]
 800e780:	e7ab      	b.n	800e6da <_malloc_r+0x22>
 800e782:	42a3      	cmp	r3, r4
 800e784:	6862      	ldr	r2, [r4, #4]
 800e786:	d1dd      	bne.n	800e744 <_malloc_r+0x8c>
 800e788:	f8c8 2000 	str.w	r2, [r8]
 800e78c:	e7ec      	b.n	800e768 <_malloc_r+0xb0>
 800e78e:	4623      	mov	r3, r4
 800e790:	6864      	ldr	r4, [r4, #4]
 800e792:	e7ac      	b.n	800e6ee <_malloc_r+0x36>
 800e794:	4634      	mov	r4, r6
 800e796:	6876      	ldr	r6, [r6, #4]
 800e798:	e7b4      	b.n	800e704 <_malloc_r+0x4c>
 800e79a:	4613      	mov	r3, r2
 800e79c:	e7cc      	b.n	800e738 <_malloc_r+0x80>
 800e79e:	230c      	movs	r3, #12
 800e7a0:	603b      	str	r3, [r7, #0]
 800e7a2:	4638      	mov	r0, r7
 800e7a4:	f000 f80e 	bl	800e7c4 <__malloc_unlock>
 800e7a8:	e797      	b.n	800e6da <_malloc_r+0x22>
 800e7aa:	6025      	str	r5, [r4, #0]
 800e7ac:	e7dc      	b.n	800e768 <_malloc_r+0xb0>
 800e7ae:	605b      	str	r3, [r3, #4]
 800e7b0:	deff      	udf	#255	; 0xff
 800e7b2:	bf00      	nop
 800e7b4:	20006714 	.word	0x20006714

0800e7b8 <__malloc_lock>:
 800e7b8:	4801      	ldr	r0, [pc, #4]	; (800e7c0 <__malloc_lock+0x8>)
 800e7ba:	f000 b86b 	b.w	800e894 <__retarget_lock_acquire_recursive>
 800e7be:	bf00      	nop
 800e7c0:	20006858 	.word	0x20006858

0800e7c4 <__malloc_unlock>:
 800e7c4:	4801      	ldr	r0, [pc, #4]	; (800e7cc <__malloc_unlock+0x8>)
 800e7c6:	f000 b866 	b.w	800e896 <__retarget_lock_release_recursive>
 800e7ca:	bf00      	nop
 800e7cc:	20006858 	.word	0x20006858

0800e7d0 <siprintf>:
 800e7d0:	b40e      	push	{r1, r2, r3}
 800e7d2:	b500      	push	{lr}
 800e7d4:	b09c      	sub	sp, #112	; 0x70
 800e7d6:	ab1d      	add	r3, sp, #116	; 0x74
 800e7d8:	9002      	str	r0, [sp, #8]
 800e7da:	9006      	str	r0, [sp, #24]
 800e7dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7e0:	4809      	ldr	r0, [pc, #36]	; (800e808 <siprintf+0x38>)
 800e7e2:	9107      	str	r1, [sp, #28]
 800e7e4:	9104      	str	r1, [sp, #16]
 800e7e6:	4909      	ldr	r1, [pc, #36]	; (800e80c <siprintf+0x3c>)
 800e7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ec:	9105      	str	r1, [sp, #20]
 800e7ee:	6800      	ldr	r0, [r0, #0]
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	a902      	add	r1, sp, #8
 800e7f4:	f000 f904 	bl	800ea00 <_svfiprintf_r>
 800e7f8:	9b02      	ldr	r3, [sp, #8]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	701a      	strb	r2, [r3, #0]
 800e7fe:	b01c      	add	sp, #112	; 0x70
 800e800:	f85d eb04 	ldr.w	lr, [sp], #4
 800e804:	b003      	add	sp, #12
 800e806:	4770      	bx	lr
 800e808:	2000015c 	.word	0x2000015c
 800e80c:	ffff0208 	.word	0xffff0208

0800e810 <memset>:
 800e810:	4402      	add	r2, r0
 800e812:	4603      	mov	r3, r0
 800e814:	4293      	cmp	r3, r2
 800e816:	d100      	bne.n	800e81a <memset+0xa>
 800e818:	4770      	bx	lr
 800e81a:	f803 1b01 	strb.w	r1, [r3], #1
 800e81e:	e7f9      	b.n	800e814 <memset+0x4>

0800e820 <_sbrk_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4d06      	ldr	r5, [pc, #24]	; (800e83c <_sbrk_r+0x1c>)
 800e824:	2300      	movs	r3, #0
 800e826:	4604      	mov	r4, r0
 800e828:	4608      	mov	r0, r1
 800e82a:	602b      	str	r3, [r5, #0]
 800e82c:	f7f2 fcc8 	bl	80011c0 <_sbrk>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d102      	bne.n	800e83a <_sbrk_r+0x1a>
 800e834:	682b      	ldr	r3, [r5, #0]
 800e836:	b103      	cbz	r3, 800e83a <_sbrk_r+0x1a>
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	bd38      	pop	{r3, r4, r5, pc}
 800e83c:	20006854 	.word	0x20006854

0800e840 <__errno>:
 800e840:	4b01      	ldr	r3, [pc, #4]	; (800e848 <__errno+0x8>)
 800e842:	6818      	ldr	r0, [r3, #0]
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	2000015c 	.word	0x2000015c

0800e84c <__libc_init_array>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	4d0d      	ldr	r5, [pc, #52]	; (800e884 <__libc_init_array+0x38>)
 800e850:	4c0d      	ldr	r4, [pc, #52]	; (800e888 <__libc_init_array+0x3c>)
 800e852:	1b64      	subs	r4, r4, r5
 800e854:	10a4      	asrs	r4, r4, #2
 800e856:	2600      	movs	r6, #0
 800e858:	42a6      	cmp	r6, r4
 800e85a:	d109      	bne.n	800e870 <__libc_init_array+0x24>
 800e85c:	4d0b      	ldr	r5, [pc, #44]	; (800e88c <__libc_init_array+0x40>)
 800e85e:	4c0c      	ldr	r4, [pc, #48]	; (800e890 <__libc_init_array+0x44>)
 800e860:	f000 fbae 	bl	800efc0 <_init>
 800e864:	1b64      	subs	r4, r4, r5
 800e866:	10a4      	asrs	r4, r4, #2
 800e868:	2600      	movs	r6, #0
 800e86a:	42a6      	cmp	r6, r4
 800e86c:	d105      	bne.n	800e87a <__libc_init_array+0x2e>
 800e86e:	bd70      	pop	{r4, r5, r6, pc}
 800e870:	f855 3b04 	ldr.w	r3, [r5], #4
 800e874:	4798      	blx	r3
 800e876:	3601      	adds	r6, #1
 800e878:	e7ee      	b.n	800e858 <__libc_init_array+0xc>
 800e87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e87e:	4798      	blx	r3
 800e880:	3601      	adds	r6, #1
 800e882:	e7f2      	b.n	800e86a <__libc_init_array+0x1e>
 800e884:	0800f130 	.word	0x0800f130
 800e888:	0800f130 	.word	0x0800f130
 800e88c:	0800f130 	.word	0x0800f130
 800e890:	0800f134 	.word	0x0800f134

0800e894 <__retarget_lock_acquire_recursive>:
 800e894:	4770      	bx	lr

0800e896 <__retarget_lock_release_recursive>:
 800e896:	4770      	bx	lr

0800e898 <memcpy>:
 800e898:	440a      	add	r2, r1
 800e89a:	4291      	cmp	r1, r2
 800e89c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8a0:	d100      	bne.n	800e8a4 <memcpy+0xc>
 800e8a2:	4770      	bx	lr
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ae:	4291      	cmp	r1, r2
 800e8b0:	d1f9      	bne.n	800e8a6 <memcpy+0xe>
 800e8b2:	bd10      	pop	{r4, pc}

0800e8b4 <_free_r>:
 800e8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8b6:	2900      	cmp	r1, #0
 800e8b8:	d044      	beq.n	800e944 <_free_r+0x90>
 800e8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8be:	9001      	str	r0, [sp, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e8c6:	bfb8      	it	lt
 800e8c8:	18e4      	addlt	r4, r4, r3
 800e8ca:	f7ff ff75 	bl	800e7b8 <__malloc_lock>
 800e8ce:	4a1e      	ldr	r2, [pc, #120]	; (800e948 <_free_r+0x94>)
 800e8d0:	9801      	ldr	r0, [sp, #4]
 800e8d2:	6813      	ldr	r3, [r2, #0]
 800e8d4:	b933      	cbnz	r3, 800e8e4 <_free_r+0x30>
 800e8d6:	6063      	str	r3, [r4, #4]
 800e8d8:	6014      	str	r4, [r2, #0]
 800e8da:	b003      	add	sp, #12
 800e8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8e0:	f7ff bf70 	b.w	800e7c4 <__malloc_unlock>
 800e8e4:	42a3      	cmp	r3, r4
 800e8e6:	d908      	bls.n	800e8fa <_free_r+0x46>
 800e8e8:	6825      	ldr	r5, [r4, #0]
 800e8ea:	1961      	adds	r1, r4, r5
 800e8ec:	428b      	cmp	r3, r1
 800e8ee:	bf01      	itttt	eq
 800e8f0:	6819      	ldreq	r1, [r3, #0]
 800e8f2:	685b      	ldreq	r3, [r3, #4]
 800e8f4:	1949      	addeq	r1, r1, r5
 800e8f6:	6021      	streq	r1, [r4, #0]
 800e8f8:	e7ed      	b.n	800e8d6 <_free_r+0x22>
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	b10b      	cbz	r3, 800e904 <_free_r+0x50>
 800e900:	42a3      	cmp	r3, r4
 800e902:	d9fa      	bls.n	800e8fa <_free_r+0x46>
 800e904:	6811      	ldr	r1, [r2, #0]
 800e906:	1855      	adds	r5, r2, r1
 800e908:	42a5      	cmp	r5, r4
 800e90a:	d10b      	bne.n	800e924 <_free_r+0x70>
 800e90c:	6824      	ldr	r4, [r4, #0]
 800e90e:	4421      	add	r1, r4
 800e910:	1854      	adds	r4, r2, r1
 800e912:	42a3      	cmp	r3, r4
 800e914:	6011      	str	r1, [r2, #0]
 800e916:	d1e0      	bne.n	800e8da <_free_r+0x26>
 800e918:	681c      	ldr	r4, [r3, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	6053      	str	r3, [r2, #4]
 800e91e:	440c      	add	r4, r1
 800e920:	6014      	str	r4, [r2, #0]
 800e922:	e7da      	b.n	800e8da <_free_r+0x26>
 800e924:	d902      	bls.n	800e92c <_free_r+0x78>
 800e926:	230c      	movs	r3, #12
 800e928:	6003      	str	r3, [r0, #0]
 800e92a:	e7d6      	b.n	800e8da <_free_r+0x26>
 800e92c:	6825      	ldr	r5, [r4, #0]
 800e92e:	1961      	adds	r1, r4, r5
 800e930:	428b      	cmp	r3, r1
 800e932:	bf04      	itt	eq
 800e934:	6819      	ldreq	r1, [r3, #0]
 800e936:	685b      	ldreq	r3, [r3, #4]
 800e938:	6063      	str	r3, [r4, #4]
 800e93a:	bf04      	itt	eq
 800e93c:	1949      	addeq	r1, r1, r5
 800e93e:	6021      	streq	r1, [r4, #0]
 800e940:	6054      	str	r4, [r2, #4]
 800e942:	e7ca      	b.n	800e8da <_free_r+0x26>
 800e944:	b003      	add	sp, #12
 800e946:	bd30      	pop	{r4, r5, pc}
 800e948:	20006714 	.word	0x20006714

0800e94c <__ssputs_r>:
 800e94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	688e      	ldr	r6, [r1, #8]
 800e952:	461f      	mov	r7, r3
 800e954:	42be      	cmp	r6, r7
 800e956:	680b      	ldr	r3, [r1, #0]
 800e958:	4682      	mov	sl, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	4690      	mov	r8, r2
 800e95e:	d82c      	bhi.n	800e9ba <__ssputs_r+0x6e>
 800e960:	898a      	ldrh	r2, [r1, #12]
 800e962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e966:	d026      	beq.n	800e9b6 <__ssputs_r+0x6a>
 800e968:	6965      	ldr	r5, [r4, #20]
 800e96a:	6909      	ldr	r1, [r1, #16]
 800e96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e970:	eba3 0901 	sub.w	r9, r3, r1
 800e974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e978:	1c7b      	adds	r3, r7, #1
 800e97a:	444b      	add	r3, r9
 800e97c:	106d      	asrs	r5, r5, #1
 800e97e:	429d      	cmp	r5, r3
 800e980:	bf38      	it	cc
 800e982:	461d      	movcc	r5, r3
 800e984:	0553      	lsls	r3, r2, #21
 800e986:	d527      	bpl.n	800e9d8 <__ssputs_r+0x8c>
 800e988:	4629      	mov	r1, r5
 800e98a:	f7ff fe95 	bl	800e6b8 <_malloc_r>
 800e98e:	4606      	mov	r6, r0
 800e990:	b360      	cbz	r0, 800e9ec <__ssputs_r+0xa0>
 800e992:	6921      	ldr	r1, [r4, #16]
 800e994:	464a      	mov	r2, r9
 800e996:	f7ff ff7f 	bl	800e898 <memcpy>
 800e99a:	89a3      	ldrh	r3, [r4, #12]
 800e99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	6126      	str	r6, [r4, #16]
 800e9a8:	6165      	str	r5, [r4, #20]
 800e9aa:	444e      	add	r6, r9
 800e9ac:	eba5 0509 	sub.w	r5, r5, r9
 800e9b0:	6026      	str	r6, [r4, #0]
 800e9b2:	60a5      	str	r5, [r4, #8]
 800e9b4:	463e      	mov	r6, r7
 800e9b6:	42be      	cmp	r6, r7
 800e9b8:	d900      	bls.n	800e9bc <__ssputs_r+0x70>
 800e9ba:	463e      	mov	r6, r7
 800e9bc:	6820      	ldr	r0, [r4, #0]
 800e9be:	4632      	mov	r2, r6
 800e9c0:	4641      	mov	r1, r8
 800e9c2:	f000 faab 	bl	800ef1c <memmove>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	1b9b      	subs	r3, r3, r6
 800e9ca:	60a3      	str	r3, [r4, #8]
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	4433      	add	r3, r6
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d8:	462a      	mov	r2, r5
 800e9da:	f000 fab9 	bl	800ef50 <_realloc_r>
 800e9de:	4606      	mov	r6, r0
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d1e0      	bne.n	800e9a6 <__ssputs_r+0x5a>
 800e9e4:	6921      	ldr	r1, [r4, #16]
 800e9e6:	4650      	mov	r0, sl
 800e9e8:	f7ff ff64 	bl	800e8b4 <_free_r>
 800e9ec:	230c      	movs	r3, #12
 800e9ee:	f8ca 3000 	str.w	r3, [sl]
 800e9f2:	89a3      	ldrh	r3, [r4, #12]
 800e9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f8:	81a3      	strh	r3, [r4, #12]
 800e9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fe:	e7e9      	b.n	800e9d4 <__ssputs_r+0x88>

0800ea00 <_svfiprintf_r>:
 800ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea04:	4698      	mov	r8, r3
 800ea06:	898b      	ldrh	r3, [r1, #12]
 800ea08:	061b      	lsls	r3, r3, #24
 800ea0a:	b09d      	sub	sp, #116	; 0x74
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	460d      	mov	r5, r1
 800ea10:	4614      	mov	r4, r2
 800ea12:	d50e      	bpl.n	800ea32 <_svfiprintf_r+0x32>
 800ea14:	690b      	ldr	r3, [r1, #16]
 800ea16:	b963      	cbnz	r3, 800ea32 <_svfiprintf_r+0x32>
 800ea18:	2140      	movs	r1, #64	; 0x40
 800ea1a:	f7ff fe4d 	bl	800e6b8 <_malloc_r>
 800ea1e:	6028      	str	r0, [r5, #0]
 800ea20:	6128      	str	r0, [r5, #16]
 800ea22:	b920      	cbnz	r0, 800ea2e <_svfiprintf_r+0x2e>
 800ea24:	230c      	movs	r3, #12
 800ea26:	603b      	str	r3, [r7, #0]
 800ea28:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2c:	e0d0      	b.n	800ebd0 <_svfiprintf_r+0x1d0>
 800ea2e:	2340      	movs	r3, #64	; 0x40
 800ea30:	616b      	str	r3, [r5, #20]
 800ea32:	2300      	movs	r3, #0
 800ea34:	9309      	str	r3, [sp, #36]	; 0x24
 800ea36:	2320      	movs	r3, #32
 800ea38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea40:	2330      	movs	r3, #48	; 0x30
 800ea42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ebe8 <_svfiprintf_r+0x1e8>
 800ea46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea4a:	f04f 0901 	mov.w	r9, #1
 800ea4e:	4623      	mov	r3, r4
 800ea50:	469a      	mov	sl, r3
 800ea52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea56:	b10a      	cbz	r2, 800ea5c <_svfiprintf_r+0x5c>
 800ea58:	2a25      	cmp	r2, #37	; 0x25
 800ea5a:	d1f9      	bne.n	800ea50 <_svfiprintf_r+0x50>
 800ea5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea60:	d00b      	beq.n	800ea7a <_svfiprintf_r+0x7a>
 800ea62:	465b      	mov	r3, fp
 800ea64:	4622      	mov	r2, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	4638      	mov	r0, r7
 800ea6a:	f7ff ff6f 	bl	800e94c <__ssputs_r>
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f000 80a9 	beq.w	800ebc6 <_svfiprintf_r+0x1c6>
 800ea74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea76:	445a      	add	r2, fp
 800ea78:	9209      	str	r2, [sp, #36]	; 0x24
 800ea7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 80a1 	beq.w	800ebc6 <_svfiprintf_r+0x1c6>
 800ea84:	2300      	movs	r3, #0
 800ea86:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea8e:	f10a 0a01 	add.w	sl, sl, #1
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	9307      	str	r3, [sp, #28]
 800ea96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea9c:	4654      	mov	r4, sl
 800ea9e:	2205      	movs	r2, #5
 800eaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa4:	4850      	ldr	r0, [pc, #320]	; (800ebe8 <_svfiprintf_r+0x1e8>)
 800eaa6:	f7f1 fbd3 	bl	8000250 <memchr>
 800eaaa:	9a04      	ldr	r2, [sp, #16]
 800eaac:	b9d8      	cbnz	r0, 800eae6 <_svfiprintf_r+0xe6>
 800eaae:	06d0      	lsls	r0, r2, #27
 800eab0:	bf44      	itt	mi
 800eab2:	2320      	movmi	r3, #32
 800eab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab8:	0711      	lsls	r1, r2, #28
 800eaba:	bf44      	itt	mi
 800eabc:	232b      	movmi	r3, #43	; 0x2b
 800eabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac2:	f89a 3000 	ldrb.w	r3, [sl]
 800eac6:	2b2a      	cmp	r3, #42	; 0x2a
 800eac8:	d015      	beq.n	800eaf6 <_svfiprintf_r+0xf6>
 800eaca:	9a07      	ldr	r2, [sp, #28]
 800eacc:	4654      	mov	r4, sl
 800eace:	2000      	movs	r0, #0
 800ead0:	f04f 0c0a 	mov.w	ip, #10
 800ead4:	4621      	mov	r1, r4
 800ead6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eada:	3b30      	subs	r3, #48	; 0x30
 800eadc:	2b09      	cmp	r3, #9
 800eade:	d94d      	bls.n	800eb7c <_svfiprintf_r+0x17c>
 800eae0:	b1b0      	cbz	r0, 800eb10 <_svfiprintf_r+0x110>
 800eae2:	9207      	str	r2, [sp, #28]
 800eae4:	e014      	b.n	800eb10 <_svfiprintf_r+0x110>
 800eae6:	eba0 0308 	sub.w	r3, r0, r8
 800eaea:	fa09 f303 	lsl.w	r3, r9, r3
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	46a2      	mov	sl, r4
 800eaf4:	e7d2      	b.n	800ea9c <_svfiprintf_r+0x9c>
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	1d19      	adds	r1, r3, #4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	9103      	str	r1, [sp, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	bfbb      	ittet	lt
 800eb02:	425b      	neglt	r3, r3
 800eb04:	f042 0202 	orrlt.w	r2, r2, #2
 800eb08:	9307      	strge	r3, [sp, #28]
 800eb0a:	9307      	strlt	r3, [sp, #28]
 800eb0c:	bfb8      	it	lt
 800eb0e:	9204      	strlt	r2, [sp, #16]
 800eb10:	7823      	ldrb	r3, [r4, #0]
 800eb12:	2b2e      	cmp	r3, #46	; 0x2e
 800eb14:	d10c      	bne.n	800eb30 <_svfiprintf_r+0x130>
 800eb16:	7863      	ldrb	r3, [r4, #1]
 800eb18:	2b2a      	cmp	r3, #42	; 0x2a
 800eb1a:	d134      	bne.n	800eb86 <_svfiprintf_r+0x186>
 800eb1c:	9b03      	ldr	r3, [sp, #12]
 800eb1e:	1d1a      	adds	r2, r3, #4
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	9203      	str	r2, [sp, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	bfb8      	it	lt
 800eb28:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb2c:	3402      	adds	r4, #2
 800eb2e:	9305      	str	r3, [sp, #20]
 800eb30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ebf8 <_svfiprintf_r+0x1f8>
 800eb34:	7821      	ldrb	r1, [r4, #0]
 800eb36:	2203      	movs	r2, #3
 800eb38:	4650      	mov	r0, sl
 800eb3a:	f7f1 fb89 	bl	8000250 <memchr>
 800eb3e:	b138      	cbz	r0, 800eb50 <_svfiprintf_r+0x150>
 800eb40:	9b04      	ldr	r3, [sp, #16]
 800eb42:	eba0 000a 	sub.w	r0, r0, sl
 800eb46:	2240      	movs	r2, #64	; 0x40
 800eb48:	4082      	lsls	r2, r0
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	3401      	adds	r4, #1
 800eb4e:	9304      	str	r3, [sp, #16]
 800eb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb54:	4825      	ldr	r0, [pc, #148]	; (800ebec <_svfiprintf_r+0x1ec>)
 800eb56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb5a:	2206      	movs	r2, #6
 800eb5c:	f7f1 fb78 	bl	8000250 <memchr>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d038      	beq.n	800ebd6 <_svfiprintf_r+0x1d6>
 800eb64:	4b22      	ldr	r3, [pc, #136]	; (800ebf0 <_svfiprintf_r+0x1f0>)
 800eb66:	bb1b      	cbnz	r3, 800ebb0 <_svfiprintf_r+0x1b0>
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	3307      	adds	r3, #7
 800eb6c:	f023 0307 	bic.w	r3, r3, #7
 800eb70:	3308      	adds	r3, #8
 800eb72:	9303      	str	r3, [sp, #12]
 800eb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb76:	4433      	add	r3, r6
 800eb78:	9309      	str	r3, [sp, #36]	; 0x24
 800eb7a:	e768      	b.n	800ea4e <_svfiprintf_r+0x4e>
 800eb7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb80:	460c      	mov	r4, r1
 800eb82:	2001      	movs	r0, #1
 800eb84:	e7a6      	b.n	800ead4 <_svfiprintf_r+0xd4>
 800eb86:	2300      	movs	r3, #0
 800eb88:	3401      	adds	r4, #1
 800eb8a:	9305      	str	r3, [sp, #20]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	f04f 0c0a 	mov.w	ip, #10
 800eb92:	4620      	mov	r0, r4
 800eb94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb98:	3a30      	subs	r2, #48	; 0x30
 800eb9a:	2a09      	cmp	r2, #9
 800eb9c:	d903      	bls.n	800eba6 <_svfiprintf_r+0x1a6>
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0c6      	beq.n	800eb30 <_svfiprintf_r+0x130>
 800eba2:	9105      	str	r1, [sp, #20]
 800eba4:	e7c4      	b.n	800eb30 <_svfiprintf_r+0x130>
 800eba6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebaa:	4604      	mov	r4, r0
 800ebac:	2301      	movs	r3, #1
 800ebae:	e7f0      	b.n	800eb92 <_svfiprintf_r+0x192>
 800ebb0:	ab03      	add	r3, sp, #12
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	462a      	mov	r2, r5
 800ebb6:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <_svfiprintf_r+0x1f4>)
 800ebb8:	a904      	add	r1, sp, #16
 800ebba:	4638      	mov	r0, r7
 800ebbc:	f3af 8000 	nop.w
 800ebc0:	1c42      	adds	r2, r0, #1
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	d1d6      	bne.n	800eb74 <_svfiprintf_r+0x174>
 800ebc6:	89ab      	ldrh	r3, [r5, #12]
 800ebc8:	065b      	lsls	r3, r3, #25
 800ebca:	f53f af2d 	bmi.w	800ea28 <_svfiprintf_r+0x28>
 800ebce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebd0:	b01d      	add	sp, #116	; 0x74
 800ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd6:	ab03      	add	r3, sp, #12
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	462a      	mov	r2, r5
 800ebdc:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <_svfiprintf_r+0x1f4>)
 800ebde:	a904      	add	r1, sp, #16
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f000 f879 	bl	800ecd8 <_printf_i>
 800ebe6:	e7eb      	b.n	800ebc0 <_svfiprintf_r+0x1c0>
 800ebe8:	0800f0f4 	.word	0x0800f0f4
 800ebec:	0800f0fe 	.word	0x0800f0fe
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	0800e94d 	.word	0x0800e94d
 800ebf8:	0800f0fa 	.word	0x0800f0fa

0800ebfc <_printf_common>:
 800ebfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec00:	4616      	mov	r6, r2
 800ec02:	4699      	mov	r9, r3
 800ec04:	688a      	ldr	r2, [r1, #8]
 800ec06:	690b      	ldr	r3, [r1, #16]
 800ec08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	bfb8      	it	lt
 800ec10:	4613      	movlt	r3, r2
 800ec12:	6033      	str	r3, [r6, #0]
 800ec14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec18:	4607      	mov	r7, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	b10a      	cbz	r2, 800ec22 <_printf_common+0x26>
 800ec1e:	3301      	adds	r3, #1
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	0699      	lsls	r1, r3, #26
 800ec26:	bf42      	ittt	mi
 800ec28:	6833      	ldrmi	r3, [r6, #0]
 800ec2a:	3302      	addmi	r3, #2
 800ec2c:	6033      	strmi	r3, [r6, #0]
 800ec2e:	6825      	ldr	r5, [r4, #0]
 800ec30:	f015 0506 	ands.w	r5, r5, #6
 800ec34:	d106      	bne.n	800ec44 <_printf_common+0x48>
 800ec36:	f104 0a19 	add.w	sl, r4, #25
 800ec3a:	68e3      	ldr	r3, [r4, #12]
 800ec3c:	6832      	ldr	r2, [r6, #0]
 800ec3e:	1a9b      	subs	r3, r3, r2
 800ec40:	42ab      	cmp	r3, r5
 800ec42:	dc26      	bgt.n	800ec92 <_printf_common+0x96>
 800ec44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec48:	1e13      	subs	r3, r2, #0
 800ec4a:	6822      	ldr	r2, [r4, #0]
 800ec4c:	bf18      	it	ne
 800ec4e:	2301      	movne	r3, #1
 800ec50:	0692      	lsls	r2, r2, #26
 800ec52:	d42b      	bmi.n	800ecac <_printf_common+0xb0>
 800ec54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec58:	4649      	mov	r1, r9
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	47c0      	blx	r8
 800ec5e:	3001      	adds	r0, #1
 800ec60:	d01e      	beq.n	800eca0 <_printf_common+0xa4>
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	6922      	ldr	r2, [r4, #16]
 800ec66:	f003 0306 	and.w	r3, r3, #6
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	bf02      	ittt	eq
 800ec6e:	68e5      	ldreq	r5, [r4, #12]
 800ec70:	6833      	ldreq	r3, [r6, #0]
 800ec72:	1aed      	subeq	r5, r5, r3
 800ec74:	68a3      	ldr	r3, [r4, #8]
 800ec76:	bf0c      	ite	eq
 800ec78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec7c:	2500      	movne	r5, #0
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	bfc4      	itt	gt
 800ec82:	1a9b      	subgt	r3, r3, r2
 800ec84:	18ed      	addgt	r5, r5, r3
 800ec86:	2600      	movs	r6, #0
 800ec88:	341a      	adds	r4, #26
 800ec8a:	42b5      	cmp	r5, r6
 800ec8c:	d11a      	bne.n	800ecc4 <_printf_common+0xc8>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	e008      	b.n	800eca4 <_printf_common+0xa8>
 800ec92:	2301      	movs	r3, #1
 800ec94:	4652      	mov	r2, sl
 800ec96:	4649      	mov	r1, r9
 800ec98:	4638      	mov	r0, r7
 800ec9a:	47c0      	blx	r8
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d103      	bne.n	800eca8 <_printf_common+0xac>
 800eca0:	f04f 30ff 	mov.w	r0, #4294967295
 800eca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca8:	3501      	adds	r5, #1
 800ecaa:	e7c6      	b.n	800ec3a <_printf_common+0x3e>
 800ecac:	18e1      	adds	r1, r4, r3
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	2030      	movs	r0, #48	; 0x30
 800ecb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecb6:	4422      	add	r2, r4
 800ecb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecc0:	3302      	adds	r3, #2
 800ecc2:	e7c7      	b.n	800ec54 <_printf_common+0x58>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	4649      	mov	r1, r9
 800ecca:	4638      	mov	r0, r7
 800eccc:	47c0      	blx	r8
 800ecce:	3001      	adds	r0, #1
 800ecd0:	d0e6      	beq.n	800eca0 <_printf_common+0xa4>
 800ecd2:	3601      	adds	r6, #1
 800ecd4:	e7d9      	b.n	800ec8a <_printf_common+0x8e>
	...

0800ecd8 <_printf_i>:
 800ecd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecdc:	7e0f      	ldrb	r7, [r1, #24]
 800ecde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ece0:	2f78      	cmp	r7, #120	; 0x78
 800ece2:	4691      	mov	r9, r2
 800ece4:	4680      	mov	r8, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	469a      	mov	sl, r3
 800ecea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecee:	d807      	bhi.n	800ed00 <_printf_i+0x28>
 800ecf0:	2f62      	cmp	r7, #98	; 0x62
 800ecf2:	d80a      	bhi.n	800ed0a <_printf_i+0x32>
 800ecf4:	2f00      	cmp	r7, #0
 800ecf6:	f000 80d4 	beq.w	800eea2 <_printf_i+0x1ca>
 800ecfa:	2f58      	cmp	r7, #88	; 0x58
 800ecfc:	f000 80c0 	beq.w	800ee80 <_printf_i+0x1a8>
 800ed00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed08:	e03a      	b.n	800ed80 <_printf_i+0xa8>
 800ed0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed0e:	2b15      	cmp	r3, #21
 800ed10:	d8f6      	bhi.n	800ed00 <_printf_i+0x28>
 800ed12:	a101      	add	r1, pc, #4	; (adr r1, 800ed18 <_printf_i+0x40>)
 800ed14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed18:	0800ed71 	.word	0x0800ed71
 800ed1c:	0800ed85 	.word	0x0800ed85
 800ed20:	0800ed01 	.word	0x0800ed01
 800ed24:	0800ed01 	.word	0x0800ed01
 800ed28:	0800ed01 	.word	0x0800ed01
 800ed2c:	0800ed01 	.word	0x0800ed01
 800ed30:	0800ed85 	.word	0x0800ed85
 800ed34:	0800ed01 	.word	0x0800ed01
 800ed38:	0800ed01 	.word	0x0800ed01
 800ed3c:	0800ed01 	.word	0x0800ed01
 800ed40:	0800ed01 	.word	0x0800ed01
 800ed44:	0800ee89 	.word	0x0800ee89
 800ed48:	0800edb1 	.word	0x0800edb1
 800ed4c:	0800ee43 	.word	0x0800ee43
 800ed50:	0800ed01 	.word	0x0800ed01
 800ed54:	0800ed01 	.word	0x0800ed01
 800ed58:	0800eeab 	.word	0x0800eeab
 800ed5c:	0800ed01 	.word	0x0800ed01
 800ed60:	0800edb1 	.word	0x0800edb1
 800ed64:	0800ed01 	.word	0x0800ed01
 800ed68:	0800ed01 	.word	0x0800ed01
 800ed6c:	0800ee4b 	.word	0x0800ee4b
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	1d1a      	adds	r2, r3, #4
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	602a      	str	r2, [r5, #0]
 800ed78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed80:	2301      	movs	r3, #1
 800ed82:	e09f      	b.n	800eec4 <_printf_i+0x1ec>
 800ed84:	6820      	ldr	r0, [r4, #0]
 800ed86:	682b      	ldr	r3, [r5, #0]
 800ed88:	0607      	lsls	r7, r0, #24
 800ed8a:	f103 0104 	add.w	r1, r3, #4
 800ed8e:	6029      	str	r1, [r5, #0]
 800ed90:	d501      	bpl.n	800ed96 <_printf_i+0xbe>
 800ed92:	681e      	ldr	r6, [r3, #0]
 800ed94:	e003      	b.n	800ed9e <_printf_i+0xc6>
 800ed96:	0646      	lsls	r6, r0, #25
 800ed98:	d5fb      	bpl.n	800ed92 <_printf_i+0xba>
 800ed9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	da03      	bge.n	800edaa <_printf_i+0xd2>
 800eda2:	232d      	movs	r3, #45	; 0x2d
 800eda4:	4276      	negs	r6, r6
 800eda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edaa:	485a      	ldr	r0, [pc, #360]	; (800ef14 <_printf_i+0x23c>)
 800edac:	230a      	movs	r3, #10
 800edae:	e012      	b.n	800edd6 <_printf_i+0xfe>
 800edb0:	682b      	ldr	r3, [r5, #0]
 800edb2:	6820      	ldr	r0, [r4, #0]
 800edb4:	1d19      	adds	r1, r3, #4
 800edb6:	6029      	str	r1, [r5, #0]
 800edb8:	0605      	lsls	r5, r0, #24
 800edba:	d501      	bpl.n	800edc0 <_printf_i+0xe8>
 800edbc:	681e      	ldr	r6, [r3, #0]
 800edbe:	e002      	b.n	800edc6 <_printf_i+0xee>
 800edc0:	0641      	lsls	r1, r0, #25
 800edc2:	d5fb      	bpl.n	800edbc <_printf_i+0xe4>
 800edc4:	881e      	ldrh	r6, [r3, #0]
 800edc6:	4853      	ldr	r0, [pc, #332]	; (800ef14 <_printf_i+0x23c>)
 800edc8:	2f6f      	cmp	r7, #111	; 0x6f
 800edca:	bf0c      	ite	eq
 800edcc:	2308      	moveq	r3, #8
 800edce:	230a      	movne	r3, #10
 800edd0:	2100      	movs	r1, #0
 800edd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edd6:	6865      	ldr	r5, [r4, #4]
 800edd8:	60a5      	str	r5, [r4, #8]
 800edda:	2d00      	cmp	r5, #0
 800eddc:	bfa2      	ittt	ge
 800edde:	6821      	ldrge	r1, [r4, #0]
 800ede0:	f021 0104 	bicge.w	r1, r1, #4
 800ede4:	6021      	strge	r1, [r4, #0]
 800ede6:	b90e      	cbnz	r6, 800edec <_printf_i+0x114>
 800ede8:	2d00      	cmp	r5, #0
 800edea:	d04b      	beq.n	800ee84 <_printf_i+0x1ac>
 800edec:	4615      	mov	r5, r2
 800edee:	fbb6 f1f3 	udiv	r1, r6, r3
 800edf2:	fb03 6711 	mls	r7, r3, r1, r6
 800edf6:	5dc7      	ldrb	r7, [r0, r7]
 800edf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800edfc:	4637      	mov	r7, r6
 800edfe:	42bb      	cmp	r3, r7
 800ee00:	460e      	mov	r6, r1
 800ee02:	d9f4      	bls.n	800edee <_printf_i+0x116>
 800ee04:	2b08      	cmp	r3, #8
 800ee06:	d10b      	bne.n	800ee20 <_printf_i+0x148>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	07de      	lsls	r6, r3, #31
 800ee0c:	d508      	bpl.n	800ee20 <_printf_i+0x148>
 800ee0e:	6923      	ldr	r3, [r4, #16]
 800ee10:	6861      	ldr	r1, [r4, #4]
 800ee12:	4299      	cmp	r1, r3
 800ee14:	bfde      	ittt	le
 800ee16:	2330      	movle	r3, #48	; 0x30
 800ee18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee20:	1b52      	subs	r2, r2, r5
 800ee22:	6122      	str	r2, [r4, #16]
 800ee24:	f8cd a000 	str.w	sl, [sp]
 800ee28:	464b      	mov	r3, r9
 800ee2a:	aa03      	add	r2, sp, #12
 800ee2c:	4621      	mov	r1, r4
 800ee2e:	4640      	mov	r0, r8
 800ee30:	f7ff fee4 	bl	800ebfc <_printf_common>
 800ee34:	3001      	adds	r0, #1
 800ee36:	d14a      	bne.n	800eece <_printf_i+0x1f6>
 800ee38:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3c:	b004      	add	sp, #16
 800ee3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	f043 0320 	orr.w	r3, r3, #32
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	4833      	ldr	r0, [pc, #204]	; (800ef18 <_printf_i+0x240>)
 800ee4c:	2778      	movs	r7, #120	; 0x78
 800ee4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	6829      	ldr	r1, [r5, #0]
 800ee56:	061f      	lsls	r7, r3, #24
 800ee58:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee5c:	d402      	bmi.n	800ee64 <_printf_i+0x18c>
 800ee5e:	065f      	lsls	r7, r3, #25
 800ee60:	bf48      	it	mi
 800ee62:	b2b6      	uxthmi	r6, r6
 800ee64:	07df      	lsls	r7, r3, #31
 800ee66:	bf48      	it	mi
 800ee68:	f043 0320 	orrmi.w	r3, r3, #32
 800ee6c:	6029      	str	r1, [r5, #0]
 800ee6e:	bf48      	it	mi
 800ee70:	6023      	strmi	r3, [r4, #0]
 800ee72:	b91e      	cbnz	r6, 800ee7c <_printf_i+0x1a4>
 800ee74:	6823      	ldr	r3, [r4, #0]
 800ee76:	f023 0320 	bic.w	r3, r3, #32
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	e7a7      	b.n	800edd0 <_printf_i+0xf8>
 800ee80:	4824      	ldr	r0, [pc, #144]	; (800ef14 <_printf_i+0x23c>)
 800ee82:	e7e4      	b.n	800ee4e <_printf_i+0x176>
 800ee84:	4615      	mov	r5, r2
 800ee86:	e7bd      	b.n	800ee04 <_printf_i+0x12c>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	6826      	ldr	r6, [r4, #0]
 800ee8c:	6961      	ldr	r1, [r4, #20]
 800ee8e:	1d18      	adds	r0, r3, #4
 800ee90:	6028      	str	r0, [r5, #0]
 800ee92:	0635      	lsls	r5, r6, #24
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	d501      	bpl.n	800ee9c <_printf_i+0x1c4>
 800ee98:	6019      	str	r1, [r3, #0]
 800ee9a:	e002      	b.n	800eea2 <_printf_i+0x1ca>
 800ee9c:	0670      	lsls	r0, r6, #25
 800ee9e:	d5fb      	bpl.n	800ee98 <_printf_i+0x1c0>
 800eea0:	8019      	strh	r1, [r3, #0]
 800eea2:	2300      	movs	r3, #0
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	4615      	mov	r5, r2
 800eea8:	e7bc      	b.n	800ee24 <_printf_i+0x14c>
 800eeaa:	682b      	ldr	r3, [r5, #0]
 800eeac:	1d1a      	adds	r2, r3, #4
 800eeae:	602a      	str	r2, [r5, #0]
 800eeb0:	681d      	ldr	r5, [r3, #0]
 800eeb2:	6862      	ldr	r2, [r4, #4]
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f7f1 f9ca 	bl	8000250 <memchr>
 800eebc:	b108      	cbz	r0, 800eec2 <_printf_i+0x1ea>
 800eebe:	1b40      	subs	r0, r0, r5
 800eec0:	6060      	str	r0, [r4, #4]
 800eec2:	6863      	ldr	r3, [r4, #4]
 800eec4:	6123      	str	r3, [r4, #16]
 800eec6:	2300      	movs	r3, #0
 800eec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eecc:	e7aa      	b.n	800ee24 <_printf_i+0x14c>
 800eece:	6923      	ldr	r3, [r4, #16]
 800eed0:	462a      	mov	r2, r5
 800eed2:	4649      	mov	r1, r9
 800eed4:	4640      	mov	r0, r8
 800eed6:	47d0      	blx	sl
 800eed8:	3001      	adds	r0, #1
 800eeda:	d0ad      	beq.n	800ee38 <_printf_i+0x160>
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	079b      	lsls	r3, r3, #30
 800eee0:	d413      	bmi.n	800ef0a <_printf_i+0x232>
 800eee2:	68e0      	ldr	r0, [r4, #12]
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	4298      	cmp	r0, r3
 800eee8:	bfb8      	it	lt
 800eeea:	4618      	movlt	r0, r3
 800eeec:	e7a6      	b.n	800ee3c <_printf_i+0x164>
 800eeee:	2301      	movs	r3, #1
 800eef0:	4632      	mov	r2, r6
 800eef2:	4649      	mov	r1, r9
 800eef4:	4640      	mov	r0, r8
 800eef6:	47d0      	blx	sl
 800eef8:	3001      	adds	r0, #1
 800eefa:	d09d      	beq.n	800ee38 <_printf_i+0x160>
 800eefc:	3501      	adds	r5, #1
 800eefe:	68e3      	ldr	r3, [r4, #12]
 800ef00:	9903      	ldr	r1, [sp, #12]
 800ef02:	1a5b      	subs	r3, r3, r1
 800ef04:	42ab      	cmp	r3, r5
 800ef06:	dcf2      	bgt.n	800eeee <_printf_i+0x216>
 800ef08:	e7eb      	b.n	800eee2 <_printf_i+0x20a>
 800ef0a:	2500      	movs	r5, #0
 800ef0c:	f104 0619 	add.w	r6, r4, #25
 800ef10:	e7f5      	b.n	800eefe <_printf_i+0x226>
 800ef12:	bf00      	nop
 800ef14:	0800f105 	.word	0x0800f105
 800ef18:	0800f116 	.word	0x0800f116

0800ef1c <memmove>:
 800ef1c:	4288      	cmp	r0, r1
 800ef1e:	b510      	push	{r4, lr}
 800ef20:	eb01 0402 	add.w	r4, r1, r2
 800ef24:	d902      	bls.n	800ef2c <memmove+0x10>
 800ef26:	4284      	cmp	r4, r0
 800ef28:	4623      	mov	r3, r4
 800ef2a:	d807      	bhi.n	800ef3c <memmove+0x20>
 800ef2c:	1e43      	subs	r3, r0, #1
 800ef2e:	42a1      	cmp	r1, r4
 800ef30:	d008      	beq.n	800ef44 <memmove+0x28>
 800ef32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef3a:	e7f8      	b.n	800ef2e <memmove+0x12>
 800ef3c:	4402      	add	r2, r0
 800ef3e:	4601      	mov	r1, r0
 800ef40:	428a      	cmp	r2, r1
 800ef42:	d100      	bne.n	800ef46 <memmove+0x2a>
 800ef44:	bd10      	pop	{r4, pc}
 800ef46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef4e:	e7f7      	b.n	800ef40 <memmove+0x24>

0800ef50 <_realloc_r>:
 800ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef54:	4680      	mov	r8, r0
 800ef56:	4614      	mov	r4, r2
 800ef58:	460e      	mov	r6, r1
 800ef5a:	b921      	cbnz	r1, 800ef66 <_realloc_r+0x16>
 800ef5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef60:	4611      	mov	r1, r2
 800ef62:	f7ff bba9 	b.w	800e6b8 <_malloc_r>
 800ef66:	b92a      	cbnz	r2, 800ef74 <_realloc_r+0x24>
 800ef68:	f7ff fca4 	bl	800e8b4 <_free_r>
 800ef6c:	4625      	mov	r5, r4
 800ef6e:	4628      	mov	r0, r5
 800ef70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef74:	f000 f81b 	bl	800efae <_malloc_usable_size_r>
 800ef78:	4284      	cmp	r4, r0
 800ef7a:	4607      	mov	r7, r0
 800ef7c:	d802      	bhi.n	800ef84 <_realloc_r+0x34>
 800ef7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef82:	d812      	bhi.n	800efaa <_realloc_r+0x5a>
 800ef84:	4621      	mov	r1, r4
 800ef86:	4640      	mov	r0, r8
 800ef88:	f7ff fb96 	bl	800e6b8 <_malloc_r>
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d0ed      	beq.n	800ef6e <_realloc_r+0x1e>
 800ef92:	42bc      	cmp	r4, r7
 800ef94:	4622      	mov	r2, r4
 800ef96:	4631      	mov	r1, r6
 800ef98:	bf28      	it	cs
 800ef9a:	463a      	movcs	r2, r7
 800ef9c:	f7ff fc7c 	bl	800e898 <memcpy>
 800efa0:	4631      	mov	r1, r6
 800efa2:	4640      	mov	r0, r8
 800efa4:	f7ff fc86 	bl	800e8b4 <_free_r>
 800efa8:	e7e1      	b.n	800ef6e <_realloc_r+0x1e>
 800efaa:	4635      	mov	r5, r6
 800efac:	e7df      	b.n	800ef6e <_realloc_r+0x1e>

0800efae <_malloc_usable_size_r>:
 800efae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efb2:	1f18      	subs	r0, r3, #4
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	bfbc      	itt	lt
 800efb8:	580b      	ldrlt	r3, [r1, r0]
 800efba:	18c0      	addlt	r0, r0, r3
 800efbc:	4770      	bx	lr
	...

0800efc0 <_init>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr

0800efcc <_fini>:
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	bf00      	nop
 800efd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd2:	bc08      	pop	{r3}
 800efd4:	469e      	mov	lr, r3
 800efd6:	4770      	bx	lr
