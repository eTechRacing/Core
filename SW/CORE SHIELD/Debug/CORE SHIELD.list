
CORE SHIELD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e88  08008e88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e90  08008e90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005064  20000010  08008ea8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005074  08008ea8  00025074  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021b63  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046d7  00000000  00000000  00041be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  000462c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001581  00000000  00000000  00047e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000509a  00000000  00000000  000493e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219cb  00000000  00000000  0004e47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112580  00000000  00000000  0006fe46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007580  00000000  00000000  001823c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00189948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08008d50 	.word	0x08008d50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08008d50 	.word	0x08008d50

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <ADC_CH0>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ADC_ChannelConfTypeDef sConfig = {0};

void ADC_CH0 (void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <ADC_CH0+0x2c>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <ADC_CH0+0x2c>)
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <ADC_CH0+0x2c>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	4905      	ldr	r1, [pc, #20]	; (8000568 <ADC_CH0+0x2c>)
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <ADC_CH0+0x30>)
 8000556:	f001 f967 	bl	8001828 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <ADC_CH0+0x28>
	  {
	    Error_Handler();
 8000560:	f000 fb4e 	bl	8000c00 <Error_Handler>
	  }
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200006cc 	.word	0x200006cc
 800056c:	2000002c 	.word	0x2000002c

08000570 <ADC_CH1>:

void ADC_CH1 (void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		  */
		  sConfig.Channel = ADC_CHANNEL_1;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <ADC_CH1+0x28>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <ADC_CH1+0x28>)
 800057c:	2201      	movs	r2, #1
 800057e:	605a      	str	r2, [r3, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	4905      	ldr	r1, [pc, #20]	; (8000598 <ADC_CH1+0x28>)
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <ADC_CH1+0x2c>)
 8000584:	f001 f950 	bl	8001828 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <ADC_CH1+0x22>
		  {
		    Error_Handler();
 800058e:	f000 fb37 	bl	8000c00 <Error_Handler>
		  }
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200006cc 	.word	0x200006cc
 800059c:	2000002c 	.word	0x2000002c

080005a0 <ADC_VBAT>:

void ADC_VBAT (void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_VBAT;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <ADC_VBAT+0x28>)
 80005a6:	2212      	movs	r2, #18
 80005a8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <ADC_VBAT+0x28>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	4905      	ldr	r1, [pc, #20]	; (80005c8 <ADC_VBAT+0x28>)
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <ADC_VBAT+0x2c>)
 80005b4:	f001 f938 	bl	8001828 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <ADC_VBAT+0x22>
	  {
	    Error_Handler();
 80005be:	f000 fb1f 	bl	8000c00 <Error_Handler>
	  }
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200006cc 	.word	0x200006cc
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fdcb 	bl	800116e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f8d6 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fa30 	bl	8000a40 <MX_GPIO_Init>
  MX_WWDG_Init();
 80005e0:	f000 fa0e 	bl	8000a00 <MX_WWDG_Init>
  MX_ADC1_Init();
 80005e4:	f000 f93e 	bl	8000864 <MX_ADC1_Init>
  MX_CAN1_Init();
 80005e8:	f000 f976 	bl	80008d8 <MX_CAN1_Init>
  MX_UART4_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f9d8 	bl	80009a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  //HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);

  canfil.FilterBank = 0;
 80005f4:	4b50      	ldr	r3, [pc, #320]	; (8000738 <main+0x168>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fa:	4b4f      	ldr	r3, [pc, #316]	; (8000738 <main+0x168>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000600:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <main+0x168>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0x0000;						//Si està en 0 acceptem tots els missatges
 8000606:	4b4c      	ldr	r3, [pc, #304]	; (8000738 <main+0x168>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;						//Si està en 0 acceptem tots els missatges
 800060c:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <main+0x168>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;
 8000612:	4b49      	ldr	r3, [pc, #292]	; (8000738 <main+0x168>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 8000618:	4b47      	ldr	r3, [pc, #284]	; (8000738 <main+0x168>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800061e:	4b46      	ldr	r3, [pc, #280]	; (8000738 <main+0x168>)
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <main+0x168>)
 8000626:	2201      	movs	r2, #1
 8000628:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <main+0x168>)
 800062c:	220e      	movs	r2, #14
 800062e:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK)
 8000630:	4941      	ldr	r1, [pc, #260]	; (8000738 <main+0x168>)
 8000632:	4842      	ldr	r0, [pc, #264]	; (800073c <main+0x16c>)
 8000634:	f001 fc4e 	bl	8001ed4 <HAL_CAN_ConfigFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <main+0x72>
  {
  	Error_Handler();
 800063e:	f000 fadf 	bl	8000c00 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000642:	483e      	ldr	r0, [pc, #248]	; (800073c <main+0x16c>)
 8000644:	f001 fd32 	bl	80020ac <HAL_CAN_Start>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <main+0x82>
  {
  	Error_Handler();
 800064e:	f000 fad7 	bl	8000c00 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000652:	2103      	movs	r1, #3
 8000654:	4839      	ldr	r0, [pc, #228]	; (800073c <main+0x16c>)
 8000656:	f001 ff4f 	bl	80024f8 <HAL_CAN_ActivateNotification>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x94>
      {
      	Error_Handler();
 8000660:	f000 face 	bl	8000c00 <Error_Handler>
      }

  TxHeader.DLC = 8; // Number of bites to be transmitted max- 8
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <main+0x170>)
 8000666:	2208      	movs	r2, #8
 8000668:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <main+0x170>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000670:	4b33      	ldr	r3, [pc, #204]	; (8000740 <main+0x170>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <main+0x170>)
 8000678:	f240 3221 	movw	r2, #801	; 0x321
 800067c:	601a      	str	r2, [r3, #0]
  TxHeader.StdId = 0x321;
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <main+0x170>)
 8000680:	f240 3221 	movw	r2, #801	; 0x321
 8000684:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <main+0x170>)
 8000688:	2200      	movs	r2, #0
 800068a:	751a      	strb	r2, [r3, #20]
  TxData[0] = 1;
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <main+0x174>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <main+0x174>)
 8000694:	2202      	movs	r2, #2
 8000696:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <main+0x174>)
 800069a:	2203      	movs	r2, #3
 800069c:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <main+0x174>)
 80006a0:	2204      	movs	r2, #4
 80006a2:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <main+0x174>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <main+0x174>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <main+0x174>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <main+0x174>)
 80006b8:	2208      	movs	r2, #8
 80006ba:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f005 fd46 	bl	800614c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <main+0x178>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <main+0x17c>)
 80006c6:	f005 fdab 	bl	8006220 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <main+0x180>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX */
  CAN_TXHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_attributes);
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <main+0x184>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4820      	ldr	r0, [pc, #128]	; (8000758 <main+0x188>)
 80006d6:	f005 fda3 	bl	8006220 <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a1f      	ldr	r2, [pc, #124]	; (800075c <main+0x18c>)
 80006de:	6013      	str	r3, [r2, #0]

  /* creation of USB_TASK */
  USB_TASKHandle = osThreadNew(usb_data, NULL, &USB_TASK_attributes);
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <main+0x190>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <main+0x194>)
 80006e6:	f005 fd9b 	bl	8006220 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <main+0x198>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* creation of MAQUINA_ESTATS */
  MAQUINA_ESTATSHandle = osThreadNew(maquina_estats, NULL, &MAQUINA_ESTATS_attributes);
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <main+0x19c>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <main+0x1a0>)
 80006f6:	f005 fd93 	bl	8006220 <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <main+0x1a4>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* creation of ADC_READ */
  ADC_READHandle = osThreadNew(LECTURA_ADCs, NULL, &ADC_READ_attributes);
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <main+0x1a8>)
 8000702:	2100      	movs	r1, #0
 8000704:	481d      	ldr	r0, [pc, #116]	; (800077c <main+0x1ac>)
 8000706:	f005 fd8b 	bl	8006220 <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <main+0x1b0>)
 800070e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000710:	f005 fd50 	bl	80061b4 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <main+0x1b4>)
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <main+0x174>)
 8000718:	4909      	ldr	r1, [pc, #36]	; (8000740 <main+0x170>)
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <main+0x16c>)
 800071c:	f001 fd0a 	bl	8002134 <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000724:	f000 fd50 	bl	80011c8 <HAL_Delay>
	  TxData[7] = TxData[7] + 1;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <main+0x174>)
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <main+0x174>)
 8000732:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000734:	e7ee      	b.n	8000714 <main+0x144>
 8000736:	bf00      	nop
 8000738:	20000698 	.word	0x20000698
 800073c:	20000074 	.word	0x20000074
 8000740:	20000670 	.word	0x20000670
 8000744:	20000688 	.word	0x20000688
 8000748:	08008dbc 	.word	0x08008dbc
 800074c:	08000b0d 	.word	0x08000b0d
 8000750:	20000640 	.word	0x20000640
 8000754:	08008de0 	.word	0x08008de0
 8000758:	08000b1d 	.word	0x08000b1d
 800075c:	20000644 	.word	0x20000644
 8000760:	08008e04 	.word	0x08008e04
 8000764:	08000b2d 	.word	0x08000b2d
 8000768:	20000648 	.word	0x20000648
 800076c:	08008e28 	.word	0x08008e28
 8000770:	08000b3d 	.word	0x08000b3d
 8000774:	2000064c 	.word	0x2000064c
 8000778:	08008e4c 	.word	0x08008e4c
 800077c:	08000b4d 	.word	0x08000b4d
 8000780:	20000650 	.word	0x20000650
 8000784:	200006c0 	.word	0x200006c0

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2234      	movs	r2, #52	; 0x34
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f008 faa0 	bl	8008cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemClock_Config+0xd4>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemClock_Config+0xd4>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xd4>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemClock_Config+0xd8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <SystemClock_Config+0xd8>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80007f0:	230a      	movs	r3, #10
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007f4:	23d8      	movs	r3, #216	; 0xd8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007fc:	2309      	movs	r3, #9
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fd93 	bl	8003334 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000814:	f000 f9f4 	bl	8000c00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000818:	f002 fd3c 	bl	8003294 <HAL_PWREx_EnableOverDrive>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000822:	f000 f9ed 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000832:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2107      	movs	r1, #7
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f823 	bl	8003890 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000850:	f000 f9d6 	bl	8000c00 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	; 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_ADC1_Init+0x68>)
 800086a:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <MX_ADC1_Init+0x6c>)
 800086c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC1_Init+0x68>)
 8000870:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_ADC1_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_ADC1_Init+0x68>)
 800087e:	2201      	movs	r2, #1
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_ADC1_Init+0x68>)
 8000884:	2201      	movs	r2, #1
 8000886:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_ADC1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ADC1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_ADC1_Init+0x68>)
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <MX_ADC1_Init+0x70>)
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_ADC1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_ADC1_Init+0x68>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_ADC1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_ADC1_Init+0x68>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_ADC1_Init+0x68>)
 80008b8:	f000 fcaa 	bl	8001210 <HAL_ADC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80008c2:	f000 f99d 	bl	8000c00 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	40012000 	.word	0x40012000
 80008d4:	0f000001 	.word	0x0f000001

080008d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_CAN1_Init+0x64>)
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <MX_CAN1_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_CAN1_Init+0x64>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_CAN1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_CAN1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_CAN1_Init+0x64>)
 80008f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_CAN1_Init+0x64>)
 80008fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000902:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_CAN1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_CAN1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_CAN1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_CAN1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_CAN1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_CAN1_Init+0x64>)
 800092a:	f001 f9d7 	bl	8001cdc <HAL_CAN_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 f964 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000074 	.word	0x20000074
 8000940:	40006400 	.word	0x40006400

08000944 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_UART4_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_UART4_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_UART4_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_UART4_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_UART4_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_UART4_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_UART4_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_UART4_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_UART4_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_UART4_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_UART4_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_UART4_Init+0x58>)
 8000988:	f004 f8a2 	bl	8004ad0 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f935 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000009c 	.word	0x2000009c
 80009a0:	40004c00 	.word	0x40004c00

080009a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2206      	movs	r2, #6
 80009b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	f002 fb0c 	bl	8003004 <HAL_PCD_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f905 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000124 	.word	0x20000124

08000a00 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <MX_WWDG_Init+0x3c>)
 8000a08:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a12:	2240      	movs	r2, #64	; 0x40
 8000a14:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a18:	2240      	movs	r2, #64	; 0x40
 8000a1a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_WWDG_Init+0x38>)
 8000a24:	f005 f871 	bl	8005b0a <HAL_WWDG_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8000a2e:	f000 f8e7 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000062c 	.word	0x2000062c
 8000a3c:	40002c00 	.word	0x40002c00

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000ac4:	f002 fa84 	bl	8002fd0 <HAL_GPIO_TogglePin>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ae4:	f001 fbf6 	bl	80022d4 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000aee:	f002 fa6f 	bl	8002fd0 <HAL_GPIO_TogglePin>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000690 	.word	0x20000690
 8000b00:	20000654 	.word	0x20000654
 8000b04:	20000074 	.word	0x20000074
 8000b08:	40020400 	.word	0x40020400

08000b0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)									//En aquest loop s'introdueixen les funcions que es volen dur a terme
  {
    osDelay(1);
 8000b14:	2001      	movs	r0, #1
 8000b16:	f005 fc29 	bl	800636c <osDelay>
 8000b1a:	e7fb      	b.n	8000b14 <StartDefaultTask+0x8>

08000b1c <CAN_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Transmit */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f005 fc21 	bl	800636c <osDelay>
 8000b2a:	e7fb      	b.n	8000b24 <CAN_Transmit+0x8>

08000b2c <usb_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usb_data */
void usb_data(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usb_data */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f005 fc19 	bl	800636c <osDelay>
 8000b3a:	e7fb      	b.n	8000b34 <usb_data+0x8>

08000b3c <maquina_estats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_maquina_estats */
void maquina_estats(void *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maquina_estats */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f005 fc11 	bl	800636c <osDelay>
 8000b4a:	e7fb      	b.n	8000b44 <maquina_estats+0x8>

08000b4c <LECTURA_ADCs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LECTURA_ADCs */
void LECTURA_ADCs(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LECTURA_ADCs */
  /* Infinite loop */
  for(;;)
  {

	  ADC_CH0();									//Crido la funció ADC_CH0 que configura el canal ADC1 per chanel 0
 8000b54:	f7ff fcf2 	bl	800053c <ADC_CH0>
	  HAL_ADC_Start(&hadc1);						//Activo el ADC1
 8000b58:	481e      	ldr	r0, [pc, #120]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b5a:	f000 fb9d 	bl	8001298 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);		//Causa el procés d'espera mentre es realitza la conversió AD
 8000b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b64:	f000 fc9a 	bl	800149c <HAL_ADC_PollForConversion>
	  LECTURES_ADC[0] = HAL_ADC_GetValue(&hadc1);	//Realitza la lectura (0V -> 0 ; 3.3V -> 4095) i la guarda en la posició 0 de LECURES_ADC
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b6a:	f000 fe32 	bl	80017d2 <HAL_ADC_GetValue>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <LECTURA_ADCs+0x8c>)
 8000b74:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);							//Aturo el ADC1
 8000b76:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b78:	f000 fc5c 	bl	8001434 <HAL_ADC_Stop>

	  ADC_CH1();									//Crido la funció ADC_CH0 que configura el canal ADC1 per chanel 1
 8000b7c:	f7ff fcf8 	bl	8000570 <ADC_CH1>
	  HAL_ADC_Start(&hadc1);						//Activo el ADC1
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b82:	f000 fb89 	bl	8001298 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);		//Causa el procés d'espera mentre es realitza la conversió AD
 8000b86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b8c:	f000 fc86 	bl	800149c <HAL_ADC_PollForConversion>
	  LECTURES_ADC[1] = HAL_ADC_GetValue(&hadc1);	//Realitza la lectura (0V -> 0 ; 3.3V -> 4095) i la guarda en la posició 1 de LECURES_ADC
 8000b90:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000b92:	f000 fe1e 	bl	80017d2 <HAL_ADC_GetValue>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <LECTURA_ADCs+0x8c>)
 8000b9c:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);							//Aturo el ADC1
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000ba0:	f000 fc48 	bl	8001434 <HAL_ADC_Stop>

	  ADC_VBAT();									//Crido la funció ADC_CH0 que configura el canal ADC1 per chanel Vbat
 8000ba4:	f7ff fcfc 	bl	80005a0 <ADC_VBAT>
	  HAL_ADC_Start(&hadc1);						//Activo el ADC1
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000baa:	f000 fb75 	bl	8001298 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);		//Causa el procés d'espera mentre es realitza la conversió AD
 8000bae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000bb4:	f000 fc72 	bl	800149c <HAL_ADC_PollForConversion>
	  LECTURES_ADC[2] = HAL_ADC_GetValue(&hadc1);	//Realitza la lectura (0V -> 0 ; 3.3V -> 4095) i la guarda en la posició 2 de LECURES_ADC
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000bba:	f000 fe0a 	bl	80017d2 <HAL_ADC_GetValue>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <LECTURA_ADCs+0x8c>)
 8000bc4:	809a      	strh	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);							//Aturo el ADC1
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <LECTURA_ADCs+0x88>)
 8000bc8:	f000 fc34 	bl	8001434 <HAL_ADC_Stop>
	  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); 	//Causa el procés d'espera mentre es realitza la conversió AD
	  //value_adc = HAL_ADC_GetValue(&hadc1); 				//Realitza la lectura (0V -> 0 ; 3.3V -> 4095)
	  //sprintf(missatge_adc, "%hu\r\n", value_adc); 		//Emagatzema el valor de la lecturaADC dins el buffer missatge
	  //HAL_UART_Transmit(&huart4, (uint8_t*)missatge_adc, strlen(missatge_adc), HAL_MAX_DELAY); //Fa una transmissió per UART del missatge

	  osDelay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f005 fbcd 	bl	800636c <osDelay>
	  ADC_CH0();									//Crido la funció ADC_CH0 que configura el canal ADC1 per chanel 0
 8000bd2:	e7bf      	b.n	8000b54 <LECTURA_ADCs+0x8>
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	200006c4 	.word	0x200006c4

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 facb 	bl	8001188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40001000 	.word	0x40001000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f001 ff59 	bl	8002b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_ADC_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_ADC_MspInit+0x8c>)
 8000cc2:	f001 ffd9 	bl	8002c78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2105      	movs	r1, #5
 8000cca:	2012      	movs	r0, #18
 8000ccc:	f001 ff18 	bl	8002b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f001 ff31 	bl	8002b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_CAN_MspInit+0x9c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d138      	bne.n	8000d80 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_CAN_MspInit+0xa0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d50:	2309      	movs	r3, #9
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <HAL_CAN_MspInit+0xa4>)
 8000d5c:	f001 ff8c 	bl	8002c78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	2014      	movs	r0, #20
 8000d66:	f001 fecb 	bl	8002b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d6a:	2014      	movs	r0, #20
 8000d6c:	f001 fee4 	bl	8002b38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2105      	movs	r1, #5
 8000d74:	2015      	movs	r0, #21
 8000d76:	f001 fec3 	bl	8002b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d7a:	2015      	movs	r0, #21
 8000d7c:	f001 fedc 	bl	8002b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40006400 	.word	0x40006400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ae      	sub	sp, #184	; 0xb8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2290      	movs	r2, #144	; 0x90
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 ff91 	bl	8008cdc <memset>
  if(huart->Instance==UART4)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <HAL_UART_MspInit+0xc0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d143      	bne.n	8000e4c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ff74 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dde:	f7ff ff0f 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e38:	f001 ff1e 	bl	8002c78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2105      	movs	r1, #5
 8000e40:	2034      	movs	r0, #52	; 0x34
 8000e42:	f001 fe5d 	bl	8002b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e46:	2034      	movs	r0, #52	; 0x34
 8000e48:	f001 fe76 	bl	8002b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	37b8      	adds	r7, #184	; 0xb8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40004c00 	.word	0x40004c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0ae      	sub	sp, #184	; 0xb8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2290      	movs	r2, #144	; 0x90
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f007 ff2b 	bl	8008cdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8e:	d149      	bne.n	8000f24 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 ff0d 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000eac:	f7ff fea8 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ec8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <HAL_PCD_MspInit+0xd0>)
 8000ef0:	f001 fec2 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efe:	6353      	str	r3, [r2, #52]	; 0x34
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6453      	str	r3, [r2, #68]	; 0x44
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_PCD_MspInit+0xcc>)
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	37b8      	adds	r7, #184	; 0xb8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_WWDG_MspInit+0x38>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_WWDG_MspInit+0x3c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_WWDG_MspInit+0x3c>)
 8000f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_WWDG_MspInit+0x3c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40002c00 	.word	0x40002c00
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_InitTick+0xe0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <HAL_InitTick+0xe0>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <HAL_InitTick+0xe0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fe58 	bl	8003c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb6:	f002 fe29 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8000fba:	6378      	str	r0, [r7, #52]	; 0x34
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fbe:	f002 fe25 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_InitTick+0xe4>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0c9b      	lsrs	r3, r3, #18
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_InitTick+0xe8>)
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_InitTick+0xec>)
 8000fda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_InitTick+0xe8>)
 8000fde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_InitTick+0xe8>)
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_InitTick+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_InitTick+0xe8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_InitTick+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <HAL_InitTick+0xe8>)
 8000ffe:	f003 fa87 	bl	8004510 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800100c:	2b00      	cmp	r3, #0
 800100e:	d11b      	bne.n	8001048 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001010:	4812      	ldr	r0, [pc, #72]	; (800105c <HAL_InitTick+0xe8>)
 8001012:	f003 fadf 	bl	80045d4 <HAL_TIM_Base_Start_IT>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800101c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001020:	2b00      	cmp	r3, #0
 8001022:	d111      	bne.n	8001048 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001024:	2036      	movs	r0, #54	; 0x36
 8001026:	f001 fd87 	bl	8002b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d808      	bhi.n	8001042 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2036      	movs	r0, #54	; 0x36
 8001036:	f001 fd63 	bl	8002b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_InitTick+0xf0>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	e002      	b.n	8001048 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001048:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800104c:	4618      	mov	r0, r3
 800104e:	3738      	adds	r7, #56	; 0x38
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	431bde83 	.word	0x431bde83
 800105c:	200006dc 	.word	0x200006dc
 8001060:	40001000 	.word	0x40001000
 8001064:	20000004 	.word	0x20000004

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <ADC_IRQHandler+0x10>)
 800109a:	f000 fa8a 	bl	80015b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000002c 	.word	0x2000002c

080010a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <CAN1_RX0_IRQHandler+0x10>)
 80010ae:	f001 fa49 	bl	8002544 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000074 	.word	0x20000074

080010bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <CAN1_RX1_IRQHandler+0x10>)
 80010c2:	f001 fa3f 	bl	8002544 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000074 	.word	0x20000074

080010d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <UART4_IRQHandler+0x10>)
 80010d6:	f003 fd49 	bl	8004b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000009c 	.word	0x2000009c

080010e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM6_DAC_IRQHandler+0x10>)
 80010ea:	f003 faeb 	bl	80046c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200006dc 	.word	0x200006dc

080010f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001146:	f7ff ffd7 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f007 fdcf 	bl	8008cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fa3f 	bl	80005d0 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001160:	08008e98 	.word	0x08008e98
  ldr r2, =_sbss
 8001164:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001168:	20005074 	.word	0x20005074

0800116c <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <CAN1_SCE_IRQHandler>

0800116e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f001 fcb9 	bl	8002aea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001178:	200f      	movs	r0, #15
 800117a:	f7ff fefb 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fd45 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000728 	.word	0x20000728

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000728 	.word	0x20000728

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e031      	b.n	800128a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fd14 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_ADC_Init+0x84>)
 8001254:	4013      	ands	r3, r2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fc38 	bl	8001ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	ffffeefd 	.word	0xffffeefd

08001298 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start+0x1a>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0ad      	b.n	800140e <HAL_ADC_Start+0x176>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d018      	beq.n	80012fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_ADC_Start+0x184>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_ADC_Start+0x188>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d175      	bne.n	80013f4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_ADC_Start+0x18c>)
 800130e:	4013      	ands	r3, r2
 8001310:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800132e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001342:	d106      	bne.n	8001352 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f023 0206 	bic.w	r2, r3, #6
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	645a      	str	r2, [r3, #68]	; 0x44
 8001350:	e002      	b.n	8001358 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001368:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_ADC_Start+0x190>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d143      	bne.n	800140c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	e03a      	b.n	800140c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_ADC_Start+0x194>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d10e      	bne.n	80013be <HAL_ADC_Start+0x126>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_ADC_Start+0x190>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d120      	bne.n	800140c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_ADC_Start+0x198>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d11b      	bne.n	800140c <HAL_ADC_Start+0x174>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d114      	bne.n	800140c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	e00b      	b.n	800140c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f043 0210 	orr.w	r2, r3, #16
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83
 8001424:	fffff8fe 	.word	0xfffff8fe
 8001428:	40012300 	.word	0x40012300
 800142c:	40012000 	.word	0x40012000
 8001430:	40012200 	.word	0x40012200

08001434 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADC_Stop+0x16>
 8001446:	2302      	movs	r3, #2
 8001448:	e01f      	b.n	800148a <HAL_ADC_Stop+0x56>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_ADC_Stop+0x64>)
 8001476:	4013      	ands	r3, r2
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	ffffeefe 	.word	0xffffeefe

0800149c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d113      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c8:	d10b      	bne.n	80014e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e063      	b.n	80015aa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014e2:	f7ff fe65 	bl	80011b0 <HAL_GetTick>
 80014e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e8:	e021      	b.n	800152e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d01d      	beq.n	800152e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_ADC_PollForConversion+0x6c>
 80014f8:	f7ff fe5a 	bl	80011b0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d212      	bcs.n	800152e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d00b      	beq.n	800152e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f043 0204 	orr.w	r2, r3, #4
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e03d      	b.n	80015aa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	d1d6      	bne.n	80014ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0212 	mvn.w	r2, #18
 8001544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d123      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d049      	beq.n	800167c <HAL_ADC_IRQHandler+0xca>
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d046      	beq.n	800167c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d12b      	bne.n	800166c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001618:	2b00      	cmp	r3, #0
 800161a:	d127      	bne.n	800166c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001634:	2b00      	cmp	r3, #0
 8001636:	d119      	bne.n	800166c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0220 	bic.w	r2, r2, #32
 8001646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8bd 	bl	80017ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0212 	mvn.w	r2, #18
 800167a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d057      	beq.n	8001742 <HAL_ADC_IRQHandler+0x190>
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d054      	beq.n	8001742 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d139      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d12b      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d124      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11d      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d119      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fac8 	bl	8001cc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 020c 	mvn.w	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d017      	beq.n	8001788 <HAL_ADC_IRQHandler+0x1d6>
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d014      	beq.n	8001788 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10d      	bne.n	8001788 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f841 	bl	8001800 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f06f 0201 	mvn.w	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001796:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_ADC_IRQHandler+0x218>
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d012      	beq.n	80017ca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0220 	mvn.w	r2, #32
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f82a 	bl	8001814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0220 	mvn.w	r2, #32
 80017c8:	601a      	str	r2, [r3, #0]
  }
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c>
 8001840:	2302      	movs	r3, #2
 8001842:	e136      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x28a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d93a      	bls.n	80018ca <HAL_ADC_ConfigChannel+0xa2>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800185c:	d035      	beq.n	80018ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68d9      	ldr	r1, [r3, #12]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	3b1e      	subs	r3, #30
 8001874:	2207      	movs	r2, #7
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a8d      	ldr	r2, [pc, #564]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68d9      	ldr	r1, [r3, #12]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a2:	e035      	b.n	8001910 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	3b1e      	subs	r3, #30
 80018be:	409a      	lsls	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c8:	e022      	b.n	8001910 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6919      	ldr	r1, [r3, #16]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4403      	add	r3, r0
 8001906:	409a      	lsls	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d824      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b05      	subs	r3, #5
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
 8001960:	e04c      	b.n	80019fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d824      	bhi.n	80019b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	; 0x23
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b23      	subs	r3, #35	; 0x23
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
 80019b2:	e023      	b.n	80019fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43da      	mvns	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	400a      	ands	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b41      	subs	r3, #65	; 0x41
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1f4>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10f      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d12b      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x23a>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d122      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_ADC_ConfigChannel+0x2a4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9a      	lsrs	r2, r3, #18
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	10000012 	.word	0x10000012
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001adc:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <ADC_Init+0x1ec>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <ADC_Init+0x1ec>)
 8001ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ae6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <ADC_Init+0x1ec>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4973      	ldr	r1, [pc, #460]	; (8001cc0 <ADC_Init+0x1ec>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <ADC_Init+0x1f0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00f      	b.n	8001bce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0202 	bic.w	r2, r2, #2
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	005a      	lsls	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	3b01      	subs	r3, #1
 8001c28:	035a      	lsls	r2, r3, #13
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	e007      	b.n	8001c44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	051a      	lsls	r2, r3, #20
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c86:	025a      	lsls	r2, r3, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	029a      	lsls	r2, r3, #10
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	0f000001 	.word	0x0f000001

08001cc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0ed      	b.n	8001eca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fff6 	bl	8000cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d10:	f7ff fa4e 	bl	80011b0 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d16:	e012      	b.n	8001d3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d18:	f7ff fa4a 	bl	80011b0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d90b      	bls.n	8001d3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0c5      	b.n	8001eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0e5      	beq.n	8001d18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0202 	bic.w	r2, r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5c:	f7ff fa28 	bl	80011b0 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d62:	e012      	b.n	8001d8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d64:	f7ff fa24 	bl	80011b0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d90b      	bls.n	8001d8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2205      	movs	r2, #5
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e09f      	b.n	8001eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e5      	bne.n	8001d64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e1b      	ldrb	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e007      	b.n	8001dc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7e5b      	ldrb	r3, [r3, #25]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e007      	b.n	8001dec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7e9b      	ldrb	r3, [r3, #26]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0220 	orr.w	r2, r2, #32
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0220 	bic.w	r2, r2, #32
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7edb      	ldrb	r3, [r3, #27]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e007      	b.n	8001e40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0210 	orr.w	r2, r2, #16
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7f1b      	ldrb	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d108      	bne.n	8001e5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0208 	orr.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e007      	b.n	8001e6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7f5b      	ldrb	r3, [r3, #29]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0204 	orr.w	r2, r2, #4
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d003      	beq.n	8001efa <HAL_CAN_ConfigFilter+0x26>
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	f040 80c7 	bne.w	8002088 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a69      	ldr	r2, [pc, #420]	; (80020a4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d001      	beq.n	8001f08 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001f04:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f06:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	4a63      	ldr	r2, [pc, #396]	; (80020a8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d111      	bne.n	8001f44 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f26:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d123      	bne.n	8001fb6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3248      	adds	r2, #72	; 0x48
 8001f96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001faa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	3348      	adds	r3, #72	; 0x48
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d122      	bne.n	8002004 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fde:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3248      	adds	r2, #72	; 0x48
 8001fe4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffa:	6979      	ldr	r1, [r7, #20]
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800201e:	e007      	b.n	8002030 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	431a      	orrs	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800204a:	e007      	b.n	800205c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800207a:	f023 0201 	bic.w	r2, r3, #1
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e006      	b.n	8002096 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40003400 	.word	0x40003400
 80020a8:	40006400 	.word	0x40006400

080020ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d12e      	bne.n	800211e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d8:	f7ff f86a 	bl	80011b0 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020de:	e012      	b.n	8002106 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e0:	f7ff f866 	bl	80011b0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d90b      	bls.n	8002106 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e012      	b.n	800212c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e5      	bne.n	80020e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e006      	b.n	800212c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d003      	beq.n	8002160 <HAL_CAN_AddTxMessage+0x2c>
 8002158:	7ffb      	ldrb	r3, [r7, #31]
 800215a:	2b02      	cmp	r3, #2
 800215c:	f040 80ad 	bne.w	80022ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8095 	beq.w	80022aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	0e1b      	lsrs	r3, r3, #24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	6809      	ldr	r1, [r1, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3318      	adds	r3, #24
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	440b      	add	r3, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e00f      	b.n	80021d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3318      	adds	r3, #24
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	440b      	add	r3, r1
 80021d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3318      	adds	r3, #24
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	440b      	add	r3, r1
 80021e8:	3304      	adds	r3, #4
 80021ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	7d1b      	ldrb	r3, [r3, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d111      	bne.n	8002218 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3318      	adds	r3, #24
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6811      	ldr	r1, [r2, #0]
 8002208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3318      	adds	r3, #24
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	440b      	add	r3, r1
 8002214:	3304      	adds	r3, #4
 8002216:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3307      	adds	r3, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	061a      	lsls	r2, r3, #24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3306      	adds	r3, #6
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3305      	adds	r3, #5
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	4313      	orrs	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	3204      	adds	r2, #4
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4610      	mov	r0, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	6811      	ldr	r1, [r2, #0]
 8002240:	ea43 0200 	orr.w	r2, r3, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800224e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3303      	adds	r3, #3
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	061a      	lsls	r2, r3, #24
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3302      	adds	r3, #2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3301      	adds	r3, #1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	4313      	orrs	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	4610      	mov	r0, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	ea43 0200 	orr.w	r2, r3, r0
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002284:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3318      	adds	r3, #24
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	6811      	ldr	r1, [r2, #0]
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3318      	adds	r3, #24
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e00e      	b.n	80022c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e006      	b.n	80022c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3724      	adds	r7, #36	; 0x24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d003      	beq.n	80022f8 <HAL_CAN_GetRxMessage+0x24>
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	f040 80f3 	bne.w	80024de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0e7      	b.n	80024ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0d8      	b.n	80024ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	331b      	adds	r3, #27
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0204 	and.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10c      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	331b      	adds	r3, #27
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0d5b      	lsrs	r3, r3, #21
 8002368:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e00b      	b.n	800238a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	331b      	adds	r3, #27
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	331b      	adds	r3, #27
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0202 	and.w	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 020f 	and.w	r2, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	331b      	adds	r3, #27
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	331b      	adds	r3, #27
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0a1a      	lsrs	r2, r3, #8
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0c1a      	lsrs	r2, r3, #16
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3302      	adds	r3, #2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e1a      	lsrs	r2, r3, #24
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3303      	adds	r3, #3
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3304      	adds	r3, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0a1a      	lsrs	r2, r3, #8
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3305      	adds	r3, #5
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0c1a      	lsrs	r2, r3, #16
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3306      	adds	r3, #6
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e1a      	lsrs	r2, r3, #24
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	3307      	adds	r3, #7
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	e007      	b.n	80024da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0220 	orr.w	r2, r2, #32
 80024d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e006      	b.n	80024ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <HAL_CAN_ActivateNotification+0x1e>
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d109      	bne.n	800252a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07c      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fa86 	bl	8000ab8 <HAL_CAN_TxMailbox0CompleteCallback>
 80025ac:	e016      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	e00c      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e002      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f97f 	bl	80028da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f959 	bl	80028b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002600:	e016      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	e00c      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	e002      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f95f 	bl	80028ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f939 	bl	80028c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002654:	e016      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e00c      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e002      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f93f 	bl	8002902 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f926 	bl	8002916 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f9f6 	bl	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f908 	bl	800293e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8ef 	bl	800292a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8f2 	bl	8002952 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2208      	movs	r2, #8
 8002788:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8eb 	bl	8002966 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07b      	beq.n	8002892 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d072      	beq.n	800288a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d043      	beq.n	800288a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03e      	beq.n	800288a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002812:	2b60      	cmp	r3, #96	; 0x60
 8002814:	d02b      	beq.n	800286e <HAL_CAN_IRQHandler+0x32a>
 8002816:	2b60      	cmp	r3, #96	; 0x60
 8002818:	d82e      	bhi.n	8002878 <HAL_CAN_IRQHandler+0x334>
 800281a:	2b50      	cmp	r3, #80	; 0x50
 800281c:	d022      	beq.n	8002864 <HAL_CAN_IRQHandler+0x320>
 800281e:	2b50      	cmp	r3, #80	; 0x50
 8002820:	d82a      	bhi.n	8002878 <HAL_CAN_IRQHandler+0x334>
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d019      	beq.n	800285a <HAL_CAN_IRQHandler+0x316>
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d826      	bhi.n	8002878 <HAL_CAN_IRQHandler+0x334>
 800282a:	2b30      	cmp	r3, #48	; 0x30
 800282c:	d010      	beq.n	8002850 <HAL_CAN_IRQHandler+0x30c>
 800282e:	2b30      	cmp	r3, #48	; 0x30
 8002830:	d822      	bhi.n	8002878 <HAL_CAN_IRQHandler+0x334>
 8002832:	2b10      	cmp	r3, #16
 8002834:	d002      	beq.n	800283c <HAL_CAN_IRQHandler+0x2f8>
 8002836:	2b20      	cmp	r3, #32
 8002838:	d005      	beq.n	8002846 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800283a:	e01d      	b.n	8002878 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f043 0308 	orr.w	r3, r3, #8
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002844:	e019      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0310 	orr.w	r3, r3, #16
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284e:	e014      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f043 0320 	orr.w	r3, r3, #32
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002858:	e00f      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002862:	e00a      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286c:	e005      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002876:	e000      	b.n	800287a <HAL_CAN_IRQHandler+0x336>
            break;
 8002878:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002888:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f868 	bl	800297a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	05fa0000 	.word	0x05fa0000

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db0b      	blt.n	8002a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4907      	ldr	r1, [pc, #28]	; (8002a2c <__NVIC_EnableIRQ+0x38>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100

08002a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	; (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	; (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f1c3 0307 	rsb	r3, r3, #7
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	bf28      	it	cs
 8002aa2:	2304      	movcs	r3, #4
 8002aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d902      	bls.n	8002ab4 <NVIC_EncodePriority+0x30>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3b03      	subs	r3, #3
 8002ab2:	e000      	b.n	8002ab6 <NVIC_EncodePriority+0x32>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	4313      	orrs	r3, r2
         );
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ff4c 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b12:	f7ff ff61 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f7ff ffb1 	bl	8002a84 <NVIC_EncodePriority>
 8002b22:	4602      	mov	r2, r0
 8002b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff80 	bl	8002a30 <__NVIC_SetPriority>
}
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff54 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b62:	f7fe fb25 	bl	80011b0 <HAL_GetTick>
 8002b66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d008      	beq.n	8002b86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e052      	b.n	8002c2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0216 	bic.w	r2, r2, #22
 8002b94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_DMA_Abort+0x62>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd6:	e013      	b.n	8002c00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd8:	f7fe faea 	bl	80011b0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d90c      	bls.n	8002c00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e015      	b.n	8002c2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e4      	bne.n	8002bd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	223f      	movs	r2, #63	; 0x3f
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00c      	b.n	8002c6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2205      	movs	r2, #5
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e175      	b.n	8002f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8164 	bne.w	8002f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x56>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80be 	beq.w	8002f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e1a:	4a61      	ldr	r2, [pc, #388]	; (8002fa0 <HAL_GPIO_Init+0x328>)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	220f      	movs	r2, #15
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_GPIO_Init+0x32c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d037      	beq.n	8002eb6 <HAL_GPIO_Init+0x23e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a57      	ldr	r2, [pc, #348]	; (8002fa8 <HAL_GPIO_Init+0x330>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_GPIO_Init+0x23a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a56      	ldr	r2, [pc, #344]	; (8002fac <HAL_GPIO_Init+0x334>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02b      	beq.n	8002eae <HAL_GPIO_Init+0x236>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a55      	ldr	r2, [pc, #340]	; (8002fb0 <HAL_GPIO_Init+0x338>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x232>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a54      	ldr	r2, [pc, #336]	; (8002fb4 <HAL_GPIO_Init+0x33c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x22e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_GPIO_Init+0x340>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x22a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_GPIO_Init+0x344>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_GPIO_Init+0x348>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x222>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_GPIO_Init+0x34c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x21e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4f      	ldr	r2, [pc, #316]	; (8002fc8 <HAL_GPIO_Init+0x350>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x21a>
 8002e8e:	2309      	movs	r3, #9
 8002e90:	e012      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e92:	230a      	movs	r3, #10
 8002e94:	e010      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e96:	2308      	movs	r3, #8
 8002e98:	e00e      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e00c      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002e9e:	2306      	movs	r3, #6
 8002ea0:	e00a      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	e008      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e004      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x240>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f002 0203 	and.w	r2, r2, #3
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ec8:	4935      	ldr	r1, [pc, #212]	; (8002fa0 <HAL_GPIO_Init+0x328>)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_GPIO_Init+0x354>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f ae86 	bls.w	8002c98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3724      	adds	r7, #36	; 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40021400 	.word	0x40021400
 8002fbc:	40021800 	.word	0x40021800
 8002fc0:	40021c00 	.word	0x40021c00
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40022400 	.word	0x40022400
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43d9      	mvns	r1, r3
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	400b      	ands	r3, r1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b08f      	sub	sp, #60	; 0x3c
 8003008:	af0a      	add	r7, sp, #40	; 0x28
 800300a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e116      	b.n	8003244 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd ff15 	bl	8000e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f002 fdd5 	bl	8005c04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	687e      	ldr	r6, [r7, #4]
 8003062:	466d      	mov	r5, sp
 8003064:	f106 0410 	add.w	r4, r6, #16
 8003068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003074:	e885 0003 	stmia.w	r5, {r0, r1}
 8003078:	1d33      	adds	r3, r6, #4
 800307a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307c:	6838      	ldr	r0, [r7, #0]
 800307e:	f002 fd69 	bl	8005b54 <USB_CoreInit>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0d7      	b.n	8003244 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fdc3 	bl	8005c26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e04a      	b.n	800313c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333d      	adds	r3, #61	; 0x3d
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	333c      	adds	r3, #60	; 0x3c
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	b298      	uxth	r0, r3
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3344      	adds	r3, #68	; 0x44
 80030e2:	4602      	mov	r2, r0
 80030e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3340      	adds	r3, #64	; 0x40
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3348      	adds	r3, #72	; 0x48
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334c      	adds	r3, #76	; 0x4c
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3354      	adds	r3, #84	; 0x54
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3301      	adds	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3af      	bcc.n	80030a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e044      	b.n	80031d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	3301      	adds	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3b5      	bcc.n	800314c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	687e      	ldr	r6, [r7, #4]
 80031e8:	466d      	mov	r5, sp
 80031ea:	f106 0410 	add.w	r4, r6, #16
 80031ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80031fe:	1d33      	adds	r3, r6, #4
 8003200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003202:	6838      	ldr	r0, [r7, #0]
 8003204:	f002 fd5c 	bl	8005cc0 <USB_DevInit>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e014      	b.n	8003244 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f80a 	bl	800324c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f002 ff1a 	bl	8006076 <USB_DevDisconnect>

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800324c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_PCDEx_ActivateLPM+0x44>)
 800327c:	4313      	orrs	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	10000003 	.word	0x10000003

08003294 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_PWREx_EnableOverDrive+0x98>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a22      	ldr	r2, [pc, #136]	; (800332c <HAL_PWREx_EnableOverDrive+0x98>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_PWREx_EnableOverDrive+0x98>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c2:	f7fd ff75 	bl	80011b0 <HAL_GetTick>
 80032c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032c8:	e009      	b.n	80032de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032ca:	f7fd ff71 	bl	80011b0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032d8:	d901      	bls.n	80032de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e022      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d1ee      	bne.n	80032ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f8:	f7fd ff5a 	bl	80011b0 <HAL_GetTick>
 80032fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032fe:	e009      	b.n	8003314 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003300:	f7fd ff56 	bl	80011b0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330e:	d901      	bls.n	8003314 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e007      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003320:	d1ee      	bne.n	8003300 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000

08003334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e29b      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003364:	4b93      	ldr	r3, [pc, #588]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d112      	bne.n	8003396 <HAL_RCC_OscConfig+0x62>
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d10b      	bne.n	8003396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337e:	4b8d      	ldr	r3, [pc, #564]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d06c      	beq.n	8003464 <HAL_RCC_OscConfig+0x130>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d168      	bne.n	8003464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e275      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x7a>
 80033a0:	4b84      	ldr	r3, [pc, #528]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a83      	ldr	r2, [pc, #524]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e02e      	b.n	800340c <HAL_RCC_OscConfig+0xd8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x9c>
 80033b6:	4b7f      	ldr	r3, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7e      	ldr	r2, [pc, #504]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b7c      	ldr	r3, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7b      	ldr	r2, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01d      	b.n	800340c <HAL_RCC_OscConfig+0xd8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0xc0>
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a72      	ldr	r2, [pc, #456]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0xd8>
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6e      	ldr	r2, [pc, #440]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6b      	ldr	r2, [pc, #428]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fecc 	bl	80011b0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fec8 	bl	80011b0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e229      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0xe8>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd feb8 	bl	80011b0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd feb4 	bl	80011b0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e215      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x110>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d069      	beq.n	8003546 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b4d      	ldr	r3, [pc, #308]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x190>
 800348a:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x17a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1e9      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	493d      	ldr	r1, [pc, #244]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e040      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a38      	ldr	r2, [pc, #224]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe6a 	bl	80011b0 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fd fe66 	bl	80011b0 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1c7      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4929      	ldr	r1, [pc, #164]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
 8003512:	e018      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fd fe46 	bl	80011b0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fd fe42 	bl	80011b0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1a3      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d038      	beq.n	80035c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fe23 	bl	80011b0 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd fe1f 	bl	80011b0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e180      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x23a>
 800358c:	e01a      	b.n	80035c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <HAL_RCC_OscConfig+0x280>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd fe09 	bl	80011b0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fe05 	bl	80011b0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d903      	bls.n	80035b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e166      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
 80035b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a4 	beq.w	800371a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a88      	ldr	r2, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b86      	ldr	r3, [pc, #536]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fa:	4b83      	ldr	r3, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x4d4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003606:	4b80      	ldr	r3, [pc, #512]	; (8003808 <HAL_RCC_OscConfig+0x4d4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7f      	ldr	r2, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x4d4>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fd fdcd 	bl	80011b0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fd fdc9 	bl	80011b0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e12a      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x4d4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x31a>
 8003640:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	e02d      	b.n	80036aa <HAL_RCC_OscConfig+0x376>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x33c>
 8003656:	4b6b      	ldr	r3, [pc, #428]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a67      	ldr	r2, [pc, #412]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	e01c      	b.n	80036aa <HAL_RCC_OscConfig+0x376>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x35e>
 8003678:	4b62      	ldr	r3, [pc, #392]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a61      	ldr	r2, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e00b      	b.n	80036aa <HAL_RCC_OscConfig+0x376>
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a5b      	ldr	r2, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fd fd7d 	bl	80011b0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fd fd79 	bl	80011b0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0d8      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ee      	beq.n	80036ba <HAL_RCC_OscConfig+0x386>
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd fd67 	bl	80011b0 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fd fd63 	bl	80011b0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e0c2      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80ae 	beq.w	8003880 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003724:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d06d      	beq.n	800380c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d14b      	bne.n	80037d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd fd34 	bl	80011b0 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fd30 	bl	80011b0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e091      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fd02 	bl	80011b0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fcfe 	bl	80011b0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e05f      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x47c>
 80037ce:	e057      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd fce8 	bl	80011b0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd fce4 	bl	80011b0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e045      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4b0>
 8003802:	e03d      	b.n	8003880 <HAL_RCC_OscConfig+0x54c>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x558>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d030      	beq.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d129      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d122      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003842:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003844:	4293      	cmp	r3, r2
 8003846:	d119      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d10f      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0d0      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	4965      	ldr	r1, [pc, #404]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b8      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 800390e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d040      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d115      	bne.n	8003972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e073      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b3d      	ldr	r3, [pc, #244]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06b      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4936      	ldr	r1, [pc, #216]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003984:	f7fd fc14 	bl	80011b0 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7fd fc10 	bl	80011b0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e053      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 020c 	and.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1eb      	bne.n	800398c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d210      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	4922      	ldr	r1, [pc, #136]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e032      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a22:	f000 f821 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490a      	ldr	r1, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x1cc>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1d0>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1d4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fa96 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08008e70 	.word	0x08008e70
 8003a60:	20000000 	.word	0x20000000
 8003a64:	20000004 	.word	0x20000004

08003a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b090      	sub	sp, #64	; 0x40
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	2300      	movs	r3, #0
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	f200 80a1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x34>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9a:	e09b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa0:	e09b      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa6:	e098      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad4:	fb03 f201 	mul.w	r2, r3, r1
 8003ad8:	2300      	movs	r3, #0
 8003ada:	fb00 f303 	mul.w	r3, r0, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae8:	460a      	mov	r2, r1
 8003aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aee:	4413      	add	r3, r2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	2200      	movs	r2, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b02:	f7fc fb9d 	bl	8000240 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	e053      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	617a      	str	r2, [r7, #20]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b22:	f04f 0b00 	mov.w	fp, #0
 8003b26:	4652      	mov	r2, sl
 8003b28:	465b      	mov	r3, fp
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b42:	eb63 090b 	sbc.w	r9, r3, fp
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	00eb      	lsls	r3, r5, #3
 8003b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b70:	00e2      	lsls	r2, r4, #3
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	eb14 030a 	adds.w	r3, r4, sl
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	eb45 030b 	adc.w	r3, r5, fp
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bac:	f7fc fb48 	bl	8000240 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3740      	adds	r7, #64	; 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	01312d00 	.word	0x01312d00

08003bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08008e80 	.word	0x08008e80

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08008e80 	.word	0x08008e80

08003c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	220f      	movs	r2, #15
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0203 	and.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCC_GetClockConfig+0x60>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	601a      	str	r2, [r3, #0]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40023c00 	.word	0x40023c00

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d012      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cf2:	6093      	str	r3, [r2, #8]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	4964      	ldr	r1, [pc, #400]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d017      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	4959      	ldr	r1, [pc, #356]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	494a      	ldr	r1, [pc, #296]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 808b 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6413      	str	r3, [r2, #64]	; 0x40
 8003db0:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dbc:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc8:	f7fd f9f2 	bl	80011b0 <HAL_GetTick>
 8003dcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fd f9ee 	bl	80011b0 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e38f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d035      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d02e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d114      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd f9b6 	bl	80011b0 <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd f9b2 	bl	80011b0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e351      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0ee      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d111      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e86:	400b      	ands	r3, r1
 8003e88:	4901      	ldr	r1, [pc, #4]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	0ffffcff 	.word	0x0ffffcff
 8003e9c:	4bac      	ldr	r3, [pc, #688]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4aab      	ldr	r2, [pc, #684]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ea6:	6093      	str	r3, [r2, #8]
 8003ea8:	4ba9      	ldr	r3, [pc, #676]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	49a6      	ldr	r1, [pc, #664]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ec6:	4ba2      	ldr	r3, [pc, #648]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	4aa0      	ldr	r2, [pc, #640]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ed6:	4b9e      	ldr	r3, [pc, #632]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	499b      	ldr	r1, [pc, #620]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef4:	4b96      	ldr	r3, [pc, #600]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f02:	4993      	ldr	r1, [pc, #588]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f16:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	498a      	ldr	r1, [pc, #552]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f38:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f46:	4982      	ldr	r1, [pc, #520]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f5a:	4b7d      	ldr	r3, [pc, #500]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4979      	ldr	r1, [pc, #484]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7c:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4971      	ldr	r1, [pc, #452]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f023 020c 	bic.w	r2, r3, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	4968      	ldr	r1, [pc, #416]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc0:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4960      	ldr	r1, [pc, #384]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fe2:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4957      	ldr	r1, [pc, #348]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004004:	4b52      	ldr	r3, [pc, #328]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	494f      	ldr	r1, [pc, #316]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004026:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4946      	ldr	r1, [pc, #280]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	493e      	ldr	r1, [pc, #248]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800406a:	4b39      	ldr	r3, [pc, #228]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	4935      	ldr	r1, [pc, #212]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800408c:	4b30      	ldr	r3, [pc, #192]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	492d      	ldr	r1, [pc, #180]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	4924      	ldr	r1, [pc, #144]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040cc:	d101      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	4914      	ldr	r1, [pc, #80]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004120:	490b      	ldr	r1, [pc, #44]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	4902      	ldr	r1, [pc, #8]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004160:	4b8a      	ldr	r3, [pc, #552]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	4986      	ldr	r1, [pc, #536]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004184:	4b81      	ldr	r3, [pc, #516]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	497d      	ldr	r1, [pc, #500]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d006      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80d6 	beq.w	800435c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b0:	4b76      	ldr	r3, [pc, #472]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a75      	ldr	r2, [pc, #468]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fc fff8 	bl	80011b0 <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c4:	f7fc fff4 	bl	80011b0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e195      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d6:	4b6d      	ldr	r3, [pc, #436]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d021      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420a:	0e1b      	lsrs	r3, r3, #24
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	019a      	lsls	r2, r3, #6
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	041b      	lsls	r3, r3, #16
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	4958      	ldr	r1, [pc, #352]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02e      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d129      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800425e:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800426c:	4b47      	ldr	r3, [pc, #284]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004272:	0f1b      	lsrs	r3, r3, #28
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	019a      	lsls	r2, r3, #6
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	493e      	ldr	r1, [pc, #248]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a0:	f023 021f 	bic.w	r2, r3, #31
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	3b01      	subs	r3, #1
 80042aa:	4938      	ldr	r1, [pc, #224]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01d      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042be:	4b33      	ldr	r3, [pc, #204]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d2:	0f1b      	lsrs	r3, r3, #28
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	019a      	lsls	r2, r3, #6
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	431a      	orrs	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	4926      	ldr	r1, [pc, #152]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	019a      	lsls	r2, r3, #6
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	071b      	lsls	r3, r3, #28
 8004322:	491a      	ldr	r1, [pc, #104]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004336:	f7fc ff3b 	bl	80011b0 <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800433e:	f7fc ff37 	bl	80011b0 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0d8      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	f040 80ce 	bne.w	8004500 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fc ff1e 	bl	80011b0 <HAL_GetTick>
 8004374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004376:	e00b      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004378:	f7fc ff1a 	bl	80011b0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d904      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0bb      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004390:	4b5e      	ldr	r3, [pc, #376]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439c:	d0ec      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02e      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d12a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c6:	4b51      	ldr	r3, [pc, #324]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d4:	4b4d      	ldr	r3, [pc, #308]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	0f1b      	lsrs	r3, r3, #28
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	4944      	ldr	r1, [pc, #272]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004402:	4b42      	ldr	r3, [pc, #264]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004408:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	493d      	ldr	r1, [pc, #244]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d022      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004430:	d11d      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	0e1b      	lsrs	r3, r3, #24
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	0f1b      	lsrs	r3, r3, #28
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	019a      	lsls	r2, r3, #6
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	431a      	orrs	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	431a      	orrs	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	071b      	lsls	r3, r3, #28
 8004466:	4929      	ldr	r1, [pc, #164]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d028      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	0e1b      	lsrs	r3, r3, #24
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004488:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	019a      	lsls	r2, r3, #6
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	071b      	lsls	r3, r3, #28
 80044ae:	4917      	ldr	r1, [pc, #92]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4911      	ldr	r1, [pc, #68]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0e      	ldr	r2, [pc, #56]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fc fe6a 	bl	80011b0 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044e0:	f7fc fe66 	bl	80011b0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e007      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fe:	d1ef      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e049      	b.n	80045b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f841 	bl	80045be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f000 fa00 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e054      	b.n	8004696 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d01d      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <HAL_TIM_Base_Start_IT+0xe8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d115      	bne.n	8004680 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_TIM_Base_Start_IT+0xec>)
 800465c:	4013      	ands	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b06      	cmp	r3, #6
 8004664:	d015      	beq.n	8004692 <HAL_TIM_Base_Start_IT+0xbe>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d011      	beq.n	8004692 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0201 	orr.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	e008      	b.n	8004692 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e000      	b.n	8004694 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40001800 	.word	0x40001800
 80046c0:	00010007 	.word	0x00010007

080046c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d122      	bne.n	8004720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11b      	bne.n	8004720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0202 	mvn.w	r2, #2
 80046f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f905 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8f7 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f908 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0204 	mvn.w	r2, #4
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8db 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8cd 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8de 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b08      	cmp	r3, #8
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0208 	mvn.w	r2, #8
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2204      	movs	r2, #4
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8b1 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8a3 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f8b4 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0210 	mvn.w	r2, #16
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2208      	movs	r2, #8
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f887 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f879 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f88a 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0201 	mvn.w	r2, #1
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fc f9ca 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f91a 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004882:	d10e      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f90d 	bl	8004abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d10e      	bne.n	80048ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f838 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d10e      	bne.n	80048fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d107      	bne.n	80048fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f06f 0220 	mvn.w	r2, #32
 80048f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8cd 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d027      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d023      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <TIM_Base_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e040      	b.n	8004b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc f94e 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fb3e 	bl	8005190 <UART_SetConfig>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e022      	b.n	8004b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fd96 	bl	8005658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fe1d 	bl	800579c <UART_CheckIdleState>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0ba      	sub	sp, #232	; 0xe8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b96:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d115      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 82ac 	beq.w	8005122 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
      }
      return;
 8004bd2:	e2a6      	b.n	8005122 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8117 	beq.w	8004e0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bee:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_UART_IRQHandler+0x298>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 810a 	beq.w	8004e0c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d011      	beq.n	8004c28 <HAL_UART_IRQHandler+0xbc>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d011      	beq.n	8004c58 <HAL_UART_IRQHandler+0xec>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00b      	beq.n	8004c58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	f043 0204 	orr.w	r2, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_UART_IRQHandler+0x11c>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2204      	movs	r2, #4
 8004c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ca4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x18a>
 8004cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8212 	beq.w	8005126 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d005      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04f      	beq.n	8004dee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fe37 	bl	80059c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d141      	bne.n	8004de6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1d9      	bne.n	8004d62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_UART_IRQHandler+0x29c>)
 8004dbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd ff36 	bl	8002c34 <HAL_DMA_Abort_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	e00f      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9b6 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00b      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9b2 	bl	8005150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e007      	b.n	8004dfe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9ae 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004dfc:	e193      	b.n	8005126 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfe:	bf00      	nop
    return;
 8004e00:	e191      	b.n	8005126 <HAL_UART_IRQHandler+0x5ba>
 8004e02:	bf00      	nop
 8004e04:	04000120 	.word	0x04000120
 8004e08:	08005a8b 	.word	0x08005a8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 814c 	bne.w	80050ae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8145 	beq.w	80050ae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 813e 	beq.w	80050ae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	f040 80b6 	bne.w	8004fb6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8165 	beq.w	800512a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f080 815d 	bcs.w	800512a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	f000 8086 	beq.w	8004f94 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eb6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1da      	bne.n	8004e88 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004efa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e1      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e3      	bne.n	8004f0e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f64:	f023 0310 	bic.w	r3, r3, #16
 8004f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e4      	bne.n	8004f54 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fde0 	bl	8002b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8d8 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fb4:	e0b9      	b.n	800512a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80ab 	beq.w	800512e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a6 	beq.w	800512e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
 8005006:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800500a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e4      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	623b      	str	r3, [r7, #32]
   return(result);
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3308      	adds	r3, #8
 8005038:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800503c:	633a      	str	r2, [r7, #48]	; 0x30
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60fb      	str	r3, [r7, #12]
   return(result);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	617b      	str	r3, [r7, #20]
   return(result);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e4      	bne.n	8005064 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f85c 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050ac:	e03f      	b.n	800512e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00e      	beq.n	80050d8 <HAL_UART_IRQHandler+0x56c>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f853 	bl	800517c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050d6:	e02d      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01c      	beq.n	8005132 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
    }
    return;
 8005100:	e017      	b.n	8005132 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <HAL_UART_IRQHandler+0x5c8>
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fccb 	bl	8005ab6 <UART_EndTransmit_IT>
    return;
 8005120:	e008      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005122:	bf00      	nop
 8005124:	e006      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005126:	bf00      	nop
 8005128:	e004      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
      return;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
      return;
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005132:	bf00      	nop
  }

}
 8005134:	37e8      	adds	r7, #232	; 0xe8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop

0800513c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4ba6      	ldr	r3, [pc, #664]	; (8005454 <UART_SetConfig+0x2c4>)
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a94      	ldr	r2, [pc, #592]	; (8005458 <UART_SetConfig+0x2c8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d120      	bne.n	800524e <UART_SetConfig+0xbe>
 800520c:	4b93      	ldr	r3, [pc, #588]	; (800545c <UART_SetConfig+0x2cc>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b03      	cmp	r3, #3
 8005218:	d816      	bhi.n	8005248 <UART_SetConfig+0xb8>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0x90>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	0800523d 	.word	0x0800523d
 8005228:	08005237 	.word	0x08005237
 800522c:	08005243 	.word	0x08005243
 8005230:	2301      	movs	r3, #1
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e150      	b.n	80054d8 <UART_SetConfig+0x348>
 8005236:	2302      	movs	r3, #2
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e14d      	b.n	80054d8 <UART_SetConfig+0x348>
 800523c:	2304      	movs	r3, #4
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e14a      	b.n	80054d8 <UART_SetConfig+0x348>
 8005242:	2308      	movs	r3, #8
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e147      	b.n	80054d8 <UART_SetConfig+0x348>
 8005248:	2310      	movs	r3, #16
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e144      	b.n	80054d8 <UART_SetConfig+0x348>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a83      	ldr	r2, [pc, #524]	; (8005460 <UART_SetConfig+0x2d0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d132      	bne.n	80052be <UART_SetConfig+0x12e>
 8005258:	4b80      	ldr	r3, [pc, #512]	; (800545c <UART_SetConfig+0x2cc>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d828      	bhi.n	80052b8 <UART_SetConfig+0x128>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0xdc>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052b9 	.word	0x080052b9
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052ad 	.word	0x080052ad
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052b9 	.word	0x080052b9
 800528c:	080052a7 	.word	0x080052a7
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052b9 	.word	0x080052b9
 800529c:	080052b3 	.word	0x080052b3
 80052a0:	2300      	movs	r3, #0
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e118      	b.n	80054d8 <UART_SetConfig+0x348>
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e115      	b.n	80054d8 <UART_SetConfig+0x348>
 80052ac:	2304      	movs	r3, #4
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e112      	b.n	80054d8 <UART_SetConfig+0x348>
 80052b2:	2308      	movs	r3, #8
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e10f      	b.n	80054d8 <UART_SetConfig+0x348>
 80052b8:	2310      	movs	r3, #16
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e10c      	b.n	80054d8 <UART_SetConfig+0x348>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a68      	ldr	r2, [pc, #416]	; (8005464 <UART_SetConfig+0x2d4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d120      	bne.n	800530a <UART_SetConfig+0x17a>
 80052c8:	4b64      	ldr	r3, [pc, #400]	; (800545c <UART_SetConfig+0x2cc>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052d2:	2b30      	cmp	r3, #48	; 0x30
 80052d4:	d013      	beq.n	80052fe <UART_SetConfig+0x16e>
 80052d6:	2b30      	cmp	r3, #48	; 0x30
 80052d8:	d814      	bhi.n	8005304 <UART_SetConfig+0x174>
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d009      	beq.n	80052f2 <UART_SetConfig+0x162>
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d810      	bhi.n	8005304 <UART_SetConfig+0x174>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <UART_SetConfig+0x15c>
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d006      	beq.n	80052f8 <UART_SetConfig+0x168>
 80052ea:	e00b      	b.n	8005304 <UART_SetConfig+0x174>
 80052ec:	2300      	movs	r3, #0
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e0f2      	b.n	80054d8 <UART_SetConfig+0x348>
 80052f2:	2302      	movs	r3, #2
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e0ef      	b.n	80054d8 <UART_SetConfig+0x348>
 80052f8:	2304      	movs	r3, #4
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e0ec      	b.n	80054d8 <UART_SetConfig+0x348>
 80052fe:	2308      	movs	r3, #8
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e0e9      	b.n	80054d8 <UART_SetConfig+0x348>
 8005304:	2310      	movs	r3, #16
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e0e6      	b.n	80054d8 <UART_SetConfig+0x348>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a56      	ldr	r2, [pc, #344]	; (8005468 <UART_SetConfig+0x2d8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d120      	bne.n	8005356 <UART_SetConfig+0x1c6>
 8005314:	4b51      	ldr	r3, [pc, #324]	; (800545c <UART_SetConfig+0x2cc>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800531e:	2bc0      	cmp	r3, #192	; 0xc0
 8005320:	d013      	beq.n	800534a <UART_SetConfig+0x1ba>
 8005322:	2bc0      	cmp	r3, #192	; 0xc0
 8005324:	d814      	bhi.n	8005350 <UART_SetConfig+0x1c0>
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d009      	beq.n	800533e <UART_SetConfig+0x1ae>
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d810      	bhi.n	8005350 <UART_SetConfig+0x1c0>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <UART_SetConfig+0x1a8>
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d006      	beq.n	8005344 <UART_SetConfig+0x1b4>
 8005336:	e00b      	b.n	8005350 <UART_SetConfig+0x1c0>
 8005338:	2300      	movs	r3, #0
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e0cc      	b.n	80054d8 <UART_SetConfig+0x348>
 800533e:	2302      	movs	r3, #2
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e0c9      	b.n	80054d8 <UART_SetConfig+0x348>
 8005344:	2304      	movs	r3, #4
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e0c6      	b.n	80054d8 <UART_SetConfig+0x348>
 800534a:	2308      	movs	r3, #8
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0c3      	b.n	80054d8 <UART_SetConfig+0x348>
 8005350:	2310      	movs	r3, #16
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e0c0      	b.n	80054d8 <UART_SetConfig+0x348>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a44      	ldr	r2, [pc, #272]	; (800546c <UART_SetConfig+0x2dc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d125      	bne.n	80053ac <UART_SetConfig+0x21c>
 8005360:	4b3e      	ldr	r3, [pc, #248]	; (800545c <UART_SetConfig+0x2cc>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d017      	beq.n	80053a0 <UART_SetConfig+0x210>
 8005370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005374:	d817      	bhi.n	80053a6 <UART_SetConfig+0x216>
 8005376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537a:	d00b      	beq.n	8005394 <UART_SetConfig+0x204>
 800537c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005380:	d811      	bhi.n	80053a6 <UART_SetConfig+0x216>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <UART_SetConfig+0x1fe>
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d006      	beq.n	800539a <UART_SetConfig+0x20a>
 800538c:	e00b      	b.n	80053a6 <UART_SetConfig+0x216>
 800538e:	2300      	movs	r3, #0
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e0a1      	b.n	80054d8 <UART_SetConfig+0x348>
 8005394:	2302      	movs	r3, #2
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e09e      	b.n	80054d8 <UART_SetConfig+0x348>
 800539a:	2304      	movs	r3, #4
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e09b      	b.n	80054d8 <UART_SetConfig+0x348>
 80053a0:	2308      	movs	r3, #8
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e098      	b.n	80054d8 <UART_SetConfig+0x348>
 80053a6:	2310      	movs	r3, #16
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e095      	b.n	80054d8 <UART_SetConfig+0x348>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <UART_SetConfig+0x2e0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d125      	bne.n	8005402 <UART_SetConfig+0x272>
 80053b6:	4b29      	ldr	r3, [pc, #164]	; (800545c <UART_SetConfig+0x2cc>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c4:	d017      	beq.n	80053f6 <UART_SetConfig+0x266>
 80053c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ca:	d817      	bhi.n	80053fc <UART_SetConfig+0x26c>
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	d00b      	beq.n	80053ea <UART_SetConfig+0x25a>
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d811      	bhi.n	80053fc <UART_SetConfig+0x26c>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <UART_SetConfig+0x254>
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d006      	beq.n	80053f0 <UART_SetConfig+0x260>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x26c>
 80053e4:	2301      	movs	r3, #1
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e076      	b.n	80054d8 <UART_SetConfig+0x348>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e073      	b.n	80054d8 <UART_SetConfig+0x348>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e070      	b.n	80054d8 <UART_SetConfig+0x348>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e06d      	b.n	80054d8 <UART_SetConfig+0x348>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e06a      	b.n	80054d8 <UART_SetConfig+0x348>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <UART_SetConfig+0x2e4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d138      	bne.n	800547e <UART_SetConfig+0x2ee>
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <UART_SetConfig+0x2cc>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800541a:	d017      	beq.n	800544c <UART_SetConfig+0x2bc>
 800541c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005420:	d82a      	bhi.n	8005478 <UART_SetConfig+0x2e8>
 8005422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005426:	d00b      	beq.n	8005440 <UART_SetConfig+0x2b0>
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d824      	bhi.n	8005478 <UART_SetConfig+0x2e8>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <UART_SetConfig+0x2aa>
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d006      	beq.n	8005446 <UART_SetConfig+0x2b6>
 8005438:	e01e      	b.n	8005478 <UART_SetConfig+0x2e8>
 800543a:	2300      	movs	r3, #0
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e04b      	b.n	80054d8 <UART_SetConfig+0x348>
 8005440:	2302      	movs	r3, #2
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e048      	b.n	80054d8 <UART_SetConfig+0x348>
 8005446:	2304      	movs	r3, #4
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e045      	b.n	80054d8 <UART_SetConfig+0x348>
 800544c:	2308      	movs	r3, #8
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e042      	b.n	80054d8 <UART_SetConfig+0x348>
 8005452:	bf00      	nop
 8005454:	efff69f3 	.word	0xefff69f3
 8005458:	40011000 	.word	0x40011000
 800545c:	40023800 	.word	0x40023800
 8005460:	40004400 	.word	0x40004400
 8005464:	40004800 	.word	0x40004800
 8005468:	40004c00 	.word	0x40004c00
 800546c:	40005000 	.word	0x40005000
 8005470:	40011400 	.word	0x40011400
 8005474:	40007800 	.word	0x40007800
 8005478:	2310      	movs	r3, #16
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e02c      	b.n	80054d8 <UART_SetConfig+0x348>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a72      	ldr	r2, [pc, #456]	; (800564c <UART_SetConfig+0x4bc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d125      	bne.n	80054d4 <UART_SetConfig+0x344>
 8005488:	4b71      	ldr	r3, [pc, #452]	; (8005650 <UART_SetConfig+0x4c0>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005492:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005496:	d017      	beq.n	80054c8 <UART_SetConfig+0x338>
 8005498:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800549c:	d817      	bhi.n	80054ce <UART_SetConfig+0x33e>
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d00b      	beq.n	80054bc <UART_SetConfig+0x32c>
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d811      	bhi.n	80054ce <UART_SetConfig+0x33e>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <UART_SetConfig+0x326>
 80054ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b2:	d006      	beq.n	80054c2 <UART_SetConfig+0x332>
 80054b4:	e00b      	b.n	80054ce <UART_SetConfig+0x33e>
 80054b6:	2300      	movs	r3, #0
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e00d      	b.n	80054d8 <UART_SetConfig+0x348>
 80054bc:	2302      	movs	r3, #2
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e00a      	b.n	80054d8 <UART_SetConfig+0x348>
 80054c2:	2304      	movs	r3, #4
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e007      	b.n	80054d8 <UART_SetConfig+0x348>
 80054c8:	2308      	movs	r3, #8
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e004      	b.n	80054d8 <UART_SetConfig+0x348>
 80054ce:	2310      	movs	r3, #16
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e001      	b.n	80054d8 <UART_SetConfig+0x348>
 80054d4:	2310      	movs	r3, #16
 80054d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e0:	d15b      	bne.n	800559a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d828      	bhi.n	800553a <UART_SetConfig+0x3aa>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <UART_SetConfig+0x360>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005515 	.word	0x08005515
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	08005525 	.word	0x08005525
 80054fc:	0800553b 	.word	0x0800553b
 8005500:	0800552b 	.word	0x0800552b
 8005504:	0800553b 	.word	0x0800553b
 8005508:	0800553b 	.word	0x0800553b
 800550c:	0800553b 	.word	0x0800553b
 8005510:	08005533 	.word	0x08005533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fe fb7a 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8005518:	61b8      	str	r0, [r7, #24]
        break;
 800551a:	e013      	b.n	8005544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800551c:	f7fe fb8a 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8005520:	61b8      	str	r0, [r7, #24]
        break;
 8005522:	e00f      	b.n	8005544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005524:	4b4b      	ldr	r3, [pc, #300]	; (8005654 <UART_SetConfig+0x4c4>)
 8005526:	61bb      	str	r3, [r7, #24]
        break;
 8005528:	e00c      	b.n	8005544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800552a:	f7fe fa9d 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 800552e:	61b8      	str	r0, [r7, #24]
        break;
 8005530:	e008      	b.n	8005544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	61bb      	str	r3, [r7, #24]
        break;
 8005538:	e004      	b.n	8005544 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	77bb      	strb	r3, [r7, #30]
        break;
 8005542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d074      	beq.n	8005634 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	005a      	lsls	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b0f      	cmp	r3, #15
 8005564:	d916      	bls.n	8005594 <UART_SetConfig+0x404>
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556c:	d212      	bcs.n	8005594 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f023 030f 	bic.w	r3, r3, #15
 8005576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	b29a      	uxth	r2, r3
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	4313      	orrs	r3, r2
 8005588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	89fa      	ldrh	r2, [r7, #14]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	e04f      	b.n	8005634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77bb      	strb	r3, [r7, #30]
 8005598:	e04c      	b.n	8005634 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800559a:	7ffb      	ldrb	r3, [r7, #31]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d828      	bhi.n	80055f2 <UART_SetConfig+0x462>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0x418>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055dd 	.word	0x080055dd
 80055b4:	080055f3 	.word	0x080055f3
 80055b8:	080055e3 	.word	0x080055e3
 80055bc:	080055f3 	.word	0x080055f3
 80055c0:	080055f3 	.word	0x080055f3
 80055c4:	080055f3 	.word	0x080055f3
 80055c8:	080055eb 	.word	0x080055eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055cc:	f7fe fb1e 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 80055d0:	61b8      	str	r0, [r7, #24]
        break;
 80055d2:	e013      	b.n	80055fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d4:	f7fe fb2e 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 80055d8:	61b8      	str	r0, [r7, #24]
        break;
 80055da:	e00f      	b.n	80055fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055dc:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <UART_SetConfig+0x4c4>)
 80055de:	61bb      	str	r3, [r7, #24]
        break;
 80055e0:	e00c      	b.n	80055fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fe fa41 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 80055e6:	61b8      	str	r0, [r7, #24]
        break;
 80055e8:	e008      	b.n	80055fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	61bb      	str	r3, [r7, #24]
        break;
 80055f0:	e004      	b.n	80055fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	77bb      	strb	r3, [r7, #30]
        break;
 80055fa:	bf00      	nop
    }

    if (pclk != 0U)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	085a      	lsrs	r2, r3, #1
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	441a      	add	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b0f      	cmp	r3, #15
 800561a:	d909      	bls.n	8005630 <UART_SetConfig+0x4a0>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005622:	d205      	bcs.n	8005630 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e001      	b.n	8005634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005640:	7fbb      	ldrb	r3, [r7, #30]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40007c00 	.word	0x40007c00
 8005650:	40023800 	.word	0x40023800
 8005654:	00f42400 	.word	0x00f42400

08005658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01a      	beq.n	800576e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005756:	d10a      	bne.n	800576e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057ac:	f7fb fd00 	bl	80011b0 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d10e      	bne.n	80057de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f831 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e027      	b.n	800582e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d10e      	bne.n	800580a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f81b 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e011      	b.n	800582e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b09c      	sub	sp, #112	; 0x70
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005846:	e0a7      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	f000 80a3 	beq.w	8005998 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005852:	f7fb fcad 	bl	80011b0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <UART_WaitOnFlagUntilTimeout+0x32>
 8005862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005864:	2b00      	cmp	r3, #0
 8005866:	d13f      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800587c:	667b      	str	r3, [r7, #100]	; 0x64
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005888:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800588c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	663b      	str	r3, [r7, #96]	; 0x60
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e068      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d050      	beq.n	8005998 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005904:	d148      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3308      	adds	r3, #8
 8005948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	613b      	str	r3, [r7, #16]
   return(result);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	66bb      	str	r3, [r7, #104]	; 0x68
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005962:	623a      	str	r2, [r7, #32]
 8005964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	69f9      	ldr	r1, [r7, #28]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e010      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	f43f af48 	beq.w	8005848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3770      	adds	r7, #112	; 0x70
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b095      	sub	sp, #84	; 0x54
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d118      	bne.n	8005a6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f023 0310 	bic.w	r3, r3, #16
 8005a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6979      	ldr	r1, [r7, #20]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a7e:	bf00      	nop
 8005a80:	3754      	adds	r7, #84	; 0x54
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff fb51 	bl	8005150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b088      	sub	sp, #32
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fb1d 	bl	800513c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b02:	bf00      	nop
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e016      	b.n	8005b4a <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fb fa09 	bl	8000f34 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	ea42 0103 	orr.w	r1, r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b54:	b084      	sub	sp, #16
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	f107 001c 	add.w	r0, r7, #28
 8005b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d120      	bne.n	8005bae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <USB_CoreInit+0xac>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa96 	bl	80060d4 <USB_CoreReset>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	e010      	b.n	8005bd0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa8a 	bl	80060d4 <USB_CoreReset>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10b      	bne.n	8005bee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f043 0206 	orr.w	r2, r3, #6
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bfa:	b004      	add	sp, #16
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	ffbdffbf 	.word	0xffbdffbf

08005c04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 0201 	bic.w	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d115      	bne.n	8005c74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fb fab7 	bl	80011c8 <HAL_Delay>
      ms++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa29 	bl	80060b8 <USB_GetMode>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d01e      	beq.n	8005caa <USB_SetCurrentMode+0x84>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b31      	cmp	r3, #49	; 0x31
 8005c70:	d9f0      	bls.n	8005c54 <USB_SetCurrentMode+0x2e>
 8005c72:	e01a      	b.n	8005caa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d115      	bne.n	8005ca6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c86:	2001      	movs	r0, #1
 8005c88:	f7fb fa9e 	bl	80011c8 <HAL_Delay>
      ms++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa10 	bl	80060b8 <USB_GetMode>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <USB_SetCurrentMode+0x84>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b31      	cmp	r3, #49	; 0x31
 8005ca2:	d9f0      	bls.n	8005c86 <USB_SetCurrentMode+0x60>
 8005ca4:	e001      	b.n	8005caa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e005      	b.n	8005cb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b32      	cmp	r3, #50	; 0x32
 8005cae:	d101      	bne.n	8005cb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e009      	b.n	8005cf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3340      	adds	r3, #64	; 0x40
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b0e      	cmp	r3, #14
 8005cf8:	d9f2      	bls.n	8005ce0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11c      	bne.n	8005d3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e005      	b.n	8005d46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	461a      	mov	r2, r3
 8005d62:	680b      	ldr	r3, [r1, #0]
 8005d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10c      	bne.n	8005d86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f965 	bl	8006044 <USB_SetDevSpeed>
 8005d7a:	e008      	b.n	8005d8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f960 	bl	8006044 <USB_SetDevSpeed>
 8005d84:	e003      	b.n	8005d8e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d86:	2103      	movs	r1, #3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f95b 	bl	8006044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d8e:	2110      	movs	r1, #16
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f8f3 	bl	8005f7c <USB_FlushTxFifo>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f91f 	bl	8005fe4 <USB_FlushRxFifo>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e043      	b.n	8005e62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d118      	bne.n	8005e24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e013      	b.n	8005e36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e008      	b.n	8005e36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3b7      	bcc.n	8005dda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e043      	b.n	8005ef8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e86:	d118      	bne.n	8005eba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e013      	b.n	8005ecc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e008      	b.n	8005ecc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3b7      	bcc.n	8005e70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f043 0210 	orr.w	r2, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <USB_DevInit+0x2b4>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <USB_DevInit+0x2b8>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr
 8005f74:	803c3800 	.word	0x803c3800
 8005f78:	40000004 	.word	0x40000004

08005f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <USB_FlushTxFifo+0x64>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01b      	b.n	8005fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	daf2      	bge.n	8005f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	019b      	lsls	r3, r3, #6
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <USB_FlushTxFifo+0x64>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e006      	b.n	8005fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d0f0      	beq.n	8005fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	00030d40 	.word	0x00030d40

08005fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a11      	ldr	r2, [pc, #68]	; (8006040 <USB_FlushRxFifo+0x5c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e018      	b.n	8006034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	daf2      	bge.n	8005ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2210      	movs	r2, #16
 8006012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <USB_FlushRxFifo+0x5c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e006      	b.n	8006034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d0f0      	beq.n	8006014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	00030d40 	.word	0x00030d40

08006044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006064:	4313      	orrs	r3, r2
 8006066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006090:	f023 0303 	bic.w	r3, r3, #3
 8006094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a4:	f043 0302 	orr.w	r3, r3, #2
 80060a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0301 	and.w	r3, r3, #1
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <USB_CoreReset+0x64>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e01b      	b.n	800612a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	daf2      	bge.n	80060e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f043 0201 	orr.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <USB_CoreReset+0x64>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e006      	b.n	800612a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d0f0      	beq.n	800610a <USB_CoreReset+0x36>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	00030d40 	.word	0x00030d40

0800613c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006140:	bf00      	nop
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006152:	f3ef 8305 	mrs	r3, IPSR
 8006156:	60bb      	str	r3, [r7, #8]
  return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615e:	f3ef 8310 	mrs	r3, PRIMASK
 8006162:	607b      	str	r3, [r7, #4]
  return(result);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800616a:	f3ef 8311 	mrs	r3, BASEPRI
 800616e:	603b      	str	r3, [r7, #0]
  return(result);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <osKernelInitialize+0x3a>
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <osKernelInitialize+0x64>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d103      	bne.n	8006186 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800617e:	f06f 0305 	mvn.w	r3, #5
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e00c      	b.n	80061a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <osKernelInitialize+0x64>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d105      	bne.n	800619a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800618e:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <osKernelInitialize+0x64>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e002      	b.n	80061a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	2000072c 	.word	0x2000072c

080061b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ba:	f3ef 8305 	mrs	r3, IPSR
 80061be:	60bb      	str	r3, [r7, #8]
  return(result);
 80061c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ca:	607b      	str	r3, [r7, #4]
  return(result);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d2:	f3ef 8311 	mrs	r3, BASEPRI
 80061d6:	603b      	str	r3, [r7, #0]
  return(result);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <osKernelStart+0x3a>
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <osKernelStart+0x68>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d103      	bne.n	80061ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80061e6:	f06f 0305 	mvn.w	r3, #5
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e010      	b.n	8006210 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <osKernelStart+0x68>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d109      	bne.n	800620a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061f6:	f7ff ffa1 	bl	800613c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <osKernelStart+0x68>)
 80061fc:	2202      	movs	r2, #2
 80061fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006200:	f001 f8b4 	bl	800736c <vTaskStartScheduler>
      stat = osOK;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e002      	b.n	8006210 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800620a:	f04f 33ff 	mov.w	r3, #4294967295
 800620e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	2000072c 	.word	0x2000072c

08006220 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006220:	b580      	push	{r7, lr}
 8006222:	b090      	sub	sp, #64	; 0x40
 8006224:	af04      	add	r7, sp, #16
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006230:	f3ef 8305 	mrs	r3, IPSR
 8006234:	61fb      	str	r3, [r7, #28]
  return(result);
 8006236:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 808f 	bne.w	800635c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623e:	f3ef 8310 	mrs	r3, PRIMASK
 8006242:	61bb      	str	r3, [r7, #24]
  return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800624a:	f3ef 8311 	mrs	r3, BASEPRI
 800624e:	617b      	str	r3, [r7, #20]
  return(result);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <osThreadNew+0x3e>
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <osThreadNew+0x148>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d07e      	beq.n	800635c <osThreadNew+0x13c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d07b      	beq.n	800635c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006268:	2318      	movs	r3, #24
 800626a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006270:	f04f 33ff 	mov.w	r3, #4294967295
 8006274:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d045      	beq.n	8006308 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <osThreadNew+0x6a>
        name = attr->name;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <osThreadNew+0x90>
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b38      	cmp	r3, #56	; 0x38
 80062a2:	d805      	bhi.n	80062b0 <osThreadNew+0x90>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <osThreadNew+0x94>
        return (NULL);
 80062b0:	2300      	movs	r3, #0
 80062b2:	e054      	b.n	800635e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <osThreadNew+0xca>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b5b      	cmp	r3, #91	; 0x5b
 80062d2:	d90a      	bls.n	80062ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <osThreadNew+0xca>
        mem = 1;
 80062e4:	2301      	movs	r3, #1
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	e010      	b.n	800630c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <osThreadNew+0xec>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d108      	bne.n	800630c <osThreadNew+0xec>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <osThreadNew+0xec>
          mem = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e001      	b.n	800630c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d110      	bne.n	8006334 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800631a:	9202      	str	r2, [sp, #8]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fe3f 	bl	8006fac <xTaskCreateStatic>
 800632e:	4603      	mov	r3, r0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e013      	b.n	800635c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b29a      	uxth	r2, r3
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fe90 	bl	8007072 <xTaskCreate>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d001      	beq.n	800635c <osThreadNew+0x13c>
          hTask = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800635c:	693b      	ldr	r3, [r7, #16]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3730      	adds	r7, #48	; 0x30
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	2000072c 	.word	0x2000072c

0800636c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006374:	f3ef 8305 	mrs	r3, IPSR
 8006378:	613b      	str	r3, [r7, #16]
  return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006380:	f3ef 8310 	mrs	r3, PRIMASK
 8006384:	60fb      	str	r3, [r7, #12]
  return(result);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	60bb      	str	r3, [r7, #8]
  return(result);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <osDelay+0x3c>
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <osDelay+0x58>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d103      	bne.n	80063a8 <osDelay+0x3c>
    stat = osErrorISR;
 80063a0:	f06f 0305 	mvn.w	r3, #5
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e007      	b.n	80063b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 ffa4 	bl	8007300 <vTaskDelay>
    }
  }

  return (stat);
 80063b8:	697b      	ldr	r3, [r7, #20]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	2000072c 	.word	0x2000072c

080063c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80063d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4a06      	ldr	r2, [pc, #24]	; (80063f8 <vApplicationGetIdleTaskMemory+0x30>)
 80063de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	601a      	str	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000730 	.word	0x20000730
 80063f8:	2000078c 	.word	0x2000078c

080063fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a07      	ldr	r2, [pc, #28]	; (8006428 <vApplicationGetTimerTaskMemory+0x2c>)
 800640c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4a06      	ldr	r2, [pc, #24]	; (800642c <vApplicationGetTimerTaskMemory+0x30>)
 8006412:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641a:	601a      	str	r2, [r3, #0]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	2000098c 	.word	0x2000098c
 800642c:	200009e8 	.word	0x200009e8

08006430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0208 	add.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f103 0208 	add.w	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0208 	add.w	r2, r3, #8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d103      	bne.n	80064f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e00c      	b.n	800650c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3308      	adds	r3, #8
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e002      	b.n	8006500 <vListInsert+0x2e>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d2f6      	bcs.n	80064fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6892      	ldr	r2, [r2, #8]
 800655a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6852      	ldr	r2, [r2, #4]
 8006564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d103      	bne.n	8006578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1e5a      	subs	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10c      	bne.n	80065c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	b672      	cpsid	i
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	b662      	cpsie	i
 80065c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80065c6:	f002 f879 	bl	80086bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	3b01      	subs	r3, #1
 80065f8:	68f9      	ldr	r1, [r7, #12]
 80065fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	441a      	add	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	22ff      	movs	r2, #255	; 0xff
 800660a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	22ff      	movs	r2, #255	; 0xff
 8006612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d114      	bne.n	8006646 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3310      	adds	r3, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f001 f937 	bl	800789c <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <xQueueGenericReset+0xd0>)
 8006636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	e009      	b.n	800665a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3310      	adds	r3, #16
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fef0 	bl	8006430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3324      	adds	r3, #36	; 0x24
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff feeb 	bl	8006430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800665a:	f002 f863 	bl	8008724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800665e:	2301      	movs	r3, #1
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08e      	sub	sp, #56	; 0x38
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10c      	bne.n	80066ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	b672      	cpsid	i
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	b662      	cpsie	i
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <xQueueGenericCreateStatic+0x5a>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <xQueueGenericCreateStatic+0x5e>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueGenericCreateStatic+0x60>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10c      	bne.n	80066ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	b672      	cpsid	i
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	b662      	cpsie	i
 80066e4:	623b      	str	r3, [r7, #32]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <xQueueGenericCreateStatic+0x8a>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <xQueueGenericCreateStatic+0x8e>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <xQueueGenericCreateStatic+0x90>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	b672      	cpsid	i
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	b662      	cpsie	i
 8006714:	61fb      	str	r3, [r7, #28]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800671a:	2350      	movs	r3, #80	; 0x50
 800671c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b50      	cmp	r3, #80	; 0x50
 8006722:	d00c      	beq.n	800673e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	b672      	cpsid	i
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	b662      	cpsie	i
 8006738:	61bb      	str	r3, [r7, #24]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800673e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006752:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4613      	mov	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f805 	bl	8006770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006768:	4618      	mov	r0, r3
 800676a:	3730      	adds	r7, #48	; 0x30
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e002      	b.n	8006792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800679e:	2101      	movs	r1, #1
 80067a0:	69b8      	ldr	r0, [r7, #24]
 80067a2:	f7ff fef9 	bl	8006598 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	78fa      	ldrb	r2, [r7, #3]
 80067aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08e      	sub	sp, #56	; 0x38
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10c      	bne.n	80067ee <xQueueGenericSend+0x36>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	b672      	cpsid	i
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	b662      	cpsie	i
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <xQueueGenericSend+0x44>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <xQueueGenericSend+0x48>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <xQueueGenericSend+0x4a>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <xQueueGenericSend+0x68>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	b672      	cpsid	i
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	b662      	cpsie	i
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d103      	bne.n	800682e <xQueueGenericSend+0x76>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <xQueueGenericSend+0x7a>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueGenericSend+0x7c>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <xQueueGenericSend+0x9a>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	b672      	cpsid	i
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	b662      	cpsie	i
 800684c:	623b      	str	r3, [r7, #32]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006852:	f001 f9e9 	bl	8007c28 <xTaskGetSchedulerState>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <xQueueGenericSend+0xaa>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xQueueGenericSend+0xae>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xQueueGenericSend+0xb0>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <xQueueGenericSend+0xce>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	b672      	cpsid	i
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	b662      	cpsie	i
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006886:	f001 ff19 	bl	80086bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <xQueueGenericSend+0xe4>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d129      	bne.n	80068f0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068a2:	f000 fa15 	bl	8006cd0 <prvCopyDataToQueue>
 80068a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	3324      	adds	r3, #36	; 0x24
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fff1 	bl	800789c <xTaskRemoveFromEventList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068c0:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <xQueueGenericSend+0x208>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	e00a      	b.n	80068e8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068d8:	4b39      	ldr	r3, [pc, #228]	; (80069c0 <xQueueGenericSend+0x208>)
 80068da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068e8:	f001 ff1c 	bl	8008724 <vPortExitCritical>
				return pdPASS;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e063      	b.n	80069b8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068f6:	f001 ff15 	bl	8008724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e05c      	b.n	80069b8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f82d 	bl	8007968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006912:	f001 ff07 	bl	8008724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006916:	f000 fd93 	bl	8007440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800691a:	f001 fecf 	bl	80086bc <vPortEnterCritical>
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006924:	b25b      	sxtb	r3, r3
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d103      	bne.n	8006934 <xQueueGenericSend+0x17c>
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693a:	b25b      	sxtb	r3, r3
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x192>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800694a:	f001 feeb 	bl	8008724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800694e:	1d3a      	adds	r2, r7, #4
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f81c 	bl	8007994 <xTaskCheckForTimeOut>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d124      	bne.n	80069ac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006964:	f000 faac 	bl	8006ec0 <prvIsQueueFull>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	3310      	adds	r3, #16
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff3c 	bl	80077f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800697c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697e:	f000 fa37 	bl	8006df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006982:	f000 fd6b 	bl	800745c <xTaskResumeAll>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f af7c 	bne.w	8006886 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <xQueueGenericSend+0x208>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	e772      	b.n	8006886 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a2:	f000 fa25 	bl	8006df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a6:	f000 fd59 	bl	800745c <xTaskResumeAll>
 80069aa:	e76c      	b.n	8006886 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ae:	f000 fa1f 	bl	8006df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069b2:	f000 fd53 	bl	800745c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3738      	adds	r7, #56	; 0x38
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	b672      	cpsid	i
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	b662      	cpsie	i
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSendFromISR+0x40>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <xQueueGenericSendFromISR+0x44>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <xQueueGenericSendFromISR+0x46>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10c      	bne.n	8006a28 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	b672      	cpsid	i
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	b662      	cpsie	i
 8006a22:	623b      	str	r3, [r7, #32]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSendFromISR+0x72>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSendFromISR+0x76>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSendFromISR+0x78>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	61fb      	str	r3, [r7, #28]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a5a:	f001 ff17 	bl	800888c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	61ba      	str	r2, [r7, #24]
 8006a78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <xQueueGenericSendFromISR+0xcc>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d12c      	bne.n	8006aea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa0:	f000 f916 	bl	8006cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d112      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d016      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 feee 	bl	800789c <xTaskRemoveFromEventList>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e007      	b.n	8006ae4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ad4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ad8:	3301      	adds	r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	b25a      	sxtb	r2, r3
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ae8:	e001      	b.n	8006aee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3738      	adds	r7, #56	; 0x38
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	; 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <xQueueReceive+0x34>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	623b      	str	r3, [r7, #32]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <xQueueReceive+0x42>
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <xQueueReceive+0x46>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueReceive+0x48>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10c      	bne.n	8006b6a <xQueueReceive+0x66>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	b672      	cpsid	i
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	b662      	cpsie	i
 8006b64:	61fb      	str	r3, [r7, #28]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6a:	f001 f85d 	bl	8007c28 <xTaskGetSchedulerState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <xQueueReceive+0x76>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <xQueueReceive+0x7a>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <xQueueReceive+0x7c>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10c      	bne.n	8006b9e <xQueueReceive+0x9a>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	b672      	cpsid	i
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	b662      	cpsie	i
 8006b98:	61bb      	str	r3, [r7, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9e:	f001 fd8d 	bl	80086bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01f      	beq.n	8006bee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb2:	f000 f8f7 	bl	8006da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	3310      	adds	r3, #16
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fe66 	bl	800789c <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd6:	4b3d      	ldr	r3, [pc, #244]	; (8006ccc <xQueueReceive+0x1c8>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006be6:	f001 fd9d 	bl	8008724 <vPortExitCritical>
				return pdPASS;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e069      	b.n	8006cc2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bf4:	f001 fd96 	bl	8008724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e062      	b.n	8006cc2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 feae 	bl	8007968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c10:	f001 fd88 	bl	8008724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c14:	f000 fc14 	bl	8007440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c18:	f001 fd50 	bl	80086bc <vPortEnterCritical>
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d103      	bne.n	8006c32 <xQueueReceive+0x12e>
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueReceive+0x144>
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	f001 fd6c 	bl	8008724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4c:	1d3a      	adds	r2, r7, #4
 8006c4e:	f107 0310 	add.w	r3, r7, #16
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fe9d 	bl	8007994 <xTaskCheckForTimeOut>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d123      	bne.n	8006ca8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c62:	f000 f917 	bl	8006e94 <prvIsQueueEmpty>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d017      	beq.n	8006c9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fdbd 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c7c:	f000 f8b8 	bl	8006df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c80:	f000 fbec 	bl	800745c <xTaskResumeAll>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d189      	bne.n	8006b9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <xQueueReceive+0x1c8>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	e780      	b.n	8006b9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9e:	f000 f8a7 	bl	8006df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca2:	f000 fbdb 	bl	800745c <xTaskResumeAll>
 8006ca6:	e77a      	b.n	8006b9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006caa:	f000 f8a1 	bl	8006df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cae:	f000 fbd5 	bl	800745c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb4:	f000 f8ee 	bl	8006e94 <prvIsQueueEmpty>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f43f af6f 	beq.w	8006b9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3730      	adds	r7, #48	; 0x30
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10d      	bne.n	8006d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d14d      	bne.n	8006d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 ffb2 	bl	8007c64 <xTaskPriorityDisinherit>
 8006d00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	e043      	b.n	8006d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d119      	bne.n	8006d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6858      	ldr	r0, [r3, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	f002 f80a 	bl	8008d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d32b      	bcc.n	8006d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	e026      	b.n	8006d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68d8      	ldr	r0, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	f001 fff0 	bl	8008d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	425b      	negs	r3, r3
 8006d5e:	441a      	add	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d207      	bcs.n	8006d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	425b      	negs	r3, r3
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d105      	bne.n	8006d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d9a:	697b      	ldr	r3, [r7, #20]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	441a      	add	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d303      	bcc.n	8006dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68d9      	ldr	r1, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	461a      	mov	r2, r3
 8006de2:	6838      	ldr	r0, [r7, #0]
 8006de4:	f001 ffa6 	bl	8008d34 <memcpy>
	}
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006df8:	f001 fc60 	bl	80086bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e04:	e011      	b.n	8006e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d012      	beq.n	8006e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fd42 	bl	800789c <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e1e:	f000 fe1f 	bl	8007a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dce9      	bgt.n	8006e06 <prvUnlockQueue+0x16>
 8006e32:	e000      	b.n	8006e36 <prvUnlockQueue+0x46>
					break;
 8006e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	22ff      	movs	r2, #255	; 0xff
 8006e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e3e:	f001 fc71 	bl	8008724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e42:	f001 fc3b 	bl	80086bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e4e:	e011      	b.n	8006e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3310      	adds	r3, #16
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fd1d 	bl	800789c <xTaskRemoveFromEventList>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e68:	f000 fdfa 	bl	8007a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	dce9      	bgt.n	8006e50 <prvUnlockQueue+0x60>
 8006e7c:	e000      	b.n	8006e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	22ff      	movs	r2, #255	; 0xff
 8006e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e88:	f001 fc4c 	bl	8008724 <vPortExitCritical>
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e9c:	f001 fc0e 	bl	80086bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e001      	b.n	8006eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eb2:	f001 fc37 	bl	8008724 <vPortExitCritical>

	return xReturn;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec8:	f001 fbf8 	bl	80086bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d102      	bne.n	8006ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e001      	b.n	8006ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ee2:	f001 fc1f 	bl	8008724 <vPortExitCritical>

	return xReturn;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e014      	b.n	8006f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f00:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f0c:	490c      	ldr	r1, [pc, #48]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <vQueueAddToRegistry+0x50>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f22:	e006      	b.n	8006f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b07      	cmp	r3, #7
 8006f2e:	d9e7      	bls.n	8006f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000de8 	.word	0x20000de8

08006f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f54:	f001 fbb2 	bl	80086bc <vPortEnterCritical>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d103      	bne.n	8006f6e <vQueueWaitForMessageRestricted+0x2a>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <vQueueWaitForMessageRestricted+0x40>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f84:	f001 fbce 	bl	8008724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fc51 	bl	8007840 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f7ff ff26 	bl	8006df0 <prvUnlockQueue>
	}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08e      	sub	sp, #56	; 0x38
 8006fb0:	af04      	add	r7, sp, #16
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10c      	bne.n	8006fda <xTaskCreateStatic+0x2e>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	623b      	str	r3, [r7, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <xTaskCreateStatic+0x4e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	b672      	cpsid	i
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	b662      	cpsie	i
 8006ff4:	61fb      	str	r3, [r7, #28]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ffa:	235c      	movs	r3, #92	; 0x5c
 8006ffc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b5c      	cmp	r3, #92	; 0x5c
 8007002:	d00c      	beq.n	800701e <xTaskCreateStatic+0x72>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	b672      	cpsid	i
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	b662      	cpsie	i
 8007018:	61bb      	str	r3, [r7, #24]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800701e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <xTaskCreateStatic+0xb8>
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800703e:	2300      	movs	r3, #0
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f850 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800705c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705e:	f000 f8df 	bl	8007220 <prvAddNewTaskToReadyList>
 8007062:	e001      	b.n	8007068 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007068:	697b      	ldr	r3, [r7, #20]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007072:	b580      	push	{r7, lr}
 8007074:	b08c      	sub	sp, #48	; 0x30
 8007076:	af04      	add	r7, sp, #16
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fc44 	bl	8008914 <pvPortMalloc>
 800708c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007094:	205c      	movs	r0, #92	; 0x5c
 8007096:	f001 fc3d 	bl	8008914 <pvPortMalloc>
 800709a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
 80070a8:	e005      	b.n	80070b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f001 fcfc 	bl	8008aa8 <vPortFree>
 80070b0:	e001      	b.n	80070b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	9302      	str	r3, [sp, #8]
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f80e 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f000 f89d 	bl	8007220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e6:	2301      	movs	r3, #1
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e002      	b.n	80070f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070ec:	f04f 33ff 	mov.w	r3, #4294967295
 80070f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070f2:	69bb      	ldr	r3, [r7, #24]
	}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	461a      	mov	r2, r3
 8007114:	21a5      	movs	r1, #165	; 0xa5
 8007116:	f001 fde1 	bl	8008cdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007124:	440b      	add	r3, r1
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	b672      	cpsid	i
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	b662      	cpsie	i
 8007152:	617b      	str	r3, [r7, #20]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01f      	beq.n	800719e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e012      	b.n	800718a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	3334      	adds	r3, #52	; 0x34
 8007174:	460a      	mov	r2, r1
 8007176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d006      	beq.n	8007192 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b0f      	cmp	r3, #15
 800718e:	d9e9      	bls.n	8007164 <prvInitialiseNewTask+0x68>
 8007190:	e000      	b.n	8007194 <prvInitialiseNewTask+0x98>
			{
				break;
 8007192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800719c:	e003      	b.n	80071a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b37      	cmp	r3, #55	; 0x37
 80071aa:	d901      	bls.n	80071b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ac:	2337      	movs	r3, #55	; 0x37
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	2200      	movs	r2, #0
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff f952 	bl	8006470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	3318      	adds	r3, #24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff f94d 	bl	8006470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68f9      	ldr	r1, [r7, #12]
 80071fe:	69b8      	ldr	r0, [r7, #24]
 8007200:	f001 f952 	bl	80084a8 <pxPortInitialiseStack>
 8007204:	4602      	mov	r2, r0
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007228:	f001 fa48 	bl	80086bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d110      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800724c:	f000 fc2c 	bl	8007aa8 <prvInitialiseTaskLists>
 8007250:	e00d      	b.n	800726e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007252:	4b26      	ldr	r3, [pc, #152]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800725a:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	429a      	cmp	r2, r3
 8007266:	d802      	bhi.n	800726e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007268:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800726e:	4b20      	ldr	r3, [pc, #128]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 8007276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007278:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d903      	bls.n	8007294 <prvAddNewTaskToReadyList+0x74>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <prvAddNewTaskToReadyList+0xd4>)
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <prvAddNewTaskToReadyList+0xd8>)
 80072a2:	441a      	add	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f7ff f8ed 	bl	800648a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072b0:	f001 fa38 	bl	8008724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d207      	bcs.n	80072da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072ca:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <prvAddNewTaskToReadyList+0xdc>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200012fc 	.word	0x200012fc
 80072e8:	20000e28 	.word	0x20000e28
 80072ec:	20001308 	.word	0x20001308
 80072f0:	20001318 	.word	0x20001318
 80072f4:	20001304 	.word	0x20001304
 80072f8:	20000e2c 	.word	0x20000e2c
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d019      	beq.n	8007346 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007312:	4b14      	ldr	r3, [pc, #80]	; (8007364 <vTaskDelay+0x64>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <vTaskDelay+0x34>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	b672      	cpsid	i
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	b662      	cpsie	i
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007334:	f000 f884 	bl	8007440 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fd04 	bl	8007d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007340:	f000 f88c 	bl	800745c <xTaskResumeAll>
 8007344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <vTaskDelay+0x68>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20001324 	.word	0x20001324
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800737a:	463a      	mov	r2, r7
 800737c:	1d39      	adds	r1, r7, #4
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff f820 	bl	80063c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	9202      	str	r2, [sp, #8]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	2300      	movs	r3, #0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	460a      	mov	r2, r1
 800739a:	4923      	ldr	r1, [pc, #140]	; (8007428 <vTaskStartScheduler+0xbc>)
 800739c:	4823      	ldr	r0, [pc, #140]	; (800742c <vTaskStartScheduler+0xc0>)
 800739e:	f7ff fe05 	bl	8006fac <xTaskCreateStatic>
 80073a2:	4603      	mov	r3, r0
 80073a4:	4a22      	ldr	r2, [pc, #136]	; (8007430 <vTaskStartScheduler+0xc4>)
 80073a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073a8:	4b21      	ldr	r3, [pc, #132]	; (8007430 <vTaskStartScheduler+0xc4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073b0:	2301      	movs	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e001      	b.n	80073ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d102      	bne.n	80073c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073c0:	f000 fd16 	bl	8007df0 <xTimerCreateTimerTask>
 80073c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d118      	bne.n	80073fe <vTaskStartScheduler+0x92>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073e4:	4b13      	ldr	r3, [pc, #76]	; (8007434 <vTaskStartScheduler+0xc8>)
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073ec:	4b12      	ldr	r3, [pc, #72]	; (8007438 <vTaskStartScheduler+0xcc>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <vTaskStartScheduler+0xd0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073f8:	f001 f8e2 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073fc:	e010      	b.n	8007420 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d10c      	bne.n	8007420 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	b672      	cpsid	i
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	b662      	cpsie	i
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <vTaskStartScheduler+0xb2>
}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	08008da4 	.word	0x08008da4
 800742c:	08007a79 	.word	0x08007a79
 8007430:	20001320 	.word	0x20001320
 8007434:	2000131c 	.word	0x2000131c
 8007438:	20001308 	.word	0x20001308
 800743c:	20001300 	.word	0x20001300

08007440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <vTaskSuspendAll+0x18>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	4a03      	ldr	r2, [pc, #12]	; (8007458 <vTaskSuspendAll+0x18>)
 800744c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800744e:	bf00      	nop
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	20001324 	.word	0x20001324

0800745c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800746a:	4b43      	ldr	r3, [pc, #268]	; (8007578 <xTaskResumeAll+0x11c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10c      	bne.n	800748c <xTaskResumeAll+0x30>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	b672      	cpsid	i
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	b662      	cpsie	i
 8007486:	603b      	str	r3, [r7, #0]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800748c:	f001 f916 	bl	80086bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007490:	4b39      	ldr	r3, [pc, #228]	; (8007578 <xTaskResumeAll+0x11c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	4a38      	ldr	r2, [pc, #224]	; (8007578 <xTaskResumeAll+0x11c>)
 8007498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800749a:	4b37      	ldr	r3, [pc, #220]	; (8007578 <xTaskResumeAll+0x11c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d162      	bne.n	8007568 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074a2:	4b36      	ldr	r3, [pc, #216]	; (800757c <xTaskResumeAll+0x120>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d05e      	beq.n	8007568 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074aa:	e02f      	b.n	800750c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b34      	ldr	r3, [pc, #208]	; (8007580 <xTaskResumeAll+0x124>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3318      	adds	r3, #24
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff f843 	bl	8006544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff f83e 	bl	8006544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <xTaskResumeAll+0x128>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d903      	bls.n	80074dc <xTaskResumeAll+0x80>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <xTaskResumeAll+0x128>)
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4a27      	ldr	r2, [pc, #156]	; (8007588 <xTaskResumeAll+0x12c>)
 80074ea:	441a      	add	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe ffc9 	bl	800648a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	4b23      	ldr	r3, [pc, #140]	; (800758c <xTaskResumeAll+0x130>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007506:	4b22      	ldr	r3, [pc, #136]	; (8007590 <xTaskResumeAll+0x134>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800750c:	4b1c      	ldr	r3, [pc, #112]	; (8007580 <xTaskResumeAll+0x124>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1cb      	bne.n	80074ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800751a:	f000 fb65 	bl	8007be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800751e:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <xTaskResumeAll+0x138>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d010      	beq.n	800754c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800752a:	f000 f847 	bl	80075bc <xTaskIncrementTick>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007534:	4b16      	ldr	r3, [pc, #88]	; (8007590 <xTaskResumeAll+0x134>)
 8007536:	2201      	movs	r2, #1
 8007538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3b01      	subs	r3, #1
 800753e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f1      	bne.n	800752a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <xTaskResumeAll+0x138>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <xTaskResumeAll+0x134>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d009      	beq.n	8007568 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <xTaskResumeAll+0x13c>)
 800755a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007568:	f001 f8dc 	bl	8008724 <vPortExitCritical>

	return xAlreadyYielded;
 800756c:	68bb      	ldr	r3, [r7, #8]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20001324 	.word	0x20001324
 800757c:	200012fc 	.word	0x200012fc
 8007580:	200012bc 	.word	0x200012bc
 8007584:	20001304 	.word	0x20001304
 8007588:	20000e2c 	.word	0x20000e2c
 800758c:	20000e28 	.word	0x20000e28
 8007590:	20001310 	.word	0x20001310
 8007594:	2000130c 	.word	0x2000130c
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <xTaskGetTickCount+0x1c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075a8:	687b      	ldr	r3, [r7, #4]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20001300 	.word	0x20001300

080075bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c6:	4b50      	ldr	r3, [pc, #320]	; (8007708 <xTaskIncrementTick+0x14c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 808b 	bne.w	80076e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d0:	4b4e      	ldr	r3, [pc, #312]	; (800770c <xTaskIncrementTick+0x150>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075d8:	4a4c      	ldr	r2, [pc, #304]	; (800770c <xTaskIncrementTick+0x150>)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d122      	bne.n	800762a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e4:	4b4a      	ldr	r3, [pc, #296]	; (8007710 <xTaskIncrementTick+0x154>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00c      	beq.n	8007608 <xTaskIncrementTick+0x4c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	b672      	cpsid	i
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	b662      	cpsie	i
 8007602:	603b      	str	r3, [r7, #0]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xTaskIncrementTick+0x4a>
 8007608:	4b41      	ldr	r3, [pc, #260]	; (8007710 <xTaskIncrementTick+0x154>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <xTaskIncrementTick+0x158>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a3f      	ldr	r2, [pc, #252]	; (8007710 <xTaskIncrementTick+0x154>)
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	4a3f      	ldr	r2, [pc, #252]	; (8007714 <xTaskIncrementTick+0x158>)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4b3e      	ldr	r3, [pc, #248]	; (8007718 <xTaskIncrementTick+0x15c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a3d      	ldr	r2, [pc, #244]	; (8007718 <xTaskIncrementTick+0x15c>)
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	f000 fadf 	bl	8007be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800762a:	4b3c      	ldr	r3, [pc, #240]	; (800771c <xTaskIncrementTick+0x160>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	429a      	cmp	r2, r3
 8007632:	d349      	bcc.n	80076c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007634:	4b36      	ldr	r3, [pc, #216]	; (8007710 <xTaskIncrementTick+0x154>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763e:	4b37      	ldr	r3, [pc, #220]	; (800771c <xTaskIncrementTick+0x160>)
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	601a      	str	r2, [r3, #0]
					break;
 8007646:	e03f      	b.n	80076c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007648:	4b31      	ldr	r3, [pc, #196]	; (8007710 <xTaskIncrementTick+0x154>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d203      	bcs.n	8007668 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007660:	4a2e      	ldr	r2, [pc, #184]	; (800771c <xTaskIncrementTick+0x160>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007666:	e02f      	b.n	80076c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe ff69 	bl	8006544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3318      	adds	r3, #24
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe ff60 	bl	8006544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4b25      	ldr	r3, [pc, #148]	; (8007720 <xTaskIncrementTick+0x164>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d903      	bls.n	8007698 <xTaskIncrementTick+0xdc>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	4a22      	ldr	r2, [pc, #136]	; (8007720 <xTaskIncrementTick+0x164>)
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4a1f      	ldr	r2, [pc, #124]	; (8007724 <xTaskIncrementTick+0x168>)
 80076a6:	441a      	add	r2, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fe feeb 	bl	800648a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <xTaskIncrementTick+0x16c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	429a      	cmp	r2, r3
 80076c0:	d3b8      	bcc.n	8007634 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c6:	e7b5      	b.n	8007634 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076c8:	4b17      	ldr	r3, [pc, #92]	; (8007728 <xTaskIncrementTick+0x16c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ce:	4915      	ldr	r1, [pc, #84]	; (8007724 <xTaskIncrementTick+0x168>)
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d907      	bls.n	80076f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e004      	b.n	80076f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <xTaskIncrementTick+0x170>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	4a0f      	ldr	r2, [pc, #60]	; (800772c <xTaskIncrementTick+0x170>)
 80076ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076f0:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <xTaskIncrementTick+0x174>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076fc:	697b      	ldr	r3, [r7, #20]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20001324 	.word	0x20001324
 800770c:	20001300 	.word	0x20001300
 8007710:	200012b4 	.word	0x200012b4
 8007714:	200012b8 	.word	0x200012b8
 8007718:	20001314 	.word	0x20001314
 800771c:	2000131c 	.word	0x2000131c
 8007720:	20001304 	.word	0x20001304
 8007724:	20000e2c 	.word	0x20000e2c
 8007728:	20000e28 	.word	0x20000e28
 800772c:	2000130c 	.word	0x2000130c
 8007730:	20001310 	.word	0x20001310

08007734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800773a:	4b29      	ldr	r3, [pc, #164]	; (80077e0 <vTaskSwitchContext+0xac>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007742:	4b28      	ldr	r3, [pc, #160]	; (80077e4 <vTaskSwitchContext+0xb0>)
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007748:	e043      	b.n	80077d2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800774a:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <vTaskSwitchContext+0xb0>)
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007750:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <vTaskSwitchContext+0xb4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e012      	b.n	800777e <vTaskSwitchContext+0x4a>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10c      	bne.n	8007778 <vTaskSwitchContext+0x44>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vTaskSwitchContext+0x42>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3b01      	subs	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	491b      	ldr	r1, [pc, #108]	; (80077ec <vTaskSwitchContext+0xb8>)
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0e2      	beq.n	8007758 <vTaskSwitchContext+0x24>
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a13      	ldr	r2, [pc, #76]	; (80077ec <vTaskSwitchContext+0xb8>)
 800779e:	4413      	add	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	3308      	adds	r3, #8
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d104      	bne.n	80077c2 <vTaskSwitchContext+0x8e>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vTaskSwitchContext+0xbc>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vTaskSwitchContext+0xb4>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6013      	str	r3, [r2, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20001324 	.word	0x20001324
 80077e4:	20001310 	.word	0x20001310
 80077e8:	20001304 	.word	0x20001304
 80077ec:	20000e2c 	.word	0x20000e2c
 80077f0:	20000e28 	.word	0x20000e28

080077f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800781e:	4b07      	ldr	r3, [pc, #28]	; (800783c <vTaskPlaceOnEventList+0x48>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3318      	adds	r3, #24
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fe fe53 	bl	80064d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800782c:	2101      	movs	r1, #1
 800782e:	6838      	ldr	r0, [r7, #0]
 8007830:	f000 fa8a 	bl	8007d48 <prvAddCurrentTaskToDelayedList>
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000e28 	.word	0x20000e28

08007840 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10c      	bne.n	800786c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	b672      	cpsid	i
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	b662      	cpsie	i
 8007866:	617b      	str	r3, [r7, #20]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vTaskPlaceOnEventListRestricted+0x58>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3318      	adds	r3, #24
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7fe fe08 	bl	800648a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295
 8007884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f000 fa5d 	bl	8007d48 <prvAddCurrentTaskToDelayedList>
	}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000e28 	.word	0x20000e28

0800789c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10c      	bne.n	80078cc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	60fb      	str	r3, [r7, #12]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	3318      	adds	r3, #24
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fe37 	bl	8006544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d6:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <xTaskRemoveFromEventList+0xb4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d11d      	bne.n	800791a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fe2e 	bl	8006544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	4b19      	ldr	r3, [pc, #100]	; (8007954 <xTaskRemoveFromEventList+0xb8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d903      	bls.n	80078fc <xTaskRemoveFromEventList+0x60>
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4a16      	ldr	r2, [pc, #88]	; (8007954 <xTaskRemoveFromEventList+0xb8>)
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4a13      	ldr	r2, [pc, #76]	; (8007958 <xTaskRemoveFromEventList+0xbc>)
 800790a:	441a      	add	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f7fe fdb9 	bl	800648a <vListInsertEnd>
 8007918:	e005      	b.n	8007926 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3318      	adds	r3, #24
 800791e:	4619      	mov	r1, r3
 8007920:	480e      	ldr	r0, [pc, #56]	; (800795c <xTaskRemoveFromEventList+0xc0>)
 8007922:	f7fe fdb2 	bl	800648a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <xTaskRemoveFromEventList+0xc4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d905      	bls.n	8007940 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007938:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <xTaskRemoveFromEventList+0xc8>)
 800793a:	2201      	movs	r2, #1
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e001      	b.n	8007944 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007944:	697b      	ldr	r3, [r7, #20]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20001324 	.word	0x20001324
 8007954:	20001304 	.word	0x20001304
 8007958:	20000e2c 	.word	0x20000e2c
 800795c:	200012bc 	.word	0x200012bc
 8007960:	20000e28 	.word	0x20000e28
 8007964:	20001310 	.word	0x20001310

08007968 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007970:	4b06      	ldr	r3, [pc, #24]	; (800798c <vTaskInternalSetTimeOutState+0x24>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <vTaskInternalSetTimeOutState+0x28>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	605a      	str	r2, [r3, #4]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20001314 	.word	0x20001314
 8007990:	20001300 	.word	0x20001300

08007994 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	613b      	str	r3, [r7, #16]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10c      	bne.n	80079de <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	b672      	cpsid	i
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	b662      	cpsie	i
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80079de:	f000 fe6d 	bl	80086bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <xTaskCheckForTimeOut+0xc4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d102      	bne.n	8007a02 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e023      	b.n	8007a4a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <xTaskCheckForTimeOut+0xc8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d007      	beq.n	8007a1e <xTaskCheckForTimeOut+0x8a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d302      	bcc.n	8007a1e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e015      	b.n	8007a4a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d20b      	bcs.n	8007a40 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff97 	bl	8007968 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	e004      	b.n	8007a4a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a4a:	f000 fe6b 	bl	8008724 <vPortExitCritical>

	return xReturn;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20001300 	.word	0x20001300
 8007a5c:	20001314 	.word	0x20001314

08007a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a64:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <vTaskMissedYield+0x14>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
}
 8007a6a:	bf00      	nop
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20001310 	.word	0x20001310

08007a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a80:	f000 f852 	bl	8007b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <prvIdleTask+0x28>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d9f9      	bls.n	8007a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <prvIdleTask+0x2c>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a9c:	e7f0      	b.n	8007a80 <prvIdleTask+0x8>
 8007a9e:	bf00      	nop
 8007aa0:	20000e2c 	.word	0x20000e2c
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	e00c      	b.n	8007ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <prvInitialiseTaskLists+0x60>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fcb4 	bl	8006430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3301      	adds	r3, #1
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b37      	cmp	r3, #55	; 0x37
 8007ad2:	d9ef      	bls.n	8007ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ad4:	480d      	ldr	r0, [pc, #52]	; (8007b0c <prvInitialiseTaskLists+0x64>)
 8007ad6:	f7fe fcab 	bl	8006430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ada:	480d      	ldr	r0, [pc, #52]	; (8007b10 <prvInitialiseTaskLists+0x68>)
 8007adc:	f7fe fca8 	bl	8006430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ae0:	480c      	ldr	r0, [pc, #48]	; (8007b14 <prvInitialiseTaskLists+0x6c>)
 8007ae2:	f7fe fca5 	bl	8006430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ae6:	480c      	ldr	r0, [pc, #48]	; (8007b18 <prvInitialiseTaskLists+0x70>)
 8007ae8:	f7fe fca2 	bl	8006430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007aec:	480b      	ldr	r0, [pc, #44]	; (8007b1c <prvInitialiseTaskLists+0x74>)
 8007aee:	f7fe fc9f 	bl	8006430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvInitialiseTaskLists+0x78>)
 8007af4:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <prvInitialiseTaskLists+0x64>)
 8007af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvInitialiseTaskLists+0x7c>)
 8007afa:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <prvInitialiseTaskLists+0x68>)
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000e2c 	.word	0x20000e2c
 8007b0c:	2000128c 	.word	0x2000128c
 8007b10:	200012a0 	.word	0x200012a0
 8007b14:	200012bc 	.word	0x200012bc
 8007b18:	200012d0 	.word	0x200012d0
 8007b1c:	200012e8 	.word	0x200012e8
 8007b20:	200012b4 	.word	0x200012b4
 8007b24:	200012b8 	.word	0x200012b8

08007b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b2e:	e019      	b.n	8007b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b30:	f000 fdc4 	bl	80086bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b34:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <prvCheckTasksWaitingTermination+0x50>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fcff 	bl	8006544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <prvCheckTasksWaitingTermination+0x54>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	4a0b      	ldr	r2, [pc, #44]	; (8007b7c <prvCheckTasksWaitingTermination+0x54>)
 8007b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <prvCheckTasksWaitingTermination+0x58>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <prvCheckTasksWaitingTermination+0x58>)
 8007b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b5a:	f000 fde3 	bl	8008724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f810 	bl	8007b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <prvCheckTasksWaitingTermination+0x58>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e1      	bne.n	8007b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200012d0 	.word	0x200012d0
 8007b7c:	200012fc 	.word	0x200012fc
 8007b80:	200012e4 	.word	0x200012e4

08007b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d108      	bne.n	8007ba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 ff84 	bl	8008aa8 <vPortFree>
				vPortFree( pxTCB );
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 ff81 	bl	8008aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ba6:	e01a      	b.n	8007bde <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d103      	bne.n	8007bba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 ff78 	bl	8008aa8 <vPortFree>
	}
 8007bb8:	e011      	b.n	8007bde <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d00c      	beq.n	8007bde <prvDeleteTCB+0x5a>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	b672      	cpsid	i
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	b662      	cpsie	i
 8007bd8:	60fb      	str	r3, [r7, #12]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <prvDeleteTCB+0x58>
	}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <prvResetNextTaskUnblockTime+0x38>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <prvResetNextTaskUnblockTime+0x3c>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c00:	e008      	b.n	8007c14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <prvResetNextTaskUnblockTime+0x38>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <prvResetNextTaskUnblockTime+0x3c>)
 8007c12:	6013      	str	r3, [r2, #0]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	200012b4 	.word	0x200012b4
 8007c24:	2000131c 	.word	0x2000131c

08007c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <xTaskGetSchedulerState+0x34>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c36:	2301      	movs	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	e008      	b.n	8007c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c3c:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <xTaskGetSchedulerState+0x38>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c44:	2302      	movs	r3, #2
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	e001      	b.n	8007c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c4e:	687b      	ldr	r3, [r7, #4]
	}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20001308 	.word	0x20001308
 8007c60:	20001324 	.word	0x20001324

08007c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d05a      	beq.n	8007d30 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c7a:	4b30      	ldr	r3, [pc, #192]	; (8007d3c <xTaskPriorityDisinherit+0xd8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d00c      	beq.n	8007c9e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	b672      	cpsid	i
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	b662      	cpsie	i
 8007c98:	60fb      	str	r3, [r7, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10c      	bne.n	8007cc0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	b672      	cpsid	i
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	b662      	cpsie	i
 8007cba:	60bb      	str	r3, [r7, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d02c      	beq.n	8007d30 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d128      	bne.n	8007d30 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fc2e 	bl	8006544 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <xTaskPriorityDisinherit+0xdc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <xTaskPriorityDisinherit+0xac>
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <xTaskPriorityDisinherit+0xdc>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <xTaskPriorityDisinherit+0xe0>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe fbaf 	bl	800648a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d30:	697b      	ldr	r3, [r7, #20]
	}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000e28 	.word	0x20000e28
 8007d40:	20001304 	.word	0x20001304
 8007d44:	20000e2c 	.word	0x20000e2c

08007d48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d52:	4b21      	ldr	r3, [pc, #132]	; (8007dd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d58:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fbf0 	bl	8006544 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d10a      	bne.n	8007d82 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d72:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4819      	ldr	r0, [pc, #100]	; (8007de0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d7c:	f7fe fb85 	bl	800648a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d80:	e026      	b.n	8007dd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4413      	add	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d8a:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d209      	bcs.n	8007dae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f7fe fb93 	bl	80064d2 <vListInsert>
}
 8007dac:	e010      	b.n	8007dd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dae:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7fe fb89 	bl	80064d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d202      	bcs.n	8007dd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dca:	4a08      	ldr	r2, [pc, #32]	; (8007dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6013      	str	r3, [r2, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20001300 	.word	0x20001300
 8007ddc:	20000e28 	.word	0x20000e28
 8007de0:	200012e8 	.word	0x200012e8
 8007de4:	200012b8 	.word	0x200012b8
 8007de8:	200012b4 	.word	0x200012b4
 8007dec:	2000131c 	.word	0x2000131c

08007df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dfa:	f000 fb15 	bl	8008428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <xTimerCreateTimerTask+0x84>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d021      	beq.n	8007e4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e0e:	1d3a      	adds	r2, r7, #4
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	f107 030c 	add.w	r3, r7, #12
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe faef 	bl	80063fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	9202      	str	r2, [sp, #8]
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	2302      	movs	r3, #2
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	460a      	mov	r2, r1
 8007e30:	4911      	ldr	r1, [pc, #68]	; (8007e78 <xTimerCreateTimerTask+0x88>)
 8007e32:	4812      	ldr	r0, [pc, #72]	; (8007e7c <xTimerCreateTimerTask+0x8c>)
 8007e34:	f7ff f8ba 	bl	8006fac <xTaskCreateStatic>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	4a11      	ldr	r2, [pc, #68]	; (8007e80 <xTimerCreateTimerTask+0x90>)
 8007e3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <xTimerCreateTimerTask+0x90>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e46:	2301      	movs	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10c      	bne.n	8007e6a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	b672      	cpsid	i
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	b662      	cpsie	i
 8007e64:	613b      	str	r3, [r7, #16]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007e6a:	697b      	ldr	r3, [r7, #20]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20001358 	.word	0x20001358
 8007e78:	08008dac 	.word	0x08008dac
 8007e7c:	08007fc1 	.word	0x08007fc1
 8007e80:	2000135c 	.word	0x2000135c

08007e84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	; 0x28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10c      	bne.n	8007eb6 <xTimerGenericCommand+0x32>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	b672      	cpsid	i
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	b662      	cpsie	i
 8007eb0:	623b      	str	r3, [r7, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007eb6:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <xTimerGenericCommand+0x9c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02a      	beq.n	8007f14 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	dc18      	bgt.n	8007f02 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ed0:	f7ff feaa 	bl	8007c28 <xTaskGetSchedulerState>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d109      	bne.n	8007eee <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <xTimerGenericCommand+0x9c>)
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f107 0110 	add.w	r1, r7, #16
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	f7fe fc67 	bl	80067b8 <xQueueGenericSend>
 8007eea:	6278      	str	r0, [r7, #36]	; 0x24
 8007eec:	e012      	b.n	8007f14 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <xTimerGenericCommand+0x9c>)
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f107 0110 	add.w	r1, r7, #16
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7fe fc5d 	bl	80067b8 <xQueueGenericSend>
 8007efe:	6278      	str	r0, [r7, #36]	; 0x24
 8007f00:	e008      	b.n	8007f14 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <xTimerGenericCommand+0x9c>)
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f107 0110 	add.w	r1, r7, #16
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	f7fe fd59 	bl	80069c4 <xQueueGenericSendFromISR>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20001358 	.word	0x20001358

08007f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <prvProcessExpiredTimer+0x98>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fb01 	bl	8006544 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d024      	beq.n	8007f9a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	18d1      	adds	r1, r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	6978      	ldr	r0, [r7, #20]
 8007f5e:	f000 f8d3 	bl	8008108 <prvInsertTimerInActiveList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d021      	beq.n	8007fac <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	2100      	movs	r1, #0
 8007f72:	6978      	ldr	r0, [r7, #20]
 8007f74:	f7ff ff86 	bl	8007e84 <xTimerGenericCommand>
 8007f78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d115      	bne.n	8007fac <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	b672      	cpsid	i
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	b662      	cpsie	i
 8007f94:	60fb      	str	r3, [r7, #12]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	6978      	ldr	r0, [r7, #20]
 8007fb2:	4798      	blx	r3
}
 8007fb4:	bf00      	nop
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20001350 	.word	0x20001350

08007fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fc8:	f107 0308 	add.w	r3, r7, #8
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f857 	bl	8008080 <prvGetNextExpireTime>
 8007fd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f803 	bl	8007fe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fde:	f000 f8d5 	bl	800818c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fe2:	e7f1      	b.n	8007fc8 <prvTimerTask+0x8>

08007fe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fee:	f7ff fa27 	bl	8007440 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f866 	bl	80080c8 <prvSampleTimeNow>
 8007ffc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d130      	bne.n	8008066 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <prvProcessTimerOrBlockTask+0x3c>
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	429a      	cmp	r2, r3
 8008010:	d806      	bhi.n	8008020 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008012:	f7ff fa23 	bl	800745c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff ff83 	bl	8007f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800801e:	e024      	b.n	800806a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008026:	4b13      	ldr	r3, [pc, #76]	; (8008074 <prvProcessTimerOrBlockTask+0x90>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <prvProcessTimerOrBlockTask+0x50>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <prvProcessTimerOrBlockTask+0x52>
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <prvProcessTimerOrBlockTask+0x94>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4619      	mov	r1, r3
 8008046:	f7fe ff7d 	bl	8006f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800804a:	f7ff fa07 	bl	800745c <xTaskResumeAll>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008054:	4b09      	ldr	r3, [pc, #36]	; (800807c <prvProcessTimerOrBlockTask+0x98>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
}
 8008064:	e001      	b.n	800806a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008066:	f7ff f9f9 	bl	800745c <xTaskResumeAll>
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20001354 	.word	0x20001354
 8008078:	20001358 	.word	0x20001358
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008088:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <prvGetNextExpireTime+0x44>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <prvGetNextExpireTime+0x16>
 8008092:	2201      	movs	r2, #1
 8008094:	e000      	b.n	8008098 <prvGetNextExpireTime+0x18>
 8008096:	2200      	movs	r2, #0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <prvGetNextExpireTime+0x44>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e001      	b.n	80080b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20001350 	.word	0x20001350

080080c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080d0:	f7ff fa64 	bl	800759c <xTaskGetTickCount>
 80080d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <prvSampleTimeNow+0x3c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d205      	bcs.n	80080ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080e0:	f000 f93c 	bl	800835c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e002      	b.n	80080f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080f2:	4a04      	ldr	r2, [pc, #16]	; (8008104 <prvSampleTimeNow+0x3c>)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080f8:	68fb      	ldr	r3, [r7, #12]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20001360 	.word	0x20001360

08008108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d812      	bhi.n	8008154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	429a      	cmp	r2, r3
 800813a:	d302      	bcc.n	8008142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e01b      	b.n	800817a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008142:	4b10      	ldr	r3, [pc, #64]	; (8008184 <prvInsertTimerInActiveList+0x7c>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3304      	adds	r3, #4
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7fe f9c0 	bl	80064d2 <vListInsert>
 8008152:	e012      	b.n	800817a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d206      	bcs.n	800816a <prvInsertTimerInActiveList+0x62>
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e007      	b.n	800817a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <prvInsertTimerInActiveList+0x80>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe f9ac 	bl	80064d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800817a:	697b      	ldr	r3, [r7, #20]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20001354 	.word	0x20001354
 8008188:	20001350 	.word	0x20001350

0800818c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08e      	sub	sp, #56	; 0x38
 8008190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008192:	e0d0      	b.n	8008336 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da1a      	bge.n	80081d0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	3304      	adds	r3, #4
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10c      	bne.n	80081c0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	b672      	cpsid	i
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	b662      	cpsie	i
 80081ba:	61fb      	str	r3, [r7, #28]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c6:	6850      	ldr	r0, [r2, #4]
 80081c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ca:	6892      	ldr	r2, [r2, #8]
 80081cc:	4611      	mov	r1, r2
 80081ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f2c0 80af 	blt.w	8008336 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	3304      	adds	r3, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe f9ab 	bl	8006544 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ee:	463b      	mov	r3, r7
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff ff69 	bl	80080c8 <prvSampleTimeNow>
 80081f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	f200 809a 	bhi.w	8008334 <prvProcessReceivedCommands+0x1a8>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <prvProcessReceivedCommands+0x7c>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008231 	.word	0x08008231
 800820c:	08008231 	.word	0x08008231
 8008210:	08008231 	.word	0x08008231
 8008214:	080082a9 	.word	0x080082a9
 8008218:	080082bd 	.word	0x080082bd
 800821c:	0800830b 	.word	0x0800830b
 8008220:	08008231 	.word	0x08008231
 8008224:	08008231 	.word	0x08008231
 8008228:	080082a9 	.word	0x080082a9
 800822c:	080082bd 	.word	0x080082bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	18d1      	adds	r1, r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008250:	f7ff ff5a 	bl	8008108 <prvInsertTimerInActiveList>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d06d      	beq.n	8008336 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008260:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d062      	beq.n	8008336 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	441a      	add	r2, r3
 8008278:	2300      	movs	r3, #0
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	2300      	movs	r3, #0
 800827e:	2100      	movs	r1, #0
 8008280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008282:	f7ff fdff 	bl	8007e84 <xTimerGenericCommand>
 8008286:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d153      	bne.n	8008336 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	61bb      	str	r3, [r7, #24]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082ba:	e03c      	b.n	8008336 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10c      	bne.n	80082f6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	b672      	cpsid	i
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	b662      	cpsie	i
 80082f0:	617b      	str	r3, [r7, #20]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	18d1      	adds	r1, r2, r3
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008304:	f7ff ff00 	bl	8008108 <prvInsertTimerInActiveList>
					break;
 8008308:	e015      	b.n	8008336 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831a:	f000 fbc5 	bl	8008aa8 <vPortFree>
 800831e:	e00a      	b.n	8008336 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008326:	f023 0301 	bic.w	r3, r3, #1
 800832a:	b2da      	uxtb	r2, r3
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008332:	e000      	b.n	8008336 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <prvProcessReceivedCommands+0x1cc>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	1d39      	adds	r1, r7, #4
 800833c:	2200      	movs	r2, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fbe0 	bl	8006b04 <xQueueReceive>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	f47f af24 	bne.w	8008194 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	3730      	adds	r7, #48	; 0x30
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20001358 	.word	0x20001358

0800835c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008362:	e04a      	b.n	80083fa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008364:	4b2e      	ldr	r3, [pc, #184]	; (8008420 <prvSwitchTimerLists+0xc4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836e:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <prvSwitchTimerLists+0xc4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3304      	adds	r3, #4
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe f8e1 	bl	8006544 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008390:	f003 0304 	and.w	r3, r3, #4
 8008394:	2b00      	cmp	r3, #0
 8008396:	d030      	beq.n	80083fa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4413      	add	r3, r2
 80083a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d90e      	bls.n	80083c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <prvSwitchTimerLists+0xc4>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7fe f886 	bl	80064d2 <vListInsert>
 80083c6:	e018      	b.n	80083fa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083c8:	2300      	movs	r3, #0
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	2300      	movs	r3, #0
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fd56 	bl	8007e84 <xTimerGenericCommand>
 80083d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10c      	bne.n	80083fa <prvSwitchTimerLists+0x9e>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	b672      	cpsid	i
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	b662      	cpsie	i
 80083f4:	603b      	str	r3, [r7, #0]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <prvSwitchTimerLists+0xc4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1af      	bne.n	8008364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <prvSwitchTimerLists+0xc4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <prvSwitchTimerLists+0xc8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a04      	ldr	r2, [pc, #16]	; (8008420 <prvSwitchTimerLists+0xc4>)
 8008410:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008412:	4a04      	ldr	r2, [pc, #16]	; (8008424 <prvSwitchTimerLists+0xc8>)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6013      	str	r3, [r2, #0]
}
 8008418:	bf00      	nop
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20001350 	.word	0x20001350
 8008424:	20001354 	.word	0x20001354

08008428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800842e:	f000 f945 	bl	80086bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <prvCheckForValidListAndQueue+0x60>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d120      	bne.n	800847c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800843a:	4814      	ldr	r0, [pc, #80]	; (800848c <prvCheckForValidListAndQueue+0x64>)
 800843c:	f7fd fff8 	bl	8006430 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008440:	4813      	ldr	r0, [pc, #76]	; (8008490 <prvCheckForValidListAndQueue+0x68>)
 8008442:	f7fd fff5 	bl	8006430 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008446:	4b13      	ldr	r3, [pc, #76]	; (8008494 <prvCheckForValidListAndQueue+0x6c>)
 8008448:	4a10      	ldr	r2, [pc, #64]	; (800848c <prvCheckForValidListAndQueue+0x64>)
 800844a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800844c:	4b12      	ldr	r3, [pc, #72]	; (8008498 <prvCheckForValidListAndQueue+0x70>)
 800844e:	4a10      	ldr	r2, [pc, #64]	; (8008490 <prvCheckForValidListAndQueue+0x68>)
 8008450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008452:	2300      	movs	r3, #0
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4b11      	ldr	r3, [pc, #68]	; (800849c <prvCheckForValidListAndQueue+0x74>)
 8008458:	4a11      	ldr	r2, [pc, #68]	; (80084a0 <prvCheckForValidListAndQueue+0x78>)
 800845a:	2110      	movs	r1, #16
 800845c:	200a      	movs	r0, #10
 800845e:	f7fe f905 	bl	800666c <xQueueGenericCreateStatic>
 8008462:	4603      	mov	r3, r0
 8008464:	4a08      	ldr	r2, [pc, #32]	; (8008488 <prvCheckForValidListAndQueue+0x60>)
 8008466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008468:	4b07      	ldr	r3, [pc, #28]	; (8008488 <prvCheckForValidListAndQueue+0x60>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <prvCheckForValidListAndQueue+0x60>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	490b      	ldr	r1, [pc, #44]	; (80084a4 <prvCheckForValidListAndQueue+0x7c>)
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fd3a 	bl	8006ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800847c:	f000 f952 	bl	8008724 <vPortExitCritical>
}
 8008480:	bf00      	nop
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20001358 	.word	0x20001358
 800848c:	20001328 	.word	0x20001328
 8008490:	2000133c 	.word	0x2000133c
 8008494:	20001350 	.word	0x20001350
 8008498:	20001354 	.word	0x20001354
 800849c:	20001404 	.word	0x20001404
 80084a0:	20001364 	.word	0x20001364
 80084a4:	08008db4 	.word	0x08008db4

080084a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3b04      	subs	r3, #4
 80084b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3b04      	subs	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d8:	4a0c      	ldr	r2, [pc, #48]	; (800850c <pxPortInitialiseStack+0x64>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3b14      	subs	r3, #20
 80084e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f06f 0202 	mvn.w	r2, #2
 80084f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3b20      	subs	r3, #32
 80084fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084fe:	68fb      	ldr	r3, [r7, #12]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	08008511 	.word	0x08008511

08008510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <prvTaskExitError+0x5c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d00c      	beq.n	800853e <prvTaskExitError+0x2e>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	b672      	cpsid	i
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	b662      	cpsie	i
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvTaskExitError+0x2c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	60bb      	str	r3, [r7, #8]
}
 8008554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008556:	bf00      	nop
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0fc      	beq.n	8008558 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	2000000c 	.word	0x2000000c

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	20000e28 	.word	0x20000e28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	; (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085c6:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <xPortStartScheduler+0xe4>)
 80085c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	22ff      	movs	r2, #255	; 0xff
 80085d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <xPortStartScheduler+0xe8>)
 80085ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ee:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <xPortStartScheduler+0xec>)
 80085f0:	2207      	movs	r2, #7
 80085f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085f4:	e009      	b.n	800860a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085f6:	4b2d      	ldr	r3, [pc, #180]	; (80086ac <xPortStartScheduler+0xec>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	4a2b      	ldr	r2, [pc, #172]	; (80086ac <xPortStartScheduler+0xec>)
 80085fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b80      	cmp	r3, #128	; 0x80
 8008614:	d0ef      	beq.n	80085f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008616:	4b25      	ldr	r3, [pc, #148]	; (80086ac <xPortStartScheduler+0xec>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1c3 0307 	rsb	r3, r3, #7
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00c      	beq.n	800863c <xPortStartScheduler+0x7c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	b672      	cpsid	i
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	b662      	cpsie	i
 8008636:	60bb      	str	r3, [r7, #8]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <xPortStartScheduler+0xec>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <xPortStartScheduler+0xec>)
 8008644:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008646:	4b19      	ldr	r3, [pc, #100]	; (80086ac <xPortStartScheduler+0xec>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <xPortStartScheduler+0xec>)
 8008650:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <xPortStartScheduler+0xf0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <xPortStartScheduler+0xf0>)
 8008660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008664:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <xPortStartScheduler+0xf0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a11      	ldr	r2, [pc, #68]	; (80086b0 <xPortStartScheduler+0xf0>)
 800866c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008670:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008672:	f000 f8dd 	bl	8008830 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008676:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <xPortStartScheduler+0xf4>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800867c:	f000 f8fc 	bl	8008878 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <xPortStartScheduler+0xf8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <xPortStartScheduler+0xf8>)
 8008686:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800868a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800868c:	f7ff ff84 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008690:	f7ff f850 	bl	8007734 <vTaskSwitchContext>
	prvTaskExitError();
 8008694:	f7ff ff3c 	bl	8008510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	e000e400 	.word	0xe000e400
 80086a8:	20001454 	.word	0x20001454
 80086ac:	20001458 	.word	0x20001458
 80086b0:	e000ed20 	.word	0xe000ed20
 80086b4:	2000000c 	.word	0x2000000c
 80086b8:	e000ef34 	.word	0xe000ef34

080086bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	607b      	str	r3, [r7, #4]
}
 80086d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <vPortEnterCritical+0x60>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3301      	adds	r3, #1
 80086e0:	4a0e      	ldr	r2, [pc, #56]	; (800871c <vPortEnterCritical+0x60>)
 80086e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086e4:	4b0d      	ldr	r3, [pc, #52]	; (800871c <vPortEnterCritical+0x60>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d111      	bne.n	8008710 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <vPortEnterCritical+0x64>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00c      	beq.n	8008710 <vPortEnterCritical+0x54>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	b672      	cpsid	i
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	b662      	cpsie	i
 800870a:	603b      	str	r3, [r7, #0]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <vPortEnterCritical+0x52>
	}
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	2000000c 	.word	0x2000000c
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800872a:	4b13      	ldr	r3, [pc, #76]	; (8008778 <vPortExitCritical+0x54>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10c      	bne.n	800874c <vPortExitCritical+0x28>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	b672      	cpsid	i
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	b662      	cpsie	i
 8008746:	607b      	str	r3, [r7, #4]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <vPortExitCritical+0x54>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3b01      	subs	r3, #1
 8008752:	4a09      	ldr	r2, [pc, #36]	; (8008778 <vPortExitCritical+0x54>)
 8008754:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <vPortExitCritical+0x54>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <vPortExitCritical+0x46>
 800875e:	2300      	movs	r3, #0
 8008760:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f383 8811 	msr	BASEPRI, r3
}
 8008768:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000000c 	.word	0x2000000c
 800877c:	00000000 	.word	0x00000000

08008780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008780:	f3ef 8009 	mrs	r0, PSP
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <pxCurrentTCBConst>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	f01e 0f10 	tst.w	lr, #16
 8008790:	bf08      	it	eq
 8008792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087a4:	b672      	cpsid	i
 80087a6:	f380 8811 	msr	BASEPRI, r0
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	b662      	cpsie	i
 80087b4:	f7fe ffbe 	bl	8007734 <vTaskSwitchContext>
 80087b8:	f04f 0000 	mov.w	r0, #0
 80087bc:	f380 8811 	msr	BASEPRI, r0
 80087c0:	bc09      	pop	{r0, r3}
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	6808      	ldr	r0, [r1, #0]
 80087c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	f01e 0f10 	tst.w	lr, #16
 80087ce:	bf08      	it	eq
 80087d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087d4:	f380 8809 	msr	PSP, r0
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <pxCurrentTCBConst>:
 80087e0:	20000e28 	.word	0x20000e28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	607b      	str	r3, [r7, #4]
}
 8008804:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008806:	f7fe fed9 	bl	80075bc <xTaskIncrementTick>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <SysTick_Handler+0x44>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	2300      	movs	r3, #0
 800881a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f383 8811 	msr	BASEPRI, r3
}
 8008822:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008834:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <vPortSetupTimerInterrupt+0x34>)
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <vPortSetupTimerInterrupt+0x38>)
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <vPortSetupTimerInterrupt+0x3c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <vPortSetupTimerInterrupt+0x40>)
 8008846:	fba2 2303 	umull	r2, r3, r2, r3
 800884a:	099b      	lsrs	r3, r3, #6
 800884c:	4a09      	ldr	r2, [pc, #36]	; (8008874 <vPortSetupTimerInterrupt+0x44>)
 800884e:	3b01      	subs	r3, #1
 8008850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008852:	4b04      	ldr	r3, [pc, #16]	; (8008864 <vPortSetupTimerInterrupt+0x34>)
 8008854:	2207      	movs	r2, #7
 8008856:	601a      	str	r2, [r3, #0]
}
 8008858:	bf00      	nop
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	e000e010 	.word	0xe000e010
 8008868:	e000e018 	.word	0xe000e018
 800886c:	20000000 	.word	0x20000000
 8008870:	10624dd3 	.word	0x10624dd3
 8008874:	e000e014 	.word	0xe000e014

08008878 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008878:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008888 <vPortEnableVFP+0x10>
 800887c:	6801      	ldr	r1, [r0, #0]
 800887e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008882:	6001      	str	r1, [r0, #0]
 8008884:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008886:	bf00      	nop
 8008888:	e000ed88 	.word	0xe000ed88

0800888c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008892:	f3ef 8305 	mrs	r3, IPSR
 8008896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b0f      	cmp	r3, #15
 800889c:	d916      	bls.n	80088cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800889e:	4a19      	ldr	r2, [pc, #100]	; (8008904 <vPortValidateInterruptPriority+0x78>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088a8:	4b17      	ldr	r3, [pc, #92]	; (8008908 <vPortValidateInterruptPriority+0x7c>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	7afa      	ldrb	r2, [r7, #11]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d20c      	bcs.n	80088cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	b672      	cpsid	i
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	b662      	cpsie	i
 80088c6:	607b      	str	r3, [r7, #4]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088cc:	4b0f      	ldr	r3, [pc, #60]	; (800890c <vPortValidateInterruptPriority+0x80>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088d4:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <vPortValidateInterruptPriority+0x84>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d90c      	bls.n	80088f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	b672      	cpsid	i
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	b662      	cpsie	i
 80088f0:	603b      	str	r3, [r7, #0]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vPortValidateInterruptPriority+0x68>
	}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000e3f0 	.word	0xe000e3f0
 8008908:	20001454 	.word	0x20001454
 800890c:	e000ed0c 	.word	0xe000ed0c
 8008910:	20001458 	.word	0x20001458

08008914 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	; 0x28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800891c:	2300      	movs	r3, #0
 800891e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008920:	f7fe fd8e 	bl	8007440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008924:	4b5b      	ldr	r3, [pc, #364]	; (8008a94 <pvPortMalloc+0x180>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800892c:	f000 f91a 	bl	8008b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008930:	4b59      	ldr	r3, [pc, #356]	; (8008a98 <pvPortMalloc+0x184>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	f040 8092 	bne.w	8008a62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01f      	beq.n	8008984 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008944:	2208      	movs	r2, #8
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4413      	add	r3, r2
 800894a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f023 0307 	bic.w	r3, r3, #7
 800895c:	3308      	adds	r3, #8
 800895e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f003 0307 	and.w	r3, r3, #7
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00c      	beq.n	8008984 <pvPortMalloc+0x70>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	b672      	cpsid	i
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	b662      	cpsie	i
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d06b      	beq.n	8008a62 <pvPortMalloc+0x14e>
 800898a:	4b44      	ldr	r3, [pc, #272]	; (8008a9c <pvPortMalloc+0x188>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d866      	bhi.n	8008a62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008994:	4b42      	ldr	r3, [pc, #264]	; (8008aa0 <pvPortMalloc+0x18c>)
 8008996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008998:	4b41      	ldr	r3, [pc, #260]	; (8008aa0 <pvPortMalloc+0x18c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899e:	e004      	b.n	80089aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d903      	bls.n	80089bc <pvPortMalloc+0xa8>
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f1      	bne.n	80089a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089bc:	4b35      	ldr	r3, [pc, #212]	; (8008a94 <pvPortMalloc+0x180>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d04d      	beq.n	8008a62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	4413      	add	r3, r2
 80089ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	2308      	movs	r3, #8
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d921      	bls.n	8008a2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <pvPortMalloc+0x100>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	b672      	cpsid	i
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	b662      	cpsie	i
 8008a0e:	613b      	str	r3, [r7, #16]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a26:	69b8      	ldr	r0, [r7, #24]
 8008a28:	f000 f8fe 	bl	8008c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <pvPortMalloc+0x188>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a19      	ldr	r2, [pc, #100]	; (8008a9c <pvPortMalloc+0x188>)
 8008a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3a:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <pvPortMalloc+0x188>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <pvPortMalloc+0x190>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d203      	bcs.n	8008a4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a46:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <pvPortMalloc+0x188>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a16      	ldr	r2, [pc, #88]	; (8008aa4 <pvPortMalloc+0x190>)
 8008a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <pvPortMalloc+0x184>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a62:	f7fe fcfb 	bl	800745c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00c      	beq.n	8008a8a <pvPortMalloc+0x176>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	b672      	cpsid	i
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	b662      	cpsie	i
 8008a84:	60fb      	str	r3, [r7, #12]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <pvPortMalloc+0x174>
	return pvReturn;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3728      	adds	r7, #40	; 0x28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20005064 	.word	0x20005064
 8008a98:	20005070 	.word	0x20005070
 8008a9c:	20005068 	.word	0x20005068
 8008aa0:	2000505c 	.word	0x2000505c
 8008aa4:	2000506c 	.word	0x2000506c

08008aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d04c      	beq.n	8008b54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aba:	2308      	movs	r3, #8
 8008abc:	425b      	negs	r3, r3
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b23      	ldr	r3, [pc, #140]	; (8008b5c <vPortFree+0xb4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10c      	bne.n	8008af0 <vPortFree+0x48>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	60fb      	str	r3, [r7, #12]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00c      	beq.n	8008b12 <vPortFree+0x6a>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	b672      	cpsid	i
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	b662      	cpsie	i
 8008b0c:	60bb      	str	r3, [r7, #8]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <vPortFree+0xb4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d019      	beq.n	8008b54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d115      	bne.n	8008b54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	; (8008b5c <vPortFree+0xb4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	401a      	ands	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b38:	f7fe fc82 	bl	8007440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <vPortFree+0xb8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4413      	add	r3, r2
 8008b46:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <vPortFree+0xb8>)
 8008b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b4a:	6938      	ldr	r0, [r7, #16]
 8008b4c:	f000 f86c 	bl	8008c28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b50:	f7fe fc84 	bl	800745c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b54:	bf00      	nop
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20005070 	.word	0x20005070
 8008b60:	20005068 	.word	0x20005068

08008b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b70:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <prvHeapInit+0xac>)
 8008b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <prvHeapInit+0xac>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <prvHeapInit+0xb0>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <prvHeapInit+0xb0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <prvHeapInit+0xb4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <prvHeapInit+0xb8>)
 8008bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <prvHeapInit+0xbc>)
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bfc:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <prvHeapInit+0xc0>)
 8008bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	2000145c 	.word	0x2000145c
 8008c14:	2000505c 	.word	0x2000505c
 8008c18:	20005064 	.word	0x20005064
 8008c1c:	2000506c 	.word	0x2000506c
 8008c20:	20005068 	.word	0x20005068
 8008c24:	20005070 	.word	0x20005070

08008c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c30:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e002      	b.n	8008c3c <prvInsertBlockIntoFreeList+0x14>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d8f7      	bhi.n	8008c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d118      	bne.n	8008cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d00d      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e008      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e003      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d002      	beq.n	8008cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000505c 	.word	0x2000505c
 8008cd8:	20005064 	.word	0x20005064

08008cdc <memset>:
 8008cdc:	4402      	add	r2, r0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d100      	bne.n	8008ce6 <memset+0xa>
 8008ce4:	4770      	bx	lr
 8008ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cea:	e7f9      	b.n	8008ce0 <memset+0x4>

08008cec <__libc_init_array>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4d0d      	ldr	r5, [pc, #52]	; (8008d24 <__libc_init_array+0x38>)
 8008cf0:	4c0d      	ldr	r4, [pc, #52]	; (8008d28 <__libc_init_array+0x3c>)
 8008cf2:	1b64      	subs	r4, r4, r5
 8008cf4:	10a4      	asrs	r4, r4, #2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	42a6      	cmp	r6, r4
 8008cfa:	d109      	bne.n	8008d10 <__libc_init_array+0x24>
 8008cfc:	4d0b      	ldr	r5, [pc, #44]	; (8008d2c <__libc_init_array+0x40>)
 8008cfe:	4c0c      	ldr	r4, [pc, #48]	; (8008d30 <__libc_init_array+0x44>)
 8008d00:	f000 f826 	bl	8008d50 <_init>
 8008d04:	1b64      	subs	r4, r4, r5
 8008d06:	10a4      	asrs	r4, r4, #2
 8008d08:	2600      	movs	r6, #0
 8008d0a:	42a6      	cmp	r6, r4
 8008d0c:	d105      	bne.n	8008d1a <__libc_init_array+0x2e>
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d14:	4798      	blx	r3
 8008d16:	3601      	adds	r6, #1
 8008d18:	e7ee      	b.n	8008cf8 <__libc_init_array+0xc>
 8008d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1e:	4798      	blx	r3
 8008d20:	3601      	adds	r6, #1
 8008d22:	e7f2      	b.n	8008d0a <__libc_init_array+0x1e>
 8008d24:	08008e90 	.word	0x08008e90
 8008d28:	08008e90 	.word	0x08008e90
 8008d2c:	08008e90 	.word	0x08008e90
 8008d30:	08008e94 	.word	0x08008e94

08008d34 <memcpy>:
 8008d34:	440a      	add	r2, r1
 8008d36:	4291      	cmp	r1, r2
 8008d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d3c:	d100      	bne.n	8008d40 <memcpy+0xc>
 8008d3e:	4770      	bx	lr
 8008d40:	b510      	push	{r4, lr}
 8008d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	d1f9      	bne.n	8008d42 <memcpy+0xe>
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <_init>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	bf00      	nop
 8008d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d56:	bc08      	pop	{r3}
 8008d58:	469e      	mov	lr, r3
 8008d5a:	4770      	bx	lr

08008d5c <_fini>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr
