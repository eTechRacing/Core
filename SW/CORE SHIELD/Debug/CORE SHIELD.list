
CORE SHIELD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800ed48  0800ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eef4  0800eef4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800eef4  0800eef4  0001eef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eefc  0800eefc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eefc  0800eefc  0001eefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef00  0800ef00  0001ef00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ef04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066d4  20000160  0800f064  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006834  0800f064  00026834  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028119  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058bc  00000000  00000000  000482ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f88  00000000  00000000  0004dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000185a  00000000  00000000  0004fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000776b  00000000  00000000  0005138a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002821d  00000000  00000000  00058af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113fc3  00000000  00000000  00080d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089c4  00000000  00000000  00194cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000160 	.word	0x20000160
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ed30 	.word	0x0800ed30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000164 	.word	0x20000164
 800023c:	0800ed30 	.word	0x0800ed30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fdaf 	bl	8001152 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f8ca 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa28 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 fa08 	bl	8000a10 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f932 	bl	8000868 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000604:	f000 f99e 	bl	8000944 <MX_CAN1_Init>
  MX_UART4_Init();
 8000608:	f000 f9d2 	bl	80009b0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LECTURES_ADC, ADC_BUF_LEN); //ADC with DMA initialization.
 800060c:	2202      	movs	r2, #2
 800060e:	494a      	ldr	r1, [pc, #296]	; (8000738 <main+0x14c>)
 8000610:	484a      	ldr	r0, [pc, #296]	; (800073c <main+0x150>)
 8000612:	f000 ff43 	bl	800149c <HAL_ADC_Start_DMA>
  	  	  	  	  	  	  	  	  	  	  	  	  		//(&hadc1): The function uses the ADC 1
	  	  	  	  										//LECTURES_ADC: It saves all the read data in the buffer
  	  	  	  	  	  	  	  	  	  	  	  	  		//"ADC_BUF_LEN": Number of read channels by the ADC.

  canfil.FilterBank = 0;
 8000616:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <main+0x154>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800061c:	4b48      	ldr	r3, [pc, #288]	; (8000740 <main+0x154>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <main+0x154>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0x0000;						//Si està en 0 acceptem tots els missatges
 8000628:	4b45      	ldr	r3, [pc, #276]	; (8000740 <main+0x154>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;						//Si està en 0 acceptem tots els missatges.
 800062e:	4b44      	ldr	r3, [pc, #272]	; (8000740 <main+0x154>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;
 8000634:	4b42      	ldr	r3, [pc, #264]	; (8000740 <main+0x154>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 800063a:	4b41      	ldr	r3, [pc, #260]	; (8000740 <main+0x154>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <main+0x154>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <main+0x154>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <main+0x154>)
 800064e:	220e      	movs	r2, #14
 8000650:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK)
 8000652:	493b      	ldr	r1, [pc, #236]	; (8000740 <main+0x154>)
 8000654:	483b      	ldr	r0, [pc, #236]	; (8000744 <main+0x158>)
 8000656:	f001 fc11 	bl	8001e7c <HAL_CAN_ConfigFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x78>
  {
  	Error_Handler();
 8000660:	f000 facc 	bl	8000bfc <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000664:	4837      	ldr	r0, [pc, #220]	; (8000744 <main+0x158>)
 8000666:	f001 fcf5 	bl	8002054 <HAL_CAN_Start>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <main+0x88>
  {
  	Error_Handler();
 8000670:	f000 fac4 	bl	8000bfc <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000674:	2103      	movs	r1, #3
 8000676:	4833      	ldr	r0, [pc, #204]	; (8000744 <main+0x158>)
 8000678:	f001 ff12 	bl	80024a0 <HAL_CAN_ActivateNotification>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0x9a>
      {
      	Error_Handler();
 8000682:	f000 fabb 	bl	8000bfc <Error_Handler>
      }

  TxHeader.DLC = 8; 								//Number of bites to be transmitted max- 8
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <main+0x15c>)
 8000688:	2208      	movs	r2, #8
 800068a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;						//
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <main+0x15c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <main+0x15c>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <main+0x15c>)
 800069a:	f240 3221 	movw	r2, #801	; 0x321
 800069e:	601a      	str	r2, [r3, #0]
  TxHeader.StdId = 0x321;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <main+0x15c>)
 80006a2:	f240 3221 	movw	r2, #801	; 0x321
 80006a6:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <main+0x15c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	751a      	strb	r2, [r3, #20]
  TxData[0] = 1;
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <main+0x160>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <main+0x160>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <main+0x160>)
 80006bc:	2203      	movs	r2, #3
 80006be:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <main+0x160>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x160>)
 80006c8:	2205      	movs	r2, #5
 80006ca:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <main+0x160>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0x160>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <main+0x160>)
 80006da:	2208      	movs	r2, #8
 80006dc:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006de:	f00a fb11 	bl	800ad04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <main+0x164>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <main+0x168>)
 80006e8:	f00a fb76 	bl	800add8 <osThreadNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <main+0x16c>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX */
  CAN_TXHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_attributes);
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <main+0x170>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	481a      	ldr	r0, [pc, #104]	; (8000760 <main+0x174>)
 80006f8:	f00a fb6e 	bl	800add8 <osThreadNew>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <main+0x178>)
 8000700:	6013      	str	r3, [r2, #0]

  /* creation of USB_TASK */
  USB_TASKHandle = osThreadNew(usb_data, NULL, &USB_TASK_attributes);
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <main+0x17c>)
 8000704:	2100      	movs	r1, #0
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0x180>)
 8000708:	f00a fb66 	bl	800add8 <osThreadNew>
 800070c:	4603      	mov	r3, r0
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <main+0x184>)
 8000710:	6013      	str	r3, [r2, #0]

  /* creation of MAQUINA_ESTATS */
  MAQUINA_ESTATSHandle = osThreadNew(maquina_estats, NULL, &MAQUINA_ESTATS_attributes);
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <main+0x188>)
 8000714:	2100      	movs	r1, #0
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <main+0x18c>)
 8000718:	f00a fb5e 	bl	800add8 <osThreadNew>
 800071c:	4603      	mov	r3, r0
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <main+0x190>)
 8000720:	6013      	str	r3, [r2, #0]

  /* creation of ADC_READ */
  ADC_READHandle = osThreadNew(LECTURA_ADCs, NULL, &ADC_READ_attributes);
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <main+0x194>)
 8000724:	2100      	movs	r1, #0
 8000726:	4817      	ldr	r0, [pc, #92]	; (8000784 <main+0x198>)
 8000728:	f00a fb56 	bl	800add8 <osThreadNew>
 800072c:	4603      	mov	r3, r0
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <main+0x19c>)
 8000730:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000732:	f00a fb1b 	bl	800ad6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)												//Main while
 8000736:	e7fe      	b.n	8000736 <main+0x14a>
 8000738:	20000358 	.word	0x20000358
 800073c:	2000017c 	.word	0x2000017c
 8000740:	2000032c 	.word	0x2000032c
 8000744:	20000224 	.word	0x20000224
 8000748:	20000304 	.word	0x20000304
 800074c:	2000031c 	.word	0x2000031c
 8000750:	0800edec 	.word	0x0800edec
 8000754:	08000b59 	.word	0x08000b59
 8000758:	200002d4 	.word	0x200002d4
 800075c:	0800ee10 	.word	0x0800ee10
 8000760:	08000b6d 	.word	0x08000b6d
 8000764:	200002d8 	.word	0x200002d8
 8000768:	0800ee34 	.word	0x0800ee34
 800076c:	08000bad 	.word	0x08000bad
 8000770:	200002dc 	.word	0x200002dc
 8000774:	0800ee58 	.word	0x0800ee58
 8000778:	08000bbd 	.word	0x08000bbd
 800077c:	200002e0 	.word	0x200002e0
 8000780:	0800ee7c 	.word	0x0800ee7c
 8000784:	08000bcd 	.word	0x08000bcd
 8000788:	200002e4 	.word	0x200002e4

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00d fef0 	bl	800e580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <SystemClock_Config+0xd4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <SystemClock_Config+0xd4>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xd4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <SystemClock_Config+0xd8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a25      	ldr	r2, [pc, #148]	; (8000864 <SystemClock_Config+0xd8>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xd8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80007f4:	230a      	movs	r3, #10
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007f8:	23d8      	movs	r3, #216	; 0xd8
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000800:	2309      	movs	r3, #9
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4618      	mov	r0, r3
 800080e:	f004 fa4d 	bl	8004cac <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000818:	f000 f9f0 	bl	8000bfc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800081c:	f004 f9f6 	bl	8004c0c <HAL_PWREx_EnableOverDrive>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000826:	f000 f9e9 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2107      	movs	r1, #7
 8000848:	4618      	mov	r0, r3
 800084a:	f004 fcdd 	bl	8005208 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000854:	f000 f9d2 	bl	8000bfc <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <MX_ADC1_Init+0xd0>)
 800087c:	4a2f      	ldr	r2, [pc, #188]	; (800093c <MX_ADC1_Init+0xd4>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000880:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC1_Init+0xd0>)
 8000882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000886:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000888:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC1_Init+0xd0>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_ADC1_Init+0xd0>)
 8000890:	2201      	movs	r2, #1
 8000892:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_ADC1_Init+0xd0>)
 8000896:	2201      	movs	r2, #1
 8000898:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <MX_ADC1_Init+0xd0>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_ADC1_Init+0xd8>)
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c8:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008ca:	f000 fc93 	bl	80011f4 <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d4:	f000 f992 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008dc:	2301      	movs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_ADC1_Init+0xd0>)
 80008ea:	f000 feef 	bl	80016cc <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f4:	f000 f982 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ADC1_Init+0xd0>)
 8000906:	f000 fee1 	bl	80016cc <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000910:	f000 f974 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000914:	2312      	movs	r3, #18
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000918:	2303      	movs	r3, #3
 800091a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_ADC1_Init+0xd0>)
 8000922:	f000 fed3 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800092c:	f000 f966 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000017c 	.word	0x2000017c
 800093c:	40012000 	.word	0x40012000
 8000940:	0f000001 	.word	0x0f000001

08000944 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_CAN1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_CAN1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000950:	220c      	movs	r2, #12
 8000952:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000962:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000966:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_CAN1_Init+0x64>)
 800096a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800096e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_CAN1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_CAN1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_CAN1_Init+0x64>)
 8000996:	f001 f975 	bl	8001c84 <HAL_CAN_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 f92c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000224 	.word	0x20000224
 80009ac:	40006400 	.word	0x40006400

080009b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_UART4_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_UART4_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_UART4_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_UART4_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_UART4_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_UART4_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_UART4_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_UART4_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_UART4_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_UART4_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_UART4_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_UART4_Init+0x58>)
 80009f4:	f005 fd28 	bl	8006448 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f8fd 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000024c 	.word	0x2000024c
 8000a0c:	40004c00 	.word	0x40004c00

08000a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DMA_Init+0x38>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MX_DMA_Init+0x38>)
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x38>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2105      	movs	r1, #5
 8000a32:	2038      	movs	r0, #56	; 0x38
 8000a34:	f002 f838 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a38:	2038      	movs	r0, #56	; 0x38
 8000a3a:	f002 f851 	bl	8002ae0 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_GPIO_Init+0x74>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)		//Completed CAN transmission function
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);								//It changes the LED state
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000ad0:	f002 fdca 	bl	8003668 <HAL_GPIO_TogglePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)			//Received CAN function
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);		//Takes the data from the CAN channel
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000af0:	f001 fbc4 	bl	800227c <HAL_CAN_GetRxMessage>
																		//&hadc1: The function uses the ADC 1
																		//CAN_RX_FIFO0: Where the received data is located, a FIFO, specifically the FIFO 0
																		//&RxHeader: CAN Bus Transmit Header
																		//RxData: The CAN Bus Receive Buffer
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);								//It changes the LED state
 8000af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000afa:	f002 fdb5 	bl	8003668 <HAL_GPIO_TogglePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000324 	.word	0x20000324
 8000b0c:	200002e8 	.word	0x200002e8
 8000b10:	20000224 	.word	0x20000224
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)					//Function called each time the ADC finished the conversions
	  	  {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	  	   																//Vbat channel works between 1.65V and 3.6V
	  	    sprintf(USB_TX, "%d%d\n", LECTURES_ADC[0],LECTURES_ADC[1]); 					//Creates an string from each read value
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b28:	885b      	ldrh	r3, [r3, #2]
 8000b2a:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b2e:	f00d fd07 	bl	800e540 <siprintf>
	  	    CDC_Transmit_FS((uint8_t*)USB_TX, strlen(USB_TX));
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b34:	f7ff fb84 	bl	8000240 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b40:	f00c ff6a 	bl	800da18 <CDC_Transmit_FS>
	  	  }
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000358 	.word	0x20000358
 8000b50:	0800ed84 	.word	0x0800ed84
 8000b54:	2000035c 	.word	0x2000035c

08000b58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b60:	f00c fe9c 	bl	800d89c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f00a f9dd 	bl	800af24 <osDelay>
 8000b6a:	e7fb      	b.n	8000b64 <StartDefaultTask+0xc>

08000b6c <CAN_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Transmit */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <CAN_Transmit+0x30>)
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <CAN_Transmit+0x34>)
 8000b78:	490a      	ldr	r1, [pc, #40]	; (8000ba4 <CAN_Transmit+0x38>)
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <CAN_Transmit+0x3c>)
 8000b7c:	f001 faae 	bl	80020dc <HAL_CAN_AddTxMessage>
	  osDelay(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f00a f9ce 	bl	800af24 <osDelay>
	  TxData[7] = TxData[7] + 1;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <CAN_Transmit+0x34>)
 8000b8a:	79db      	ldrb	r3, [r3, #7]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <CAN_Transmit+0x34>)
 8000b92:	71da      	strb	r2, [r3, #7]
	  osDelay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f00a f9c5 	bl	800af24 <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b9a:	e7eb      	b.n	8000b74 <CAN_Transmit+0x8>
 8000b9c:	20000354 	.word	0x20000354
 8000ba0:	2000031c 	.word	0x2000031c
 8000ba4:	20000304 	.word	0x20000304
 8000ba8:	20000224 	.word	0x20000224

08000bac <usb_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usb_data */
void usb_data(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usb_data */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f00a f9b5 	bl	800af24 <osDelay>
 8000bba:	e7fb      	b.n	8000bb4 <usb_data+0x8>

08000bbc <maquina_estats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_maquina_estats */
void maquina_estats(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN maquina_estats */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f00a f9ad 	bl	800af24 <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <maquina_estats+0x8>

08000bcc <LECTURA_ADCs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LECTURA_ADCs */
void LECTURA_ADCs(void *argument)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LECTURA_ADCs */
  /* Infinite loop */
  for(;;)												//Infinite loop
 8000bd4:	e7fe      	b.n	8000bd4 <LECTURA_ADCs+0x8>
	...

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 fabf 	bl	800116c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f001 ff2f 	bl	8002aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <HAL_ADC_MspInit+0xe4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d15b      	bne.n	8000d32 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_ADC_MspInit+0xe8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000caa:	2303      	movs	r3, #3
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4821      	ldr	r0, [pc, #132]	; (8000d44 <HAL_ADC_MspInit+0xec>)
 8000cbe:	f002 fb27 	bl	8003310 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_ADC_MspInit+0xf4>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d06:	4810      	ldr	r0, [pc, #64]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000d08:	f001 fef8 	bl	8002afc <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000d12:	f7ff ff73 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_ADC_MspInit+0xf0>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2105      	movs	r1, #5
 8000d26:	2012      	movs	r0, #18
 8000d28:	f001 febe 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d2c:	2012      	movs	r0, #18
 8000d2e:	f001 fed7 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	200001c4 	.word	0x200001c4
 8000d4c:	40026410 	.word	0x40026410

08000d50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_CAN_MspInit+0x9c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d138      	bne.n	8000de4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_CAN_MspInit+0xa0>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000db4:	2309      	movs	r3, #9
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <HAL_CAN_MspInit+0xa4>)
 8000dc0:	f002 faa6 	bl	8003310 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2105      	movs	r1, #5
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 fe6d 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dce:	2014      	movs	r0, #20
 8000dd0:	f001 fe86 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	2015      	movs	r0, #21
 8000dda:	f001 fe65 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dde:	2015      	movs	r0, #21
 8000de0:	f001 fe7e 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40006400 	.word	0x40006400
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ae      	sub	sp, #184	; 0xb8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2290      	movs	r2, #144	; 0x90
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00d fbb1 	bl	800e580 <memset>
  if(huart->Instance==UART4)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <HAL_UART_MspInit+0xc0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d143      	bne.n	8000eb0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fbfe 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff fedb 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e9c:	f002 fa38 	bl	8003310 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2105      	movs	r1, #5
 8000ea4:	2034      	movs	r0, #52	; 0x34
 8000ea6:	f001 fdff 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eaa:	2034      	movs	r0, #52	; 0x34
 8000eac:	f001 fe18 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37b8      	adds	r7, #184	; 0xb8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004c00 	.word	0x40004c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f003 0310 	and.w	r3, r3, #16
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eec:	f107 0210 	add.w	r2, r7, #16
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fb6c 	bl	80055d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f06:	f004 fb3d 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8000f0a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f0c:	e004      	b.n	8000f18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f0e:	f004 fb39 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8000f12:	4603      	mov	r3, r0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	3b01      	subs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_InitTick+0xe8>)
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_InitTick+0xe8>)
 8000f2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <HAL_InitTick+0xe8>)
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_InitTick+0xe8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_InitTick+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_InitTick+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_InitTick+0xe8>)
 8000f4e:	f004 ff9b 	bl	8005e88 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11b      	bne.n	8000f98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <HAL_InitTick+0xe8>)
 8000f62:	f004 fff3 	bl	8005f4c <HAL_TIM_Base_Start_IT>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d111      	bne.n	8000f98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f74:	2036      	movs	r0, #54	; 0x36
 8000f76:	f001 fdb3 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d808      	bhi.n	8000f92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f001 fd8f 	bl	8002aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e002      	b.n	8000f98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3738      	adds	r7, #56	; 0x38
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	20000368 	.word	0x20000368
 8000fb0:	40001000 	.word	0x40001000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <ADC_IRQHandler+0x10>)
 8000fea:	f000 f947 	bl	800127c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000017c 	.word	0x2000017c

08000ff8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <CAN1_RX0_IRQHandler+0x10>)
 8000ffe:	f001 fa75 	bl	80024ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000224 	.word	0x20000224

0800100c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <CAN1_RX1_IRQHandler+0x10>)
 8001012:	f001 fa6b 	bl	80024ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000224 	.word	0x20000224

08001020 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <UART4_IRQHandler+0x10>)
 8001026:	f005 fa5d 	bl	80064e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000024c 	.word	0x2000024c

08001034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM6_DAC_IRQHandler+0x10>)
 800103a:	f004 ffff 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000368 	.word	0x20000368

08001048 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <DMA2_Stream0_IRQHandler+0x10>)
 800104e:	f001 fef5 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001c4 	.word	0x200001c4

0800105c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <OTG_FS_IRQHandler+0x10>)
 8001062:	f002 fc61 	bl	8003928 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200061e4 	.word	0x200061e4

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f00d fa86 	bl	800e5b0 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20080000 	.word	0x20080000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	200003b4 	.word	0x200003b4
 80010d8:	20006838 	.word	0x20006838

080010dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001106:	490e      	ldr	r1, [pc, #56]	; (8001140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800111c:	4c0b      	ldr	r4, [pc, #44]	; (800114c <LoopFillZerobss+0x26>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112a:	f7ff ffd7 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112e:	f00d fa45 	bl	800e5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fa5b 	bl	80005ec <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001144:	0800ef04 	.word	0x0800ef04
  ldr r2, =_sbss
 8001148:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800114c:	20006834 	.word	0x20006834

08001150 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <CAN1_SCE_IRQHandler>

08001152 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	2003      	movs	r0, #3
 8001158:	f001 fc9b 	bl	8002a92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115c:	200f      	movs	r0, #15
 800115e:	f7ff feb1 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff fd51 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200003b8 	.word	0x200003b8

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200003b8 	.word	0x200003b8

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e031      	b.n	800126e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fd20 	bl	8000c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d116      	bne.n	8001260 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_ADC_Init+0x84>)
 8001238:	4013      	ands	r3, r2
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fb98 	bl	8001978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
 800125e:	e001      	b.n	8001264 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	ffffeefd 	.word	0xffffeefd

0800127c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d049      	beq.n	8001346 <HAL_ADC_IRQHandler+0xca>
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d046      	beq.n	8001346 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d12b      	bne.n	8001336 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d127      	bne.n	8001336 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d119      	bne.n	8001336 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fbee 	bl	8000b18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f06f 0212 	mvn.w	r2, #18
 8001344:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001354:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d057      	beq.n	800140c <HAL_ADC_IRQHandler+0x190>
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d054      	beq.n	800140c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d139      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d12b      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d124      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11d      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d119      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fc37 	bl	8001c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f06f 020c 	mvn.w	r2, #12
 800140a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d017      	beq.n	8001452 <HAL_ADC_IRQHandler+0x1d6>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d014      	beq.n	8001452 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10d      	bne.n	8001452 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f92e 	bl	80016a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0201 	mvn.w	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001460:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d015      	beq.n	8001494 <HAL_ADC_IRQHandler+0x218>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f043 0202 	orr.w	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0220 	mvn.w	r2, #32
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f917 	bl	80016b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f06f 0220 	mvn.w	r2, #32
 8001492:	601a      	str	r2, [r3, #0]
  }
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Start_DMA+0x1e>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e0d4      	b.n	8001664 <HAL_ADC_Start_DMA+0x1c8>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d018      	beq.n	8001502 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_ADC_Start_DMA+0x1d0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a62      	ldr	r2, [pc, #392]	; (8001670 <HAL_ADC_Start_DMA+0x1d4>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9a      	lsrs	r2, r3, #18
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	f040 809c 	bne.w	800164a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001516:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_ADC_Start_DMA+0x1d8>)
 8001518:	4013      	ands	r3, r2
 800151a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001538:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154c:	d106      	bne.n	800155c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f023 0206 	bic.w	r2, r3, #6
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
 800155a:	e002      	b.n	8001562 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	4a42      	ldr	r2, [pc, #264]	; (8001678 <HAL_ADC_Start_DMA+0x1dc>)
 8001570:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	4a41      	ldr	r2, [pc, #260]	; (800167c <HAL_ADC_Start_DMA+0x1e0>)
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_ADC_Start_DMA+0x1e4>)
 8001580:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800158a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800159a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	334c      	adds	r3, #76	; 0x4c
 80015b6:	4619      	mov	r1, r3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f001 fb4c 	bl	8002c58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_ADC_Start_DMA+0x1e8>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d143      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	e03a      	b.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_ADC_Start_DMA+0x1ec>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10e      	bne.n	8001614 <HAL_ADC_Start_DMA+0x178>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001612:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_ADC_Start_DMA+0x1e8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	d120      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_ADC_Start_DMA+0x1f0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d11b      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d114      	bne.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00b      	b.n	8001662 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000
 8001670:	431bde83 	.word	0x431bde83
 8001674:	fffff8fe 	.word	0xfffff8fe
 8001678:	08001b6d 	.word	0x08001b6d
 800167c:	08001c27 	.word	0x08001c27
 8001680:	08001c43 	.word	0x08001c43
 8001684:	40012300 	.word	0x40012300
 8001688:	40012000 	.word	0x40012000
 800168c:	40012200 	.word	0x40012200

08001690 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e136      	b.n	8001956 <HAL_ADC_ConfigChannel+0x28a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d93a      	bls.n	800176e <HAL_ADC_ConfigChannel+0xa2>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001700:	d035      	beq.n	800176e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68d9      	ldr	r1, [r3, #12]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	3b1e      	subs	r3, #30
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a8d      	ldr	r2, [pc, #564]	; (8001964 <HAL_ADC_ConfigChannel+0x298>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10a      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d9      	ldr	r1, [r3, #12]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	061a      	lsls	r2, r3, #24
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001746:	e035      	b.n	80017b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68d9      	ldr	r1, [r3, #12]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	4603      	mov	r3, r0
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4403      	add	r3, r0
 8001760:	3b1e      	subs	r3, #30
 8001762:	409a      	lsls	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176c:	e022      	b.n	80017b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43da      	mvns	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	400a      	ands	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6919      	ldr	r1, [r3, #16]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4403      	add	r3, r0
 80017aa:	409a      	lsls	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d824      	bhi.n	8001806 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	221f      	movs	r2, #31
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43da      	mvns	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b05      	subs	r3, #5
 80017f8:	fa00 f203 	lsl.w	r2, r0, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e04c      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d824      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	; 0x23
 8001820:	221f      	movs	r2, #31
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	400a      	ands	r2, r1
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b23      	subs	r3, #35	; 0x23
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
 8001856:	e023      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b41      	subs	r3, #65	; 0x41
 800186a:	221f      	movs	r2, #31
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43da      	mvns	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	400a      	ands	r2, r1
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b41      	subs	r3, #65	; 0x41
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_ADC_ConfigChannel+0x29c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10a      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1f4>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_ADC_ConfigChannel+0x29c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10f      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d10b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_ADC_ConfigChannel+0x29c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d12b      	bne.n	800194c <HAL_ADC_ConfigChannel+0x280>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_ADC_ConfigChannel+0x298>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d003      	beq.n	8001906 <HAL_ADC_ConfigChannel+0x23a>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b11      	cmp	r3, #17
 8001904:	d122      	bne.n	800194c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 800190c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001910:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_ADC_ConfigChannel+0x2a0>)
 8001918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_ADC_ConfigChannel+0x298>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_ADC_ConfigChannel+0x2a4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_ADC_ConfigChannel+0x2a8>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9a      	lsrs	r2, r3, #18
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800193e:	e002      	b.n	8001946 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3b01      	subs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	10000012 	.word	0x10000012
 8001968:	40012000 	.word	0x40012000
 800196c:	40012300 	.word	0x40012300
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <ADC_Init+0x1ec>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <ADC_Init+0x1ec>)
 8001986:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800198a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800198c:	4b75      	ldr	r3, [pc, #468]	; (8001b64 <ADC_Init+0x1ec>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4973      	ldr	r1, [pc, #460]	; (8001b64 <ADC_Init+0x1ec>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	021a      	lsls	r2, r3, #8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <ADC_Init+0x1f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d022      	beq.n	8001a52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6899      	ldr	r1, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	e00f      	b.n	8001a72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0202 	bic.w	r2, r2, #2
 8001a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6899      	ldr	r1, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	005a      	lsls	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d01b      	beq.n	8001ad8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	3b01      	subs	r3, #1
 8001acc:	035a      	lsls	r2, r3, #13
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e007      	b.n	8001ae8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	051a      	lsls	r2, r3, #20
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2a:	025a      	lsls	r2, r3, #9
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6899      	ldr	r1, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	029a      	lsls	r2, r3, #10
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40012300 	.word	0x40012300
 8001b68:	0f000001 	.word	0x0f000001

08001b6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d13c      	bne.n	8001c00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12b      	bne.n	8001bf8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d127      	bne.n	8001bf8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d119      	bne.n	8001bf8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0220 	bic.w	r2, r2, #32
 8001bd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7fe ff8d 	bl	8000b18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bfe:	e00e      	b.n	8001c1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fd53 	bl	80016b8 <HAL_ADC_ErrorCallback>
}
 8001c12:	e004      	b.n	8001c1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fd2b 	bl	8001690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f043 0204 	orr.w	r2, r3, #4
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff fd28 	bl	80016b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0ed      	b.n	8001e72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff f854 	bl	8000d50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff fa6c 	bl	8001194 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cbe:	e012      	b.n	8001ce6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc0:	f7ff fa68 	bl	8001194 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	d90b      	bls.n	8001ce6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0c5      	b.n	8001e72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0e5      	beq.n	8001cc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0202 	bic.w	r2, r2, #2
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff fa46 	bl	8001194 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d0a:	e012      	b.n	8001d32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff fa42 	bl	8001194 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90b      	bls.n	8001d32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e09f      	b.n	8001e72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e5      	bne.n	8001d0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e5b      	ldrb	r3, [r3, #25]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e9b      	ldrb	r3, [r3, #26]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0220 	orr.w	r2, r2, #32
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0220 	bic.w	r2, r2, #32
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7edb      	ldrb	r3, [r3, #27]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0210 	bic.w	r2, r2, #16
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0210 	orr.w	r2, r2, #16
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7f1b      	ldrb	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0208 	orr.w	r2, r2, #8
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0208 	bic.w	r2, r2, #8
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7f5b      	ldrb	r3, [r3, #29]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0204 	orr.w	r2, r2, #4
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d003      	beq.n	8001ea2 <HAL_CAN_ConfigFilter+0x26>
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	f040 80c7 	bne.w	8002030 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a69      	ldr	r2, [pc, #420]	; (800204c <HAL_CAN_ConfigFilter+0x1d0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d001      	beq.n	8001eb0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_CAN_ConfigFilter+0x1d4>)
 8001eae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_CAN_ConfigFilter+0x1d4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ece:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d123      	bne.n	8001f5e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3248      	adds	r2, #72	; 0x48
 8001f3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f54:	6979      	ldr	r1, [r7, #20]
 8001f56:	3348      	adds	r3, #72	; 0x48
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d122      	bne.n	8001fac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3248      	adds	r2, #72	; 0x48
 8001f8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	3348      	adds	r3, #72	; 0x48
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fc6:	e007      	b.n	8001fd8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e006      	b.n	800203e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40003400 	.word	0x40003400
 8002050:	40006400 	.word	0x40006400

08002054 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d12e      	bne.n	80020c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff f888 	bl	8001194 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002086:	e012      	b.n	80020ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002088:	f7ff f884 	bl	8001194 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e012      	b.n	80020d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e5      	bne.n	8002088 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e006      	b.n	80020d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d003      	beq.n	8002108 <HAL_CAN_AddTxMessage+0x2c>
 8002100:	7ffb      	ldrb	r3, [r7, #31]
 8002102:	2b02      	cmp	r3, #2
 8002104:	f040 80ad 	bne.w	8002262 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8095 	beq.w	8002252 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	0e1b      	lsrs	r3, r3, #24
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002132:	2201      	movs	r2, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	6809      	ldr	r1, [r1, #0]
 8002152:	431a      	orrs	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3318      	adds	r3, #24
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	440b      	add	r3, r1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e00f      	b.n	8002180 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800216a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002174:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3318      	adds	r3, #24
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	440b      	add	r3, r1
 800217e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3318      	adds	r3, #24
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	440b      	add	r3, r1
 8002190:	3304      	adds	r3, #4
 8002192:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	7d1b      	ldrb	r3, [r3, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d111      	bne.n	80021c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3318      	adds	r3, #24
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	6811      	ldr	r1, [r2, #0]
 80021b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3318      	adds	r3, #24
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	440b      	add	r3, r1
 80021bc:	3304      	adds	r3, #4
 80021be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3307      	adds	r3, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	061a      	lsls	r2, r3, #24
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3306      	adds	r3, #6
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3305      	adds	r3, #5
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	4313      	orrs	r3, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	3204      	adds	r2, #4
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	4610      	mov	r0, r2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6811      	ldr	r1, [r2, #0]
 80021e8:	ea43 0200 	orr.w	r2, r3, r0
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3303      	adds	r3, #3
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	061a      	lsls	r2, r3, #24
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3302      	adds	r3, #2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3301      	adds	r3, #1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	4313      	orrs	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	4610      	mov	r0, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	ea43 0200 	orr.w	r2, r3, r0
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800222c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3318      	adds	r3, #24
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	6811      	ldr	r1, [r2, #0]
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3318      	adds	r3, #24
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	440b      	add	r3, r1
 800224c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e00e      	b.n	8002270 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e006      	b.n	8002270 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	3724      	adds	r7, #36	; 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d003      	beq.n	80022a0 <HAL_CAN_GetRxMessage+0x24>
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 80f3 	bne.w	8002486 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0e7      	b.n	8002494 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0d8      	b.n	8002494 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	331b      	adds	r3, #27
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0204 	and.w	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	331b      	adds	r3, #27
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e00b      	b.n	8002332 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	331b      	adds	r3, #27
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	331b      	adds	r3, #27
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0202 	and.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	331b      	adds	r3, #27
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	331b      	adds	r3, #27
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b2da      	uxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	331b      	adds	r3, #27
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0a1a      	lsrs	r2, r3, #8
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0c1a      	lsrs	r2, r3, #16
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3302      	adds	r3, #2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0e1a      	lsrs	r2, r3, #24
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3303      	adds	r3, #3
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3304      	adds	r3, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	4413      	add	r3, r2
 8002416:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0a1a      	lsrs	r2, r3, #8
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3305      	adds	r3, #5
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0c1a      	lsrs	r2, r3, #16
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3306      	adds	r3, #6
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e1a      	lsrs	r2, r3, #24
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3307      	adds	r3, #7
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	e007      	b.n	8002482 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e006      	b.n	8002494 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <HAL_CAN_ActivateNotification+0x1e>
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d109      	bne.n	80024d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6959      	ldr	r1, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e006      	b.n	80024e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d07c      	beq.n	800262c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d023      	beq.n	8002584 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fab8 	bl	8000ac4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002554:	e016      	b.n	8002584 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e00c      	b.n	8002584 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e002      	b.n	8002584 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f97f 	bl	8002882 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d024      	beq.n	80025d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002596:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f959 	bl	800285a <HAL_CAN_TxMailbox1CompleteCallback>
 80025a8:	e016      	b.n	80025d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e00c      	b.n	80025d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
 80025d0:	e002      	b.n	80025d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f95f 	bl	8002896 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d024      	beq.n	800262c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f939 	bl	800286e <HAL_CAN_TxMailbox2CompleteCallback>
 80025fc:	e016      	b.n	800262c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e00c      	b.n	800262c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e002      	b.n	800262c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f93f 	bl	80028aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2210      	movs	r2, #16
 800264e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f926 	bl	80028be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fa28 	bl	8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2210      	movs	r2, #16
 80026b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2208      	movs	r2, #8
 80026ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f908 	bl	80028e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8ef 	bl	80028d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8f2 	bl	80028fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2208      	movs	r2, #8
 8002730:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8eb 	bl	800290e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d07b      	beq.n	800283a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d072      	beq.n	8002832 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d043      	beq.n	8002832 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03e      	beq.n	8002832 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ba:	2b60      	cmp	r3, #96	; 0x60
 80027bc:	d02b      	beq.n	8002816 <HAL_CAN_IRQHandler+0x32a>
 80027be:	2b60      	cmp	r3, #96	; 0x60
 80027c0:	d82e      	bhi.n	8002820 <HAL_CAN_IRQHandler+0x334>
 80027c2:	2b50      	cmp	r3, #80	; 0x50
 80027c4:	d022      	beq.n	800280c <HAL_CAN_IRQHandler+0x320>
 80027c6:	2b50      	cmp	r3, #80	; 0x50
 80027c8:	d82a      	bhi.n	8002820 <HAL_CAN_IRQHandler+0x334>
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d019      	beq.n	8002802 <HAL_CAN_IRQHandler+0x316>
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d826      	bhi.n	8002820 <HAL_CAN_IRQHandler+0x334>
 80027d2:	2b30      	cmp	r3, #48	; 0x30
 80027d4:	d010      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x30c>
 80027d6:	2b30      	cmp	r3, #48	; 0x30
 80027d8:	d822      	bhi.n	8002820 <HAL_CAN_IRQHandler+0x334>
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d002      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x2f8>
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d005      	beq.n	80027ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027e2:	e01d      	b.n	8002820 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f043 0308 	orr.w	r3, r3, #8
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ec:	e019      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f6:	e014      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002800:	e00f      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800280a:	e00a      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002814:	e005      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800281e:	e000      	b.n	8002822 <HAL_CAN_IRQHandler+0x336>
            break;
 8002820:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002830:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f868 	bl	8002922 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <__NVIC_SetPriorityGrouping+0x40>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	4313      	orrs	r3, r2
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x40>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00
 800297c:	05fa0000 	.word	0x05fa0000

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ff4c 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aba:	f7ff ff61 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002abe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7ff ffb1 	bl	8002a2c <NVIC_EncodePriority>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff80 	bl	80029d8 <__NVIC_SetPriority>
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff54 	bl	800299c <__NVIC_EnableIRQ>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7fe fb44 	bl	8001194 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e099      	b.n	8002c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b38:	e00f      	b.n	8002b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3a:	f7fe fb2b 	bl	8001194 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d908      	bls.n	8002b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e078      	b.n	8002c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e8      	bne.n	8002b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_DMA_Init+0x158>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d107      	bne.n	8002bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d117      	bne.n	8002c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fb09 	bl	8003218 <DMA_CheckFifoParam>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e016      	b.n	8002c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fac0 	bl	80031ac <DMA_CalcBaseAndBitshift>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	223f      	movs	r2, #63	; 0x3f
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	e010803f 	.word	0xe010803f

08002c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Start_IT+0x26>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e048      	b.n	8002d10 <HAL_DMA_Start_IT+0xb8>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d137      	bne.n	8002d02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa52 	bl	8003150 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	223f      	movs	r2, #63	; 0x3f
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0216 	orr.w	r2, r2, #22
 8002cc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e005      	b.n	8002d0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d26:	f7fe fa35 	bl	8001194 <HAL_GetTick>
 8002d2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d008      	beq.n	8002d4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e052      	b.n	8002df0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0216 	bic.w	r2, r2, #22
 8002d58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_DMA_Abort+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0208 	bic.w	r2, r2, #8
 8002d88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9a:	e013      	b.n	8002dc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9c:	f7fe f9fa 	bl	8001194 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d90c      	bls.n	8002dc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e015      	b.n	8002df0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e4      	bne.n	8002d9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	223f      	movs	r2, #63	; 0x3f
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d004      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00c      	b.n	8002e30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2205      	movs	r2, #5
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e48:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_DMA_IRQHandler+0x248>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a8e      	ldr	r2, [pc, #568]	; (8003088 <HAL_DMA_IRQHandler+0x24c>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2208      	movs	r2, #8
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	2208      	movs	r2, #8
 8002e96:	409a      	lsls	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	2201      	movs	r2, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2204      	movs	r2, #4
 8002f02:	409a      	lsls	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2210      	movs	r2, #16
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d043      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d03c      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2210      	movs	r2, #16
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d108      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
 8002f6a:	e01f      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
 8002f7c:	e016      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0208 	bic.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 808f 	beq.w	80030dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8087 	beq.w	80030dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d136      	bne.n	8003054 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003004:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_IRQHandler+0x1da>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	223f      	movs	r2, #63	; 0x3f
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d07e      	beq.n	8003148 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
        }
        return;
 8003052:	e079      	b.n	8003148 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01d      	beq.n	800309e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	2b00      	cmp	r3, #0
 8003076:	d031      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e02c      	b.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000
 8003088:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e01e      	b.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10f      	bne.n	80030cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d032      	beq.n	800314a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2205      	movs	r2, #5
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3301      	adds	r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	429a      	cmp	r2, r3
 8003112:	d307      	bcc.n	8003124 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f2      	bne.n	8003108 <HAL_DMA_IRQHandler+0x2cc>
 8003122:	e000      	b.n	8003126 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003124:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e000      	b.n	800314a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003148:	bf00      	nop
    }
  }
}
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d108      	bne.n	8003190 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800318e:	e007      	b.n	80031a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	3b10      	subs	r3, #16
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <DMA_CalcBaseAndBitshift+0x60>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <DMA_CalcBaseAndBitshift+0x64>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d908      	bls.n	80031ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <DMA_CalcBaseAndBitshift+0x68>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	659a      	str	r2, [r3, #88]	; 0x58
 80031ea:	e006      	b.n	80031fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <DMA_CalcBaseAndBitshift+0x68>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	aaaaaaab 	.word	0xaaaaaaab
 8003210:	0800eeb8 	.word	0x0800eeb8
 8003214:	fffffc00 	.word	0xfffffc00

08003218 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d11f      	bne.n	8003272 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d856      	bhi.n	80032e6 <DMA_CheckFifoParam+0xce>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <DMA_CheckFifoParam+0x28>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003251 	.word	0x08003251
 8003244:	08003263 	.word	0x08003263
 8003248:	08003251 	.word	0x08003251
 800324c:	080032e7 	.word	0x080032e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d046      	beq.n	80032ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e043      	b.n	80032ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800326a:	d140      	bne.n	80032ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e03d      	b.n	80032ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327a:	d121      	bne.n	80032c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d837      	bhi.n	80032f2 <DMA_CheckFifoParam+0xda>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <DMA_CheckFifoParam+0x70>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003299 	.word	0x08003299
 800328c:	0800329f 	.word	0x0800329f
 8003290:	08003299 	.word	0x08003299
 8003294:	080032b1 	.word	0x080032b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e030      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d025      	beq.n	80032f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ae:	e022      	b.n	80032f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b8:	d11f      	bne.n	80032fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032be:	e01c      	b.n	80032fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d903      	bls.n	80032ce <DMA_CheckFifoParam+0xb6>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d003      	beq.n	80032d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032cc:	e018      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      break;
 80032d2:	e015      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e00b      	b.n	80032fe <DMA_CheckFifoParam+0xe6>
      break;
 80032e6:	bf00      	nop
 80032e8:	e00a      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e008      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e006      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e004      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;   
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e175      	b.n	800361c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 8164 	bne.w	8003616 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_GPIO_Init+0x56>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d130      	bne.n	80033c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 0201 	and.w	r2, r3, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d017      	beq.n	8003404 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d123      	bne.n	8003458 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80be 	beq.w	8003616 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_GPIO_Init+0x324>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a65      	ldr	r2, [pc, #404]	; (8003634 <HAL_GPIO_Init+0x324>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_GPIO_Init+0x324>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034b2:	4a61      	ldr	r2, [pc, #388]	; (8003638 <HAL_GPIO_Init+0x328>)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3302      	adds	r3, #2
 80034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a58      	ldr	r2, [pc, #352]	; (800363c <HAL_GPIO_Init+0x32c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d037      	beq.n	800354e <HAL_GPIO_Init+0x23e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_GPIO_Init+0x330>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d031      	beq.n	800354a <HAL_GPIO_Init+0x23a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a56      	ldr	r2, [pc, #344]	; (8003644 <HAL_GPIO_Init+0x334>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <HAL_GPIO_Init+0x236>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a55      	ldr	r2, [pc, #340]	; (8003648 <HAL_GPIO_Init+0x338>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d025      	beq.n	8003542 <HAL_GPIO_Init+0x232>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a54      	ldr	r2, [pc, #336]	; (800364c <HAL_GPIO_Init+0x33c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01f      	beq.n	800353e <HAL_GPIO_Init+0x22e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a53      	ldr	r2, [pc, #332]	; (8003650 <HAL_GPIO_Init+0x340>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d019      	beq.n	800353a <HAL_GPIO_Init+0x22a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a52      	ldr	r2, [pc, #328]	; (8003654 <HAL_GPIO_Init+0x344>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0x226>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a51      	ldr	r2, [pc, #324]	; (8003658 <HAL_GPIO_Init+0x348>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00d      	beq.n	8003532 <HAL_GPIO_Init+0x222>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a50      	ldr	r2, [pc, #320]	; (800365c <HAL_GPIO_Init+0x34c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <HAL_GPIO_Init+0x21e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_GPIO_Init+0x350>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_GPIO_Init+0x21a>
 8003526:	2309      	movs	r3, #9
 8003528:	e012      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800352a:	230a      	movs	r3, #10
 800352c:	e010      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800352e:	2308      	movs	r3, #8
 8003530:	e00e      	b.n	8003550 <HAL_GPIO_Init+0x240>
 8003532:	2307      	movs	r3, #7
 8003534:	e00c      	b.n	8003550 <HAL_GPIO_Init+0x240>
 8003536:	2306      	movs	r3, #6
 8003538:	e00a      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800353a:	2305      	movs	r3, #5
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800353e:	2304      	movs	r3, #4
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x240>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x240>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x240>
 800354e:	2300      	movs	r3, #0
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f002 0203 	and.w	r2, r2, #3
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	; (8003638 <HAL_GPIO_Init+0x328>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_GPIO_Init+0x354>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a34      	ldr	r2, [pc, #208]	; (8003664 <HAL_GPIO_Init+0x354>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_GPIO_Init+0x354>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_GPIO_Init+0x354>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c2:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_GPIO_Init+0x354>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_GPIO_Init+0x354>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_GPIO_Init+0x354>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_GPIO_Init+0x354>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f ae86 	bls.w	8003330 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40021400 	.word	0x40021400
 8003654:	40021800 	.word	0x40021800
 8003658:	40021c00 	.word	0x40021c00
 800365c:	40022000 	.word	0x40022000
 8003660:	40022400 	.word	0x40022400
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4013      	ands	r3, r2
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	43d9      	mvns	r1, r3
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	400b      	ands	r3, r1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	b08f      	sub	sp, #60	; 0x3c
 80036a0:	af0a      	add	r7, sp, #40	; 0x28
 80036a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e116      	b.n	80038dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f00a faff 	bl	800dccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2203      	movs	r2, #3
 80036d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 ffd4 	bl	800769a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	687e      	ldr	r6, [r7, #4]
 80036fa:	466d      	mov	r5, sp
 80036fc:	f106 0410 	add.w	r4, r6, #16
 8003700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800370c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003710:	1d33      	adds	r3, r6, #4
 8003712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003714:	6838      	ldr	r0, [r7, #0]
 8003716:	f003 feb5 	bl	8007484 <USB_CoreInit>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0d7      	b.n	80038dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f003 ffc2 	bl	80076bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e04a      	b.n	80037d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	333d      	adds	r3, #61	; 0x3d
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	333c      	adds	r3, #60	; 0x3c
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	b298      	uxth	r0, r3
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3344      	adds	r3, #68	; 0x44
 800377a:	4602      	mov	r2, r0
 800377c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3340      	adds	r3, #64	; 0x40
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	334c      	adds	r3, #76	; 0x4c
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3354      	adds	r3, #84	; 0x54
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3301      	adds	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3af      	bcc.n	800373e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e044      	b.n	800386e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d3b5      	bcc.n	80037e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	687e      	ldr	r6, [r7, #4]
 8003880:	466d      	mov	r5, sp
 8003882:	f106 0410 	add.w	r4, r6, #16
 8003886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800388c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003892:	e885 0003 	stmia.w	r5, {r0, r1}
 8003896:	1d33      	adds	r3, r6, #4
 8003898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800389a:	6838      	ldr	r0, [r7, #0]
 800389c:	f003 ff5a 	bl	8007754 <USB_DevInit>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e014      	b.n	80038dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f001 f97a 	bl	8004bc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f005 f8a8 	bl	8008a2a <USB_DevDisconnect>

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_Start+0x16>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e012      	b.n	8003920 <HAL_PCD_Start+0x3c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f003 feb6 	bl	8007678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f005 f869 	bl	80089e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b08d      	sub	sp, #52	; 0x34
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f005 f927 	bl	8008b92 <USB_GetMode>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 84b7 	bne.w	80042ba <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f005 f88b 	bl	8008a6c <USB_ReadInterrupts>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 84ad 	beq.w	80042b8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f005 f878 	bl	8008a6c <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d107      	bne.n	8003996 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f002 0202 	and.w	r2, r2, #2
 8003994:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f005 f866 	bl	8008a6c <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d161      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0210 	bic.w	r2, r2, #16
 80039b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 020f 	and.w	r2, r3, #15
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	3304      	adds	r3, #4
 80039d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	0c5b      	lsrs	r3, r3, #17
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d124      	bne.n	8003a30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d035      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	6a38      	ldr	r0, [r7, #32]
 8003a06:	f004 fe9d 	bl	8008744 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a16:	441a      	add	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a28:	441a      	add	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
 8003a2e:	e016      	b.n	8003a5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	0c5b      	lsrs	r3, r3, #17
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d110      	bne.n	8003a5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a42:	2208      	movs	r2, #8
 8003a44:	4619      	mov	r1, r3
 8003a46:	6a38      	ldr	r0, [r7, #32]
 8003a48:	f004 fe7c 	bl	8008744 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a58:	441a      	add	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0210 	orr.w	r2, r2, #16
 8003a6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fffa 	bl	8008a6c <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a82:	f040 80a7 	bne.w	8003bd4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 ffff 	bl	8008a92 <USB_ReadDevAllOutEpInterrupt>
 8003a94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a96:	e099      	b.n	8003bcc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 808e 	beq.w	8003bc0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f005 f823 	bl	8008afa <USB_ReadDevOutEPInterrupt>
 8003ab4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2301      	movs	r3, #1
 8003ad0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 feef 	bl	80048b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2308      	movs	r3, #8
 8003af4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 ffc5 	bl	8004a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d030      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d109      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b42:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	78db      	ldrb	r3, [r3, #3]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f00a f9e0 	bl	800df34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2302      	movs	r3, #2
 8003b84:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bbe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f af62 	bne.w	8003a98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 ff47 	bl	8008a6c <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be8:	f040 80db 	bne.w	8003da2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f004 ff68 	bl	8008ac6 <USB_ReadDevAllInEpInterrupt>
 8003bf6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003bfc:	e0cd      	b.n	8003d9a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80c2 	beq.w	8003d8e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 ff8e 	bl	8008b36 <USB_ReadDevInEPInterrupt>
 8003c1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d057      	beq.n	8003cd6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c46:	4013      	ands	r3, r2
 8003c48:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	461a      	mov	r2, r3
 8003c58:	2301      	movs	r3, #1
 8003c5a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d132      	bne.n	8003cca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	; 0x4c
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4403      	add	r3, r0
 8003c84:	3348      	adds	r3, #72	; 0x48
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4419      	add	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4403      	add	r3, r0
 8003c98:	334c      	adds	r3, #76	; 0x4c
 8003c9a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d113      	bne.n	8003cca <HAL_PCD_IRQHandler+0x3a2>
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3354      	adds	r3, #84	; 0x54
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	f004 ff97 	bl	8008bf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f00a f8aa 	bl	800de2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	2308      	movs	r3, #8
 8003cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	2340      	movs	r3, #64	; 0x40
 8003d28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d36:	6a38      	ldr	r0, [r7, #32]
 8003d38:	f003 fe6a 	bl	8007a10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	3338      	adds	r3, #56	; 0x38
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d108      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f00a f8f7 	bl	800df58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	461a      	mov	r2, r3
 8003d78:	2302      	movs	r3, #2
 8003d7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fd08 	bl	800479e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	3301      	adds	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f af2e 	bne.w	8003bfe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fe60 	bl	8008a6c <USB_ReadInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d122      	bne.n	8003dfe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dde:	2100      	movs	r1, #0
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f00a fa71 	bl	800e2c8 <HAL_PCDEx_LPM_Callback>
 8003de6:	e002      	b.n	8003dee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f00a f895 	bl	800df18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fe32 	bl	8008a6c <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e12:	d112      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f00a f851 	bl	800decc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 fe14 	bl	8008a6c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e4e:	d121      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e5e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d111      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e84:	2101      	movs	r1, #1
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f00a fa1e 	bl	800e2c8 <HAL_PCDEx_LPM_Callback>
 8003e8c:	e002      	b.n	8003e94 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f00a f81c 	bl	800decc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f004 fde7 	bl	8008a6c <USB_ReadInterrupts>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea8:	f040 80b7 	bne.w	800401a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 fda2 	bl	8007a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed0:	e046      	b.n	8003f60 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	461a      	mov	r2, r3
 8003f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f2a:	0151      	lsls	r1, r2, #5
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	440a      	add	r2, r1
 8003f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d3b3      	bcc.n	8003ed2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f96:	f043 030b 	orr.w	r3, r3, #11
 8003f9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fac:	f043 030b 	orr.w	r3, r3, #11
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	e015      	b.n	8003fe0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f242 032b 	movw	r3, #8235	; 0x202b
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fda:	f043 030b 	orr.w	r3, r3, #11
 8003fde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ff2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004004:	461a      	mov	r2, r3
 8004006:	f004 fdf7 	bl	8008bf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f004 fd24 	bl	8008a6c <USB_ReadInterrupts>
 8004024:	4603      	mov	r3, r0
 8004026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800402a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402e:	d124      	bne.n	800407a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f004 fdbb 	bl	8008bb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fd63 	bl	8007b0a <USB_GetDevSpeed>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	f001 fa8c 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8004054:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	4620      	mov	r0, r4
 8004060:	f003 fa68 	bl	8007534 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f009 ff08 	bl	800de7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004078:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f004 fcf4 	bl	8008a6c <USB_ReadInterrupts>
 8004084:	4603      	mov	r3, r0
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	d10a      	bne.n	80040a4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f009 fee5 	bl	800de5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f002 0208 	and.w	r2, r2, #8
 80040a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fcdf 	bl	8008a6c <USB_ReadInterrupts>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d122      	bne.n	80040fe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	e014      	b.n	80040f4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fb27 	bl	800473c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	3301      	adds	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3e5      	bcc.n	80040ca <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f004 fcb2 	bl	8008a6c <USB_ReadInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004112:	d13b      	bne.n	800418c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	e02b      	b.n	8004172 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3340      	adds	r3, #64	; 0x40
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d115      	bne.n	800416c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004140:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004142:	2b00      	cmp	r3, #0
 8004144:	da12      	bge.n	800416c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	333f      	adds	r3, #63	; 0x3f
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fae8 	bl	800473c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	3301      	adds	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	429a      	cmp	r2, r3
 800417a:	d3ce      	bcc.n	800411a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fc6b 	bl	8008a6c <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a0:	d155      	bne.n	800424e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a2:	2301      	movs	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e045      	b.n	8004234 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d12e      	bne.n	800422e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da2b      	bge.n	800422e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80041e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d121      	bne.n	800422e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6053      	str	r3, [r2, #4]
            break;
 800422c:	e007      	b.n	800423e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	3301      	adds	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b4      	bcc.n	80041a8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800424c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fc0a 	bl	8008a6c <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d10a      	bne.n	800427a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f009 fe89 	bl	800df7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fbf4 	bl	8008a6c <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d115      	bne.n	80042ba <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f009 fe79 	bl	800df98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e000      	b.n	80042ba <HAL_PCD_IRQHandler+0x992>
      return;
 80042b8:	bf00      	nop
    }
  }
}
 80042ba:	3734      	adds	r7, #52	; 0x34
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd90      	pop	{r4, r7, pc}

080042c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_PCD_SetAddress+0x1a>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e013      	b.n	8004302 <HAL_PCD_SetAddress+0x42>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fb52 	bl	800899c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	4608      	mov	r0, r1
 8004314:	4611      	mov	r1, r2
 8004316:	461a      	mov	r2, r3
 8004318:	4603      	mov	r3, r0
 800431a:	70fb      	strb	r3, [r7, #3]
 800431c:	460b      	mov	r3, r1
 800431e:	803b      	strh	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432c:	2b00      	cmp	r3, #0
 800432e:	da0f      	bge.n	8004350 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3338      	adds	r3, #56	; 0x38
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	705a      	strb	r2, [r3, #1]
 800434e:	e00f      	b.n	8004370 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800437c:	883a      	ldrh	r2, [r7, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	78ba      	ldrb	r2, [r7, #2]
 8004386:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800439a:	78bb      	ldrb	r3, [r7, #2]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d102      	bne.n	80043a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_PCD_EP_Open+0xaa>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e00e      	b.n	80043d2 <HAL_PCD_EP_Open+0xc8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fbc6 	bl	8007b54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80043d0:	7afb      	ldrb	r3, [r7, #11]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0f      	bge.n	800440e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3338      	adds	r3, #56	; 0x38
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	705a      	strb	r2, [r3, #1]
 800440c:	e00f      	b.n	800442e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_EP_Close+0x6e>
 8004444:	2302      	movs	r3, #2
 8004446:	e00e      	b.n	8004466 <HAL_PCD_EP_Close+0x8c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fc04 	bl	8007c64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	460b      	mov	r3, r1
 800447c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ca:	7afb      	ldrb	r3, [r7, #11]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	f003 feeb 	bl	80082bc <USB_EP0StartXfer>
 80044e6:	e008      	b.n	80044fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	f003 fc91 	bl	8007e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004544:	7afb      	ldrb	r3, [r7, #11]
 8004546:	f003 020f 	and.w	r2, r3, #15
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	3338      	adds	r3, #56	; 0x38
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2201      	movs	r2, #1
 8004572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d102      	bne.n	800458e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	f003 fe89 	bl	80082bc <USB_EP0StartXfer>
 80045aa:	e008      	b.n	80045be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	f003 fc2f 	bl	8007e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d901      	bls.n	80045e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e050      	b.n	8004688 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da0f      	bge.n	800460e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	3338      	adds	r3, #56	; 0x38
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	3304      	adds	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	705a      	strb	r2, [r3, #1]
 800460c:	e00d      	b.n	800462a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	3304      	adds	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_PCD_EP_SetStall+0x82>
 8004646:	2302      	movs	r3, #2
 8004648:	e01e      	b.n	8004688 <HAL_PCD_EP_SetStall+0xc0>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	f004 f8cb 	bl	80087f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	b2d9      	uxtb	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004678:	461a      	mov	r2, r3
 800467a:	f004 fabd 	bl	8008bf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d901      	bls.n	80046ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e042      	b.n	8004734 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0f      	bge.n	80046d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	705a      	strb	r2, [r3, #1]
 80046d4:	e00f      	b.n	80046f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_EP_ClrStall+0x86>
 8004712:	2302      	movs	r3, #2
 8004714:	e00e      	b.n	8004734 <HAL_PCD_EP_ClrStall+0xa4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	4618      	mov	r0, r3
 8004726:	f004 f8d3 	bl	80088d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da0c      	bge.n	800476a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	3338      	adds	r3, #56	; 0x38
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	3304      	adds	r3, #4
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e00c      	b.n	8004784 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68f9      	ldr	r1, [r7, #12]
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fef2 	bl	8008574 <USB_EPStopXfer>
 8004790:	4603      	mov	r3, r0
 8004792:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004794:	7afb      	ldrb	r3, [r7, #11]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08a      	sub	sp, #40	; 0x28
 80047a2:	af02      	add	r7, sp, #8
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	3338      	adds	r3, #56	; 0x38
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	3304      	adds	r3, #4
 80047c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d901      	bls.n	80047d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06c      	b.n	80048b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d902      	bls.n	80047f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3303      	adds	r3, #3
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047fa:	e02b      	b.n	8004854 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	429a      	cmp	r2, r3
 8004810:	d902      	bls.n	8004818 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3303      	adds	r3, #3
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004830:	b2db      	uxtb	r3, r3
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f003 ff46 	bl	80086c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d809      	bhi.n	800487e <PCD_WriteEmptyTxFifo+0xe0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1a      	ldr	r2, [r3, #32]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004872:	429a      	cmp	r2, r3
 8004874:	d203      	bcs.n	800487e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1be      	bne.n	80047fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	429a      	cmp	r2, r3
 8004888:	d811      	bhi.n	80048ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2201      	movs	r2, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048aa:	4013      	ands	r3, r2
 80048ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	333c      	adds	r3, #60	; 0x3c
 80048d0:	3304      	adds	r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d17b      	bne.n	80049e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4a61      	ldr	r2, [pc, #388]	; (8004a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	f240 80b9 	bls.w	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80b3 	beq.w	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	e0a7      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	2320      	movs	r3, #32
 800493e:	6093      	str	r3, [r2, #8]
 8004940:	e098      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 8093 	bne.w	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4a4b      	ldr	r2, [pc, #300]	; (8004a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d90f      	bls.n	8004976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	6093      	str	r3, [r2, #8]
 8004974:	e07e      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	3304      	adds	r3, #4
 800498a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	0159      	lsls	r1, r3, #5
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	440b      	add	r3, r1
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d114      	bne.n	80049d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049c0:	461a      	mov	r2, r3
 80049c2:	2101      	movs	r1, #1
 80049c4:	f004 f918 	bl	8008bf8 <USB_EP0_OutStart>
 80049c8:	e006      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f009 fa08 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
 80049e4:	e046      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d124      	bne.n	8004a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	6093      	str	r3, [r2, #8]
 8004a0c:	e032      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	461a      	mov	r2, r3
 8004a26:	2320      	movs	r3, #32
 8004a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f009 f9df 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
 8004a36:	e01d      	b.n	8004a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d114      	bne.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d108      	bne.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a60:	461a      	mov	r2, r3
 8004a62:	2100      	movs	r1, #0
 8004a64:	f004 f8c8 	bl	8008bf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f009 f9c0 	bl	800ddf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	4f54300a 	.word	0x4f54300a
 8004a84:	4f54310a 	.word	0x4f54310a

08004a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	333c      	adds	r3, #60	; 0x3c
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d90e      	bls.n	8004adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f009 f977 	bl	800ddd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d90c      	bls.n	8004b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d108      	bne.n	8004b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004afc:	461a      	mov	r2, r3
 8004afe:	2101      	movs	r1, #1
 8004b00:	f004 f87a 	bl	8008bf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	4f54300a 	.word	0x4f54300a

08004b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
 8004b20:	4613      	mov	r3, r2
 8004b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b32:	883b      	ldrh	r3, [r7, #0]
 8004b34:	0419      	lsls	r1, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b40:	e028      	b.n	8004b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e00d      	b.n	8004b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	3340      	adds	r3, #64	; 0x40
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3ec      	bcc.n	8004b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b7c:	883b      	ldrh	r3, [r7, #0]
 8004b7e:	0418      	lsls	r0, r3, #16
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4302      	orrs	r2, r0
 8004b8c:	3340      	adds	r3, #64	; 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_PCDEx_ActivateLPM+0x44>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	10000003 	.word	0x10000003

08004c0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6413      	str	r3, [r2, #64]	; 0x40
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c3a:	f7fc faab 	bl	8001194 <HAL_GetTick>
 8004c3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c40:	e009      	b.n	8004c56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c42:	f7fc faa7 	bl	8001194 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c50:	d901      	bls.n	8004c56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e022      	b.n	8004c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d1ee      	bne.n	8004c42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c70:	f7fc fa90 	bl	8001194 <HAL_GetTick>
 8004c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c76:	e009      	b.n	8004c8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c78:	f7fc fa8c 	bl	8001194 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c86:	d901      	bls.n	8004c8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e007      	b.n	8004c9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c98:	d1ee      	bne.n	8004c78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000

08004cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e29b      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8087 	beq.w	8004dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd0:	4b96      	ldr	r3, [pc, #600]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d00c      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cdc:	4b93      	ldr	r3, [pc, #588]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d112      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
 8004ce8:	4b90      	ldr	r3, [pc, #576]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf6:	4b8d      	ldr	r3, [pc, #564]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x130>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d168      	bne.n	8004ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e275      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x7a>
 8004d18:	4b84      	ldr	r3, [pc, #528]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a83      	ldr	r2, [pc, #524]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e02e      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x9c>
 8004d2e:	4b7f      	ldr	r3, [pc, #508]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a7e      	ldr	r2, [pc, #504]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b7c      	ldr	r3, [pc, #496]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7b      	ldr	r2, [pc, #492]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e01d      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc0>
 8004d52:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a75      	ldr	r2, [pc, #468]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b73      	ldr	r3, [pc, #460]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a72      	ldr	r2, [pc, #456]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d6c:	4b6f      	ldr	r3, [pc, #444]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a6e      	ldr	r2, [pc, #440]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6b      	ldr	r2, [pc, #428]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fa02 	bl	8001194 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fc f9fe 	bl	8001194 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e229      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da6:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc f9ee 	bl	8001194 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fc f9ea 	bl	8001194 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e215      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dce:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x110>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d069      	beq.n	8004ebe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dea:	4b50      	ldr	r3, [pc, #320]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004df6:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d11c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x190>
 8004e02:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d116      	bne.n	8004e3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_RCC_OscConfig+0x17a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e1e9      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	493d      	ldr	r1, [pc, #244]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e3a:	e040      	b.n	8004ebe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d023      	beq.n	8004e8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e44:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a38      	ldr	r2, [pc, #224]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fc f9a0 	bl	8001194 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e58:	f7fc f99c 	bl	8001194 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1c7      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4929      	ldr	r1, [pc, #164]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]
 8004e8a:	e018      	b.n	8004ebe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc f97c 	bl	8001194 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc f978 	bl	8001194 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1a3      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d038      	beq.n	8004f3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d019      	beq.n	8004f06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fc f959 	bl	8001194 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee6:	f7fc f955 	bl	8001194 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e180      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x23a>
 8004f04:	e01a      	b.n	8004f3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <HAL_RCC_OscConfig+0x280>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fc f93f 	bl	8001194 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1a:	f7fc f93b 	bl	8001194 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d903      	bls.n	8004f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e166      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
 8004f2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ee      	bne.n	8004f1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a4 	beq.w	8005092 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	4b8c      	ldr	r3, [pc, #560]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10d      	bne.n	8004f72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	4b89      	ldr	r3, [pc, #548]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	4a88      	ldr	r2, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f60:	6413      	str	r3, [r2, #64]	; 0x40
 8004f62:	4b86      	ldr	r3, [pc, #536]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f72:	4b83      	ldr	r3, [pc, #524]	; (8005180 <HAL_RCC_OscConfig+0x4d4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d118      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f7e:	4b80      	ldr	r3, [pc, #512]	; (8005180 <HAL_RCC_OscConfig+0x4d4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7f      	ldr	r2, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x4d4>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8a:	f7fc f903 	bl	8001194 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fc f8ff 	bl	8001194 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b64      	cmp	r3, #100	; 0x64
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e12a      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa4:	4b76      	ldr	r3, [pc, #472]	; (8005180 <HAL_RCC_OscConfig+0x4d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x31a>
 8004fb8:	4b70      	ldr	r3, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a6f      	ldr	r2, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	e02d      	b.n	8005022 <HAL_RCC_OscConfig+0x376>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x33c>
 8004fce:	4b6b      	ldr	r3, [pc, #428]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	4a6a      	ldr	r2, [pc, #424]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fda:	4b68      	ldr	r3, [pc, #416]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	4a67      	ldr	r2, [pc, #412]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe6:	e01c      	b.n	8005022 <HAL_RCC_OscConfig+0x376>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d10c      	bne.n	800500a <HAL_RCC_OscConfig+0x35e>
 8004ff0:	4b62      	ldr	r3, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4a61      	ldr	r2, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffc:	4b5f      	ldr	r3, [pc, #380]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	4a5e      	ldr	r2, [pc, #376]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	6713      	str	r3, [r2, #112]	; 0x70
 8005008:	e00b      	b.n	8005022 <HAL_RCC_OscConfig+0x376>
 800500a:	4b5c      	ldr	r3, [pc, #368]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a5b      	ldr	r2, [pc, #364]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a58      	ldr	r2, [pc, #352]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d015      	beq.n	8005056 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fc f8b3 	bl	8001194 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fc f8af 	bl	8001194 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e0d8      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ee      	beq.n	8005032 <HAL_RCC_OscConfig+0x386>
 8005054:	e014      	b.n	8005080 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005056:	f7fc f89d 	bl	8001194 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fc f899 	bl	8001194 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e0c2      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005074:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ee      	bne.n	800505e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d105      	bne.n	8005092 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a3c      	ldr	r2, [pc, #240]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80ae 	beq.w	80051f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509c:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d06d      	beq.n	8005184 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d14b      	bne.n	8005148 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a31      	ldr	r2, [pc, #196]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fc f86a 	bl	8001194 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fc f866 	bl	8001194 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e091      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	071b      	lsls	r3, r3, #28
 800510e:	491b      	ldr	r1, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005114:	4b19      	ldr	r3, [pc, #100]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800511a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800511e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fc f838 	bl	8001194 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005128:	f7fc f834 	bl	8001194 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e05f      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x47c>
 8005146:	e057      	b.n	80051f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0b      	ldr	r2, [pc, #44]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 800514e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fc f81e 	bl	8001194 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fc f81a 	bl	8001194 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e045      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_OscConfig+0x4d0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x4b0>
 800517a:	e03d      	b.n	80051f8 <HAL_RCC_OscConfig+0x54c>
 800517c:	40023800 	.word	0x40023800
 8005180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <HAL_RCC_OscConfig+0x558>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d030      	beq.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d129      	bne.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d122      	bne.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051bc:	4293      	cmp	r3, r2
 80051be:	d119      	bne.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d10f      	bne.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40023800 	.word	0x40023800

08005208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0d0      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005220:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d910      	bls.n	8005250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 020f 	bic.w	r2, r3, #15
 8005236:	4965      	ldr	r1, [pc, #404]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523e:	4b63      	ldr	r3, [pc, #396]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0b8      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005268:	4b59      	ldr	r3, [pc, #356]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a58      	ldr	r2, [pc, #352]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800526e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005280:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a52      	ldr	r2, [pc, #328]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800528a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528c:	4b50      	ldr	r3, [pc, #320]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	494d      	ldr	r1, [pc, #308]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d040      	beq.n	800532c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d115      	bne.n	80052ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e07f      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e073      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052da:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e06b      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 0203 	bic.w	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4936      	ldr	r1, [pc, #216]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fb ff4a 	bl	8001194 <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	e00a      	b.n	800531a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005304:	f7fb ff46 	bl	8001194 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e053      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 020c 	and.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	429a      	cmp	r2, r3
 800532a:	d1eb      	bne.n	8005304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d210      	bcs.n	800535c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 020f 	bic.w	r2, r3, #15
 8005342:	4922      	ldr	r1, [pc, #136]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b20      	ldr	r3, [pc, #128]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e032      	b.n	80053c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4916      	ldr	r1, [pc, #88]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	490e      	ldr	r1, [pc, #56]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800539a:	f000 f821 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 800539e:	4602      	mov	r2, r0
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	490a      	ldr	r1, [pc, #40]	; (80053d4 <HAL_RCC_ClockConfig+0x1cc>)
 80053ac:	5ccb      	ldrb	r3, [r1, r3]
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1d0>)
 80053b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCC_ClockConfig+0x1d4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb fd82 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40023c00 	.word	0x40023c00
 80053d0:	40023800 	.word	0x40023800
 80053d4:	0800eea0 	.word	0x0800eea0
 80053d8:	20000000 	.word	0x20000000
 80053dc:	20000004 	.word	0x20000004

080053e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e4:	b090      	sub	sp, #64	; 0x40
 80053e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f0:	2300      	movs	r3, #0
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053f8:	4b59      	ldr	r3, [pc, #356]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b08      	cmp	r3, #8
 8005402:	d00d      	beq.n	8005420 <HAL_RCC_GetSysClockFreq+0x40>
 8005404:	2b08      	cmp	r3, #8
 8005406:	f200 80a1 	bhi.w	800554c <HAL_RCC_GetSysClockFreq+0x16c>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x34>
 800540e:	2b04      	cmp	r3, #4
 8005410:	d003      	beq.n	800541a <HAL_RCC_GetSysClockFreq+0x3a>
 8005412:	e09b      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b53      	ldr	r3, [pc, #332]	; (8005564 <HAL_RCC_GetSysClockFreq+0x184>)
 8005416:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005418:	e09b      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800541a:	4b53      	ldr	r3, [pc, #332]	; (8005568 <HAL_RCC_GetSysClockFreq+0x188>)
 800541c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800541e:	e098      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005420:	4b4f      	ldr	r3, [pc, #316]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800542a:	4b4d      	ldr	r3, [pc, #308]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d028      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005436:	4b4a      	ldr	r3, [pc, #296]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	2200      	movs	r2, #0
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	627a      	str	r2, [r7, #36]	; 0x24
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005448:	2100      	movs	r1, #0
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCC_GetSysClockFreq+0x188>)
 800544c:	fb03 f201 	mul.w	r2, r3, r1
 8005450:	2300      	movs	r3, #0
 8005452:	fb00 f303 	mul.w	r3, r0, r3
 8005456:	4413      	add	r3, r2
 8005458:	4a43      	ldr	r2, [pc, #268]	; (8005568 <HAL_RCC_GetSysClockFreq+0x188>)
 800545a:	fba0 1202 	umull	r1, r2, r0, r2
 800545e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005460:	460a      	mov	r2, r1
 8005462:	62ba      	str	r2, [r7, #40]	; 0x28
 8005464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005466:	4413      	add	r3, r2
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	2200      	movs	r2, #0
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800547a:	f7fa ff39 	bl	80002f0 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4613      	mov	r3, r2
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005486:	e053      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005488:	4b35      	ldr	r3, [pc, #212]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	2200      	movs	r2, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	617a      	str	r2, [r7, #20]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800549a:	f04f 0b00 	mov.w	fp, #0
 800549e:	4652      	mov	r2, sl
 80054a0:	465b      	mov	r3, fp
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	0159      	lsls	r1, r3, #5
 80054ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b0:	0150      	lsls	r0, r2, #5
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	ebb2 080a 	subs.w	r8, r2, sl
 80054ba:	eb63 090b 	sbc.w	r9, r3, fp
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054d2:	ebb2 0408 	subs.w	r4, r2, r8
 80054d6:	eb63 0509 	sbc.w	r5, r3, r9
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	00eb      	lsls	r3, r5, #3
 80054e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e8:	00e2      	lsls	r2, r4, #3
 80054ea:	4614      	mov	r4, r2
 80054ec:	461d      	mov	r5, r3
 80054ee:	eb14 030a 	adds.w	r3, r4, sl
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	eb45 030b 	adc.w	r3, r5, fp
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005506:	4629      	mov	r1, r5
 8005508:	028b      	lsls	r3, r1, #10
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005510:	4621      	mov	r1, r4
 8005512:	028a      	lsls	r2, r1, #10
 8005514:	4610      	mov	r0, r2
 8005516:	4619      	mov	r1, r3
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	2200      	movs	r2, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	60fa      	str	r2, [r7, #12]
 8005520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005524:	f7fa fee4 	bl	80002f0 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_GetSysClockFreq+0x180>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3301      	adds	r3, #1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800554a:	e002      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCC_GetSysClockFreq+0x184>)
 800554e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005554:	4618      	mov	r0, r3
 8005556:	3740      	adds	r7, #64	; 0x40
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800
 8005564:	00f42400 	.word	0x00f42400
 8005568:	01312d00 	.word	0x01312d00

0800556c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <HAL_RCC_GetHCLKFreq+0x14>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000000 	.word	0x20000000

08005584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005588:	f7ff fff0 	bl	800556c <HAL_RCC_GetHCLKFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4903      	ldr	r1, [pc, #12]	; (80055a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	0800eeb0 	.word	0x0800eeb0

080055ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055b0:	f7ff ffdc 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0b5b      	lsrs	r3, r3, #13
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4903      	ldr	r1, [pc, #12]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	0800eeb0 	.word	0x0800eeb0

080055d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	220f      	movs	r2, #15
 80055e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0203 	and.w	r2, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <HAL_RCC_GetClockConfig+0x60>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	601a      	str	r2, [r3, #0]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	40023c00 	.word	0x40023c00

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d012      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a68      	ldr	r2, [pc, #416]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005666:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800566a:	6093      	str	r3, [r2, #8]
 800566c:	4b66      	ldr	r3, [pc, #408]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	4964      	ldr	r1, [pc, #400]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005676:	4313      	orrs	r3, r2
 8005678:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005682:	2301      	movs	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d017      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005692:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	4959      	ldr	r1, [pc, #356]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b0:	d101      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056ce:	4b4e      	ldr	r3, [pc, #312]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	494a      	ldr	r1, [pc, #296]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ec:	d101      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 808b 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800571c:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	4a39      	ldr	r2, [pc, #228]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6413      	str	r3, [r2, #64]	; 0x40
 8005728:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005734:	4b35      	ldr	r3, [pc, #212]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a34      	ldr	r2, [pc, #208]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800573a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fb fd28 	bl	8001194 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005748:	f7fb fd24 	bl	8001194 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e38f      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800575a:	4b2c      	ldr	r3, [pc, #176]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d035      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d02e      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800578e:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d114      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fb fcec 	bl	8001194 <HAL_GetTick>
 80057bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fb fce8 	bl	8001194 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e351      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ee:	d111      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057fe:	400b      	ands	r3, r1
 8005800:	4901      	ldr	r1, [pc, #4]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
 8005806:	e00b      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
 8005810:	0ffffcff 	.word	0x0ffffcff
 8005814:	4bac      	ldr	r3, [pc, #688]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4aab      	ldr	r2, [pc, #684]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800581e:	6093      	str	r3, [r2, #8]
 8005820:	4ba9      	ldr	r3, [pc, #676]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582c:	49a6      	ldr	r1, [pc, #664]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800582e:	4313      	orrs	r3, r2
 8005830:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800583e:	4ba2      	ldr	r3, [pc, #648]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005844:	4aa0      	ldr	r2, [pc, #640]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800584e:	4b9e      	ldr	r3, [pc, #632]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005850:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	499b      	ldr	r1, [pc, #620]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800586c:	4b96      	ldr	r3, [pc, #600]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587a:	4993      	ldr	r1, [pc, #588]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800588e:	4b8e      	ldr	r3, [pc, #568]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589c:	498a      	ldr	r1, [pc, #552]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058b0:	4b85      	ldr	r3, [pc, #532]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058be:	4982      	ldr	r1, [pc, #520]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058d2:	4b7d      	ldr	r3, [pc, #500]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4979      	ldr	r1, [pc, #484]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058f4:	4b74      	ldr	r3, [pc, #464]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	4971      	ldr	r1, [pc, #452]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005916:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f023 020c 	bic.w	r2, r3, #12
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	4968      	ldr	r1, [pc, #416]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005938:	4b63      	ldr	r3, [pc, #396]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	4960      	ldr	r1, [pc, #384]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800595a:	4b5b      	ldr	r3, [pc, #364]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005968:	4957      	ldr	r1, [pc, #348]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800597c:	4b52      	ldr	r3, [pc, #328]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	494f      	ldr	r1, [pc, #316]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800599e:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	4946      	ldr	r1, [pc, #280]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	493e      	ldr	r1, [pc, #248]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059e2:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f0:	4935      	ldr	r1, [pc, #212]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a04:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a12:	492d      	ldr	r1, [pc, #180]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a26:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a34:	4924      	ldr	r1, [pc, #144]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a44:	d101      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a56:	2301      	movs	r3, #1
 8005a58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a74:	4914      	ldr	r1, [pc, #80]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a98:	490b      	ldr	r1, [pc, #44]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abc:	4902      	ldr	r1, [pc, #8]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ac4:	e002      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ad8:	4b8a      	ldr	r3, [pc, #552]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	4986      	ldr	r1, [pc, #536]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005afc:	4b81      	ldr	r3, [pc, #516]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	497d      	ldr	r1, [pc, #500]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d006      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80d6 	beq.w	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b28:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a75      	ldr	r2, [pc, #468]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b34:	f7fb fb2e 	bl	8001194 <HAL_GetTick>
 8005b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b3c:	f7fb fb2a 	bl	8001194 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	; 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e195      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b4e:	4b6d      	ldr	r3, [pc, #436]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d021      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11d      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b7c:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b82:	0e1b      	lsrs	r3, r3, #24
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	019a      	lsls	r2, r3, #6
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	071b      	lsls	r3, r3, #28
 8005ba2:	4958      	ldr	r1, [pc, #352]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02e      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd4:	d129      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bd6:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005be4:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bea:	0f1b      	lsrs	r3, r3, #28
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	019a      	lsls	r2, r3, #6
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	493e      	ldr	r1, [pc, #248]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c12:	4b3c      	ldr	r3, [pc, #240]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	f023 021f 	bic.w	r2, r3, #31
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4938      	ldr	r1, [pc, #224]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01d      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c36:	4b33      	ldr	r3, [pc, #204]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c44:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4a:	0f1b      	lsrs	r3, r3, #28
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	019a      	lsls	r2, r3, #6
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	071b      	lsls	r3, r3, #28
 8005c6a:	4926      	ldr	r1, [pc, #152]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	019a      	lsls	r2, r3, #6
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	071b      	lsls	r3, r3, #28
 8005c9a:	491a      	ldr	r1, [pc, #104]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ca2:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cae:	f7fb fa71 	bl	8001194 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cb6:	f7fb fa6d 	bl	8001194 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	; 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0d8      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 80ce 	bne.w	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce8:	f7fb fa54 	bl	8001194 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cee:	e00b      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cf0:	f7fb fa50 	bl	8001194 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d904      	bls.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0bb      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d14:	d0ec      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02e      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d12a      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d3e:	4b51      	ldr	r3, [pc, #324]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	0f1b      	lsrs	r3, r3, #28
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	019a      	lsls	r2, r3, #6
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	071b      	lsls	r3, r3, #28
 8005d72:	4944      	ldr	r1, [pc, #272]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d7a:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	493d      	ldr	r1, [pc, #244]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d022      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da8:	d11d      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005daa:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db8:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	0f1b      	lsrs	r3, r3, #28
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	019a      	lsls	r2, r3, #6
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	071b      	lsls	r3, r3, #28
 8005dde:	4929      	ldr	r1, [pc, #164]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d028      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	0e1b      	lsrs	r3, r3, #24
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e00:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	019a      	lsls	r2, r3, #6
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	4917      	ldr	r1, [pc, #92]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e2e:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4911      	ldr	r1, [pc, #68]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a0e      	ldr	r2, [pc, #56]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e50:	f7fb f9a0 	bl	8001194 <HAL_GetTick>
 8005e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e58:	f7fb f99c 	bl	8001194 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e007      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e76:	d1ef      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800

08005e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f841 	bl	8005f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fa00 	bl	80062cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e054      	b.n	800600e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a26      	ldr	r2, [pc, #152]	; (800601c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d01d      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a22      	ldr	r2, [pc, #136]	; (8006020 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a21      	ldr	r2, [pc, #132]	; (8006024 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <HAL_TIM_Base_Start_IT+0xdc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1e      	ldr	r2, [pc, #120]	; (800602c <HAL_TIM_Base_Start_IT+0xe0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <HAL_TIM_Base_Start_IT+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x80>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d115      	bne.n	8005ff8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_TIM_Base_Start_IT+0xec>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d015      	beq.n	800600a <HAL_TIM_Base_Start_IT+0xbe>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe4:	d011      	beq.n	800600a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0201 	orr.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff6:	e008      	b.n	800600a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e000      	b.n	800600c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40001800 	.word	0x40001800
 8006038:	00010007 	.word	0x00010007

0800603c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b02      	cmp	r3, #2
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0202 	mvn.w	r2, #2
 8006068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f905 	bl	800628e <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8f7 	bl	800627a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f908 	bl	80062a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0204 	mvn.w	r2, #4
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8db 	bl	800628e <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8cd 	bl	800627a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8de 	bl	80062a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b08      	cmp	r3, #8
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0208 	mvn.w	r2, #8
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2204      	movs	r2, #4
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8b1 	bl	800628e <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8a3 	bl	800627a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8b4 	bl	80062a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b10      	cmp	r3, #16
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0210 	mvn.w	r2, #16
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2208      	movs	r2, #8
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f887 	bl	800628e <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f879 	bl	800627a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f88a 	bl	80062a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0201 	mvn.w	r2, #1
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fa fd0c 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b80      	cmp	r3, #128	; 0x80
 80061cc:	d10e      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d107      	bne.n	80061ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f91a 	bl	8006420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fa:	d10e      	bne.n	800621a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d107      	bne.n	800621a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f90d 	bl	8006434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	d10e      	bne.n	8006246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d107      	bne.n	8006246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800623e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f838 	bl	80062b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b20      	cmp	r3, #32
 8006252:	d10e      	bne.n	8006272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b20      	cmp	r3, #32
 8006260:	d107      	bne.n	8006272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f06f 0220 	mvn.w	r2, #32
 800626a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f8cd 	bl	800640c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800627a:	b480      	push	{r7}
 800627c:	b083      	sub	sp, #12
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006282:	bf00      	nop
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a40      	ldr	r2, [pc, #256]	; (80063e0 <TIM_Base_SetConfig+0x114>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <TIM_Base_SetConfig+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ea:	d00f      	beq.n	800630c <TIM_Base_SetConfig+0x40>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a3d      	ldr	r2, [pc, #244]	; (80063e4 <TIM_Base_SetConfig+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a3c      	ldr	r2, [pc, #240]	; (80063e8 <TIM_Base_SetConfig+0x11c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a3b      	ldr	r2, [pc, #236]	; (80063ec <TIM_Base_SetConfig+0x120>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3a      	ldr	r2, [pc, #232]	; (80063f0 <TIM_Base_SetConfig+0x124>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2f      	ldr	r2, [pc, #188]	; (80063e0 <TIM_Base_SetConfig+0x114>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02b      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632c:	d027      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2c      	ldr	r2, [pc, #176]	; (80063e4 <TIM_Base_SetConfig+0x118>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d023      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2b      	ldr	r2, [pc, #172]	; (80063e8 <TIM_Base_SetConfig+0x11c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01f      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2a      	ldr	r2, [pc, #168]	; (80063ec <TIM_Base_SetConfig+0x120>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01b      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <TIM_Base_SetConfig+0x124>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d017      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a28      	ldr	r2, [pc, #160]	; (80063f4 <TIM_Base_SetConfig+0x128>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <TIM_Base_SetConfig+0x12c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a26      	ldr	r2, [pc, #152]	; (80063fc <TIM_Base_SetConfig+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a25      	ldr	r2, [pc, #148]	; (8006400 <TIM_Base_SetConfig+0x134>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a24      	ldr	r2, [pc, #144]	; (8006404 <TIM_Base_SetConfig+0x138>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a23      	ldr	r2, [pc, #140]	; (8006408 <TIM_Base_SetConfig+0x13c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d108      	bne.n	8006390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <TIM_Base_SetConfig+0x114>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0xf8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <TIM_Base_SetConfig+0x124>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d103      	bne.n	80063cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	615a      	str	r2, [r3, #20]
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	40010400 	.word	0x40010400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800
 8006400:	40001800 	.word	0x40001800
 8006404:	40001c00 	.word	0x40001c00
 8006408:	40002000 	.word	0x40002000

0800640c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e040      	b.n	80064dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fa fcc4 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2224      	movs	r2, #36	; 0x24
 8006474:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb3e 	bl	8006b08 <UART_SetConfig>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e022      	b.n	80064dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fd96 	bl	8006fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fe1d 	bl	8007114 <UART_CheckIdleState>
 80064da:	4603      	mov	r3, r0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b0ba      	sub	sp, #232	; 0xe8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800650a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800650e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006512:	4013      	ands	r3, r2
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d115      	bne.n	800654c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 82ac 	beq.w	8006a9a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
      }
      return;
 800654a:	e2a6      	b.n	8006a9a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800654c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8117 	beq.w	8006784 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006566:	4b85      	ldr	r3, [pc, #532]	; (800677c <HAL_UART_IRQHandler+0x298>)
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 810a 	beq.w	8006784 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <HAL_UART_IRQHandler+0xbc>
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2201      	movs	r2, #1
 800658e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006596:	f043 0201 	orr.w	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d011      	beq.n	80065d0 <HAL_UART_IRQHandler+0xec>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2202      	movs	r2, #2
 80065be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	f043 0204 	orr.w	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d011      	beq.n	8006600 <HAL_UART_IRQHandler+0x11c>
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2204      	movs	r2, #4
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d017      	beq.n	800663c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2208      	movs	r2, #8
 800662a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006632:	f043 0208 	orr.w	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <HAL_UART_IRQHandler+0x18a>
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00c      	beq.n	800666e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8212 	beq.w	8006a9e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d04f      	beq.n	8006766 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fe37 	bl	800733a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b40      	cmp	r3, #64	; 0x40
 80066d8:	d141      	bne.n	800675e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800670a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800671e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1d9      	bne.n	80066da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	2b00      	cmp	r3, #0
 800672c:	d013      	beq.n	8006756 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <HAL_UART_IRQHandler+0x29c>)
 8006734:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673a:	4618      	mov	r0, r3
 800673c:	f7fc fb5c 	bl	8002df8 <HAL_DMA_Abort_IT>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006750:	4610      	mov	r0, r2
 8006752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e00f      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9b6 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e00b      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9b2 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e007      	b.n	8006776 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9ae 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006774:	e193      	b.n	8006a9e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006776:	bf00      	nop
    return;
 8006778:	e191      	b.n	8006a9e <HAL_UART_IRQHandler+0x5ba>
 800677a:	bf00      	nop
 800677c:	04000120 	.word	0x04000120
 8006780:	08007403 	.word	0x08007403

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	2b01      	cmp	r3, #1
 800678a:	f040 814c 	bne.w	8006a26 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8145 	beq.w	8006a26 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 813e 	beq.w	8006a26 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2210      	movs	r2, #16
 80067b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	f040 80b6 	bne.w	800692e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8165 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e2:	429a      	cmp	r2, r3
 80067e4:	f080 815d 	bcs.w	8006aa2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fc:	f000 8086 	beq.w	800690c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800682a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800682e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1da      	bne.n	8006800 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800685a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800686e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006872:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e1      	bne.n	800684a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e3      	bne.n	8006886 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	f023 0310 	bic.w	r3, r3, #16
 80068e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e4      	bne.n	80068cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	4618      	mov	r0, r3
 8006908:	f7fc fa06 	bl	8002d18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691e:	b29b      	uxth	r3, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	b29b      	uxth	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f8d8 	bl	8006adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800692c:	e0b9      	b.n	8006aa2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800693a:	b29b      	uxth	r3, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80ab 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80a6 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800696e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
 800697e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	623b      	str	r3, [r7, #32]
   return(result);
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069b4:	633a      	str	r2, [r7, #48]	; 0x30
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e3      	bne.n	8006990 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e4      	bne.n	80069dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f85c 	bl	8006adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a24:	e03f      	b.n	8006aa6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <HAL_UART_IRQHandler+0x56c>
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f853 	bl	8006af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4e:	e02d      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01c      	beq.n	8006aaa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
    }
    return;
 8006a78:	e017      	b.n	8006aaa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_UART_IRQHandler+0x5c8>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fccb 	bl	800742e <UART_EndTransmit_IT>
    return;
 8006a98:	e008      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a9a:	bf00      	nop
 8006a9c:	e006      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a9e:	bf00      	nop
 8006aa0:	e004      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
      return;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_UART_IRQHandler+0x5c8>
    return;
 8006aaa:	bf00      	nop
  }

}
 8006aac:	37e8      	adds	r7, #232	; 0xe8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop

08006ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4ba6      	ldr	r3, [pc, #664]	; (8006dcc <UART_SetConfig+0x2c4>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a94      	ldr	r2, [pc, #592]	; (8006dd0 <UART_SetConfig+0x2c8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d120      	bne.n	8006bc6 <UART_SetConfig+0xbe>
 8006b84:	4b93      	ldr	r3, [pc, #588]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d816      	bhi.n	8006bc0 <UART_SetConfig+0xb8>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0x90>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bb5 	.word	0x08006bb5
 8006ba0:	08006baf 	.word	0x08006baf
 8006ba4:	08006bbb 	.word	0x08006bbb
 8006ba8:	2301      	movs	r3, #1
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e150      	b.n	8006e50 <UART_SetConfig+0x348>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e14d      	b.n	8006e50 <UART_SetConfig+0x348>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e14a      	b.n	8006e50 <UART_SetConfig+0x348>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e147      	b.n	8006e50 <UART_SetConfig+0x348>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e144      	b.n	8006e50 <UART_SetConfig+0x348>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a83      	ldr	r2, [pc, #524]	; (8006dd8 <UART_SetConfig+0x2d0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d132      	bne.n	8006c36 <UART_SetConfig+0x12e>
 8006bd0:	4b80      	ldr	r3, [pc, #512]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b0c      	cmp	r3, #12
 8006bdc:	d828      	bhi.n	8006c30 <UART_SetConfig+0x128>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xdc>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c19 	.word	0x08006c19
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c1f 	.word	0x08006c1f
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c31 	.word	0x08006c31
 8006c14:	08006c2b 	.word	0x08006c2b
 8006c18:	2300      	movs	r3, #0
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e118      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e115      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c24:	2304      	movs	r3, #4
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e112      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e10f      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c30:	2310      	movs	r3, #16
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e10c      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a68      	ldr	r2, [pc, #416]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d120      	bne.n	8006c82 <UART_SetConfig+0x17a>
 8006c40:	4b64      	ldr	r3, [pc, #400]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c4a:	2b30      	cmp	r3, #48	; 0x30
 8006c4c:	d013      	beq.n	8006c76 <UART_SetConfig+0x16e>
 8006c4e:	2b30      	cmp	r3, #48	; 0x30
 8006c50:	d814      	bhi.n	8006c7c <UART_SetConfig+0x174>
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d009      	beq.n	8006c6a <UART_SetConfig+0x162>
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	d810      	bhi.n	8006c7c <UART_SetConfig+0x174>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <UART_SetConfig+0x15c>
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d006      	beq.n	8006c70 <UART_SetConfig+0x168>
 8006c62:	e00b      	b.n	8006c7c <UART_SetConfig+0x174>
 8006c64:	2300      	movs	r3, #0
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e0f2      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e0ef      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c70:	2304      	movs	r3, #4
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e0ec      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c76:	2308      	movs	r3, #8
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e0e9      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e0e6      	b.n	8006e50 <UART_SetConfig+0x348>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a56      	ldr	r2, [pc, #344]	; (8006de0 <UART_SetConfig+0x2d8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d120      	bne.n	8006cce <UART_SetConfig+0x1c6>
 8006c8c:	4b51      	ldr	r3, [pc, #324]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c96:	2bc0      	cmp	r3, #192	; 0xc0
 8006c98:	d013      	beq.n	8006cc2 <UART_SetConfig+0x1ba>
 8006c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c9c:	d814      	bhi.n	8006cc8 <UART_SetConfig+0x1c0>
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d009      	beq.n	8006cb6 <UART_SetConfig+0x1ae>
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d810      	bhi.n	8006cc8 <UART_SetConfig+0x1c0>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <UART_SetConfig+0x1a8>
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d006      	beq.n	8006cbc <UART_SetConfig+0x1b4>
 8006cae:	e00b      	b.n	8006cc8 <UART_SetConfig+0x1c0>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e0cc      	b.n	8006e50 <UART_SetConfig+0x348>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e0c9      	b.n	8006e50 <UART_SetConfig+0x348>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e0c6      	b.n	8006e50 <UART_SetConfig+0x348>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e0c3      	b.n	8006e50 <UART_SetConfig+0x348>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e0c0      	b.n	8006e50 <UART_SetConfig+0x348>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a44      	ldr	r2, [pc, #272]	; (8006de4 <UART_SetConfig+0x2dc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d125      	bne.n	8006d24 <UART_SetConfig+0x21c>
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce6:	d017      	beq.n	8006d18 <UART_SetConfig+0x210>
 8006ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cec:	d817      	bhi.n	8006d1e <UART_SetConfig+0x216>
 8006cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf2:	d00b      	beq.n	8006d0c <UART_SetConfig+0x204>
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d811      	bhi.n	8006d1e <UART_SetConfig+0x216>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <UART_SetConfig+0x1fe>
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d02:	d006      	beq.n	8006d12 <UART_SetConfig+0x20a>
 8006d04:	e00b      	b.n	8006d1e <UART_SetConfig+0x216>
 8006d06:	2300      	movs	r3, #0
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e0a1      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e09e      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d12:	2304      	movs	r3, #4
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	e09b      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e098      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d1e:	2310      	movs	r3, #16
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e095      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <UART_SetConfig+0x2e0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d125      	bne.n	8006d7a <UART_SetConfig+0x272>
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d3c:	d017      	beq.n	8006d6e <UART_SetConfig+0x266>
 8006d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d42:	d817      	bhi.n	8006d74 <UART_SetConfig+0x26c>
 8006d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d48:	d00b      	beq.n	8006d62 <UART_SetConfig+0x25a>
 8006d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4e:	d811      	bhi.n	8006d74 <UART_SetConfig+0x26c>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <UART_SetConfig+0x254>
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d58:	d006      	beq.n	8006d68 <UART_SetConfig+0x260>
 8006d5a:	e00b      	b.n	8006d74 <UART_SetConfig+0x26c>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e076      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d62:	2302      	movs	r3, #2
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e073      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e070      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e06d      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d74:	2310      	movs	r3, #16
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e06a      	b.n	8006e50 <UART_SetConfig+0x348>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <UART_SetConfig+0x2e4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d138      	bne.n	8006df6 <UART_SetConfig+0x2ee>
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d92:	d017      	beq.n	8006dc4 <UART_SetConfig+0x2bc>
 8006d94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d98:	d82a      	bhi.n	8006df0 <UART_SetConfig+0x2e8>
 8006d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9e:	d00b      	beq.n	8006db8 <UART_SetConfig+0x2b0>
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da4:	d824      	bhi.n	8006df0 <UART_SetConfig+0x2e8>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <UART_SetConfig+0x2aa>
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dae:	d006      	beq.n	8006dbe <UART_SetConfig+0x2b6>
 8006db0:	e01e      	b.n	8006df0 <UART_SetConfig+0x2e8>
 8006db2:	2300      	movs	r3, #0
 8006db4:	77fb      	strb	r3, [r7, #31]
 8006db6:	e04b      	b.n	8006e50 <UART_SetConfig+0x348>
 8006db8:	2302      	movs	r3, #2
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e048      	b.n	8006e50 <UART_SetConfig+0x348>
 8006dbe:	2304      	movs	r3, #4
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e045      	b.n	8006e50 <UART_SetConfig+0x348>
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e042      	b.n	8006e50 <UART_SetConfig+0x348>
 8006dca:	bf00      	nop
 8006dcc:	efff69f3 	.word	0xefff69f3
 8006dd0:	40011000 	.word	0x40011000
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	40004400 	.word	0x40004400
 8006ddc:	40004800 	.word	0x40004800
 8006de0:	40004c00 	.word	0x40004c00
 8006de4:	40005000 	.word	0x40005000
 8006de8:	40011400 	.word	0x40011400
 8006dec:	40007800 	.word	0x40007800
 8006df0:	2310      	movs	r3, #16
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e02c      	b.n	8006e50 <UART_SetConfig+0x348>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a72      	ldr	r2, [pc, #456]	; (8006fc4 <UART_SetConfig+0x4bc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d125      	bne.n	8006e4c <UART_SetConfig+0x344>
 8006e00:	4b71      	ldr	r3, [pc, #452]	; (8006fc8 <UART_SetConfig+0x4c0>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e0e:	d017      	beq.n	8006e40 <UART_SetConfig+0x338>
 8006e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e14:	d817      	bhi.n	8006e46 <UART_SetConfig+0x33e>
 8006e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e1a:	d00b      	beq.n	8006e34 <UART_SetConfig+0x32c>
 8006e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e20:	d811      	bhi.n	8006e46 <UART_SetConfig+0x33e>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <UART_SetConfig+0x326>
 8006e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e2a:	d006      	beq.n	8006e3a <UART_SetConfig+0x332>
 8006e2c:	e00b      	b.n	8006e46 <UART_SetConfig+0x33e>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e00d      	b.n	8006e50 <UART_SetConfig+0x348>
 8006e34:	2302      	movs	r3, #2
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e00a      	b.n	8006e50 <UART_SetConfig+0x348>
 8006e3a:	2304      	movs	r3, #4
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e007      	b.n	8006e50 <UART_SetConfig+0x348>
 8006e40:	2308      	movs	r3, #8
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e004      	b.n	8006e50 <UART_SetConfig+0x348>
 8006e46:	2310      	movs	r3, #16
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e001      	b.n	8006e50 <UART_SetConfig+0x348>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e58:	d15b      	bne.n	8006f12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d828      	bhi.n	8006eb2 <UART_SetConfig+0x3aa>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <UART_SetConfig+0x360>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e8d 	.word	0x08006e8d
 8006e6c:	08006e95 	.word	0x08006e95
 8006e70:	08006e9d 	.word	0x08006e9d
 8006e74:	08006eb3 	.word	0x08006eb3
 8006e78:	08006ea3 	.word	0x08006ea3
 8006e7c:	08006eb3 	.word	0x08006eb3
 8006e80:	08006eb3 	.word	0x08006eb3
 8006e84:	08006eb3 	.word	0x08006eb3
 8006e88:	08006eab 	.word	0x08006eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e8c:	f7fe fb7a 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8006e90:	61b8      	str	r0, [r7, #24]
        break;
 8006e92:	e013      	b.n	8006ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e94:	f7fe fb8a 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 8006e98:	61b8      	str	r0, [r7, #24]
        break;
 8006e9a:	e00f      	b.n	8006ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e9c:	4b4b      	ldr	r3, [pc, #300]	; (8006fcc <UART_SetConfig+0x4c4>)
 8006e9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ea0:	e00c      	b.n	8006ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea2:	f7fe fa9d 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8006ea6:	61b8      	str	r0, [r7, #24]
        break;
 8006ea8:	e008      	b.n	8006ebc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eae:	61bb      	str	r3, [r7, #24]
        break;
 8006eb0:	e004      	b.n	8006ebc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d074      	beq.n	8006fac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	005a      	lsls	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	441a      	add	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	d916      	bls.n	8006f0c <UART_SetConfig+0x404>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d212      	bcs.n	8006f0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f023 030f 	bic.w	r3, r3, #15
 8006eee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	89fa      	ldrh	r2, [r7, #14]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	e04f      	b.n	8006fac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	77bb      	strb	r3, [r7, #30]
 8006f10:	e04c      	b.n	8006fac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f12:	7ffb      	ldrb	r3, [r7, #31]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d828      	bhi.n	8006f6a <UART_SetConfig+0x462>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <UART_SetConfig+0x418>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f45 	.word	0x08006f45
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	08006f6b 	.word	0x08006f6b
 8006f30:	08006f5b 	.word	0x08006f5b
 8006f34:	08006f6b 	.word	0x08006f6b
 8006f38:	08006f6b 	.word	0x08006f6b
 8006f3c:	08006f6b 	.word	0x08006f6b
 8006f40:	08006f63 	.word	0x08006f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fe fb1e 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8006f48:	61b8      	str	r0, [r7, #24]
        break;
 8006f4a:	e013      	b.n	8006f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f4c:	f7fe fb2e 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 8006f50:	61b8      	str	r0, [r7, #24]
        break;
 8006f52:	e00f      	b.n	8006f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f54:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <UART_SetConfig+0x4c4>)
 8006f56:	61bb      	str	r3, [r7, #24]
        break;
 8006f58:	e00c      	b.n	8006f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5a:	f7fe fa41 	bl	80053e0 <HAL_RCC_GetSysClockFreq>
 8006f5e:	61b8      	str	r0, [r7, #24]
        break;
 8006f60:	e008      	b.n	8006f74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	61bb      	str	r3, [r7, #24]
        break;
 8006f68:	e004      	b.n	8006f74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	77bb      	strb	r3, [r7, #30]
        break;
 8006f72:	bf00      	nop
    }

    if (pclk != 0U)
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	085a      	lsrs	r2, r3, #1
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b0f      	cmp	r3, #15
 8006f92:	d909      	bls.n	8006fa8 <UART_SetConfig+0x4a0>
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9a:	d205      	bcs.n	8006fa8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	e001      	b.n	8006fac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40007c00 	.word	0x40007c00
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	00f42400 	.word	0x00f42400

08006fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ce:	d10a      	bne.n	80070e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af02      	add	r7, sp, #8
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007124:	f7fa f836 	bl	8001194 <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d10e      	bne.n	8007156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f831 	bl	80071ae <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e027      	b.n	80071a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b04      	cmp	r3, #4
 8007162:	d10e      	bne.n	8007182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f81b 	bl	80071ae <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e011      	b.n	80071a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b09c      	sub	sp, #112	; 0x70
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	603b      	str	r3, [r7, #0]
 80071ba:	4613      	mov	r3, r2
 80071bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071be:	e0a7      	b.n	8007310 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	f000 80a3 	beq.w	8007310 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ca:	f7f9 ffe3 	bl	8001194 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d302      	bcc.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80071da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d13f      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071f4:	667b      	str	r3, [r7, #100]	; 0x64
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007200:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800720c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e6      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	663b      	str	r3, [r7, #96]	; 0x60
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007232:	64ba      	str	r2, [r7, #72]	; 0x48
 8007234:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e5      	bne.n	8007212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e068      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d050      	beq.n	8007310 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800727c:	d148      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007286:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800729c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
 80072a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e6      	bne.n	8007288 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3308      	adds	r3, #8
 80072d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072da:	623a      	str	r2, [r7, #32]
 80072dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	69f9      	ldr	r1, [r7, #28]
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e5      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e010      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4013      	ands	r3, r2
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	429a      	cmp	r2, r3
 800732c:	f43f af48 	beq.w	80071c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3770      	adds	r7, #112	; 0x70
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733a:	b480      	push	{r7}
 800733c:	b095      	sub	sp, #84	; 0x54
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007360:	643b      	str	r3, [r7, #64]	; 0x40
 8007362:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	61fb      	str	r3, [r7, #28]
   return(result);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	64bb      	str	r3, [r7, #72]	; 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d118      	bne.n	80073e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f023 0310 	bic.w	r3, r3, #16
 80073c4:	647b      	str	r3, [r7, #68]	; 0x44
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6979      	ldr	r1, [r7, #20]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	613b      	str	r3, [r7, #16]
   return(result);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073f6:	bf00      	nop
 80073f8:	3754      	adds	r7, #84	; 0x54
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fb51 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b088      	sub	sp, #32
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	60bb      	str	r3, [r7, #8]
   return(result);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6979      	ldr	r1, [r7, #20]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	613b      	str	r3, [r7, #16]
   return(result);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fb1d 	bl	8006ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3720      	adds	r7, #32
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007484:	b084      	sub	sp, #16
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	f107 001c 	add.w	r0, r7, #28
 8007492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2b01      	cmp	r3, #1
 800749a:	d120      	bne.n	80074de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	4b20      	ldr	r3, [pc, #128]	; (8007530 <USB_CoreInit+0xac>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d105      	bne.n	80074d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fbee 	bl	8008cb4 <USB_CoreReset>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e010      	b.n	8007500 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fbe2 	bl	8008cb4 <USB_CoreReset>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10b      	bne.n	800751e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f043 0206 	orr.w	r2, r3, #6
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800752a:	b004      	add	sp, #16
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	ffbdffbf 	.word	0xffbdffbf

08007534 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d165      	bne.n	8007614 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4a41      	ldr	r2, [pc, #260]	; (8007650 <USB_SetTurnaroundTime+0x11c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d906      	bls.n	800755e <USB_SetTurnaroundTime+0x2a>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a40      	ldr	r2, [pc, #256]	; (8007654 <USB_SetTurnaroundTime+0x120>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d202      	bcs.n	800755e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007558:	230f      	movs	r3, #15
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	e062      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <USB_SetTurnaroundTime+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d306      	bcc.n	8007574 <USB_SetTurnaroundTime+0x40>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <USB_SetTurnaroundTime+0x124>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d202      	bcs.n	8007574 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800756e:	230e      	movs	r3, #14
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e057      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4a38      	ldr	r2, [pc, #224]	; (8007658 <USB_SetTurnaroundTime+0x124>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d306      	bcc.n	800758a <USB_SetTurnaroundTime+0x56>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a37      	ldr	r2, [pc, #220]	; (800765c <USB_SetTurnaroundTime+0x128>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d202      	bcs.n	800758a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007584:	230d      	movs	r3, #13
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e04c      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4a33      	ldr	r2, [pc, #204]	; (800765c <USB_SetTurnaroundTime+0x128>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d306      	bcc.n	80075a0 <USB_SetTurnaroundTime+0x6c>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a32      	ldr	r2, [pc, #200]	; (8007660 <USB_SetTurnaroundTime+0x12c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d802      	bhi.n	80075a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800759a:	230c      	movs	r3, #12
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e041      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4a2f      	ldr	r2, [pc, #188]	; (8007660 <USB_SetTurnaroundTime+0x12c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d906      	bls.n	80075b6 <USB_SetTurnaroundTime+0x82>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a2e      	ldr	r2, [pc, #184]	; (8007664 <USB_SetTurnaroundTime+0x130>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d802      	bhi.n	80075b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80075b0:	230b      	movs	r3, #11
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e036      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <USB_SetTurnaroundTime+0x130>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d906      	bls.n	80075cc <USB_SetTurnaroundTime+0x98>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a29      	ldr	r2, [pc, #164]	; (8007668 <USB_SetTurnaroundTime+0x134>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d802      	bhi.n	80075cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075c6:	230a      	movs	r3, #10
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e02b      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a26      	ldr	r2, [pc, #152]	; (8007668 <USB_SetTurnaroundTime+0x134>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d906      	bls.n	80075e2 <USB_SetTurnaroundTime+0xae>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a25      	ldr	r2, [pc, #148]	; (800766c <USB_SetTurnaroundTime+0x138>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d202      	bcs.n	80075e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075dc:	2309      	movs	r3, #9
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e020      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <USB_SetTurnaroundTime+0x138>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d306      	bcc.n	80075f8 <USB_SetTurnaroundTime+0xc4>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4a20      	ldr	r2, [pc, #128]	; (8007670 <USB_SetTurnaroundTime+0x13c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d802      	bhi.n	80075f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075f2:	2308      	movs	r3, #8
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e015      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <USB_SetTurnaroundTime+0x13c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d906      	bls.n	800760e <USB_SetTurnaroundTime+0xda>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <USB_SetTurnaroundTime+0x140>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d202      	bcs.n	800760e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007608:	2307      	movs	r3, #7
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e00a      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800760e:	2306      	movs	r3, #6
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	e007      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800761a:	2309      	movs	r3, #9
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e001      	b.n	8007624 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007620:	2309      	movs	r3, #9
 8007622:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	029b      	lsls	r3, r3, #10
 8007638:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800763c:	431a      	orrs	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	00d8acbf 	.word	0x00d8acbf
 8007654:	00e4e1c0 	.word	0x00e4e1c0
 8007658:	00f42400 	.word	0x00f42400
 800765c:	01067380 	.word	0x01067380
 8007660:	011a499f 	.word	0x011a499f
 8007664:	01312cff 	.word	0x01312cff
 8007668:	014ca43f 	.word	0x014ca43f
 800766c:	016e3600 	.word	0x016e3600
 8007670:	01a6ab1f 	.word	0x01a6ab1f
 8007674:	01e84800 	.word	0x01e84800

08007678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f043 0201 	orr.w	r2, r3, #1
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d115      	bne.n	800770a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076ea:	2001      	movs	r0, #1
 80076ec:	f7f9 fd5e 	bl	80011ac <HAL_Delay>
      ms++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fa4b 	bl	8008b92 <USB_GetMode>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d01e      	beq.n	8007740 <USB_SetCurrentMode+0x84>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b31      	cmp	r3, #49	; 0x31
 8007706:	d9f0      	bls.n	80076ea <USB_SetCurrentMode+0x2e>
 8007708:	e01a      	b.n	8007740 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d115      	bne.n	800773c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800771c:	2001      	movs	r0, #1
 800771e:	f7f9 fd45 	bl	80011ac <HAL_Delay>
      ms++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fa32 	bl	8008b92 <USB_GetMode>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <USB_SetCurrentMode+0x84>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b31      	cmp	r3, #49	; 0x31
 8007738:	d9f0      	bls.n	800771c <USB_SetCurrentMode+0x60>
 800773a:	e001      	b.n	8007740 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e005      	b.n	800774c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b32      	cmp	r3, #50	; 0x32
 8007744:	d101      	bne.n	800774a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007754:	b084      	sub	sp, #16
 8007756:	b580      	push	{r7, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	e009      	b.n	8007788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3340      	adds	r3, #64	; 0x40
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2b0e      	cmp	r3, #14
 800778c:	d9f2      	bls.n	8007774 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11c      	bne.n	80077ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e005      	b.n	80077da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	4619      	mov	r1, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	461a      	mov	r2, r3
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d10c      	bne.n	800781a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f965 	bl	8007ad8 <USB_SetDevSpeed>
 800780e:	e008      	b.n	8007822 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007810:	2101      	movs	r1, #1
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f960 	bl	8007ad8 <USB_SetDevSpeed>
 8007818:	e003      	b.n	8007822 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800781a:	2103      	movs	r1, #3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f95b 	bl	8007ad8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007822:	2110      	movs	r1, #16
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8f3 	bl	8007a10 <USB_FlushTxFifo>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f91f 	bl	8007a78 <USB_FlushRxFifo>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	461a      	mov	r2, r3
 8007858:	2300      	movs	r3, #0
 800785a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	461a      	mov	r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	e043      	b.n	80078f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007884:	d118      	bne.n	80078b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e013      	b.n	80078ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e008      	b.n	80078ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d6:	461a      	mov	r2, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	461a      	mov	r2, r3
 80078ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3301      	adds	r3, #1
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3b7      	bcc.n	800786e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078fe:	2300      	movs	r3, #0
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	e043      	b.n	800798c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800791a:	d118      	bne.n	800794e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e013      	b.n	8007960 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	461a      	mov	r2, r3
 8007946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	e008      	b.n	8007960 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	461a      	mov	r2, r3
 800795c:	2300      	movs	r3, #0
 800795e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	461a      	mov	r2, r3
 8007980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	429a      	cmp	r2, r3
 8007992:	d3b7      	bcc.n	8007904 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f043 0210 	orr.w	r2, r3, #16
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <USB_DevInit+0x2b4>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f043 0208 	orr.w	r2, r3, #8
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d105      	bne.n	80079f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <USB_DevInit+0x2b8>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a04:	b004      	add	sp, #16
 8007a06:	4770      	bx	lr
 8007a08:	803c3800 	.word	0x803c3800
 8007a0c:	40000004 	.word	0x40000004

08007a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <USB_FlushTxFifo+0x64>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d901      	bls.n	8007a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e01b      	b.n	8007a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	daf2      	bge.n	8007a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	019b      	lsls	r3, r3, #6
 8007a40:	f043 0220 	orr.w	r2, r3, #32
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <USB_FlushTxFifo+0x64>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e006      	b.n	8007a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d0f0      	beq.n	8007a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	00030d40 	.word	0x00030d40

08007a78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4a11      	ldr	r2, [pc, #68]	; (8007ad4 <USB_FlushRxFifo+0x5c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d901      	bls.n	8007a96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e018      	b.n	8007ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	daf2      	bge.n	8007a84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2210      	movs	r2, #16
 8007aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <USB_FlushRxFifo+0x5c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e006      	b.n	8007ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	2b10      	cmp	r3, #16
 8007ac4:	d0f0      	beq.n	8007aa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	00030d40 	.word	0x00030d40

08007ad8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af8:	4313      	orrs	r3, r2
 8007afa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b087      	sub	sp, #28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0306 	and.w	r3, r3, #6
 8007b22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
 8007b2e:	e00a      	b.n	8007b46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <USB_GetDevSpeed+0x32>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	d102      	bne.n	8007b42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	75fb      	strb	r3, [r7, #23]
 8007b40:	e001      	b.n	8007b46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b42:	230f      	movs	r3, #15
 8007b44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d139      	bne.n	8007be4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	68f9      	ldr	r1, [r7, #12]
 8007b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d153      	bne.n	8007c50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	059b      	lsls	r3, r3, #22
 8007bca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	0159      	lsls	r1, r3, #5
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <USB_ActivateEndpoint+0x10c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	600b      	str	r3, [r1, #0]
 8007be2:	e035      	b.n	8007c50 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d119      	bne.n	8007c50 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	0159      	lsls	r1, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <USB_ActivateEndpoint+0x10c>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	10008000 	.word	0x10008000

08007c64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d161      	bne.n	8007d44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c96:	d11f      	bne.n	8007cd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	2101      	movs	r1, #1
 8007cea:	fa01 f303 	lsl.w	r3, r1, r3
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	43db      	mvns	r3, r3
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	0159      	lsls	r1, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	440b      	add	r3, r1
 8007d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4b35      	ldr	r3, [pc, #212]	; (8007e14 <USB_DeactivateEndpoint+0x1b0>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]
 8007d42:	e060      	b.n	8007e06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5a:	d11f      	bne.n	8007d9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	2101      	movs	r1, #1
 8007dae:	fa01 f303 	lsl.w	r3, r1, r3
 8007db2:	041b      	lsls	r3, r3, #16
 8007db4:	43db      	mvns	r3, r3
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	69da      	ldr	r2, [r3, #28]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd6:	041b      	lsls	r3, r3, #16
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007de0:	4013      	ands	r3, r2
 8007de2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	0159      	lsls	r1, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	440b      	add	r3, r1
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <USB_DeactivateEndpoint+0x1b4>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	ec337800 	.word	0xec337800
 8007e18:	eff37800 	.word	0xeff37800

08007e1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	f040 8163 	bne.w	8008104 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d132      	bne.n	8007eac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	0159      	lsls	r1, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	440b      	add	r3, r1
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	4619      	mov	r1, r3
 8007e62:	4ba5      	ldr	r3, [pc, #660]	; (80080f8 <USB_EPStartXfer+0x2dc>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	0159      	lsls	r1, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4b95      	ldr	r3, [pc, #596]	; (80080fc <USB_EPStartXfer+0x2e0>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]
 8007eaa:	e074      	b.n	8007f96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	691a      	ldr	r2, [r3, #16]
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	0159      	lsls	r1, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4b8c      	ldr	r3, [pc, #560]	; (80080fc <USB_EPStartXfer+0x2e0>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	0159      	lsls	r1, r3, #5
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	440b      	add	r3, r1
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4b83      	ldr	r3, [pc, #524]	; (80080f8 <USB_EPStartXfer+0x2dc>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6999      	ldr	r1, [r3, #24]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	440b      	add	r3, r1
 8007f08:	1e59      	subs	r1, r3, #1
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f14:	4b7a      	ldr	r3, [pc, #488]	; (8008100 <USB_EPStartXfer+0x2e4>)
 8007f16:	400b      	ands	r3, r1
 8007f18:	69b9      	ldr	r1, [r7, #24]
 8007f1a:	0148      	lsls	r0, r1, #5
 8007f1c:	69f9      	ldr	r1, [r7, #28]
 8007f1e:	4401      	add	r1, r0
 8007f20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f24:	4313      	orrs	r3, r2
 8007f26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	691a      	ldr	r2, [r3, #16]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f3e:	69b9      	ldr	r1, [r7, #24]
 8007f40:	0148      	lsls	r0, r1, #5
 8007f42:	69f9      	ldr	r1, [r7, #28]
 8007f44:	4401      	add	r1, r0
 8007f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	791b      	ldrb	r3, [r3, #4]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d11f      	bne.n	8007f96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d14b      	bne.n	8008034 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d128      	bne.n	8008012 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	e00f      	b.n	8008012 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008010:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e137      	b.n	80082a4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	440a      	add	r2, r1
 800804a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800804e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008052:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	791b      	ldrb	r3, [r3, #4]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d015      	beq.n	8008088 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 811f 	beq.w	80082a4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	2101      	movs	r1, #1
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	69f9      	ldr	r1, [r7, #28]
 800807e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008082:	4313      	orrs	r3, r2
 8008084:	634b      	str	r3, [r1, #52]	; 0x34
 8008086:	e10d      	b.n	80082a4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e00f      	b.n	80080da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	0151      	lsls	r1, r2, #5
 80080cc:	69fa      	ldr	r2, [r7, #28]
 80080ce:	440a      	add	r2, r1
 80080d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6919      	ldr	r1, [r3, #16]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	b298      	uxth	r0, r3
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	4603      	mov	r3, r0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 faea 	bl	80086c8 <USB_WritePacket>
 80080f4:	e0d6      	b.n	80082a4 <USB_EPStartXfer+0x488>
 80080f6:	bf00      	nop
 80080f8:	e007ffff 	.word	0xe007ffff
 80080fc:	fff80000 	.word	0xfff80000
 8008100:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	0159      	lsls	r1, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	440b      	add	r3, r1
 800811a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811e:	4619      	mov	r1, r3
 8008120:	4b63      	ldr	r3, [pc, #396]	; (80082b0 <USB_EPStartXfer+0x494>)
 8008122:	4013      	ands	r3, r2
 8008124:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	0159      	lsls	r1, r3, #5
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	440b      	add	r3, r1
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	4619      	mov	r1, r3
 8008142:	4b5c      	ldr	r3, [pc, #368]	; (80082b4 <USB_EPStartXfer+0x498>)
 8008144:	4013      	ands	r3, r2
 8008146:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d123      	bne.n	8008198 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008166:	69b9      	ldr	r1, [r7, #24]
 8008168:	0148      	lsls	r0, r1, #5
 800816a:	69f9      	ldr	r1, [r7, #28]
 800816c:	4401      	add	r1, r0
 800816e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008172:	4313      	orrs	r3, r2
 8008174:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	69ba      	ldr	r2, [r7, #24]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008194:	6113      	str	r3, [r2, #16]
 8008196:	e037      	b.n	8008208 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	1e5a      	subs	r2, r3, #1
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	8afa      	ldrh	r2, [r7, #22]
 80081b4:	fb03 f202 	mul.w	r2, r3, r2
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	8afb      	ldrh	r3, [r7, #22]
 80081cc:	04d9      	lsls	r1, r3, #19
 80081ce:	4b3a      	ldr	r3, [pc, #232]	; (80082b8 <USB_EPStartXfer+0x49c>)
 80081d0:	400b      	ands	r3, r1
 80081d2:	69b9      	ldr	r1, [r7, #24]
 80081d4:	0148      	lsls	r0, r1, #5
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	4401      	add	r1, r0
 80081da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081de:	4313      	orrs	r3, r2
 80081e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	0148      	lsls	r0, r1, #5
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	4401      	add	r1, r0
 8008200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008204:	4313      	orrs	r3, r2
 8008206:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d10d      	bne.n	800822a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6919      	ldr	r1, [r3, #16]
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	460a      	mov	r2, r1
 8008228:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	791b      	ldrb	r3, [r3, #4]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d128      	bne.n	8008284 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d110      	bne.n	8008264 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	440a      	add	r2, r1
 8008258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e00f      	b.n	8008284 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008282:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	0151      	lsls	r1, r2, #5
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	440a      	add	r2, r1
 800829a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	fff80000 	.word	0xfff80000
 80082b4:	e007ffff 	.word	0xe007ffff
 80082b8:	1ff80000 	.word	0x1ff80000

080082bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	f040 80ce 	bne.w	800847a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d132      	bne.n	800834c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	0159      	lsls	r1, r3, #5
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	440b      	add	r3, r1
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	4619      	mov	r1, r3
 8008302:	4b9a      	ldr	r3, [pc, #616]	; (800856c <USB_EP0StartXfer+0x2b0>)
 8008304:	4013      	ands	r3, r2
 8008306:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	0159      	lsls	r1, r3, #5
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	440b      	add	r3, r1
 800833e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008342:	4619      	mov	r1, r3
 8008344:	4b8a      	ldr	r3, [pc, #552]	; (8008570 <USB_EP0StartXfer+0x2b4>)
 8008346:	4013      	ands	r3, r2
 8008348:	610b      	str	r3, [r1, #16]
 800834a:	e04e      	b.n	80083ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	0159      	lsls	r1, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	440b      	add	r3, r1
 8008362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008366:	4619      	mov	r1, r3
 8008368:	4b81      	ldr	r3, [pc, #516]	; (8008570 <USB_EP0StartXfer+0x2b4>)
 800836a:	4013      	ands	r3, r2
 800836c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	0159      	lsls	r1, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	440b      	add	r3, r1
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	4619      	mov	r1, r3
 800838a:	4b78      	ldr	r3, [pc, #480]	; (800856c <USB_EP0StartXfer+0x2b0>)
 800838c:	4013      	ands	r3, r2
 800838e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	429a      	cmp	r2, r3
 800839a:	d903      	bls.n	80083a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	0151      	lsls	r1, r2, #5
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	440a      	add	r2, r1
 80083ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083da:	6939      	ldr	r1, [r7, #16]
 80083dc:	0148      	lsls	r0, r1, #5
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	4401      	add	r1, r0
 80083e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083e6:	4313      	orrs	r3, r2
 80083e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d11e      	bne.n	800842e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	461a      	mov	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e097      	b.n	800855e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	0151      	lsls	r1, r2, #5
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	440a      	add	r2, r1
 8008444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008448:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800844c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8083 	beq.w	800855e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008474:	4313      	orrs	r3, r2
 8008476:	634b      	str	r3, [r1, #52]	; 0x34
 8008478:	e071      	b.n	800855e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	0159      	lsls	r1, r3, #5
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	440b      	add	r3, r1
 8008490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008494:	4619      	mov	r1, r3
 8008496:	4b36      	ldr	r3, [pc, #216]	; (8008570 <USB_EP0StartXfer+0x2b4>)
 8008498:	4013      	ands	r3, r2
 800849a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	0159      	lsls	r1, r3, #5
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	440b      	add	r3, r1
 80084b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b6:	4619      	mov	r1, r3
 80084b8:	4b2c      	ldr	r3, [pc, #176]	; (800856c <USB_EP0StartXfer+0x2b0>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800850c:	6939      	ldr	r1, [r7, #16]
 800850e:	0148      	lsls	r0, r1, #5
 8008510:	6979      	ldr	r1, [r7, #20]
 8008512:	4401      	add	r1, r0
 8008514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008518:	4313      	orrs	r3, r2
 800851a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10d      	bne.n	800853e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6919      	ldr	r1, [r3, #16]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	460a      	mov	r2, r1
 800853c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008558:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800855c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	e007ffff 	.word	0xe007ffff
 8008570:	fff80000 	.word	0xfff80000

08008574 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d14a      	bne.n	8008628 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085aa:	f040 8086 	bne.w	80086ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	7812      	ldrb	r2, [r2, #0]
 80085e6:	0151      	lsls	r1, r2, #5
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	440a      	add	r2, r1
 80085ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8008602:	4293      	cmp	r3, r2
 8008604:	d902      	bls.n	800860c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
          break;
 800860a:	e056      	b.n	80086ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008624:	d0e7      	beq.n	80085f6 <USB_EPStopXfer+0x82>
 8008626:	e048      	b.n	80086ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4413      	add	r3, r2
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800863c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008640:	d13b      	bne.n	80086ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008660:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008664:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008688:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f242 7210 	movw	r2, #10000	; 0x2710
 8008696:	4293      	cmp	r3, r2
 8008698:	d902      	bls.n	80086a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	75fb      	strb	r3, [r7, #23]
          break;
 800869e:	e00c      	b.n	80086ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b8:	d0e7      	beq.n	800868a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b089      	sub	sp, #36	; 0x24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	460b      	mov	r3, r1
 80086d8:	71fb      	strb	r3, [r7, #7]
 80086da:	4613      	mov	r3, r2
 80086dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d123      	bne.n	8008736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086ee:	88bb      	ldrh	r3, [r7, #4]
 80086f0:	3303      	adds	r3, #3
 80086f2:	089b      	lsrs	r3, r3, #2
 80086f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	e018      	b.n	800872e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	031a      	lsls	r2, r3, #12
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	4413      	add	r3, r2
 8008704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008708:	461a      	mov	r2, r3
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	3301      	adds	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	3301      	adds	r3, #1
 8008720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	3301      	adds	r3, #1
 8008726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	3301      	adds	r3, #1
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	429a      	cmp	r2, r3
 8008734:	d3e2      	bcc.n	80086fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3724      	adds	r7, #36	; 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008744:	b480      	push	{r7}
 8008746:	b08b      	sub	sp, #44	; 0x2c
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	089b      	lsrs	r3, r3, #2
 800875e:	b29b      	uxth	r3, r3
 8008760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800876a:	2300      	movs	r3, #0
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	e014      	b.n	800879a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	601a      	str	r2, [r3, #0]
    pDest++;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	3301      	adds	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	3301      	adds	r3, #1
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	3301      	adds	r3, #1
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	3301      	adds	r3, #1
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	3301      	adds	r3, #1
 8008798:	623b      	str	r3, [r7, #32]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d3e6      	bcc.n	8008770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087a2:	8bfb      	ldrh	r3, [r7, #30]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d01e      	beq.n	80087e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b2:	461a      	mov	r2, r3
 80087b4:	f107 0310 	add.w	r3, r7, #16
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	fa22 f303 	lsr.w	r3, r2, r3
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	701a      	strb	r2, [r3, #0]
      i++;
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	3301      	adds	r3, #1
 80087d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	3301      	adds	r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80087da:	8bfb      	ldrh	r3, [r7, #30]
 80087dc:	3b01      	subs	r3, #1
 80087de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087e0:	8bfb      	ldrh	r3, [r7, #30]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1ea      	bne.n	80087bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	372c      	adds	r7, #44	; 0x2c
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d12c      	bne.n	800886a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	db12      	blt.n	8008848 <USB_EPSetStall+0x54>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00f      	beq.n	8008848 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008842:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008846:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	0151      	lsls	r1, r2, #5
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	440a      	add	r2, r1
 800885e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e02b      	b.n	80088c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	db12      	blt.n	80088a2 <USB_EPSetStall+0xae>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00f      	beq.n	80088a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	0151      	lsls	r1, r2, #5
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	440a      	add	r2, r1
 80088b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d128      	bne.n	800893e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	0151      	lsls	r1, r2, #5
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	440a      	add	r2, r1
 8008902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800890a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	791b      	ldrb	r3, [r3, #4]
 8008910:	2b03      	cmp	r3, #3
 8008912:	d003      	beq.n	800891c <USB_EPClearStall+0x4c>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d138      	bne.n	800898e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e027      	b.n	800898e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008958:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800895c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	791b      	ldrb	r3, [r3, #4]
 8008962:	2b03      	cmp	r3, #3
 8008964:	d003      	beq.n	800896e <USB_EPClearStall+0x9e>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	791b      	ldrb	r3, [r3, #4]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d10f      	bne.n	800898e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089d0:	68f9      	ldr	r1, [r7, #12]
 80089d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a16:	f023 0302 	bic.w	r3, r3, #2
 8008a1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a58:	f043 0302 	orr.w	r3, r3, #2
 8008a5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4013      	ands	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a84:	68fb      	ldr	r3, [r7, #12]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	0c1b      	lsrs	r3, r3, #16
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	b29b      	uxth	r3, r3
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4013      	ands	r3, r2
 8008b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b28:	68bb      	ldr	r3, [r7, #8]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b087      	sub	sp, #28
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	fa22 f303 	lsr.w	r3, r2, r3
 8008b66:	01db      	lsls	r3, r3, #7
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4013      	ands	r3, r2
 8008b82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b84:	68bb      	ldr	r3, [r7, #8]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <USB_ActivateSetup+0x44>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	fffff800 	.word	0xfffff800

08008bf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	460b      	mov	r3, r1
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	333c      	adds	r3, #60	; 0x3c
 8008c0e:	3304      	adds	r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	4a26      	ldr	r2, [pc, #152]	; (8008cb0 <USB_EP0_OutStart+0xb8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d90a      	bls.n	8008c32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c2c:	d101      	bne.n	8008c32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e037      	b.n	8008ca2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c60:	f043 0318 	orr.w	r3, r3, #24
 8008c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d10f      	bne.n	8008ca0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	4f54300a 	.word	0x4f54300a

08008cb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <USB_CoreReset+0x64>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e01b      	b.n	8008d0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	daf2      	bge.n	8008cc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f043 0201 	orr.w	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3301      	adds	r3, #1
 8008cee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a09      	ldr	r2, [pc, #36]	; (8008d18 <USB_CoreReset+0x64>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d901      	bls.n	8008cfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e006      	b.n	8008d0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d0f0      	beq.n	8008cea <USB_CoreReset+0x36>

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	00030d40 	.word	0x00030d40

08008d1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d2c:	f005 fb4c 	bl	800e3c8 <malloc>
 8008d30:	4603      	mov	r3, r0
 8008d32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	32b0      	adds	r2, #176	; 0xb0
 8008d44:	2100      	movs	r1, #0
 8008d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e0d4      	b.n	8008ef8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d4e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d52:	2100      	movs	r1, #0
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f005 fc13 	bl	800e580 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	32b0      	adds	r2, #176	; 0xb0
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	32b0      	adds	r2, #176	; 0xb0
 8008d74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7c1b      	ldrb	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d138      	bne.n	8008df8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d86:	4b5e      	ldr	r3, [pc, #376]	; (8008f00 <USBD_CDC_Init+0x1e4>)
 8008d88:	7819      	ldrb	r1, [r3, #0]
 8008d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d8e:	2202      	movs	r2, #2
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f005 f976 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d96:	4b5a      	ldr	r3, [pc, #360]	; (8008f00 <USBD_CDC_Init+0x1e4>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	f003 020f 	and.w	r2, r3, #15
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	3324      	adds	r3, #36	; 0x24
 8008dac:	2201      	movs	r2, #1
 8008dae:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008db0:	4b54      	ldr	r3, [pc, #336]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008db2:	7819      	ldrb	r1, [r3, #0]
 8008db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008db8:	2202      	movs	r2, #2
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f005 f961 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008dc0:	4b50      	ldr	r3, [pc, #320]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dd8:	2201      	movs	r2, #1
 8008dda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ddc:	4b4a      	ldr	r3, [pc, #296]	; (8008f08 <USBD_CDC_Init+0x1ec>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	f003 020f 	and.w	r2, r3, #15
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	440b      	add	r3, r1
 8008df0:	3326      	adds	r3, #38	; 0x26
 8008df2:	2210      	movs	r2, #16
 8008df4:	801a      	strh	r2, [r3, #0]
 8008df6:	e035      	b.n	8008e64 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008df8:	4b41      	ldr	r3, [pc, #260]	; (8008f00 <USBD_CDC_Init+0x1e4>)
 8008dfa:	7819      	ldrb	r1, [r3, #0]
 8008dfc:	2340      	movs	r3, #64	; 0x40
 8008dfe:	2202      	movs	r2, #2
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f005 f93e 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e06:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <USBD_CDC_Init+0x1e4>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	f003 020f 	and.w	r2, r3, #15
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	3324      	adds	r3, #36	; 0x24
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e20:	4b38      	ldr	r3, [pc, #224]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008e22:	7819      	ldrb	r1, [r3, #0]
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	2202      	movs	r2, #2
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f005 f92a 	bl	800e082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e2e:	4b35      	ldr	r3, [pc, #212]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	f003 020f 	and.w	r2, r3, #15
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e46:	2201      	movs	r2, #1
 8008e48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e4a:	4b2f      	ldr	r3, [pc, #188]	; (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	f003 020f 	and.w	r2, r3, #15
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	3326      	adds	r3, #38	; 0x26
 8008e60:	2210      	movs	r2, #16
 8008e62:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e64:	4b28      	ldr	r3, [pc, #160]	; (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e66:	7819      	ldrb	r1, [r3, #0]
 8008e68:	2308      	movs	r3, #8
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f005 f908 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e72:	4b25      	ldr	r3, [pc, #148]	; (8008f08 <USBD_CDC_Init+0x1ec>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	f003 020f 	and.w	r2, r3, #15
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	3324      	adds	r3, #36	; 0x24
 8008e88:	2201      	movs	r2, #1
 8008e8a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	33b0      	adds	r3, #176	; 0xb0
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e018      	b.n	8008ef8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7c1b      	ldrb	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ece:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008ed0:	7819      	ldrb	r1, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f005 f9bf 	bl	800e260 <USBD_LL_PrepareReceive>
 8008ee2:	e008      	b.n	8008ef6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ee4:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <USBD_CDC_Init+0x1e8>)
 8008ee6:	7819      	ldrb	r1, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f005 f9b5 	bl	800e260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000093 	.word	0x20000093
 8008f04:	20000094 	.word	0x20000094
 8008f08:	20000095 	.word	0x20000095

08008f0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008f18:	4b3a      	ldr	r3, [pc, #232]	; (8009004 <USBD_CDC_DeInit+0xf8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f005 f8d5 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008f24:	4b37      	ldr	r3, [pc, #220]	; (8009004 <USBD_CDC_DeInit+0xf8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	3324      	adds	r3, #36	; 0x24
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f3e:	4b32      	ldr	r3, [pc, #200]	; (8009008 <USBD_CDC_DeInit+0xfc>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f005 f8c2 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <USBD_CDC_DeInit+0xfc>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	f003 020f 	and.w	r2, r3, #15
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f62:	2200      	movs	r2, #0
 8008f64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f66:	4b29      	ldr	r3, [pc, #164]	; (800900c <USBD_CDC_DeInit+0x100>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f005 f8ae 	bl	800e0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f72:	4b26      	ldr	r3, [pc, #152]	; (800900c <USBD_CDC_DeInit+0x100>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3324      	adds	r3, #36	; 0x24
 8008f88:	2200      	movs	r2, #0
 8008f8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	; (800900c <USBD_CDC_DeInit+0x100>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3326      	adds	r3, #38	; 0x26
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	32b0      	adds	r2, #176	; 0xb0
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01f      	beq.n	8008ff8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	33b0      	adds	r3, #176	; 0xb0
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	32b0      	adds	r2, #176	; 0xb0
 8008fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f005 f9fc 	bl	800e3d8 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	32b0      	adds	r2, #176	; 0xb0
 8008fea:	2100      	movs	r1, #0
 8008fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000093 	.word	0x20000093
 8009008:	20000094 	.word	0x20000094
 800900c:	20000095 	.word	0x20000095

08009010 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	32b0      	adds	r2, #176	; 0xb0
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e0bf      	b.n	80091c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009048:	2b00      	cmp	r3, #0
 800904a:	d050      	beq.n	80090ee <USBD_CDC_Setup+0xde>
 800904c:	2b20      	cmp	r3, #32
 800904e:	f040 80af 	bne.w	80091b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	88db      	ldrh	r3, [r3, #6]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d03a      	beq.n	80090d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b25b      	sxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	da1b      	bge.n	800909c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	33b0      	adds	r3, #176	; 0xb0
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800907a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	88d2      	ldrh	r2, [r2, #6]
 8009080:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b07      	cmp	r3, #7
 8009088:	bf28      	it	cs
 800908a:	2307      	movcs	r3, #7
 800908c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	89fa      	ldrh	r2, [r7, #14]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fdad 	bl	800abf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800909a:	e090      	b.n	80091be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	785a      	ldrb	r2, [r3, #1]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b3f      	cmp	r3, #63	; 0x3f
 80090ac:	d803      	bhi.n	80090b6 <USBD_CDC_Setup+0xa6>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	88db      	ldrh	r3, [r3, #6]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	e000      	b.n	80090b8 <USBD_CDC_Setup+0xa8>
 80090b6:	2240      	movs	r2, #64	; 0x40
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80090be:	6939      	ldr	r1, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80090c6:	461a      	mov	r2, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fdbf 	bl	800ac4c <USBD_CtlPrepareRx>
      break;
 80090ce:	e076      	b.n	80091be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	33b0      	adds	r3, #176	; 0xb0
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	7850      	ldrb	r0, [r2, #1]
 80090e6:	2200      	movs	r2, #0
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4798      	blx	r3
      break;
 80090ec:	e067      	b.n	80091be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b0b      	cmp	r3, #11
 80090f4:	d851      	bhi.n	800919a <USBD_CDC_Setup+0x18a>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <USBD_CDC_Setup+0xec>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	0800912d 	.word	0x0800912d
 8009100:	080091a9 	.word	0x080091a9
 8009104:	0800919b 	.word	0x0800919b
 8009108:	0800919b 	.word	0x0800919b
 800910c:	0800919b 	.word	0x0800919b
 8009110:	0800919b 	.word	0x0800919b
 8009114:	0800919b 	.word	0x0800919b
 8009118:	0800919b 	.word	0x0800919b
 800911c:	0800919b 	.word	0x0800919b
 8009120:	0800919b 	.word	0x0800919b
 8009124:	08009157 	.word	0x08009157
 8009128:	08009181 	.word	0x08009181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b03      	cmp	r3, #3
 8009136:	d107      	bne.n	8009148 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009138:	f107 030a 	add.w	r3, r7, #10
 800913c:	2202      	movs	r2, #2
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fd57 	bl	800abf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009146:	e032      	b.n	80091ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 fce1 	bl	800ab12 <USBD_CtlError>
            ret = USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	75fb      	strb	r3, [r7, #23]
          break;
 8009154:	e02b      	b.n	80091ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d107      	bne.n	8009172 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009162:	f107 030d 	add.w	r3, r7, #13
 8009166:	2201      	movs	r2, #1
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fd42 	bl	800abf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009170:	e01d      	b.n	80091ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fccc 	bl	800ab12 <USBD_CtlError>
            ret = USBD_FAIL;
 800917a:	2303      	movs	r3, #3
 800917c:	75fb      	strb	r3, [r7, #23]
          break;
 800917e:	e016      	b.n	80091ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b03      	cmp	r3, #3
 800918a:	d00f      	beq.n	80091ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fcbf 	bl	800ab12 <USBD_CtlError>
            ret = USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009198:	e008      	b.n	80091ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fcb8 	bl	800ab12 <USBD_CtlError>
          ret = USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	75fb      	strb	r3, [r7, #23]
          break;
 80091a6:	e002      	b.n	80091ae <USBD_CDC_Setup+0x19e>
          break;
 80091a8:	bf00      	nop
 80091aa:	e008      	b.n	80091be <USBD_CDC_Setup+0x1ae>
          break;
 80091ac:	bf00      	nop
      }
      break;
 80091ae:	e006      	b.n	80091be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fcad 	bl	800ab12 <USBD_CtlError>
      ret = USBD_FAIL;
 80091b8:	2303      	movs	r3, #3
 80091ba:	75fb      	strb	r3, [r7, #23]
      break;
 80091bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32b0      	adds	r2, #176	; 0xb0
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e065      	b.n	80092be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	32b0      	adds	r2, #176	; 0xb0
 80091fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	f003 020f 	and.w	r2, r3, #15
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3318      	adds	r3, #24
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d02f      	beq.n	800927c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	3318      	adds	r3, #24
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	f003 010f 	and.w	r1, r3, #15
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	460b      	mov	r3, r1
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	440b      	add	r3, r1
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4403      	add	r3, r0
 8009244:	3348      	adds	r3, #72	; 0x48
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	fbb2 f1f3 	udiv	r1, r2, r3
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009252:	2b00      	cmp	r3, #0
 8009254:	d112      	bne.n	800927c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 020f 	and.w	r2, r3, #15
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	3318      	adds	r3, #24
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800926e:	78f9      	ldrb	r1, [r7, #3]
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f004 ffd2 	bl	800e21e <USBD_LL_Transmit>
 800927a:	e01f      	b.n	80092bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	33b0      	adds	r3, #176	; 0xb0
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d010      	beq.n	80092bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	33b0      	adds	r3, #176	; 0xb0
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	32b0      	adds	r2, #176	; 0xb0
 80092dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	32b0      	adds	r2, #176	; 0xb0
 80092ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e01a      	b.n	800932e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f004 ffd0 	bl	800e2a2 <USBD_LL_GetRxDataSize>
 8009302:	4602      	mov	r2, r0
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	33b0      	adds	r3, #176	; 0xb0
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009328:	4611      	mov	r1, r2
 800932a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	; 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	e025      	b.n	80093a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	33b0      	adds	r3, #176	; 0xb0
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01a      	beq.n	80093a2 <USBD_CDC_EP0_RxReady+0x6c>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009372:	2bff      	cmp	r3, #255	; 0xff
 8009374:	d015      	beq.n	80093a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	33b0      	adds	r3, #176	; 0xb0
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800938e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009396:	b292      	uxth	r2, r2
 8009398:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	22ff      	movs	r2, #255	; 0xff
 800939e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093b4:	2182      	movs	r1, #130	; 0x82
 80093b6:	4818      	ldr	r0, [pc, #96]	; (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093b8:	f000 fd49 	bl	8009e4e <USBD_GetEpDesc>
 80093bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093be:	2101      	movs	r1, #1
 80093c0:	4815      	ldr	r0, [pc, #84]	; (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093c2:	f000 fd44 	bl	8009e4e <USBD_GetEpDesc>
 80093c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093c8:	2181      	movs	r1, #129	; 0x81
 80093ca:	4813      	ldr	r0, [pc, #76]	; (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093cc:	f000 fd3f 	bl	8009e4e <USBD_GetEpDesc>
 80093d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2210      	movs	r2, #16
 80093dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d006      	beq.n	80093f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093ec:	711a      	strb	r2, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d006      	beq.n	8009406 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009400:	711a      	strb	r2, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2243      	movs	r2, #67	; 0x43
 800940a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000050 	.word	0x20000050

0800941c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009424:	2182      	movs	r1, #130	; 0x82
 8009426:	4818      	ldr	r0, [pc, #96]	; (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009428:	f000 fd11 	bl	8009e4e <USBD_GetEpDesc>
 800942c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800942e:	2101      	movs	r1, #1
 8009430:	4815      	ldr	r0, [pc, #84]	; (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009432:	f000 fd0c 	bl	8009e4e <USBD_GetEpDesc>
 8009436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009438:	2181      	movs	r1, #129	; 0x81
 800943a:	4813      	ldr	r0, [pc, #76]	; (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800943c:	f000 fd07 	bl	8009e4e <USBD_GetEpDesc>
 8009440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2210      	movs	r2, #16
 800944c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2200      	movs	r2, #0
 8009458:	711a      	strb	r2, [r3, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f042 0202 	orr.w	r2, r2, #2
 8009460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	711a      	strb	r2, [r3, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f042 0202 	orr.w	r2, r2, #2
 8009474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2243      	movs	r2, #67	; 0x43
 800947a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000050 	.word	0x20000050

0800948c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009494:	2182      	movs	r1, #130	; 0x82
 8009496:	4818      	ldr	r0, [pc, #96]	; (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009498:	f000 fcd9 	bl	8009e4e <USBD_GetEpDesc>
 800949c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800949e:	2101      	movs	r1, #1
 80094a0:	4815      	ldr	r0, [pc, #84]	; (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094a2:	f000 fcd4 	bl	8009e4e <USBD_GetEpDesc>
 80094a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094a8:	2181      	movs	r1, #129	; 0x81
 80094aa:	4813      	ldr	r0, [pc, #76]	; (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094ac:	f000 fccf 	bl	8009e4e <USBD_GetEpDesc>
 80094b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2210      	movs	r2, #16
 80094bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094cc:	711a      	strb	r2, [r3, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d006      	beq.n	80094e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e0:	711a      	strb	r2, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2243      	movs	r2, #67	; 0x43
 80094ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094ec:	4b02      	ldr	r3, [pc, #8]	; (80094f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000050 	.word	0x20000050

080094fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220a      	movs	r2, #10
 8009508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	2000000c 	.word	0x2000000c

0800951c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	e009      	b.n	8009544 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	33b0      	adds	r3, #176	; 0xb0
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	32b0      	adds	r2, #176	; 0xb0
 8009566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009572:	2303      	movs	r3, #3
 8009574:	e008      	b.n	8009588 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	32b0      	adds	r2, #176	; 0xb0
 80095a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e004      	b.n	80095c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	32b0      	adds	r2, #176	; 0xb0
 80095e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e025      	b.n	8009642 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d11f      	bne.n	8009640 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2201      	movs	r2, #1
 8009604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009608:	4b10      	ldr	r3, [pc, #64]	; (800964c <USBD_CDC_TransmitPacket+0x7c>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4403      	add	r3, r0
 8009622:	3318      	adds	r3, #24
 8009624:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <USBD_CDC_TransmitPacket+0x7c>)
 8009628:	7819      	ldrb	r1, [r3, #0]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f004 fdf1 	bl	800e21e <USBD_LL_Transmit>

    ret = USBD_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000093 	.word	0x20000093

08009650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32b0      	adds	r2, #176	; 0xb0
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	32b0      	adds	r2, #176	; 0xb0
 8009672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	e018      	b.n	80096b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	7c1b      	ldrb	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009686:	4b0c      	ldr	r3, [pc, #48]	; (80096b8 <USBD_CDC_ReceivePacket+0x68>)
 8009688:	7819      	ldrb	r1, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f004 fde3 	bl	800e260 <USBD_LL_PrepareReceive>
 800969a:	e008      	b.n	80096ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <USBD_CDC_ReceivePacket+0x68>)
 800969e:	7819      	ldrb	r1, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096a6:	2340      	movs	r3, #64	; 0x40
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f004 fdd9 	bl	800e260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20000094 	.word	0x20000094

080096bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e01f      	b.n	8009714 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	79fa      	ldrb	r2, [r7, #7]
 8009706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f004 fc53 	bl	800dfb4 <USBD_LL_Init>
 800970e:	4603      	mov	r3, r0
 8009710:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009730:	2303      	movs	r3, #3
 8009732:	e025      	b.n	8009780 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	32ae      	adds	r2, #174	; 0xae
 8009746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00f      	beq.n	8009770 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	32ae      	adds	r2, #174	; 0xae
 800975a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	f107 020e 	add.w	r2, r7, #14
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	4602      	mov	r2, r0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f004 fc5b 	bl	800e04c <USBD_LL_Start>
 8009796:	4603      	mov	r3, r0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009814:	2303      	movs	r3, #3
 8009816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f001 f932 	bl	800aa9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009848:	461a      	mov	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	2b02      	cmp	r3, #2
 800985c:	d01a      	beq.n	8009894 <USBD_LL_SetupStage+0x72>
 800985e:	2b02      	cmp	r3, #2
 8009860:	d822      	bhi.n	80098a8 <USBD_LL_SetupStage+0x86>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <USBD_LL_SetupStage+0x4a>
 8009866:	2b01      	cmp	r3, #1
 8009868:	d00a      	beq.n	8009880 <USBD_LL_SetupStage+0x5e>
 800986a:	e01d      	b.n	80098a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb5f 	bl	8009f38 <USBD_StdDevReq>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
      break;
 800987e:	e020      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fbc7 	bl	800a01c <USBD_StdItfReq>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]
      break;
 8009892:	e016      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fc29 	bl	800a0f4 <USBD_StdEPReq>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
      break;
 80098a6:	e00c      	b.n	80098c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f004 fc28 	bl	800e10c <USBD_LL_StallEP>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]
      break;
 80098c0:	bf00      	nop
  }

  return ret;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	460b      	mov	r3, r1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d16e      	bne.n	80099c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f040 8098 	bne.w	8009a28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d913      	bls.n	800992c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	4293      	cmp	r3, r2
 800991c:	bf28      	it	cs
 800991e:	4613      	movcs	r3, r2
 8009920:	461a      	mov	r2, r3
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f001 f9ae 	bl	800ac86 <USBD_CtlContinueRx>
 800992a:	e07d      	b.n	8009a28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2b02      	cmp	r3, #2
 8009938:	d014      	beq.n	8009964 <USBD_LL_DataOutStage+0x98>
 800993a:	2b02      	cmp	r3, #2
 800993c:	d81d      	bhi.n	800997a <USBD_LL_DataOutStage+0xae>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <USBD_LL_DataOutStage+0x7c>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d003      	beq.n	800994e <USBD_LL_DataOutStage+0x82>
 8009946:	e018      	b.n	800997a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	75bb      	strb	r3, [r7, #22]
            break;
 800994c:	e018      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009954:	b2db      	uxtb	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fa5e 	bl	8009e1a <USBD_CoreFindIF>
 800995e:	4603      	mov	r3, r0
 8009960:	75bb      	strb	r3, [r7, #22]
            break;
 8009962:	e00d      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4619      	mov	r1, r3
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fa60 	bl	8009e34 <USBD_CoreFindEP>
 8009974:	4603      	mov	r3, r0
 8009976:	75bb      	strb	r3, [r7, #22]
            break;
 8009978:	e002      	b.n	8009980 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	75bb      	strb	r3, [r7, #22]
            break;
 800997e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009980:	7dbb      	ldrb	r3, [r7, #22]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d119      	bne.n	80099ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d113      	bne.n	80099ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009992:	7dba      	ldrb	r2, [r7, #22]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	32ae      	adds	r2, #174	; 0xae
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00b      	beq.n	80099ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80099a2:	7dba      	ldrb	r2, [r7, #22]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80099aa:	7dba      	ldrb	r2, [r7, #22]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	32ae      	adds	r2, #174	; 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f001 f974 	bl	800aca8 <USBD_CtlSendStatus>
 80099c0:	e032      	b.n	8009a28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	4619      	mov	r1, r3
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fa31 	bl	8009e34 <USBD_CoreFindEP>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099d6:	7dbb      	ldrb	r3, [r7, #22]
 80099d8:	2bff      	cmp	r3, #255	; 0xff
 80099da:	d025      	beq.n	8009a28 <USBD_LL_DataOutStage+0x15c>
 80099dc:	7dbb      	ldrb	r3, [r7, #22]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d122      	bne.n	8009a28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d117      	bne.n	8009a1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099ee:	7dba      	ldrb	r2, [r7, #22]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	32ae      	adds	r2, #174	; 0xae
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00f      	beq.n	8009a1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099fe:	7dba      	ldrb	r2, [r7, #22]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009a06:	7dba      	ldrb	r2, [r7, #22]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	32ae      	adds	r2, #174	; 0xae
 8009a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	7afa      	ldrb	r2, [r7, #11]
 8009a14:	4611      	mov	r1, r2
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	4798      	blx	r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
 8009a26:	e000      	b.n	8009a2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d16f      	bne.n	8009b26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3314      	adds	r3, #20
 8009a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d15a      	bne.n	8009b0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d914      	bls.n	8009a8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f001 f8d6 	bl	800ac2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f004 fbeb 	bl	800e260 <USBD_LL_PrepareReceive>
 8009a8a:	e03f      	b.n	8009b0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d11c      	bne.n	8009ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d316      	bcc.n	8009ad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d20f      	bcs.n	8009ad2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f001 f8b7 	bl	800ac2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f004 fbc8 	bl	800e260 <USBD_LL_PrepareReceive>
 8009ad0:	e01c      	b.n	8009b0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d10f      	bne.n	8009afe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d009      	beq.n	8009afe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009afe:	2180      	movs	r1, #128	; 0x80
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f004 fb03 	bl	800e10c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f001 f8e1 	bl	800acce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d03a      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fe42 	bl	80097a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009b24:	e032      	b.n	8009b8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f97f 	bl	8009e34 <USBD_CoreFindEP>
 8009b36:	4603      	mov	r3, r0
 8009b38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	2bff      	cmp	r3, #255	; 0xff
 8009b3e:	d025      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d122      	bne.n	8009b8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d11c      	bne.n	8009b8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b52:	7dfa      	ldrb	r2, [r7, #23]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	32ae      	adds	r2, #174	; 0xae
 8009b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d014      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b62:	7dfa      	ldrb	r2, [r7, #23]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b6a:	7dfa      	ldrb	r2, [r7, #23]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	32ae      	adds	r2, #174	; 0xae
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	7afa      	ldrb	r2, [r7, #11]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	4798      	blx	r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b82:	7dbb      	ldrb	r3, [r7, #22]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b88:	7dbb      	ldrb	r3, [r7, #22]
 8009b8a:	e000      	b.n	8009b8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d014      	beq.n	8009bfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00e      	beq.n	8009bfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6852      	ldr	r2, [r2, #4]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	4611      	mov	r1, r2
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	4798      	blx	r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bfc:	2340      	movs	r3, #64	; 0x40
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2100      	movs	r1, #0
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f004 fa3d 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2240      	movs	r2, #64	; 0x40
 8009c14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2180      	movs	r1, #128	; 0x80
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f004 fa2f 	bl	800e082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2240      	movs	r2, #64	; 0x40
 8009c2e:	621a      	str	r2, [r3, #32]

  return ret;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2204      	movs	r2, #4
 8009c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d106      	bne.n	8009ca8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d110      	bne.n	8009cec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d005      	beq.n	8009cec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	32ae      	adds	r2, #174	; 0xae
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e01c      	b.n	8009d52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d115      	bne.n	8009d50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	32ae      	adds	r2, #174	; 0xae
 8009d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32ae      	adds	r2, #174	; 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	32ae      	adds	r2, #174	; 0xae
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e01c      	b.n	8009db6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d115      	bne.n	8009db4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	32ae      	adds	r2, #174	; 0xae
 8009d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	32ae      	adds	r2, #174	; 0xae
 8009da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	4611      	mov	r1, r2
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6852      	ldr	r2, [r2, #4]
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	4611      	mov	r1, r2
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b086      	sub	sp, #24
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	885b      	ldrh	r3, [r3, #2]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d920      	bls.n	8009eb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e7e:	e013      	b.n	8009ea8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e80:	f107 030a 	add.w	r3, r7, #10
 8009e84:	4619      	mov	r1, r3
 8009e86:	6978      	ldr	r0, [r7, #20]
 8009e88:	f000 f81b 	bl	8009ec2 <USBD_GetNextDesc>
 8009e8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d108      	bne.n	8009ea8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	789b      	ldrb	r3, [r3, #2]
 8009e9e:	78fa      	ldrb	r2, [r7, #3]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d008      	beq.n	8009eb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	897b      	ldrh	r3, [r7, #10]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d8e5      	bhi.n	8009e80 <USBD_GetEpDesc+0x32>
 8009eb4:	e000      	b.n	8009eb8 <USBD_GetEpDesc+0x6a>
          break;
 8009eb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009eb8:	693b      	ldr	r3, [r7, #16]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	881a      	ldrh	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4413      	add	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009eee:	68fb      	ldr	r3, [r7, #12]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	3301      	adds	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f1a:	8a3b      	ldrh	r3, [r7, #16]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b21a      	sxth	r2, r3
 8009f20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d005      	beq.n	8009f5e <USBD_StdDevReq+0x26>
 8009f52:	2b40      	cmp	r3, #64	; 0x40
 8009f54:	d857      	bhi.n	800a006 <USBD_StdDevReq+0xce>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00f      	beq.n	8009f7a <USBD_StdDevReq+0x42>
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d153      	bne.n	800a006 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	32ae      	adds	r2, #174	; 0xae
 8009f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
      break;
 8009f78:	e04a      	b.n	800a010 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d83b      	bhi.n	8009ffa <USBD_StdDevReq+0xc2>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <USBD_StdDevReq+0x50>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fdd 	.word	0x08009fdd
 8009f8c:	08009ff1 	.word	0x08009ff1
 8009f90:	08009ffb 	.word	0x08009ffb
 8009f94:	08009fe7 	.word	0x08009fe7
 8009f98:	08009ffb 	.word	0x08009ffb
 8009f9c:	08009fbb 	.word	0x08009fbb
 8009fa0:	08009fb1 	.word	0x08009fb1
 8009fa4:	08009ffb 	.word	0x08009ffb
 8009fa8:	08009fd3 	.word	0x08009fd3
 8009fac:	08009fc5 	.word	0x08009fc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa3c 	bl	800a430 <USBD_GetDescriptor>
          break;
 8009fb8:	e024      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fbcb 	bl	800a758 <USBD_SetAddress>
          break;
 8009fc2:	e01f      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fc0a 	bl	800a7e0 <USBD_SetConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
          break;
 8009fd0:	e018      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fcad 	bl	800a934 <USBD_GetConfig>
          break;
 8009fda:	e013      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fcde 	bl	800a9a0 <USBD_GetStatus>
          break;
 8009fe4:	e00e      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fd0d 	bl	800aa08 <USBD_SetFeature>
          break;
 8009fee:	e009      	b.n	800a004 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fd31 	bl	800aa5a <USBD_ClrFeature>
          break;
 8009ff8:	e004      	b.n	800a004 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fd88 	bl	800ab12 <USBD_CtlError>
          break;
 800a002:	bf00      	nop
      }
      break;
 800a004:	e004      	b.n	800a010 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fd82 	bl	800ab12 <USBD_CtlError>
      break;
 800a00e:	bf00      	nop
  }

  return ret;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop

0800a01c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a032:	2b40      	cmp	r3, #64	; 0x40
 800a034:	d005      	beq.n	800a042 <USBD_StdItfReq+0x26>
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	d852      	bhi.n	800a0e0 <USBD_StdItfReq+0xc4>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <USBD_StdItfReq+0x26>
 800a03e:	2b20      	cmp	r3, #32
 800a040:	d14e      	bne.n	800a0e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	3b01      	subs	r3, #1
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d840      	bhi.n	800a0d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	889b      	ldrh	r3, [r3, #4]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b01      	cmp	r3, #1
 800a058:	d836      	bhi.n	800a0c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	889b      	ldrh	r3, [r3, #4]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff fed9 	bl	8009e1a <USBD_CoreFindIF>
 800a068:	4603      	mov	r3, r0
 800a06a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2bff      	cmp	r3, #255	; 0xff
 800a070:	d01d      	beq.n	800a0ae <USBD_StdItfReq+0x92>
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d11a      	bne.n	800a0ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a078:	7bba      	ldrb	r2, [r7, #14]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	32ae      	adds	r2, #174	; 0xae
 800a07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00f      	beq.n	800a0a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a088:	7bba      	ldrb	r2, [r7, #14]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a090:	7bba      	ldrb	r2, [r7, #14]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	32ae      	adds	r2, #174	; 0xae
 800a096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a0a6:	e004      	b.n	800a0b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a0ac:	e001      	b.n	800a0b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	88db      	ldrh	r3, [r3, #6]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d110      	bne.n	800a0dc <USBD_StdItfReq+0xc0>
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10d      	bne.n	800a0dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fdf1 	bl	800aca8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a0c6:	e009      	b.n	800a0dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fd21 	bl	800ab12 <USBD_CtlError>
          break;
 800a0d0:	e004      	b.n	800a0dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fd1c 	bl	800ab12 <USBD_CtlError>
          break;
 800a0da:	e000      	b.n	800a0de <USBD_StdItfReq+0xc2>
          break;
 800a0dc:	bf00      	nop
      }
      break;
 800a0de:	e004      	b.n	800a0ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fd15 	bl	800ab12 <USBD_CtlError>
      break;
 800a0e8:	bf00      	nop
  }

  return ret;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	889b      	ldrh	r3, [r3, #4]
 800a106:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	d007      	beq.n	800a124 <USBD_StdEPReq+0x30>
 800a114:	2b40      	cmp	r3, #64	; 0x40
 800a116:	f200 817f 	bhi.w	800a418 <USBD_StdEPReq+0x324>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d02a      	beq.n	800a174 <USBD_StdEPReq+0x80>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	f040 817a 	bne.w	800a418 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7ff fe83 	bl	8009e34 <USBD_CoreFindEP>
 800a12e:	4603      	mov	r3, r0
 800a130:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a132:	7b7b      	ldrb	r3, [r7, #13]
 800a134:	2bff      	cmp	r3, #255	; 0xff
 800a136:	f000 8174 	beq.w	800a422 <USBD_StdEPReq+0x32e>
 800a13a:	7b7b      	ldrb	r3, [r7, #13]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8170 	bne.w	800a422 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a142:	7b7a      	ldrb	r2, [r7, #13]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a14a:	7b7a      	ldrb	r2, [r7, #13]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	32ae      	adds	r2, #174	; 0xae
 800a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 8163 	beq.w	800a422 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a15c:	7b7a      	ldrb	r2, [r7, #13]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	32ae      	adds	r2, #174	; 0xae
 800a162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
 800a16e:	4603      	mov	r3, r0
 800a170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a172:	e156      	b.n	800a422 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	785b      	ldrb	r3, [r3, #1]
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d008      	beq.n	800a18e <USBD_StdEPReq+0x9a>
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	f300 8145 	bgt.w	800a40c <USBD_StdEPReq+0x318>
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 809b 	beq.w	800a2be <USBD_StdEPReq+0x1ca>
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d03c      	beq.n	800a206 <USBD_StdEPReq+0x112>
 800a18c:	e13e      	b.n	800a40c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b02      	cmp	r3, #2
 800a198:	d002      	beq.n	800a1a0 <USBD_StdEPReq+0xac>
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d016      	beq.n	800a1cc <USBD_StdEPReq+0xd8>
 800a19e:	e02c      	b.n	800a1fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00d      	beq.n	800a1c2 <USBD_StdEPReq+0xce>
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b80      	cmp	r3, #128	; 0x80
 800a1aa:	d00a      	beq.n	800a1c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 ffab 	bl	800e10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1b6:	2180      	movs	r1, #128	; 0x80
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f003 ffa7 	bl	800e10c <USBD_LL_StallEP>
 800a1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1c0:	e020      	b.n	800a204 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 fca4 	bl	800ab12 <USBD_CtlError>
              break;
 800a1ca:	e01b      	b.n	800a204 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	885b      	ldrh	r3, [r3, #2]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10e      	bne.n	800a1f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <USBD_StdEPReq+0xfe>
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b80      	cmp	r3, #128	; 0x80
 800a1de:	d008      	beq.n	800a1f2 <USBD_StdEPReq+0xfe>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	88db      	ldrh	r3, [r3, #6]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f003 ff8d 	bl	800e10c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fd58 	bl	800aca8 <USBD_CtlSendStatus>

              break;
 800a1f8:	e004      	b.n	800a204 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc88 	bl	800ab12 <USBD_CtlError>
              break;
 800a202:	bf00      	nop
          }
          break;
 800a204:	e107      	b.n	800a416 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d002      	beq.n	800a218 <USBD_StdEPReq+0x124>
 800a212:	2b03      	cmp	r3, #3
 800a214:	d016      	beq.n	800a244 <USBD_StdEPReq+0x150>
 800a216:	e04b      	b.n	800a2b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00d      	beq.n	800a23a <USBD_StdEPReq+0x146>
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	2b80      	cmp	r3, #128	; 0x80
 800a222:	d00a      	beq.n	800a23a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f003 ff6f 	bl	800e10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f003 ff6b 	bl	800e10c <USBD_LL_StallEP>
 800a236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a238:	e040      	b.n	800a2bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fc68 	bl	800ab12 <USBD_CtlError>
              break;
 800a242:	e03b      	b.n	800a2bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	885b      	ldrh	r3, [r3, #2]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d136      	bne.n	800a2ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f003 ff75 	bl	800e14a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fd21 	bl	800aca8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fde2 	bl	8009e34 <USBD_CoreFindEP>
 800a270:	4603      	mov	r3, r0
 800a272:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a274:	7b7b      	ldrb	r3, [r7, #13]
 800a276:	2bff      	cmp	r3, #255	; 0xff
 800a278:	d01f      	beq.n	800a2ba <USBD_StdEPReq+0x1c6>
 800a27a:	7b7b      	ldrb	r3, [r7, #13]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11c      	bne.n	800a2ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a280:	7b7a      	ldrb	r2, [r7, #13]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a288:	7b7a      	ldrb	r2, [r7, #13]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	32ae      	adds	r2, #174	; 0xae
 800a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d010      	beq.n	800a2ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a298:	7b7a      	ldrb	r2, [r7, #13]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	32ae      	adds	r2, #174	; 0xae
 800a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a2ae:	e004      	b.n	800a2ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fc2d 	bl	800ab12 <USBD_CtlError>
              break;
 800a2b8:	e000      	b.n	800a2bc <USBD_StdEPReq+0x1c8>
              break;
 800a2ba:	bf00      	nop
          }
          break;
 800a2bc:	e0ab      	b.n	800a416 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d002      	beq.n	800a2d0 <USBD_StdEPReq+0x1dc>
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d032      	beq.n	800a334 <USBD_StdEPReq+0x240>
 800a2ce:	e097      	b.n	800a400 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <USBD_StdEPReq+0x1f2>
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
 800a2d8:	2b80      	cmp	r3, #128	; 0x80
 800a2da:	d004      	beq.n	800a2e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fc17 	bl	800ab12 <USBD_CtlError>
                break;
 800a2e4:	e091      	b.n	800a40a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da0b      	bge.n	800a306 <USBD_StdEPReq+0x212>
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	3310      	adds	r3, #16
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	4413      	add	r3, r2
 800a302:	3304      	adds	r3, #4
 800a304:	e00b      	b.n	800a31e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4413      	add	r3, r2
 800a31c:	3304      	adds	r3, #4
 800a31e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2202      	movs	r2, #2
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fc61 	bl	800abf4 <USBD_CtlSendData>
              break;
 800a332:	e06a      	b.n	800a40a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da11      	bge.n	800a360 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	f003 020f 	and.w	r2, r3, #15
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	3324      	adds	r3, #36	; 0x24
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d117      	bne.n	800a386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fbda 	bl	800ab12 <USBD_CtlError>
                  break;
 800a35e:	e054      	b.n	800a40a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	f003 020f 	and.w	r2, r3, #15
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4613      	mov	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	440b      	add	r3, r1
 800a372:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fbc7 	bl	800ab12 <USBD_CtlError>
                  break;
 800a384:	e041      	b.n	800a40a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da0b      	bge.n	800a3a6 <USBD_StdEPReq+0x2b2>
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	3310      	adds	r3, #16
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	e00b      	b.n	800a3be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	3304      	adds	r3, #4
 800a3be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <USBD_StdEPReq+0x2d8>
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	2b80      	cmp	r3, #128	; 0x80
 800a3ca:	d103      	bne.n	800a3d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	e00e      	b.n	800a3f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f003 fed5 	bl	800e188 <USBD_LL_IsStallEP>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	e002      	b.n	800a3f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fbfb 	bl	800abf4 <USBD_CtlSendData>
              break;
 800a3fe:	e004      	b.n	800a40a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fb85 	bl	800ab12 <USBD_CtlError>
              break;
 800a408:	bf00      	nop
          }
          break;
 800a40a:	e004      	b.n	800a416 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fb7f 	bl	800ab12 <USBD_CtlError>
          break;
 800a414:	bf00      	nop
      }
      break;
 800a416:	e005      	b.n	800a424 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fb79 	bl	800ab12 <USBD_CtlError>
      break;
 800a420:	e000      	b.n	800a424 <USBD_StdEPReq+0x330>
      break;
 800a422:	bf00      	nop
  }

  return ret;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	885b      	ldrh	r3, [r3, #2]
 800a44a:	0a1b      	lsrs	r3, r3, #8
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	2b0e      	cmp	r3, #14
 800a452:	f200 8152 	bhi.w	800a6fa <USBD_GetDescriptor+0x2ca>
 800a456:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <USBD_GetDescriptor+0x2c>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a4cd 	.word	0x0800a4cd
 800a460:	0800a4e5 	.word	0x0800a4e5
 800a464:	0800a525 	.word	0x0800a525
 800a468:	0800a6fb 	.word	0x0800a6fb
 800a46c:	0800a6fb 	.word	0x0800a6fb
 800a470:	0800a69b 	.word	0x0800a69b
 800a474:	0800a6c7 	.word	0x0800a6c7
 800a478:	0800a6fb 	.word	0x0800a6fb
 800a47c:	0800a6fb 	.word	0x0800a6fb
 800a480:	0800a6fb 	.word	0x0800a6fb
 800a484:	0800a6fb 	.word	0x0800a6fb
 800a488:	0800a6fb 	.word	0x0800a6fb
 800a48c:	0800a6fb 	.word	0x0800a6fb
 800a490:	0800a6fb 	.word	0x0800a6fb
 800a494:	0800a499 	.word	0x0800a499
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4ba:	e126      	b.n	800a70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fb27 	bl	800ab12 <USBD_CtlError>
        err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a4ca:	e11e      	b.n	800a70a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	7c12      	ldrb	r2, [r2, #16]
 800a4d8:	f107 0108 	add.w	r1, r7, #8
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	60f8      	str	r0, [r7, #12]
      break;
 800a4e2:	e112      	b.n	800a70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	7c1b      	ldrb	r3, [r3, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10d      	bne.n	800a508 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f4:	f107 0208 	add.w	r2, r7, #8
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	4798      	blx	r3
 800a4fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3301      	adds	r3, #1
 800a502:	2202      	movs	r2, #2
 800a504:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a506:	e100      	b.n	800a70a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	f107 0208 	add.w	r2, r7, #8
 800a514:	4610      	mov	r0, r2
 800a516:	4798      	blx	r3
 800a518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	2202      	movs	r2, #2
 800a520:	701a      	strb	r2, [r3, #0]
      break;
 800a522:	e0f2      	b.n	800a70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	885b      	ldrh	r3, [r3, #2]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	f200 80ac 	bhi.w	800a688 <USBD_GetDescriptor+0x258>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <USBD_GetDescriptor+0x108>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a551 	.word	0x0800a551
 800a53c:	0800a585 	.word	0x0800a585
 800a540:	0800a5b9 	.word	0x0800a5b9
 800a544:	0800a5ed 	.word	0x0800a5ed
 800a548:	0800a621 	.word	0x0800a621
 800a54c:	0800a655 	.word	0x0800a655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	7c12      	ldrb	r2, [r2, #16]
 800a568:	f107 0108 	add.w	r1, r7, #8
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a572:	e091      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 facb 	bl	800ab12 <USBD_CtlError>
            err++;
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	3301      	adds	r3, #1
 800a580:	72fb      	strb	r3, [r7, #11]
          break;
 800a582:	e089      	b.n	800a698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	7c12      	ldrb	r2, [r2, #16]
 800a59c:	f107 0108 	add.w	r1, r7, #8
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4798      	blx	r3
 800a5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5a6:	e077      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fab1 	bl	800ab12 <USBD_CtlError>
            err++;
 800a5b0:	7afb      	ldrb	r3, [r7, #11]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5b6:	e06f      	b.n	800a698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00b      	beq.n	800a5dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	7c12      	ldrb	r2, [r2, #16]
 800a5d0:	f107 0108 	add.w	r1, r7, #8
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	4798      	blx	r3
 800a5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5da:	e05d      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa97 	bl	800ab12 <USBD_CtlError>
            err++;
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ea:	e055      	b.n	800a698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00b      	beq.n	800a610 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	7c12      	ldrb	r2, [r2, #16]
 800a604:	f107 0108 	add.w	r1, r7, #8
 800a608:	4610      	mov	r0, r2
 800a60a:	4798      	blx	r3
 800a60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a60e:	e043      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa7d 	bl	800ab12 <USBD_CtlError>
            err++;
 800a618:	7afb      	ldrb	r3, [r7, #11]
 800a61a:	3301      	adds	r3, #1
 800a61c:	72fb      	strb	r3, [r7, #11]
          break;
 800a61e:	e03b      	b.n	800a698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00b      	beq.n	800a644 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	7c12      	ldrb	r2, [r2, #16]
 800a638:	f107 0108 	add.w	r1, r7, #8
 800a63c:	4610      	mov	r0, r2
 800a63e:	4798      	blx	r3
 800a640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a642:	e029      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fa63 	bl	800ab12 <USBD_CtlError>
            err++;
 800a64c:	7afb      	ldrb	r3, [r7, #11]
 800a64e:	3301      	adds	r3, #1
 800a650:	72fb      	strb	r3, [r7, #11]
          break;
 800a652:	e021      	b.n	800a698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	7c12      	ldrb	r2, [r2, #16]
 800a66c:	f107 0108 	add.w	r1, r7, #8
 800a670:	4610      	mov	r0, r2
 800a672:	4798      	blx	r3
 800a674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a676:	e00f      	b.n	800a698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fa49 	bl	800ab12 <USBD_CtlError>
            err++;
 800a680:	7afb      	ldrb	r3, [r7, #11]
 800a682:	3301      	adds	r3, #1
 800a684:	72fb      	strb	r3, [r7, #11]
          break;
 800a686:	e007      	b.n	800a698 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa41 	bl	800ab12 <USBD_CtlError>
          err++;
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	3301      	adds	r3, #1
 800a694:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a696:	bf00      	nop
      }
      break;
 800a698:	e037      	b.n	800a70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	7c1b      	ldrb	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6aa:	f107 0208 	add.w	r2, r7, #8
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	4798      	blx	r3
 800a6b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6b4:	e029      	b.n	800a70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fa2a 	bl	800ab12 <USBD_CtlError>
        err++;
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a6c4:	e021      	b.n	800a70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	7c1b      	ldrb	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d6:	f107 0208 	add.w	r2, r7, #8
 800a6da:	4610      	mov	r0, r2
 800a6dc:	4798      	blx	r3
 800a6de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	2207      	movs	r2, #7
 800a6e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6e8:	e00f      	b.n	800a70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fa10 	bl	800ab12 <USBD_CtlError>
        err++;
 800a6f2:	7afb      	ldrb	r3, [r7, #11]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a6f8:	e007      	b.n	800a70a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fa08 	bl	800ab12 <USBD_CtlError>
      err++;
 800a702:	7afb      	ldrb	r3, [r7, #11]
 800a704:	3301      	adds	r3, #1
 800a706:	72fb      	strb	r3, [r7, #11]
      break;
 800a708:	bf00      	nop
  }

  if (err != 0U)
 800a70a:	7afb      	ldrb	r3, [r7, #11]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d11e      	bne.n	800a74e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	88db      	ldrh	r3, [r3, #6]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d016      	beq.n	800a746 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a718:	893b      	ldrh	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	88da      	ldrh	r2, [r3, #6]
 800a722:	893b      	ldrh	r3, [r7, #8]
 800a724:	4293      	cmp	r3, r2
 800a726:	bf28      	it	cs
 800a728:	4613      	movcs	r3, r2
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a72e:	893b      	ldrh	r3, [r7, #8]
 800a730:	461a      	mov	r2, r3
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fa5d 	bl	800abf4 <USBD_CtlSendData>
 800a73a:	e009      	b.n	800a750 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f9e7 	bl	800ab12 <USBD_CtlError>
 800a744:	e004      	b.n	800a750 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 faae 	bl	800aca8 <USBD_CtlSendStatus>
 800a74c:	e000      	b.n	800a750 <USBD_GetDescriptor+0x320>
    return;
 800a74e:	bf00      	nop
  }
}
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop

0800a758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	889b      	ldrh	r3, [r3, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d131      	bne.n	800a7ce <USBD_SetAddress+0x76>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	88db      	ldrh	r3, [r3, #6]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d12d      	bne.n	800a7ce <USBD_SetAddress+0x76>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	885b      	ldrh	r3, [r3, #2]
 800a776:	2b7f      	cmp	r3, #127	; 0x7f
 800a778:	d829      	bhi.n	800a7ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b03      	cmp	r3, #3
 800a790:	d104      	bne.n	800a79c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f9bc 	bl	800ab12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79a:	e01d      	b.n	800a7d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7bfa      	ldrb	r2, [r7, #15]
 800a7a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f003 fd19 	bl	800e1e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa7a 	bl	800aca8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c2:	e009      	b.n	800a7d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7cc:	e004      	b.n	800a7d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f99e 	bl	800ab12 <USBD_CtlError>
  }
}
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	4b4e      	ldr	r3, [pc, #312]	; (800a930 <USBD_SetConfig+0x150>)
 800a7f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7f8:	4b4d      	ldr	r3, [pc, #308]	; (800a930 <USBD_SetConfig+0x150>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d905      	bls.n	800a80c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f985 	bl	800ab12 <USBD_CtlError>
    return USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	e08c      	b.n	800a926 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d002      	beq.n	800a81e <USBD_SetConfig+0x3e>
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d029      	beq.n	800a870 <USBD_SetConfig+0x90>
 800a81c:	e075      	b.n	800a90a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a81e:	4b44      	ldr	r3, [pc, #272]	; (800a930 <USBD_SetConfig+0x150>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d020      	beq.n	800a868 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a826:	4b42      	ldr	r3, [pc, #264]	; (800a930 <USBD_SetConfig+0x150>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a830:	4b3f      	ldr	r3, [pc, #252]	; (800a930 <USBD_SetConfig+0x150>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7fe ffbd 	bl	80097b6 <USBD_SetClassConfig>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a840:	7bfb      	ldrb	r3, [r7, #15]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d008      	beq.n	800a858 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f962 	bl	800ab12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2202      	movs	r2, #2
 800a852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a856:	e065      	b.n	800a924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fa25 	bl	800aca8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2203      	movs	r2, #3
 800a862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a866:	e05d      	b.n	800a924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fa1d 	bl	800aca8 <USBD_CtlSendStatus>
      break;
 800a86e:	e059      	b.n	800a924 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a870:	4b2f      	ldr	r3, [pc, #188]	; (800a930 <USBD_SetConfig+0x150>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d112      	bne.n	800a89e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a880:	4b2b      	ldr	r3, [pc, #172]	; (800a930 <USBD_SetConfig+0x150>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a88a:	4b29      	ldr	r3, [pc, #164]	; (800a930 <USBD_SetConfig+0x150>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7fe ffac 	bl	80097ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa06 	bl	800aca8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a89c:	e042      	b.n	800a924 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a89e:	4b24      	ldr	r3, [pc, #144]	; (800a930 <USBD_SetConfig+0x150>)
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d02a      	beq.n	800a902 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7fe ff9a 	bl	80097ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a8ba:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <USBD_SetConfig+0x150>)
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8c4:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <USBD_SetConfig+0x150>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7fe ff73 	bl	80097b6 <USBD_SetClassConfig>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00f      	beq.n	800a8fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f918 	bl	800ab12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7fe ff7f 	bl	80097ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8f8:	e014      	b.n	800a924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f9d4 	bl	800aca8 <USBD_CtlSendStatus>
      break;
 800a900:	e010      	b.n	800a924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f9d0 	bl	800aca8 <USBD_CtlSendStatus>
      break;
 800a908:	e00c      	b.n	800a924 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f900 	bl	800ab12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <USBD_SetConfig+0x150>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7fe ff68 	bl	80097ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a91e:	2303      	movs	r3, #3
 800a920:	73fb      	strb	r3, [r7, #15]
      break;
 800a922:	bf00      	nop
  }

  return ret;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	200003bc 	.word	0x200003bc

0800a934 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	88db      	ldrh	r3, [r3, #6]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d004      	beq.n	800a950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f8e2 	bl	800ab12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a94e:	e023      	b.n	800a998 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	dc02      	bgt.n	800a962 <USBD_GetConfig+0x2e>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc03      	bgt.n	800a968 <USBD_GetConfig+0x34>
 800a960:	e015      	b.n	800a98e <USBD_GetConfig+0x5a>
 800a962:	2b03      	cmp	r3, #3
 800a964:	d00b      	beq.n	800a97e <USBD_GetConfig+0x4a>
 800a966:	e012      	b.n	800a98e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3308      	adds	r3, #8
 800a972:	2201      	movs	r2, #1
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f93c 	bl	800abf4 <USBD_CtlSendData>
        break;
 800a97c:	e00c      	b.n	800a998 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3304      	adds	r3, #4
 800a982:	2201      	movs	r2, #1
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f934 	bl	800abf4 <USBD_CtlSendData>
        break;
 800a98c:	e004      	b.n	800a998 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f8be 	bl	800ab12 <USBD_CtlError>
        break;
 800a996:	bf00      	nop
}
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d81e      	bhi.n	800a9f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d004      	beq.n	800a9ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f8a5 	bl	800ab12 <USBD_CtlError>
        break;
 800a9c8:	e01a      	b.n	800aa00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f043 0202 	orr.w	r2, r3, #2
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f900 	bl	800abf4 <USBD_CtlSendData>
      break;
 800a9f4:	e004      	b.n	800aa00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f88a 	bl	800ab12 <USBD_CtlError>
      break;
 800a9fe:	bf00      	nop
  }
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	885b      	ldrh	r3, [r3, #2]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d107      	bne.n	800aa2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f940 	bl	800aca8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aa28:	e013      	b.n	800aa52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d10b      	bne.n	800aa4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	889b      	ldrh	r3, [r3, #4]
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f930 	bl	800aca8 <USBD_CtlSendStatus>
}
 800aa48:	e003      	b.n	800aa52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f860 	bl	800ab12 <USBD_CtlError>
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d80b      	bhi.n	800aa8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	885b      	ldrh	r3, [r3, #2]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10c      	bne.n	800aa94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f910 	bl	800aca8 <USBD_CtlSendStatus>
      }
      break;
 800aa88:	e004      	b.n	800aa94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f840 	bl	800ab12 <USBD_CtlError>
      break;
 800aa92:	e000      	b.n	800aa96 <USBD_ClrFeature+0x3c>
      break;
 800aa94:	bf00      	nop
  }
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	781a      	ldrb	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	3301      	adds	r3, #1
 800aac6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fa17 	bl	8009efc <SWAPBYTE>
 800aace:	4603      	mov	r3, r0
 800aad0:	461a      	mov	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3301      	adds	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff fa0a 	bl	8009efc <SWAPBYTE>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7ff f9fd 	bl	8009efc <SWAPBYTE>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	80da      	strh	r2, [r3, #6]
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab1c:	2180      	movs	r1, #128	; 0x80
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f003 faf4 	bl	800e10c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab24:	2100      	movs	r1, #0
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f003 faf0 	bl	800e10c <USBD_LL_StallEP>
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d036      	beq.n	800abb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ab4e:	6938      	ldr	r0, [r7, #16]
 800ab50:	f000 f836 	bl	800abc0 <USBD_GetLen>
 800ab54:	4603      	mov	r3, r0
 800ab56:	3301      	adds	r3, #1
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4413      	add	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	3301      	adds	r3, #1
 800ab72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	4413      	add	r3, r2
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	3301      	adds	r3, #1
 800ab82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab84:	e013      	b.n	800abae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	7812      	ldrb	r2, [r2, #0]
 800ab90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	3301      	adds	r3, #1
 800ab96:	613b      	str	r3, [r7, #16]
    idx++;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	4413      	add	r3, r2
 800aba4:	2200      	movs	r2, #0
 800aba6:	701a      	strb	r2, [r3, #0]
    idx++;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	3301      	adds	r3, #1
 800abac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e7      	bne.n	800ab86 <USBD_GetString+0x52>
 800abb6:	e000      	b.n	800abba <USBD_GetString+0x86>
    return;
 800abb8:	bf00      	nop
  }
}
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800abd0:	e005      	b.n	800abde <USBD_GetLen+0x1e>
  {
    len++;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	3301      	adds	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	3301      	adds	r3, #1
 800abdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1f5      	bne.n	800abd2 <USBD_GetLen+0x12>
  }

  return len;
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f003 faff 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	60f8      	str	r0, [r7, #12]
 800ac32:	60b9      	str	r1, [r7, #8]
 800ac34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f003 faee 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2203      	movs	r2, #3
 800ac5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f003 faf2 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	60f8      	str	r0, [r7, #12]
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	2100      	movs	r1, #0
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f003 fae1 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2204      	movs	r2, #4
 800acb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acb8:	2300      	movs	r3, #0
 800acba:	2200      	movs	r2, #0
 800acbc:	2100      	movs	r1, #0
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f003 faad 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2205      	movs	r2, #5
 800acda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acde:	2300      	movs	r3, #0
 800ace0:	2200      	movs	r2, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f003 fabb 	bl	800e260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800acf8:	bf00      	nop
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad0a:	f3ef 8305 	mrs	r3, IPSR
 800ad0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10f      	bne.n	800ad36 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad16:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1a:	607b      	str	r3, [r7, #4]
  return(result);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad22:	f3ef 8311 	mrs	r3, BASEPRI
 800ad26:	603b      	str	r3, [r7, #0]
  return(result);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <osKernelInitialize+0x3a>
 800ad2e:	4b0e      	ldr	r3, [pc, #56]	; (800ad68 <osKernelInitialize+0x64>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d103      	bne.n	800ad3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ad36:	f06f 0305 	mvn.w	r3, #5
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	e00c      	b.n	800ad58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad3e:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <osKernelInitialize+0x64>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad46:	4b08      	ldr	r3, [pc, #32]	; (800ad68 <osKernelInitialize+0x64>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	e002      	b.n	800ad58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ad52:	f04f 33ff 	mov.w	r3, #4294967295
 800ad56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad58:	68fb      	ldr	r3, [r7, #12]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	200003c0 	.word	0x200003c0

0800ad6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad72:	f3ef 8305 	mrs	r3, IPSR
 800ad76:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10f      	bne.n	800ad9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad82:	607b      	str	r3, [r7, #4]
  return(result);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d105      	bne.n	800ad96 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ad8e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d007      	beq.n	800ada6 <osKernelStart+0x3a>
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <osKernelStart+0x68>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d103      	bne.n	800ada6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ad9e:	f06f 0305 	mvn.w	r3, #5
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	e010      	b.n	800adc8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <osKernelStart+0x68>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d109      	bne.n	800adc2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adae:	f7ff ffa1 	bl	800acf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <osKernelStart+0x68>)
 800adb4:	2202      	movs	r2, #2
 800adb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800adb8:	f001 f8b4 	bl	800bf24 <vTaskStartScheduler>
      stat = osOK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e002      	b.n	800adc8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295
 800adc6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800adc8:	68fb      	ldr	r3, [r7, #12]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200003c0 	.word	0x200003c0

0800add8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b090      	sub	sp, #64	; 0x40
 800addc:	af04      	add	r7, sp, #16
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ade8:	f3ef 8305 	mrs	r3, IPSR
 800adec:	61fb      	str	r3, [r7, #28]
  return(result);
 800adee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f040 808f 	bne.w	800af14 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf6:	f3ef 8310 	mrs	r3, PRIMASK
 800adfa:	61bb      	str	r3, [r7, #24]
  return(result);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d105      	bne.n	800ae0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae02:	f3ef 8311 	mrs	r3, BASEPRI
 800ae06:	617b      	str	r3, [r7, #20]
  return(result);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <osThreadNew+0x3e>
 800ae0e:	4b44      	ldr	r3, [pc, #272]	; (800af20 <osThreadNew+0x148>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d07e      	beq.n	800af14 <osThreadNew+0x13c>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d07b      	beq.n	800af14 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ae20:	2318      	movs	r3, #24
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d045      	beq.n	800aec0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <osThreadNew+0x6a>
        name = attr->name;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d008      	beq.n	800ae68 <osThreadNew+0x90>
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	2b38      	cmp	r3, #56	; 0x38
 800ae5a:	d805      	bhi.n	800ae68 <osThreadNew+0x90>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <osThreadNew+0x94>
        return (NULL);
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e054      	b.n	800af16 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	089b      	lsrs	r3, r3, #2
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00e      	beq.n	800aea2 <osThreadNew+0xca>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b5b      	cmp	r3, #91	; 0x5b
 800ae8a:	d90a      	bls.n	800aea2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <osThreadNew+0xca>
        mem = 1;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	623b      	str	r3, [r7, #32]
 800aea0:	e010      	b.n	800aec4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10c      	bne.n	800aec4 <osThreadNew+0xec>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d108      	bne.n	800aec4 <osThreadNew+0xec>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <osThreadNew+0xec>
          mem = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	623b      	str	r3, [r7, #32]
 800aebe:	e001      	b.n	800aec4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d110      	bne.n	800aeec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aed2:	9202      	str	r2, [sp, #8]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 fe3f 	bl	800bb64 <xTaskCreateStatic>
 800aee6:	4603      	mov	r3, r0
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	e013      	b.n	800af14 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d110      	bne.n	800af14 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	f107 0310 	add.w	r3, r7, #16
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 fe90 	bl	800bc2a <xTaskCreate>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d001      	beq.n	800af14 <osThreadNew+0x13c>
          hTask = NULL;
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af14:	693b      	ldr	r3, [r7, #16]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3730      	adds	r7, #48	; 0x30
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	200003c0 	.word	0x200003c0

0800af24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af2c:	f3ef 8305 	mrs	r3, IPSR
 800af30:	613b      	str	r3, [r7, #16]
  return(result);
 800af32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10f      	bne.n	800af58 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af38:	f3ef 8310 	mrs	r3, PRIMASK
 800af3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d105      	bne.n	800af50 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af44:	f3ef 8311 	mrs	r3, BASEPRI
 800af48:	60bb      	str	r3, [r7, #8]
  return(result);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <osDelay+0x3c>
 800af50:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <osDelay+0x58>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d103      	bne.n	800af60 <osDelay+0x3c>
    stat = osErrorISR;
 800af58:	f06f 0305 	mvn.w	r3, #5
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	e007      	b.n	800af70 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <osDelay+0x4c>
      vTaskDelay(ticks);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 ffa4 	bl	800beb8 <vTaskDelay>
    }
  }

  return (stat);
 800af70:	697b      	ldr	r3, [r7, #20]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	200003c0 	.word	0x200003c0

0800af80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a07      	ldr	r2, [pc, #28]	; (800afac <vApplicationGetIdleTaskMemory+0x2c>)
 800af90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	4a06      	ldr	r2, [pc, #24]	; (800afb0 <vApplicationGetIdleTaskMemory+0x30>)
 800af96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2280      	movs	r2, #128	; 0x80
 800af9c:	601a      	str	r2, [r3, #0]
}
 800af9e:	bf00      	nop
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	200003c4 	.word	0x200003c4
 800afb0:	20000420 	.word	0x20000420

0800afb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a07      	ldr	r2, [pc, #28]	; (800afe0 <vApplicationGetTimerTaskMemory+0x2c>)
 800afc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	4a06      	ldr	r2, [pc, #24]	; (800afe4 <vApplicationGetTimerTaskMemory+0x30>)
 800afca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afd2:	601a      	str	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20000620 	.word	0x20000620
 800afe4:	2000067c 	.word	0x2000067c

0800afe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f103 0208 	add.w	r2, r3, #8
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f103 0208 	add.w	r2, r3, #8
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f103 0208 	add.w	r2, r3, #8
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	601a      	str	r2, [r3, #0]
}
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a0:	d103      	bne.n	800b0aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e00c      	b.n	800b0c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e002      	b.n	800b0b8 <vListInsert+0x2e>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d2f6      	bcs.n	800b0b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
}
 800b0f0:	bf00      	nop
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6892      	ldr	r2, [r2, #8]
 800b112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	6852      	ldr	r2, [r2, #4]
 800b11c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d103      	bne.n	800b130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	1e5a      	subs	r2, r3, #1
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10c      	bne.n	800b17e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	b672      	cpsid	i
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	b662      	cpsie	i
 800b178:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b17e:	f002 f87d 	bl	800d27c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b18e:	fb01 f303 	mul.w	r3, r1, r3
 800b192:	441a      	add	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	68f9      	ldr	r1, [r7, #12]
 800b1b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1b4:	fb01 f303 	mul.w	r3, r1, r3
 800b1b8:	441a      	add	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	22ff      	movs	r2, #255	; 0xff
 800b1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	22ff      	movs	r2, #255	; 0xff
 800b1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d114      	bne.n	800b1fe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01a      	beq.n	800b212 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3310      	adds	r3, #16
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 f937 	bl	800c454 <xTaskRemoveFromEventList>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d012      	beq.n	800b212 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <xQueueGenericReset+0xd0>)
 800b1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	e009      	b.n	800b212 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3310      	adds	r3, #16
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff fef0 	bl	800afe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3324      	adds	r3, #36	; 0x24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff feeb 	bl	800afe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b212:	f002 f867 	bl	800d2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b216:	2301      	movs	r3, #1
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08e      	sub	sp, #56	; 0x38
 800b228:	af02      	add	r7, sp, #8
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10c      	bne.n	800b252 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23c:	b672      	cpsid	i
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	b662      	cpsie	i
 800b24c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10c      	bne.n	800b272 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	b672      	cpsid	i
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	b662      	cpsie	i
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <xQueueGenericCreateStatic+0x5a>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <xQueueGenericCreateStatic+0x5e>
 800b27e:	2301      	movs	r3, #1
 800b280:	e000      	b.n	800b284 <xQueueGenericCreateStatic+0x60>
 800b282:	2300      	movs	r3, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10c      	bne.n	800b2a2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	b672      	cpsid	i
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	b662      	cpsie	i
 800b29c:	623b      	str	r3, [r7, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <xQueueGenericCreateStatic+0x8a>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d101      	bne.n	800b2b2 <xQueueGenericCreateStatic+0x8e>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <xQueueGenericCreateStatic+0x90>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10c      	bne.n	800b2d2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	b672      	cpsid	i
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	b662      	cpsie	i
 800b2cc:	61fb      	str	r3, [r7, #28]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2d2:	2350      	movs	r3, #80	; 0x50
 800b2d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b50      	cmp	r3, #80	; 0x50
 800b2da:	d00c      	beq.n	800b2f6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	b672      	cpsid	i
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	b662      	cpsie	i
 800b2f0:	61bb      	str	r3, [r7, #24]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00d      	beq.n	800b31e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b30a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	4613      	mov	r3, r2
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f805 	bl	800b328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b320:	4618      	mov	r0, r3
 800b322:	3730      	adds	r7, #48	; 0x30
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	e002      	b.n	800b34a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b356:	2101      	movs	r1, #1
 800b358:	69b8      	ldr	r0, [r7, #24]
 800b35a:	f7ff fef9 	bl	800b150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	78fa      	ldrb	r2, [r7, #3]
 800b362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b366:	bf00      	nop
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08e      	sub	sp, #56	; 0x38
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b37e:	2300      	movs	r3, #0
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10c      	bne.n	800b3a6 <xQueueGenericSend+0x36>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	b672      	cpsid	i
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	b662      	cpsie	i
 800b3a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d103      	bne.n	800b3b4 <xQueueGenericSend+0x44>
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <xQueueGenericSend+0x48>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e000      	b.n	800b3ba <xQueueGenericSend+0x4a>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10c      	bne.n	800b3d8 <xQueueGenericSend+0x68>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	b672      	cpsid	i
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	b662      	cpsie	i
 800b3d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d103      	bne.n	800b3e6 <xQueueGenericSend+0x76>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <xQueueGenericSend+0x7a>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e000      	b.n	800b3ec <xQueueGenericSend+0x7c>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10c      	bne.n	800b40a <xQueueGenericSend+0x9a>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	b672      	cpsid	i
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	b662      	cpsie	i
 800b404:	623b      	str	r3, [r7, #32]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b40a:	f001 f9e9 	bl	800c7e0 <xTaskGetSchedulerState>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <xQueueGenericSend+0xaa>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <xQueueGenericSend+0xae>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <xQueueGenericSend+0xb0>
 800b41e:	2300      	movs	r3, #0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10c      	bne.n	800b43e <xQueueGenericSend+0xce>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	b672      	cpsid	i
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	b662      	cpsie	i
 800b438:	61fb      	str	r3, [r7, #28]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b43e:	f001 ff1d 	bl	800d27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d302      	bcc.n	800b454 <xQueueGenericSend+0xe4>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b02      	cmp	r3, #2
 800b452:	d129      	bne.n	800b4a8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b45a:	f000 fa15 	bl	800b888 <prvCopyDataToQueue>
 800b45e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	2b00      	cmp	r3, #0
 800b466:	d010      	beq.n	800b48a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	3324      	adds	r3, #36	; 0x24
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fff1 	bl	800c454 <xTaskRemoveFromEventList>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d013      	beq.n	800b4a0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b478:	4b3f      	ldr	r3, [pc, #252]	; (800b578 <xQueueGenericSend+0x208>)
 800b47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	e00a      	b.n	800b4a0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d007      	beq.n	800b4a0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b490:	4b39      	ldr	r3, [pc, #228]	; (800b578 <xQueueGenericSend+0x208>)
 800b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b4a0:	f001 ff20 	bl	800d2e4 <vPortExitCritical>
				return pdPASS;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e063      	b.n	800b570 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d103      	bne.n	800b4b6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4ae:	f001 ff19 	bl	800d2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	e05c      	b.n	800b570 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4bc:	f107 0314 	add.w	r3, r7, #20
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f001 f82d 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4ca:	f001 ff0b 	bl	800d2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4ce:	f000 fd93 	bl	800bff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4d2:	f001 fed3 	bl	800d27c <vPortEnterCritical>
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4dc:	b25b      	sxtb	r3, r3
 800b4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e2:	d103      	bne.n	800b4ec <xQueueGenericSend+0x17c>
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f2:	b25b      	sxtb	r3, r3
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d103      	bne.n	800b502 <xQueueGenericSend+0x192>
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b502:	f001 feef 	bl	800d2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b506:	1d3a      	adds	r2, r7, #4
 800b508:	f107 0314 	add.w	r3, r7, #20
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 f81c 	bl	800c54c <xTaskCheckForTimeOut>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d124      	bne.n	800b564 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b51c:	f000 faac 	bl	800ba78 <prvIsQueueFull>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d018      	beq.n	800b558 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	3310      	adds	r3, #16
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 ff3c 	bl	800c3ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b536:	f000 fa37 	bl	800b9a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b53a:	f000 fd6b 	bl	800c014 <xTaskResumeAll>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	f47f af7c 	bne.w	800b43e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b546:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <xQueueGenericSend+0x208>)
 800b548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	e772      	b.n	800b43e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b55a:	f000 fa25 	bl	800b9a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b55e:	f000 fd59 	bl	800c014 <xTaskResumeAll>
 800b562:	e76c      	b.n	800b43e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b566:	f000 fa1f 	bl	800b9a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b56a:	f000 fd53 	bl	800c014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b56e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b570:	4618      	mov	r0, r3
 800b572:	3738      	adds	r7, #56	; 0x38
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08e      	sub	sp, #56	; 0x38
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10c      	bne.n	800b5ae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	b672      	cpsid	i
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	b662      	cpsie	i
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <xQueueGenericSendFromISR+0x40>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <xQueueGenericSendFromISR+0x44>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e000      	b.n	800b5c2 <xQueueGenericSendFromISR+0x46>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10c      	bne.n	800b5e0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	b672      	cpsid	i
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	b662      	cpsie	i
 800b5da:	623b      	str	r3, [r7, #32]
}
 800b5dc:	bf00      	nop
 800b5de:	e7fe      	b.n	800b5de <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d103      	bne.n	800b5ee <xQueueGenericSendFromISR+0x72>
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d101      	bne.n	800b5f2 <xQueueGenericSendFromISR+0x76>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <xQueueGenericSendFromISR+0x78>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10c      	bne.n	800b612 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	61fb      	str	r3, [r7, #28]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b612:	f001 ff1b 	bl	800d44c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b616:	f3ef 8211 	mrs	r2, BASEPRI
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	b672      	cpsid	i
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	b662      	cpsie	i
 800b62e:	61ba      	str	r2, [r7, #24]
 800b630:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b632:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63e:	429a      	cmp	r2, r3
 800b640:	d302      	bcc.n	800b648 <xQueueGenericSendFromISR+0xcc>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d12c      	bne.n	800b6a2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	68b9      	ldr	r1, [r7, #8]
 800b656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b658:	f000 f916 	bl	800b888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b65c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b664:	d112      	bne.n	800b68c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d016      	beq.n	800b69c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	3324      	adds	r3, #36	; 0x24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 feee 	bl	800c454 <xTaskRemoveFromEventList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00e      	beq.n	800b69c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	e007      	b.n	800b69c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b690:	3301      	adds	r3, #1
 800b692:	b2db      	uxtb	r3, r3
 800b694:	b25a      	sxtb	r2, r3
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b69c:	2301      	movs	r3, #1
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b6a0:	e001      	b.n	800b6a6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3738      	adds	r7, #56	; 0x38
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08c      	sub	sp, #48	; 0x30
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10c      	bne.n	800b6f0 <xQueueReceive+0x34>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	b672      	cpsid	i
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	b662      	cpsie	i
 800b6ea:	623b      	str	r3, [r7, #32]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d103      	bne.n	800b6fe <xQueueReceive+0x42>
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <xQueueReceive+0x46>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <xQueueReceive+0x48>
 800b702:	2300      	movs	r3, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10c      	bne.n	800b722 <xQueueReceive+0x66>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	b672      	cpsid	i
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	b662      	cpsie	i
 800b71c:	61fb      	str	r3, [r7, #28]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b722:	f001 f85d 	bl	800c7e0 <xTaskGetSchedulerState>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <xQueueReceive+0x76>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <xQueueReceive+0x7a>
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <xQueueReceive+0x7c>
 800b736:	2300      	movs	r3, #0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10c      	bne.n	800b756 <xQueueReceive+0x9a>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	b672      	cpsid	i
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	b662      	cpsie	i
 800b750:	61bb      	str	r3, [r7, #24]
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b756:	f001 fd91 	bl	800d27c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	d01f      	beq.n	800b7a6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b766:	68b9      	ldr	r1, [r7, #8]
 800b768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b76a:	f000 f8f7 	bl	800b95c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	1e5a      	subs	r2, r3, #1
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00f      	beq.n	800b79e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	3310      	adds	r3, #16
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fe66 	bl	800c454 <xTaskRemoveFromEventList>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b78e:	4b3d      	ldr	r3, [pc, #244]	; (800b884 <xQueueReceive+0x1c8>)
 800b790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b79e:	f001 fda1 	bl	800d2e4 <vPortExitCritical>
				return pdPASS;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e069      	b.n	800b87a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ac:	f001 fd9a 	bl	800d2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e062      	b.n	800b87a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7ba:	f107 0310 	add.w	r3, r7, #16
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 feae 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7c8:	f001 fd8c 	bl	800d2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7cc:	f000 fc14 	bl	800bff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7d0:	f001 fd54 	bl	800d27c <vPortEnterCritical>
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d103      	bne.n	800b7ea <xQueueReceive+0x12e>
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f6:	d103      	bne.n	800b800 <xQueueReceive+0x144>
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b800:	f001 fd70 	bl	800d2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b804:	1d3a      	adds	r2, r7, #4
 800b806:	f107 0310 	add.w	r3, r7, #16
 800b80a:	4611      	mov	r1, r2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 fe9d 	bl	800c54c <xTaskCheckForTimeOut>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d123      	bne.n	800b860 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b81a:	f000 f917 	bl	800ba4c <prvIsQueueEmpty>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d017      	beq.n	800b854 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	3324      	adds	r3, #36	; 0x24
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fdbd 	bl	800c3ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b834:	f000 f8b8 	bl	800b9a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b838:	f000 fbec 	bl	800c014 <xTaskResumeAll>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d189      	bne.n	800b756 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b842:	4b10      	ldr	r3, [pc, #64]	; (800b884 <xQueueReceive+0x1c8>)
 800b844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	e780      	b.n	800b756 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b856:	f000 f8a7 	bl	800b9a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b85a:	f000 fbdb 	bl	800c014 <xTaskResumeAll>
 800b85e:	e77a      	b.n	800b756 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b862:	f000 f8a1 	bl	800b9a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b866:	f000 fbd5 	bl	800c014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b86c:	f000 f8ee 	bl	800ba4c <prvIsQueueEmpty>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	f43f af6f 	beq.w	800b756 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3730      	adds	r7, #48	; 0x30
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	e000ed04 	.word	0xe000ed04

0800b888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10d      	bne.n	800b8c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d14d      	bne.n	800b94a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 ffb2 	bl	800c81c <xTaskPriorityDisinherit>
 800b8b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	609a      	str	r2, [r3, #8]
 800b8c0:	e043      	b.n	800b94a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d119      	bne.n	800b8fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6858      	ldr	r0, [r3, #4]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	f002 fe98 	bl	800e608 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e0:	441a      	add	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d32b      	bcc.n	800b94a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	605a      	str	r2, [r3, #4]
 800b8fa:	e026      	b.n	800b94a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	68d8      	ldr	r0, [r3, #12]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b904:	461a      	mov	r2, r3
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	f002 fe7e 	bl	800e608 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68da      	ldr	r2, [r3, #12]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b914:	425b      	negs	r3, r3
 800b916:	441a      	add	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	68da      	ldr	r2, [r3, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d207      	bcs.n	800b938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	425b      	negs	r3, r3
 800b932:	441a      	add	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d105      	bne.n	800b94a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3b01      	subs	r3, #1
 800b948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b952:	697b      	ldr	r3, [r7, #20]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d018      	beq.n	800b9a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68da      	ldr	r2, [r3, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b976:	441a      	add	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68da      	ldr	r2, [r3, #12]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	429a      	cmp	r2, r3
 800b986:	d303      	bcc.n	800b990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68d9      	ldr	r1, [r3, #12]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b998:	461a      	mov	r2, r3
 800b99a:	6838      	ldr	r0, [r7, #0]
 800b99c:	f002 fe34 	bl	800e608 <memcpy>
	}
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9b0:	f001 fc64 	bl	800d27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9bc:	e011      	b.n	800b9e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d012      	beq.n	800b9ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3324      	adds	r3, #36	; 0x24
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 fd42 	bl	800c454 <xTaskRemoveFromEventList>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9d6:	f000 fe1f 	bl	800c618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dce9      	bgt.n	800b9be <prvUnlockQueue+0x16>
 800b9ea:	e000      	b.n	800b9ee <prvUnlockQueue+0x46>
					break;
 800b9ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	22ff      	movs	r2, #255	; 0xff
 800b9f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9f6:	f001 fc75 	bl	800d2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9fa:	f001 fc3f 	bl	800d27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba06:	e011      	b.n	800ba2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d012      	beq.n	800ba36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3310      	adds	r3, #16
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 fd1d 	bl	800c454 <xTaskRemoveFromEventList>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba20:	f000 fdfa 	bl	800c618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	dce9      	bgt.n	800ba08 <prvUnlockQueue+0x60>
 800ba34:	e000      	b.n	800ba38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	22ff      	movs	r2, #255	; 0xff
 800ba3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba40:	f001 fc50 	bl	800d2e4 <vPortExitCritical>
}
 800ba44:	bf00      	nop
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba54:	f001 fc12 	bl	800d27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e001      	b.n	800ba6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba6a:	f001 fc3b 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba80:	f001 fbfc 	bl	800d27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d102      	bne.n	800ba96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba90:	2301      	movs	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e001      	b.n	800ba9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba9a:	f001 fc23 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	e014      	b.n	800bae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bab8:	4a0f      	ldr	r2, [pc, #60]	; (800baf8 <vQueueAddToRegistry+0x50>)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10b      	bne.n	800badc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bac4:	490c      	ldr	r1, [pc, #48]	; (800baf8 <vQueueAddToRegistry+0x50>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bace:	4a0a      	ldr	r2, [pc, #40]	; (800baf8 <vQueueAddToRegistry+0x50>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	4413      	add	r3, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bada:	e006      	b.n	800baea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3301      	adds	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b07      	cmp	r3, #7
 800bae6:	d9e7      	bls.n	800bab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bae8:	bf00      	nop
 800baea:	bf00      	nop
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	20000a7c 	.word	0x20000a7c

0800bafc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb0c:	f001 fbb6 	bl	800d27c <vPortEnterCritical>
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb16:	b25b      	sxtb	r3, r3
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1c:	d103      	bne.n	800bb26 <vQueueWaitForMessageRestricted+0x2a>
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb2c:	b25b      	sxtb	r3, r3
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb32:	d103      	bne.n	800bb3c <vQueueWaitForMessageRestricted+0x40>
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb3c:	f001 fbd2 	bl	800d2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	3324      	adds	r3, #36	; 0x24
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fc51 	bl	800c3f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb56:	6978      	ldr	r0, [r7, #20]
 800bb58:	f7ff ff26 	bl	800b9a8 <prvUnlockQueue>
	}
 800bb5c:	bf00      	nop
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08e      	sub	sp, #56	; 0x38
 800bb68:	af04      	add	r7, sp, #16
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10c      	bne.n	800bb92 <xTaskCreateStatic+0x2e>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	b672      	cpsid	i
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	b662      	cpsie	i
 800bb8c:	623b      	str	r3, [r7, #32]
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10c      	bne.n	800bbb2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	b672      	cpsid	i
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	b662      	cpsie	i
 800bbac:	61fb      	str	r3, [r7, #28]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbb2:	235c      	movs	r3, #92	; 0x5c
 800bbb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	2b5c      	cmp	r3, #92	; 0x5c
 800bbba:	d00c      	beq.n	800bbd6 <xTaskCreateStatic+0x72>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	b672      	cpsid	i
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	b662      	cpsie	i
 800bbd0:	61bb      	str	r3, [r7, #24]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d01e      	beq.n	800bc1c <xTaskCreateStatic+0xb8>
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d01b      	beq.n	800bc1c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9303      	str	r3, [sp, #12]
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	9302      	str	r3, [sp, #8]
 800bbfe:	f107 0314 	add.w	r3, r7, #20
 800bc02:	9301      	str	r3, [sp, #4]
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f850 	bl	800bcb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc16:	f000 f8df 	bl	800bdd8 <prvAddNewTaskToReadyList>
 800bc1a:	e001      	b.n	800bc20 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc20:	697b      	ldr	r3, [r7, #20]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3728      	adds	r7, #40	; 0x28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b08c      	sub	sp, #48	; 0x30
 800bc2e:	af04      	add	r7, sp, #16
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	603b      	str	r3, [r7, #0]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc3a:	88fb      	ldrh	r3, [r7, #6]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 fc48 	bl	800d4d4 <pvPortMalloc>
 800bc44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00e      	beq.n	800bc6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc4c:	205c      	movs	r0, #92	; 0x5c
 800bc4e:	f001 fc41 	bl	800d4d4 <pvPortMalloc>
 800bc52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	631a      	str	r2, [r3, #48]	; 0x30
 800bc60:	e005      	b.n	800bc6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc62:	6978      	ldr	r0, [r7, #20]
 800bc64:	f001 fd00 	bl	800d668 <vPortFree>
 800bc68:	e001      	b.n	800bc6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d017      	beq.n	800bca4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc7c:	88fa      	ldrh	r2, [r7, #6]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	9303      	str	r3, [sp, #12]
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	9302      	str	r3, [sp, #8]
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 f80e 	bl	800bcb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc98:	69f8      	ldr	r0, [r7, #28]
 800bc9a:	f000 f89d 	bl	800bdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	e002      	b.n	800bcaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bca4:	f04f 33ff 	mov.w	r3, #4294967295
 800bca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcaa:	69bb      	ldr	r3, [r7, #24]
	}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	461a      	mov	r2, r3
 800bccc:	21a5      	movs	r1, #165	; 0xa5
 800bcce:	f002 fc57 	bl	800e580 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bcdc:	440b      	add	r3, r1
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	f003 0307 	and.w	r3, r3, #7
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00c      	beq.n	800bd10 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	b672      	cpsid	i
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	b662      	cpsie	i
 800bd0a:	617b      	str	r3, [r7, #20]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d01f      	beq.n	800bd56 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd16:	2300      	movs	r3, #0
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e012      	b.n	800bd42 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	4413      	add	r3, r2
 800bd22:	7819      	ldrb	r1, [r3, #0]
 800bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	4413      	add	r3, r2
 800bd2a:	3334      	adds	r3, #52	; 0x34
 800bd2c:	460a      	mov	r2, r1
 800bd2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d006      	beq.n	800bd4a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	2b0f      	cmp	r3, #15
 800bd46:	d9e9      	bls.n	800bd1c <prvInitialiseNewTask+0x68>
 800bd48:	e000      	b.n	800bd4c <prvInitialiseNewTask+0x98>
			{
				break;
 800bd4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd54:	e003      	b.n	800bd5e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b37      	cmp	r3, #55	; 0x37
 800bd62:	d901      	bls.n	800bd68 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd64:	2337      	movs	r3, #55	; 0x37
 800bd66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	2200      	movs	r2, #0
 800bd78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff f952 	bl	800b028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	3318      	adds	r3, #24
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff f94d 	bl	800b028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	2200      	movs	r2, #0
 800bda8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	68f9      	ldr	r1, [r7, #12]
 800bdb6:	69b8      	ldr	r0, [r7, #24]
 800bdb8:	f001 f952 	bl	800d060 <pxPortInitialiseStack>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdce:	bf00      	nop
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bde0:	f001 fa4c 	bl	800d27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bde4:	4b2d      	ldr	r3, [pc, #180]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	4a2c      	ldr	r2, [pc, #176]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdee:	4b2c      	ldr	r3, [pc, #176]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d109      	bne.n	800be0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdf6:	4a2a      	ldr	r2, [pc, #168]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdfc:	4b27      	ldr	r3, [pc, #156]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d110      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be04:	f000 fc2c 	bl	800c660 <prvInitialiseTaskLists>
 800be08:	e00d      	b.n	800be26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be0a:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be12:	4b23      	ldr	r3, [pc, #140]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d802      	bhi.n	800be26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be20:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be30:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4b1b      	ldr	r3, [pc, #108]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <prvAddNewTaskToReadyList+0x74>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4a18      	ldr	r2, [pc, #96]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a15      	ldr	r2, [pc, #84]	; (800beb0 <prvAddNewTaskToReadyList+0xd8>)
 800be5a:	441a      	add	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7ff f8ed 	bl	800b042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be68:	f001 fa3c 	bl	800d2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00e      	beq.n	800be92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be74:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d207      	bcs.n	800be92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <prvAddNewTaskToReadyList+0xdc>)
 800be84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000f90 	.word	0x20000f90
 800bea0:	20000abc 	.word	0x20000abc
 800bea4:	20000f9c 	.word	0x20000f9c
 800bea8:	20000fac 	.word	0x20000fac
 800beac:	20000f98 	.word	0x20000f98
 800beb0:	20000ac0 	.word	0x20000ac0
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d019      	beq.n	800befe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beca:	4b14      	ldr	r3, [pc, #80]	; (800bf1c <vTaskDelay+0x64>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00c      	beq.n	800beec <vTaskDelay+0x34>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	b672      	cpsid	i
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	b662      	cpsie	i
 800bee6:	60bb      	str	r3, [r7, #8]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <vTaskDelay+0x32>
			vTaskSuspendAll();
 800beec:	f000 f884 	bl	800bff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bef0:	2100      	movs	r1, #0
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fd04 	bl	800c900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bef8:	f000 f88c 	bl	800c014 <xTaskResumeAll>
 800befc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d107      	bne.n	800bf14 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bf04:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <vTaskDelay+0x68>)
 800bf06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20000fb8 	.word	0x20000fb8
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf32:	463a      	mov	r2, r7
 800bf34:	1d39      	adds	r1, r7, #4
 800bf36:	f107 0308 	add.w	r3, r7, #8
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff f820 	bl	800af80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	9202      	str	r2, [sp, #8]
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	460a      	mov	r2, r1
 800bf52:	4923      	ldr	r1, [pc, #140]	; (800bfe0 <vTaskStartScheduler+0xbc>)
 800bf54:	4823      	ldr	r0, [pc, #140]	; (800bfe4 <vTaskStartScheduler+0xc0>)
 800bf56:	f7ff fe05 	bl	800bb64 <xTaskCreateStatic>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4a22      	ldr	r2, [pc, #136]	; (800bfe8 <vTaskStartScheduler+0xc4>)
 800bf5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf60:	4b21      	ldr	r3, [pc, #132]	; (800bfe8 <vTaskStartScheduler+0xc4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e001      	b.n	800bf72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d102      	bne.n	800bf7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf78:	f000 fd16 	bl	800c9a8 <xTimerCreateTimerTask>
 800bf7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d118      	bne.n	800bfb6 <vTaskStartScheduler+0x92>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	b672      	cpsid	i
 800bf8a:	f383 8811 	msr	BASEPRI, r3
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	b662      	cpsie	i
 800bf98:	613b      	str	r3, [r7, #16]
}
 800bf9a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf9c:	4b13      	ldr	r3, [pc, #76]	; (800bfec <vTaskStartScheduler+0xc8>)
 800bf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfa4:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <vTaskStartScheduler+0xcc>)
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfaa:	4b12      	ldr	r3, [pc, #72]	; (800bff4 <vTaskStartScheduler+0xd0>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfb0:	f001 f8e6 	bl	800d180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfb4:	e010      	b.n	800bfd8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d10c      	bne.n	800bfd8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	b672      	cpsid	i
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	b662      	cpsie	i
 800bfd2:	60fb      	str	r3, [r7, #12]
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <vTaskStartScheduler+0xb2>
}
 800bfd8:	bf00      	nop
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	0800ed8c 	.word	0x0800ed8c
 800bfe4:	0800c631 	.word	0x0800c631
 800bfe8:	20000fb4 	.word	0x20000fb4
 800bfec:	20000fb0 	.word	0x20000fb0
 800bff0:	20000f9c 	.word	0x20000f9c
 800bff4:	20000f94 	.word	0x20000f94

0800bff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bffc:	4b04      	ldr	r3, [pc, #16]	; (800c010 <vTaskSuspendAll+0x18>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	3301      	adds	r3, #1
 800c002:	4a03      	ldr	r2, [pc, #12]	; (800c010 <vTaskSuspendAll+0x18>)
 800c004:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c006:	bf00      	nop
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	20000fb8 	.word	0x20000fb8

0800c014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c01e:	2300      	movs	r3, #0
 800c020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c022:	4b43      	ldr	r3, [pc, #268]	; (800c130 <xTaskResumeAll+0x11c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10c      	bne.n	800c044 <xTaskResumeAll+0x30>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	b672      	cpsid	i
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	b662      	cpsie	i
 800c03e:	603b      	str	r3, [r7, #0]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c044:	f001 f91a 	bl	800d27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c048:	4b39      	ldr	r3, [pc, #228]	; (800c130 <xTaskResumeAll+0x11c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	4a38      	ldr	r2, [pc, #224]	; (800c130 <xTaskResumeAll+0x11c>)
 800c050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c052:	4b37      	ldr	r3, [pc, #220]	; (800c130 <xTaskResumeAll+0x11c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d162      	bne.n	800c120 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c05a:	4b36      	ldr	r3, [pc, #216]	; (800c134 <xTaskResumeAll+0x120>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d05e      	beq.n	800c120 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c062:	e02f      	b.n	800c0c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c064:	4b34      	ldr	r3, [pc, #208]	; (800c138 <xTaskResumeAll+0x124>)
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3318      	adds	r3, #24
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff f843 	bl	800b0fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3304      	adds	r3, #4
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff f83e 	bl	800b0fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	4b2d      	ldr	r3, [pc, #180]	; (800c13c <xTaskResumeAll+0x128>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d903      	bls.n	800c094 <xTaskResumeAll+0x80>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c090:	4a2a      	ldr	r2, [pc, #168]	; (800c13c <xTaskResumeAll+0x128>)
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4a27      	ldr	r2, [pc, #156]	; (800c140 <xTaskResumeAll+0x12c>)
 800c0a2:	441a      	add	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f7fe ffc9 	bl	800b042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	4b23      	ldr	r3, [pc, #140]	; (800c144 <xTaskResumeAll+0x130>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d302      	bcc.n	800c0c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c0be:	4b22      	ldr	r3, [pc, #136]	; (800c148 <xTaskResumeAll+0x134>)
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0c4:	4b1c      	ldr	r3, [pc, #112]	; (800c138 <xTaskResumeAll+0x124>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1cb      	bne.n	800c064 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0d2:	f000 fb65 	bl	800c7a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c0d6:	4b1d      	ldr	r3, [pc, #116]	; (800c14c <xTaskResumeAll+0x138>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d010      	beq.n	800c104 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0e2:	f000 f847 	bl	800c174 <xTaskIncrementTick>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c0ec:	4b16      	ldr	r3, [pc, #88]	; (800c148 <xTaskResumeAll+0x134>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1f1      	bne.n	800c0e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <xTaskResumeAll+0x138>)
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c104:	4b10      	ldr	r3, [pc, #64]	; (800c148 <xTaskResumeAll+0x134>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d009      	beq.n	800c120 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c10c:	2301      	movs	r3, #1
 800c10e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c110:	4b0f      	ldr	r3, [pc, #60]	; (800c150 <xTaskResumeAll+0x13c>)
 800c112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c120:	f001 f8e0 	bl	800d2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800c124:	68bb      	ldr	r3, [r7, #8]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20000fb8 	.word	0x20000fb8
 800c134:	20000f90 	.word	0x20000f90
 800c138:	20000f50 	.word	0x20000f50
 800c13c:	20000f98 	.word	0x20000f98
 800c140:	20000ac0 	.word	0x20000ac0
 800c144:	20000abc 	.word	0x20000abc
 800c148:	20000fa4 	.word	0x20000fa4
 800c14c:	20000fa0 	.word	0x20000fa0
 800c150:	e000ed04 	.word	0xe000ed04

0800c154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <xTaskGetTickCount+0x1c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c160:	687b      	ldr	r3, [r7, #4]
}
 800c162:	4618      	mov	r0, r3
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	20000f94 	.word	0x20000f94

0800c174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c17a:	2300      	movs	r3, #0
 800c17c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c17e:	4b50      	ldr	r3, [pc, #320]	; (800c2c0 <xTaskIncrementTick+0x14c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	f040 808b 	bne.w	800c29e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c188:	4b4e      	ldr	r3, [pc, #312]	; (800c2c4 <xTaskIncrementTick+0x150>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3301      	adds	r3, #1
 800c18e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c190:	4a4c      	ldr	r2, [pc, #304]	; (800c2c4 <xTaskIncrementTick+0x150>)
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d122      	bne.n	800c1e2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c19c:	4b4a      	ldr	r3, [pc, #296]	; (800c2c8 <xTaskIncrementTick+0x154>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00c      	beq.n	800c1c0 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	b672      	cpsid	i
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	b662      	cpsie	i
 800c1ba:	603b      	str	r3, [r7, #0]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <xTaskIncrementTick+0x4a>
 800c1c0:	4b41      	ldr	r3, [pc, #260]	; (800c2c8 <xTaskIncrementTick+0x154>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	4b41      	ldr	r3, [pc, #260]	; (800c2cc <xTaskIncrementTick+0x158>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <xTaskIncrementTick+0x154>)
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4a3f      	ldr	r2, [pc, #252]	; (800c2cc <xTaskIncrementTick+0x158>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b3e      	ldr	r3, [pc, #248]	; (800c2d0 <xTaskIncrementTick+0x15c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	4a3d      	ldr	r2, [pc, #244]	; (800c2d0 <xTaskIncrementTick+0x15c>)
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	f000 fadf 	bl	800c7a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1e2:	4b3c      	ldr	r3, [pc, #240]	; (800c2d4 <xTaskIncrementTick+0x160>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d349      	bcc.n	800c280 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ec:	4b36      	ldr	r3, [pc, #216]	; (800c2c8 <xTaskIncrementTick+0x154>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d104      	bne.n	800c200 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f6:	4b37      	ldr	r3, [pc, #220]	; (800c2d4 <xTaskIncrementTick+0x160>)
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fc:	601a      	str	r2, [r3, #0]
					break;
 800c1fe:	e03f      	b.n	800c280 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c200:	4b31      	ldr	r3, [pc, #196]	; (800c2c8 <xTaskIncrementTick+0x154>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d203      	bcs.n	800c220 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c218:	4a2e      	ldr	r2, [pc, #184]	; (800c2d4 <xTaskIncrementTick+0x160>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c21e:	e02f      	b.n	800c280 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe ff69 	bl	800b0fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	3318      	adds	r3, #24
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe ff60 	bl	800b0fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	4b25      	ldr	r3, [pc, #148]	; (800c2d8 <xTaskIncrementTick+0x164>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d903      	bls.n	800c250 <xTaskIncrementTick+0xdc>
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	4a22      	ldr	r2, [pc, #136]	; (800c2d8 <xTaskIncrementTick+0x164>)
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4a1f      	ldr	r2, [pc, #124]	; (800c2dc <xTaskIncrementTick+0x168>)
 800c25e:	441a      	add	r2, r3
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	3304      	adds	r3, #4
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f7fe feeb 	bl	800b042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c270:	4b1b      	ldr	r3, [pc, #108]	; (800c2e0 <xTaskIncrementTick+0x16c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	429a      	cmp	r2, r3
 800c278:	d3b8      	bcc.n	800c1ec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c27a:	2301      	movs	r3, #1
 800c27c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c27e:	e7b5      	b.n	800c1ec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c280:	4b17      	ldr	r3, [pc, #92]	; (800c2e0 <xTaskIncrementTick+0x16c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	4915      	ldr	r1, [pc, #84]	; (800c2dc <xTaskIncrementTick+0x168>)
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d907      	bls.n	800c2a8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c298:	2301      	movs	r3, #1
 800c29a:	617b      	str	r3, [r7, #20]
 800c29c:	e004      	b.n	800c2a8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c29e:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <xTaskIncrementTick+0x170>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	4a0f      	ldr	r2, [pc, #60]	; (800c2e4 <xTaskIncrementTick+0x170>)
 800c2a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c2a8:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <xTaskIncrementTick+0x174>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c2b4:	697b      	ldr	r3, [r7, #20]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3718      	adds	r7, #24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000fb8 	.word	0x20000fb8
 800c2c4:	20000f94 	.word	0x20000f94
 800c2c8:	20000f48 	.word	0x20000f48
 800c2cc:	20000f4c 	.word	0x20000f4c
 800c2d0:	20000fa8 	.word	0x20000fa8
 800c2d4:	20000fb0 	.word	0x20000fb0
 800c2d8:	20000f98 	.word	0x20000f98
 800c2dc:	20000ac0 	.word	0x20000ac0
 800c2e0:	20000abc 	.word	0x20000abc
 800c2e4:	20000fa0 	.word	0x20000fa0
 800c2e8:	20000fa4 	.word	0x20000fa4

0800c2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2f2:	4b29      	ldr	r3, [pc, #164]	; (800c398 <vTaskSwitchContext+0xac>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2fa:	4b28      	ldr	r3, [pc, #160]	; (800c39c <vTaskSwitchContext+0xb0>)
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c300:	e043      	b.n	800c38a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c302:	4b26      	ldr	r3, [pc, #152]	; (800c39c <vTaskSwitchContext+0xb0>)
 800c304:	2200      	movs	r2, #0
 800c306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c308:	4b25      	ldr	r3, [pc, #148]	; (800c3a0 <vTaskSwitchContext+0xb4>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	e012      	b.n	800c336 <vTaskSwitchContext+0x4a>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d10c      	bne.n	800c330 <vTaskSwitchContext+0x44>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	b672      	cpsid	i
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	b662      	cpsie	i
 800c32a:	607b      	str	r3, [r7, #4]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <vTaskSwitchContext+0x42>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3b01      	subs	r3, #1
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	491b      	ldr	r1, [pc, #108]	; (800c3a4 <vTaskSwitchContext+0xb8>)
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	440b      	add	r3, r1
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0e2      	beq.n	800c310 <vTaskSwitchContext+0x24>
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4a13      	ldr	r2, [pc, #76]	; (800c3a4 <vTaskSwitchContext+0xb8>)
 800c356:	4413      	add	r3, r2
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	605a      	str	r2, [r3, #4]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	3308      	adds	r3, #8
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d104      	bne.n	800c37a <vTaskSwitchContext+0x8e>
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	605a      	str	r2, [r3, #4]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	4a09      	ldr	r2, [pc, #36]	; (800c3a8 <vTaskSwitchContext+0xbc>)
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	4a06      	ldr	r2, [pc, #24]	; (800c3a0 <vTaskSwitchContext+0xb4>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6013      	str	r3, [r2, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	20000fb8 	.word	0x20000fb8
 800c39c:	20000fa4 	.word	0x20000fa4
 800c3a0:	20000f98 	.word	0x20000f98
 800c3a4:	20000ac0 	.word	0x20000ac0
 800c3a8:	20000abc 	.word	0x20000abc

0800c3ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10c      	bne.n	800c3d6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	b672      	cpsid	i
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	b662      	cpsie	i
 800c3d0:	60fb      	str	r3, [r7, #12]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <vTaskPlaceOnEventList+0x48>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3318      	adds	r3, #24
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7fe fe53 	bl	800b08a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	6838      	ldr	r0, [r7, #0]
 800c3e8:	f000 fa8a 	bl	800c900 <prvAddCurrentTaskToDelayedList>
}
 800c3ec:	bf00      	nop
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	20000abc 	.word	0x20000abc

0800c3f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10c      	bne.n	800c424 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	b672      	cpsid	i
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	b662      	cpsie	i
 800c41e:	617b      	str	r3, [r7, #20]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <vTaskPlaceOnEventListRestricted+0x58>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3318      	adds	r3, #24
 800c42a:	4619      	mov	r1, r3
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7fe fe08 	bl	800b042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f000 fa5d 	bl	800c900 <prvAddCurrentTaskToDelayedList>
	}
 800c446:	bf00      	nop
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20000abc 	.word	0x20000abc

0800c454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10c      	bne.n	800c484 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	b672      	cpsid	i
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	b662      	cpsie	i
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3318      	adds	r3, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe fe37 	bl	800b0fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48e:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <xTaskRemoveFromEventList+0xb4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d11d      	bne.n	800c4d2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fe2e 	bl	800b0fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a4:	4b19      	ldr	r3, [pc, #100]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d903      	bls.n	800c4b4 <xTaskRemoveFromEventList+0x60>
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	4a16      	ldr	r2, [pc, #88]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4a13      	ldr	r2, [pc, #76]	; (800c510 <xTaskRemoveFromEventList+0xbc>)
 800c4c2:	441a      	add	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fe fdb9 	bl	800b042 <vListInsertEnd>
 800c4d0:	e005      	b.n	800c4de <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	480e      	ldr	r0, [pc, #56]	; (800c514 <xTaskRemoveFromEventList+0xc0>)
 800c4da:	f7fe fdb2 	bl	800b042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <xTaskRemoveFromEventList+0xc4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d905      	bls.n	800c4f8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <xTaskRemoveFromEventList+0xc8>)
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e001      	b.n	800c4fc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000fb8 	.word	0x20000fb8
 800c50c:	20000f98 	.word	0x20000f98
 800c510:	20000ac0 	.word	0x20000ac0
 800c514:	20000f50 	.word	0x20000f50
 800c518:	20000abc 	.word	0x20000abc
 800c51c:	20000fa4 	.word	0x20000fa4

0800c520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <vTaskInternalSetTimeOutState+0x24>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <vTaskInternalSetTimeOutState+0x28>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	605a      	str	r2, [r3, #4]
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20000fa8 	.word	0x20000fa8
 800c548:	20000f94 	.word	0x20000f94

0800c54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10c      	bne.n	800c576 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	b672      	cpsid	i
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	b662      	cpsie	i
 800c570:	613b      	str	r3, [r7, #16]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10c      	bne.n	800c596 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c580:	b672      	cpsid	i
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	b662      	cpsie	i
 800c590:	60fb      	str	r3, [r7, #12]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c596:	f000 fe71 	bl	800d27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c59a:	4b1d      	ldr	r3, [pc, #116]	; (800c610 <xTaskCheckForTimeOut+0xc4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d102      	bne.n	800c5ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e023      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	4b15      	ldr	r3, [pc, #84]	; (800c614 <xTaskCheckForTimeOut+0xc8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d007      	beq.n	800c5d6 <xTaskCheckForTimeOut+0x8a>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	e015      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d20b      	bcs.n	800c5f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ff97 	bl	800c520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61fb      	str	r3, [r7, #28]
 800c5f6:	e004      	b.n	800c602 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c602:	f000 fe6f 	bl	800d2e4 <vPortExitCritical>

	return xReturn;
 800c606:	69fb      	ldr	r3, [r7, #28]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20000f94 	.word	0x20000f94
 800c614:	20000fa8 	.word	0x20000fa8

0800c618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c61c:	4b03      	ldr	r3, [pc, #12]	; (800c62c <vTaskMissedYield+0x14>)
 800c61e:	2201      	movs	r2, #1
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	bf00      	nop
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	20000fa4 	.word	0x20000fa4

0800c630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c638:	f000 f852 	bl	800c6e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <prvIdleTask+0x28>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d9f9      	bls.n	800c638 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c644:	4b05      	ldr	r3, [pc, #20]	; (800c65c <prvIdleTask+0x2c>)
 800c646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c654:	e7f0      	b.n	800c638 <prvIdleTask+0x8>
 800c656:	bf00      	nop
 800c658:	20000ac0 	.word	0x20000ac0
 800c65c:	e000ed04 	.word	0xe000ed04

0800c660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c666:	2300      	movs	r3, #0
 800c668:	607b      	str	r3, [r7, #4]
 800c66a:	e00c      	b.n	800c686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a12      	ldr	r2, [pc, #72]	; (800c6c0 <prvInitialiseTaskLists+0x60>)
 800c678:	4413      	add	r3, r2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe fcb4 	bl	800afe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3301      	adds	r3, #1
 800c684:	607b      	str	r3, [r7, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b37      	cmp	r3, #55	; 0x37
 800c68a:	d9ef      	bls.n	800c66c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c68c:	480d      	ldr	r0, [pc, #52]	; (800c6c4 <prvInitialiseTaskLists+0x64>)
 800c68e:	f7fe fcab 	bl	800afe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c692:	480d      	ldr	r0, [pc, #52]	; (800c6c8 <prvInitialiseTaskLists+0x68>)
 800c694:	f7fe fca8 	bl	800afe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c698:	480c      	ldr	r0, [pc, #48]	; (800c6cc <prvInitialiseTaskLists+0x6c>)
 800c69a:	f7fe fca5 	bl	800afe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c69e:	480c      	ldr	r0, [pc, #48]	; (800c6d0 <prvInitialiseTaskLists+0x70>)
 800c6a0:	f7fe fca2 	bl	800afe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6a4:	480b      	ldr	r0, [pc, #44]	; (800c6d4 <prvInitialiseTaskLists+0x74>)
 800c6a6:	f7fe fc9f 	bl	800afe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6aa:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <prvInitialiseTaskLists+0x78>)
 800c6ac:	4a05      	ldr	r2, [pc, #20]	; (800c6c4 <prvInitialiseTaskLists+0x64>)
 800c6ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <prvInitialiseTaskLists+0x7c>)
 800c6b2:	4a05      	ldr	r2, [pc, #20]	; (800c6c8 <prvInitialiseTaskLists+0x68>)
 800c6b4:	601a      	str	r2, [r3, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000ac0 	.word	0x20000ac0
 800c6c4:	20000f20 	.word	0x20000f20
 800c6c8:	20000f34 	.word	0x20000f34
 800c6cc:	20000f50 	.word	0x20000f50
 800c6d0:	20000f64 	.word	0x20000f64
 800c6d4:	20000f7c 	.word	0x20000f7c
 800c6d8:	20000f48 	.word	0x20000f48
 800c6dc:	20000f4c 	.word	0x20000f4c

0800c6e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6e6:	e019      	b.n	800c71c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6e8:	f000 fdc8 	bl	800d27c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ec:	4b10      	ldr	r3, [pc, #64]	; (800c730 <prvCheckTasksWaitingTermination+0x50>)
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe fcff 	bl	800b0fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <prvCheckTasksWaitingTermination+0x54>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3b01      	subs	r3, #1
 800c704:	4a0b      	ldr	r2, [pc, #44]	; (800c734 <prvCheckTasksWaitingTermination+0x54>)
 800c706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c708:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3b01      	subs	r3, #1
 800c70e:	4a0a      	ldr	r2, [pc, #40]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c712:	f000 fde7 	bl	800d2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f810 	bl	800c73c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <prvCheckTasksWaitingTermination+0x58>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1e1      	bne.n	800c6e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	20000f64 	.word	0x20000f64
 800c734:	20000f90 	.word	0x20000f90
 800c738:	20000f78 	.word	0x20000f78

0800c73c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d108      	bne.n	800c760 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c752:	4618      	mov	r0, r3
 800c754:	f000 ff88 	bl	800d668 <vPortFree>
				vPortFree( pxTCB );
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 ff85 	bl	800d668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c75e:	e01a      	b.n	800c796 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c766:	2b01      	cmp	r3, #1
 800c768:	d103      	bne.n	800c772 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 ff7c 	bl	800d668 <vPortFree>
	}
 800c770:	e011      	b.n	800c796 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d00c      	beq.n	800c796 <prvDeleteTCB+0x5a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	b672      	cpsid	i
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	b662      	cpsie	i
 800c790:	60fb      	str	r3, [r7, #12]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <prvDeleteTCB+0x58>
	}
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7a6:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <prvResetNextTaskUnblockTime+0x38>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d104      	bne.n	800c7ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <prvResetNextTaskUnblockTime+0x3c>)
 800c7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7b8:	e008      	b.n	800c7cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ba:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <prvResetNextTaskUnblockTime+0x38>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4a04      	ldr	r2, [pc, #16]	; (800c7dc <prvResetNextTaskUnblockTime+0x3c>)
 800c7ca:	6013      	str	r3, [r2, #0]
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	20000f48 	.word	0x20000f48
 800c7dc:	20000fb0 	.word	0x20000fb0

0800c7e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <xTaskGetSchedulerState+0x34>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d102      	bne.n	800c7f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	607b      	str	r3, [r7, #4]
 800c7f2:	e008      	b.n	800c806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f4:	4b08      	ldr	r3, [pc, #32]	; (800c818 <xTaskGetSchedulerState+0x38>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d102      	bne.n	800c802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	607b      	str	r3, [r7, #4]
 800c800:	e001      	b.n	800c806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c802:	2300      	movs	r3, #0
 800c804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c806:	687b      	ldr	r3, [r7, #4]
	}
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	20000f9c 	.word	0x20000f9c
 800c818:	20000fb8 	.word	0x20000fb8

0800c81c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d05a      	beq.n	800c8e8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c832:	4b30      	ldr	r3, [pc, #192]	; (800c8f4 <xTaskPriorityDisinherit+0xd8>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d00c      	beq.n	800c856 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	b672      	cpsid	i
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	b662      	cpsie	i
 800c850:	60fb      	str	r3, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10c      	bne.n	800c878 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	b672      	cpsid	i
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	b662      	cpsie	i
 800c872:	60bb      	str	r3, [r7, #8]
}
 800c874:	bf00      	nop
 800c876:	e7fe      	b.n	800c876 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87c:	1e5a      	subs	r2, r3, #1
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d02c      	beq.n	800c8e8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c892:	2b00      	cmp	r3, #0
 800c894:	d128      	bne.n	800c8e8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3304      	adds	r3, #4
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fc2e 	bl	800b0fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b8:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <xTaskPriorityDisinherit+0xdc>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d903      	bls.n	800c8c8 <xTaskPriorityDisinherit+0xac>
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	4a0c      	ldr	r2, [pc, #48]	; (800c8f8 <xTaskPriorityDisinherit+0xdc>)
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <xTaskPriorityDisinherit+0xe0>)
 800c8d6:	441a      	add	r2, r3
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	3304      	adds	r3, #4
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	f7fe fbaf 	bl	800b042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8e8:	697b      	ldr	r3, [r7, #20]
	}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	20000abc 	.word	0x20000abc
 800c8f8:	20000f98 	.word	0x20000f98
 800c8fc:	20000ac0 	.word	0x20000ac0

0800c900 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <prvAddCurrentTaskToDelayedList+0x90>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c910:	4b20      	ldr	r3, [pc, #128]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3304      	adds	r3, #4
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe fbf0 	bl	800b0fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c922:	d10a      	bne.n	800c93a <prvAddCurrentTaskToDelayedList+0x3a>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d007      	beq.n	800c93a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c92a:	4b1a      	ldr	r3, [pc, #104]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	4819      	ldr	r0, [pc, #100]	; (800c998 <prvAddCurrentTaskToDelayedList+0x98>)
 800c934:	f7fe fb85 	bl	800b042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c938:	e026      	b.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d209      	bcs.n	800c966 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3304      	adds	r3, #4
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7fe fb93 	bl	800b08a <vListInsert>
}
 800c964:	e010      	b.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c966:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <prvAddCurrentTaskToDelayedList+0x94>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3304      	adds	r3, #4
 800c970:	4619      	mov	r1, r3
 800c972:	4610      	mov	r0, r2
 800c974:	f7fe fb89 	bl	800b08a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d202      	bcs.n	800c988 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c982:	4a08      	ldr	r2, [pc, #32]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	6013      	str	r3, [r2, #0]
}
 800c988:	bf00      	nop
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20000f94 	.word	0x20000f94
 800c994:	20000abc 	.word	0x20000abc
 800c998:	20000f7c 	.word	0x20000f7c
 800c99c:	20000f4c 	.word	0x20000f4c
 800c9a0:	20000f48 	.word	0x20000f48
 800c9a4:	20000fb0 	.word	0x20000fb0

0800c9a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	; 0x28
 800c9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9b2:	f000 fb15 	bl	800cfe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ca2c <xTimerCreateTimerTask+0x84>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d021      	beq.n	800ca02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9c6:	1d3a      	adds	r2, r7, #4
 800c9c8:	f107 0108 	add.w	r1, r7, #8
 800c9cc:	f107 030c 	add.w	r3, r7, #12
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe faef 	bl	800afb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	9202      	str	r2, [sp, #8]
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	4911      	ldr	r1, [pc, #68]	; (800ca30 <xTimerCreateTimerTask+0x88>)
 800c9ea:	4812      	ldr	r0, [pc, #72]	; (800ca34 <xTimerCreateTimerTask+0x8c>)
 800c9ec:	f7ff f8ba 	bl	800bb64 <xTaskCreateStatic>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	4a11      	ldr	r2, [pc, #68]	; (800ca38 <xTimerCreateTimerTask+0x90>)
 800c9f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <xTimerCreateTimerTask+0x90>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10c      	bne.n	800ca22 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	b672      	cpsid	i
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	b662      	cpsie	i
 800ca1c:	613b      	str	r3, [r7, #16]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ca22:	697b      	ldr	r3, [r7, #20]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20000fec 	.word	0x20000fec
 800ca30:	0800ed94 	.word	0x0800ed94
 800ca34:	0800cb79 	.word	0x0800cb79
 800ca38:	20000ff0 	.word	0x20000ff0

0800ca3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08a      	sub	sp, #40	; 0x28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10c      	bne.n	800ca6e <xTimerGenericCommand+0x32>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	b672      	cpsid	i
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	b662      	cpsie	i
 800ca68:	623b      	str	r3, [r7, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	e7fe      	b.n	800ca6c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca6e:	4b1a      	ldr	r3, [pc, #104]	; (800cad8 <xTimerGenericCommand+0x9c>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d02a      	beq.n	800cacc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b05      	cmp	r3, #5
 800ca86:	dc18      	bgt.n	800caba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca88:	f7ff feaa 	bl	800c7e0 <xTaskGetSchedulerState>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d109      	bne.n	800caa6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca92:	4b11      	ldr	r3, [pc, #68]	; (800cad8 <xTimerGenericCommand+0x9c>)
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f107 0110 	add.w	r1, r7, #16
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca9e:	f7fe fc67 	bl	800b370 <xQueueGenericSend>
 800caa2:	6278      	str	r0, [r7, #36]	; 0x24
 800caa4:	e012      	b.n	800cacc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800caa6:	4b0c      	ldr	r3, [pc, #48]	; (800cad8 <xTimerGenericCommand+0x9c>)
 800caa8:	6818      	ldr	r0, [r3, #0]
 800caaa:	f107 0110 	add.w	r1, r7, #16
 800caae:	2300      	movs	r3, #0
 800cab0:	2200      	movs	r2, #0
 800cab2:	f7fe fc5d 	bl	800b370 <xQueueGenericSend>
 800cab6:	6278      	str	r0, [r7, #36]	; 0x24
 800cab8:	e008      	b.n	800cacc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caba:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <xTimerGenericCommand+0x9c>)
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	f107 0110 	add.w	r1, r7, #16
 800cac2:	2300      	movs	r3, #0
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	f7fe fd59 	bl	800b57c <xQueueGenericSendFromISR>
 800caca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3728      	adds	r7, #40	; 0x28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20000fec 	.word	0x20000fec

0800cadc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae6:	4b23      	ldr	r3, [pc, #140]	; (800cb74 <prvProcessExpiredTimer+0x98>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fe fb01 	bl	800b0fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb00:	f003 0304 	and.w	r3, r3, #4
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d024      	beq.n	800cb52 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	18d1      	adds	r1, r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	6978      	ldr	r0, [r7, #20]
 800cb16:	f000 f8d3 	bl	800ccc0 <prvInsertTimerInActiveList>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d021      	beq.n	800cb64 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb20:	2300      	movs	r3, #0
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	6978      	ldr	r0, [r7, #20]
 800cb2c:	f7ff ff86 	bl	800ca3c <xTimerGenericCommand>
 800cb30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d115      	bne.n	800cb64 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	b672      	cpsid	i
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	b662      	cpsie	i
 800cb4c:	60fb      	str	r3, [r7, #12]
}
 800cb4e:	bf00      	nop
 800cb50:	e7fe      	b.n	800cb50 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb58:	f023 0301 	bic.w	r3, r3, #1
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	6978      	ldr	r0, [r7, #20]
 800cb6a:	4798      	blx	r3
}
 800cb6c:	bf00      	nop
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	20000fe4 	.word	0x20000fe4

0800cb78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb80:	f107 0308 	add.w	r3, r7, #8
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f857 	bl	800cc38 <prvGetNextExpireTime>
 800cb8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f000 f803 	bl	800cb9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb96:	f000 f8d5 	bl	800cd44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb9a:	e7f1      	b.n	800cb80 <prvTimerTask+0x8>

0800cb9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cba6:	f7ff fa27 	bl	800bff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbaa:	f107 0308 	add.w	r3, r7, #8
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f866 	bl	800cc80 <prvSampleTimeNow>
 800cbb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d130      	bne.n	800cc1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <prvProcessTimerOrBlockTask+0x3c>
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d806      	bhi.n	800cbd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbca:	f7ff fa23 	bl	800c014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff ff83 	bl	800cadc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbd6:	e024      	b.n	800cc22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d008      	beq.n	800cbf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbde:	4b13      	ldr	r3, [pc, #76]	; (800cc2c <prvProcessTimerOrBlockTask+0x90>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <prvProcessTimerOrBlockTask+0x50>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e000      	b.n	800cbee <prvProcessTimerOrBlockTask+0x52>
 800cbec:	2300      	movs	r3, #0
 800cbee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbf0:	4b0f      	ldr	r3, [pc, #60]	; (800cc30 <prvProcessTimerOrBlockTask+0x94>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	f7fe ff7d 	bl	800bafc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc02:	f7ff fa07 	bl	800c014 <xTaskResumeAll>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc0c:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <prvProcessTimerOrBlockTask+0x98>)
 800cc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	f3bf 8f6f 	isb	sy
}
 800cc1c:	e001      	b.n	800cc22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc1e:	f7ff f9f9 	bl	800c014 <xTaskResumeAll>
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20000fe8 	.word	0x20000fe8
 800cc30:	20000fec 	.word	0x20000fec
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc40:	4b0e      	ldr	r3, [pc, #56]	; (800cc7c <prvGetNextExpireTime+0x44>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <prvGetNextExpireTime+0x16>
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	e000      	b.n	800cc50 <prvGetNextExpireTime+0x18>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d105      	bne.n	800cc68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc5c:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <prvGetNextExpireTime+0x44>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	60fb      	str	r3, [r7, #12]
 800cc66:	e001      	b.n	800cc6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20000fe4 	.word	0x20000fe4

0800cc80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc88:	f7ff fa64 	bl	800c154 <xTaskGetTickCount>
 800cc8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc8e:	4b0b      	ldr	r3, [pc, #44]	; (800ccbc <prvSampleTimeNow+0x3c>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d205      	bcs.n	800cca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc98:	f000 f93c 	bl	800cf14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	e002      	b.n	800ccaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccaa:	4a04      	ldr	r2, [pc, #16]	; (800ccbc <prvSampleTimeNow+0x3c>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20000ff4 	.word	0x20000ff4

0800ccc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d812      	bhi.n	800cd0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	1ad2      	subs	r2, r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d302      	bcc.n	800ccfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e01b      	b.n	800cd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccfa:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <prvInsertTimerInActiveList+0x7c>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3304      	adds	r3, #4
 800cd02:	4619      	mov	r1, r3
 800cd04:	4610      	mov	r0, r2
 800cd06:	f7fe f9c0 	bl	800b08a <vListInsert>
 800cd0a:	e012      	b.n	800cd32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d206      	bcs.n	800cd22 <prvInsertTimerInActiveList+0x62>
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d302      	bcc.n	800cd22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	617b      	str	r3, [r7, #20]
 800cd20:	e007      	b.n	800cd32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd22:	4b07      	ldr	r3, [pc, #28]	; (800cd40 <prvInsertTimerInActiveList+0x80>)
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7fe f9ac 	bl	800b08a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd32:	697b      	ldr	r3, [r7, #20]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20000fe8 	.word	0x20000fe8
 800cd40:	20000fe4 	.word	0x20000fe4

0800cd44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08e      	sub	sp, #56	; 0x38
 800cd48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd4a:	e0d0      	b.n	800ceee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	da1a      	bge.n	800cd88 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd52:	1d3b      	adds	r3, r7, #4
 800cd54:	3304      	adds	r3, #4
 800cd56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10c      	bne.n	800cd78 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	61fb      	str	r3, [r7, #28]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd7e:	6850      	ldr	r0, [r2, #4]
 800cd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd82:	6892      	ldr	r2, [r2, #8]
 800cd84:	4611      	mov	r1, r2
 800cd86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f2c0 80af 	blt.w	800ceee <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	3304      	adds	r3, #4
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe f9ab 	bl	800b0fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cda6:	463b      	mov	r3, r7
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff ff69 	bl	800cc80 <prvSampleTimeNow>
 800cdae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	f200 809a 	bhi.w	800ceec <prvProcessReceivedCommands+0x1a8>
 800cdb8:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <prvProcessReceivedCommands+0x7c>)
 800cdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdbe:	bf00      	nop
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cde9 	.word	0x0800cde9
 800cdcc:	0800ce61 	.word	0x0800ce61
 800cdd0:	0800ce75 	.word	0x0800ce75
 800cdd4:	0800cec3 	.word	0x0800cec3
 800cdd8:	0800cde9 	.word	0x0800cde9
 800cddc:	0800cde9 	.word	0x0800cde9
 800cde0:	0800ce61 	.word	0x0800ce61
 800cde4:	0800ce75 	.word	0x0800ce75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdee:	f043 0301 	orr.w	r3, r3, #1
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	18d1      	adds	r1, r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce08:	f7ff ff5a 	bl	800ccc0 <prvInsertTimerInActiveList>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d06d      	beq.n	800ceee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce20:	f003 0304 	and.w	r3, r3, #4
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d062      	beq.n	800ceee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	441a      	add	r2, r3
 800ce30:	2300      	movs	r3, #0
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	2300      	movs	r3, #0
 800ce36:	2100      	movs	r1, #0
 800ce38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce3a:	f7ff fdff 	bl	800ca3c <xTimerGenericCommand>
 800ce3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d153      	bne.n	800ceee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4a:	b672      	cpsid	i
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	b662      	cpsie	i
 800ce5a:	61bb      	str	r3, [r7, #24]
}
 800ce5c:	bf00      	nop
 800ce5e:	e7fe      	b.n	800ce5e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce66:	f023 0301 	bic.w	r3, r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce72:	e03c      	b.n	800ceee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10c      	bne.n	800ceae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	b672      	cpsid	i
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	b662      	cpsie	i
 800cea8:	617b      	str	r3, [r7, #20]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	18d1      	adds	r1, r2, r3
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cebc:	f7ff ff00 	bl	800ccc0 <prvInsertTimerInActiveList>
					break;
 800cec0:	e015      	b.n	800ceee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec8:	f003 0302 	and.w	r3, r3, #2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ced0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ced2:	f000 fbc9 	bl	800d668 <vPortFree>
 800ced6:	e00a      	b.n	800ceee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cede:	f023 0301 	bic.w	r3, r3, #1
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ceea:	e000      	b.n	800ceee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800ceec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceee:	4b08      	ldr	r3, [pc, #32]	; (800cf10 <prvProcessReceivedCommands+0x1cc>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	1d39      	adds	r1, r7, #4
 800cef4:	2200      	movs	r2, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fbe0 	bl	800b6bc <xQueueReceive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f47f af24 	bne.w	800cd4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	3730      	adds	r7, #48	; 0x30
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000fec 	.word	0x20000fec

0800cf14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf1a:	e04a      	b.n	800cfb2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf1c:	4b2e      	ldr	r3, [pc, #184]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf26:	4b2c      	ldr	r3, [pc, #176]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fe f8e1 	bl	800b0fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d030      	beq.n	800cfb2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4413      	add	r3, r2
 800cf58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d90e      	bls.n	800cf80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3304      	adds	r3, #4
 800cf76:	4619      	mov	r1, r3
 800cf78:	4610      	mov	r0, r2
 800cf7a:	f7fe f886 	bl	800b08a <vListInsert>
 800cf7e:	e018      	b.n	800cfb2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf80:	2300      	movs	r3, #0
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	2300      	movs	r3, #0
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	2100      	movs	r1, #0
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f7ff fd56 	bl	800ca3c <xTimerGenericCommand>
 800cf90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10c      	bne.n	800cfb2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	b672      	cpsid	i
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	b662      	cpsie	i
 800cfac:	603b      	str	r3, [r7, #0]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfb2:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1af      	bne.n	800cf1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfbc:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <prvSwitchTimerLists+0xc8>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a04      	ldr	r2, [pc, #16]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cfc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfca:	4a04      	ldr	r2, [pc, #16]	; (800cfdc <prvSwitchTimerLists+0xc8>)
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	6013      	str	r3, [r2, #0]
}
 800cfd0:	bf00      	nop
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20000fe4 	.word	0x20000fe4
 800cfdc:	20000fe8 	.word	0x20000fe8

0800cfe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfe6:	f000 f949 	bl	800d27c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfea:	4b15      	ldr	r3, [pc, #84]	; (800d040 <prvCheckForValidListAndQueue+0x60>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d120      	bne.n	800d034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cff2:	4814      	ldr	r0, [pc, #80]	; (800d044 <prvCheckForValidListAndQueue+0x64>)
 800cff4:	f7fd fff8 	bl	800afe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cff8:	4813      	ldr	r0, [pc, #76]	; (800d048 <prvCheckForValidListAndQueue+0x68>)
 800cffa:	f7fd fff5 	bl	800afe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <prvCheckForValidListAndQueue+0x6c>)
 800d000:	4a10      	ldr	r2, [pc, #64]	; (800d044 <prvCheckForValidListAndQueue+0x64>)
 800d002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d004:	4b12      	ldr	r3, [pc, #72]	; (800d050 <prvCheckForValidListAndQueue+0x70>)
 800d006:	4a10      	ldr	r2, [pc, #64]	; (800d048 <prvCheckForValidListAndQueue+0x68>)
 800d008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d00a:	2300      	movs	r3, #0
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	4b11      	ldr	r3, [pc, #68]	; (800d054 <prvCheckForValidListAndQueue+0x74>)
 800d010:	4a11      	ldr	r2, [pc, #68]	; (800d058 <prvCheckForValidListAndQueue+0x78>)
 800d012:	2110      	movs	r1, #16
 800d014:	200a      	movs	r0, #10
 800d016:	f7fe f905 	bl	800b224 <xQueueGenericCreateStatic>
 800d01a:	4603      	mov	r3, r0
 800d01c:	4a08      	ldr	r2, [pc, #32]	; (800d040 <prvCheckForValidListAndQueue+0x60>)
 800d01e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <prvCheckForValidListAndQueue+0x60>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d005      	beq.n	800d034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d028:	4b05      	ldr	r3, [pc, #20]	; (800d040 <prvCheckForValidListAndQueue+0x60>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	490b      	ldr	r1, [pc, #44]	; (800d05c <prvCheckForValidListAndQueue+0x7c>)
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fd3a 	bl	800baa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d034:	f000 f956 	bl	800d2e4 <vPortExitCritical>
}
 800d038:	bf00      	nop
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000fec 	.word	0x20000fec
 800d044:	20000fbc 	.word	0x20000fbc
 800d048:	20000fd0 	.word	0x20000fd0
 800d04c:	20000fe4 	.word	0x20000fe4
 800d050:	20000fe8 	.word	0x20000fe8
 800d054:	20001098 	.word	0x20001098
 800d058:	20000ff8 	.word	0x20000ff8
 800d05c:	0800ed9c 	.word	0x0800ed9c

0800d060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3b04      	subs	r3, #4
 800d070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3b04      	subs	r3, #4
 800d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f023 0201 	bic.w	r2, r3, #1
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	3b04      	subs	r3, #4
 800d08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d090:	4a0c      	ldr	r2, [pc, #48]	; (800d0c4 <pxPortInitialiseStack+0x64>)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3b14      	subs	r3, #20
 800d09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	3b04      	subs	r3, #4
 800d0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f06f 0202 	mvn.w	r2, #2
 800d0ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3b20      	subs	r3, #32
 800d0b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr
 800d0c4:	0800d0c9 	.word	0x0800d0c9

0800d0c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0d2:	4b14      	ldr	r3, [pc, #80]	; (800d124 <prvTaskExitError+0x5c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0da:	d00c      	beq.n	800d0f6 <prvTaskExitError+0x2e>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	b672      	cpsid	i
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	b662      	cpsie	i
 800d0f0:	60fb      	str	r3, [r7, #12]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <prvTaskExitError+0x2c>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	b672      	cpsid	i
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	b662      	cpsie	i
 800d10a:	60bb      	str	r3, [r7, #8]
}
 800d10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d10e:	bf00      	nop
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d0fc      	beq.n	800d110 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	20000098 	.word	0x20000098
	...

0800d130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <pxCurrentTCBConst2>)
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	6808      	ldr	r0, [r1, #0]
 800d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f380 8809 	msr	PSP, r0
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8811 	msr	BASEPRI, r0
 800d14a:	4770      	bx	lr
 800d14c:	f3af 8000 	nop.w

0800d150 <pxCurrentTCBConst2>:
 800d150:	20000abc 	.word	0x20000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop

0800d158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d158:	4808      	ldr	r0, [pc, #32]	; (800d17c <prvPortStartFirstTask+0x24>)
 800d15a:	6800      	ldr	r0, [r0, #0]
 800d15c:	6800      	ldr	r0, [r0, #0]
 800d15e:	f380 8808 	msr	MSP, r0
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f380 8814 	msr	CONTROL, r0
 800d16a:	b662      	cpsie	i
 800d16c:	b661      	cpsie	f
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	df00      	svc	0
 800d178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d17a:	bf00      	nop
 800d17c:	e000ed08 	.word	0xe000ed08

0800d180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d186:	4b37      	ldr	r3, [pc, #220]	; (800d264 <xPortStartScheduler+0xe4>)
 800d188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ae:	4b2f      	ldr	r3, [pc, #188]	; (800d26c <xPortStartScheduler+0xec>)
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1b4:	e009      	b.n	800d1ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d1b6:	4b2d      	ldr	r3, [pc, #180]	; (800d26c <xPortStartScheduler+0xec>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4a2b      	ldr	r2, [pc, #172]	; (800d26c <xPortStartScheduler+0xec>)
 800d1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d2:	2b80      	cmp	r3, #128	; 0x80
 800d1d4:	d0ef      	beq.n	800d1b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1d6:	4b25      	ldr	r3, [pc, #148]	; (800d26c <xPortStartScheduler+0xec>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f1c3 0307 	rsb	r3, r3, #7
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d00c      	beq.n	800d1fc <xPortStartScheduler+0x7c>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	b672      	cpsid	i
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	b662      	cpsie	i
 800d1f6:	60bb      	str	r3, [r7, #8]
}
 800d1f8:	bf00      	nop
 800d1fa:	e7fe      	b.n	800d1fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1fc:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <xPortStartScheduler+0xec>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	021b      	lsls	r3, r3, #8
 800d202:	4a1a      	ldr	r2, [pc, #104]	; (800d26c <xPortStartScheduler+0xec>)
 800d204:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d206:	4b19      	ldr	r3, [pc, #100]	; (800d26c <xPortStartScheduler+0xec>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d20e:	4a17      	ldr	r2, [pc, #92]	; (800d26c <xPortStartScheduler+0xec>)
 800d210:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	b2da      	uxtb	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <xPortStartScheduler+0xf0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a14      	ldr	r2, [pc, #80]	; (800d270 <xPortStartScheduler+0xf0>)
 800d220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d224:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d226:	4b12      	ldr	r3, [pc, #72]	; (800d270 <xPortStartScheduler+0xf0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a11      	ldr	r2, [pc, #68]	; (800d270 <xPortStartScheduler+0xf0>)
 800d22c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d230:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d232:	f000 f8dd 	bl	800d3f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d236:	4b0f      	ldr	r3, [pc, #60]	; (800d274 <xPortStartScheduler+0xf4>)
 800d238:	2200      	movs	r2, #0
 800d23a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d23c:	f000 f8fc 	bl	800d438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d240:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <xPortStartScheduler+0xf8>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a0c      	ldr	r2, [pc, #48]	; (800d278 <xPortStartScheduler+0xf8>)
 800d246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d24a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d24c:	f7ff ff84 	bl	800d158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d250:	f7ff f84c 	bl	800c2ec <vTaskSwitchContext>
	prvTaskExitError();
 800d254:	f7ff ff38 	bl	800d0c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	e000e400 	.word	0xe000e400
 800d268:	200010e8 	.word	0x200010e8
 800d26c:	200010ec 	.word	0x200010ec
 800d270:	e000ed20 	.word	0xe000ed20
 800d274:	20000098 	.word	0x20000098
 800d278:	e000ef34 	.word	0xe000ef34

0800d27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	b672      	cpsid	i
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	b662      	cpsie	i
 800d296:	607b      	str	r3, [r7, #4]
}
 800d298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d29a:	4b10      	ldr	r3, [pc, #64]	; (800d2dc <vPortEnterCritical+0x60>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	4a0e      	ldr	r2, [pc, #56]	; (800d2dc <vPortEnterCritical+0x60>)
 800d2a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <vPortEnterCritical+0x60>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d111      	bne.n	800d2d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2ac:	4b0c      	ldr	r3, [pc, #48]	; (800d2e0 <vPortEnterCritical+0x64>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00c      	beq.n	800d2d0 <vPortEnterCritical+0x54>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	b672      	cpsid	i
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	b662      	cpsie	i
 800d2ca:	603b      	str	r3, [r7, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <vPortEnterCritical+0x52>
	}
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20000098 	.word	0x20000098
 800d2e0:	e000ed04 	.word	0xe000ed04

0800d2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2ea:	4b13      	ldr	r3, [pc, #76]	; (800d338 <vPortExitCritical+0x54>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10c      	bne.n	800d30c <vPortExitCritical+0x28>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	b672      	cpsid	i
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	b662      	cpsie	i
 800d306:	607b      	str	r3, [r7, #4]
}
 800d308:	bf00      	nop
 800d30a:	e7fe      	b.n	800d30a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <vPortExitCritical+0x54>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3b01      	subs	r3, #1
 800d312:	4a09      	ldr	r2, [pc, #36]	; (800d338 <vPortExitCritical+0x54>)
 800d314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d316:	4b08      	ldr	r3, [pc, #32]	; (800d338 <vPortExitCritical+0x54>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d105      	bne.n	800d32a <vPortExitCritical+0x46>
 800d31e:	2300      	movs	r3, #0
 800d320:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	f383 8811 	msr	BASEPRI, r3
}
 800d328:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20000098 	.word	0x20000098
 800d33c:	00000000 	.word	0x00000000

0800d340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d340:	f3ef 8009 	mrs	r0, PSP
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <pxCurrentTCBConst>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	f01e 0f10 	tst.w	lr, #16
 800d350:	bf08      	it	eq
 800d352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	6010      	str	r0, [r2, #0]
 800d35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d364:	b672      	cpsid	i
 800d366:	f380 8811 	msr	BASEPRI, r0
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	b662      	cpsie	i
 800d374:	f7fe ffba 	bl	800c2ec <vTaskSwitchContext>
 800d378:	f04f 0000 	mov.w	r0, #0
 800d37c:	f380 8811 	msr	BASEPRI, r0
 800d380:	bc09      	pop	{r0, r3}
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	6808      	ldr	r0, [r1, #0]
 800d386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38a:	f01e 0f10 	tst.w	lr, #16
 800d38e:	bf08      	it	eq
 800d390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d394:	f380 8809 	msr	PSP, r0
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop

0800d3a0 <pxCurrentTCBConst>:
 800d3a0:	20000abc 	.word	0x20000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop

0800d3a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	b672      	cpsid	i
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	b662      	cpsie	i
 800d3c2:	607b      	str	r3, [r7, #4]
}
 800d3c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3c6:	f7fe fed5 	bl	800c174 <xTaskIncrementTick>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3d0:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <SysTick_Handler+0x44>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	f383 8811 	msr	BASEPRI, r3
}
 800d3e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3e4:	bf00      	nop
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	e000ed04 	.word	0xe000ed04

0800d3f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <vPortSetupTimerInterrupt+0x34>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <vPortSetupTimerInterrupt+0x38>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vPortSetupTimerInterrupt+0x3c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a0a      	ldr	r2, [pc, #40]	; (800d430 <vPortSetupTimerInterrupt+0x40>)
 800d406:	fba2 2303 	umull	r2, r3, r2, r3
 800d40a:	099b      	lsrs	r3, r3, #6
 800d40c:	4a09      	ldr	r2, [pc, #36]	; (800d434 <vPortSetupTimerInterrupt+0x44>)
 800d40e:	3b01      	subs	r3, #1
 800d410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d412:	4b04      	ldr	r3, [pc, #16]	; (800d424 <vPortSetupTimerInterrupt+0x34>)
 800d414:	2207      	movs	r2, #7
 800d416:	601a      	str	r2, [r3, #0]
}
 800d418:	bf00      	nop
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	e000e010 	.word	0xe000e010
 800d428:	e000e018 	.word	0xe000e018
 800d42c:	20000000 	.word	0x20000000
 800d430:	10624dd3 	.word	0x10624dd3
 800d434:	e000e014 	.word	0xe000e014

0800d438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d438:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d448 <vPortEnableVFP+0x10>
 800d43c:	6801      	ldr	r1, [r0, #0]
 800d43e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d442:	6001      	str	r1, [r0, #0]
 800d444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d446:	bf00      	nop
 800d448:	e000ed88 	.word	0xe000ed88

0800d44c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d452:	f3ef 8305 	mrs	r3, IPSR
 800d456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b0f      	cmp	r3, #15
 800d45c:	d916      	bls.n	800d48c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d45e:	4a19      	ldr	r2, [pc, #100]	; (800d4c4 <vPortValidateInterruptPriority+0x78>)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	4413      	add	r3, r2
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d468:	4b17      	ldr	r3, [pc, #92]	; (800d4c8 <vPortValidateInterruptPriority+0x7c>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	7afa      	ldrb	r2, [r7, #11]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d20c      	bcs.n	800d48c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	b672      	cpsid	i
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	b662      	cpsie	i
 800d486:	607b      	str	r3, [r7, #4]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d48c:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <vPortValidateInterruptPriority+0x80>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d494:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <vPortValidateInterruptPriority+0x84>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d90c      	bls.n	800d4b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	b672      	cpsid	i
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	b662      	cpsie	i
 800d4b0:	603b      	str	r3, [r7, #0]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <vPortValidateInterruptPriority+0x68>
	}
 800d4b6:	bf00      	nop
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	e000e3f0 	.word	0xe000e3f0
 800d4c8:	200010e8 	.word	0x200010e8
 800d4cc:	e000ed0c 	.word	0xe000ed0c
 800d4d0:	200010ec 	.word	0x200010ec

0800d4d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08a      	sub	sp, #40	; 0x28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4e0:	f7fe fd8a 	bl	800bff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4e4:	4b5b      	ldr	r3, [pc, #364]	; (800d654 <pvPortMalloc+0x180>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4ec:	f000 f91a 	bl	800d724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4f0:	4b59      	ldr	r3, [pc, #356]	; (800d658 <pvPortMalloc+0x184>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f040 8092 	bne.w	800d622 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01f      	beq.n	800d544 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d504:	2208      	movs	r2, #8
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f003 0307 	and.w	r3, r3, #7
 800d512:	2b00      	cmp	r3, #0
 800d514:	d016      	beq.n	800d544 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f023 0307 	bic.w	r3, r3, #7
 800d51c:	3308      	adds	r3, #8
 800d51e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00c      	beq.n	800d544 <pvPortMalloc+0x70>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	b672      	cpsid	i
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	b662      	cpsie	i
 800d53e:	617b      	str	r3, [r7, #20]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d06b      	beq.n	800d622 <pvPortMalloc+0x14e>
 800d54a:	4b44      	ldr	r3, [pc, #272]	; (800d65c <pvPortMalloc+0x188>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d866      	bhi.n	800d622 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d554:	4b42      	ldr	r3, [pc, #264]	; (800d660 <pvPortMalloc+0x18c>)
 800d556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d558:	4b41      	ldr	r3, [pc, #260]	; (800d660 <pvPortMalloc+0x18c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d55e:	e004      	b.n	800d56a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d903      	bls.n	800d57c <pvPortMalloc+0xa8>
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f1      	bne.n	800d560 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d57c:	4b35      	ldr	r3, [pc, #212]	; (800d654 <pvPortMalloc+0x180>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d582:	429a      	cmp	r2, r3
 800d584:	d04d      	beq.n	800d622 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2208      	movs	r2, #8
 800d58c:	4413      	add	r3, r2
 800d58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	1ad2      	subs	r2, r2, r3
 800d5a0:	2308      	movs	r3, #8
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d921      	bls.n	800d5ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00c      	beq.n	800d5d4 <pvPortMalloc+0x100>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	b672      	cpsid	i
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	b662      	cpsie	i
 800d5ce:	613b      	str	r3, [r7, #16]
}
 800d5d0:	bf00      	nop
 800d5d2:	e7fe      	b.n	800d5d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	1ad2      	subs	r2, r2, r3
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5e6:	69b8      	ldr	r0, [r7, #24]
 800d5e8:	f000 f8fe 	bl	800d7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5ec:	4b1b      	ldr	r3, [pc, #108]	; (800d65c <pvPortMalloc+0x188>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	4a19      	ldr	r2, [pc, #100]	; (800d65c <pvPortMalloc+0x188>)
 800d5f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5fa:	4b18      	ldr	r3, [pc, #96]	; (800d65c <pvPortMalloc+0x188>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	4b19      	ldr	r3, [pc, #100]	; (800d664 <pvPortMalloc+0x190>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d203      	bcs.n	800d60e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d606:	4b15      	ldr	r3, [pc, #84]	; (800d65c <pvPortMalloc+0x188>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a16      	ldr	r2, [pc, #88]	; (800d664 <pvPortMalloc+0x190>)
 800d60c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	4b11      	ldr	r3, [pc, #68]	; (800d658 <pvPortMalloc+0x184>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	431a      	orrs	r2, r3
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d622:	f7fe fcf7 	bl	800c014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	f003 0307 	and.w	r3, r3, #7
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00c      	beq.n	800d64a <pvPortMalloc+0x176>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	b672      	cpsid	i
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	b662      	cpsie	i
 800d644:	60fb      	str	r3, [r7, #12]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <pvPortMalloc+0x174>
	return pvReturn;
 800d64a:	69fb      	ldr	r3, [r7, #28]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3728      	adds	r7, #40	; 0x28
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20004cf8 	.word	0x20004cf8
 800d658:	20004d04 	.word	0x20004d04
 800d65c:	20004cfc 	.word	0x20004cfc
 800d660:	20004cf0 	.word	0x20004cf0
 800d664:	20004d00 	.word	0x20004d00

0800d668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d04c      	beq.n	800d714 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d67a:	2308      	movs	r3, #8
 800d67c:	425b      	negs	r3, r3
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	4413      	add	r3, r2
 800d682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	4b23      	ldr	r3, [pc, #140]	; (800d71c <vPortFree+0xb4>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4013      	ands	r3, r2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10c      	bne.n	800d6b0 <vPortFree+0x48>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69a:	b672      	cpsid	i
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	b662      	cpsie	i
 800d6aa:	60fb      	str	r3, [r7, #12]
}
 800d6ac:	bf00      	nop
 800d6ae:	e7fe      	b.n	800d6ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00c      	beq.n	800d6d2 <vPortFree+0x6a>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	b672      	cpsid	i
 800d6be:	f383 8811 	msr	BASEPRI, r3
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	b662      	cpsie	i
 800d6cc:	60bb      	str	r3, [r7, #8]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	4b11      	ldr	r3, [pc, #68]	; (800d71c <vPortFree+0xb4>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d019      	beq.n	800d714 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d115      	bne.n	800d714 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	4b0b      	ldr	r3, [pc, #44]	; (800d71c <vPortFree+0xb4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	43db      	mvns	r3, r3
 800d6f2:	401a      	ands	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6f8:	f7fe fc7e 	bl	800bff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	4b07      	ldr	r3, [pc, #28]	; (800d720 <vPortFree+0xb8>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4413      	add	r3, r2
 800d706:	4a06      	ldr	r2, [pc, #24]	; (800d720 <vPortFree+0xb8>)
 800d708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d70a:	6938      	ldr	r0, [r7, #16]
 800d70c:	f000 f86c 	bl	800d7e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d710:	f7fe fc80 	bl	800c014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d714:	bf00      	nop
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	20004d04 	.word	0x20004d04
 800d720:	20004cfc 	.word	0x20004cfc

0800d724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d72a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d730:	4b27      	ldr	r3, [pc, #156]	; (800d7d0 <prvHeapInit+0xac>)
 800d732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00c      	beq.n	800d758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3307      	adds	r3, #7
 800d742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f023 0307 	bic.w	r3, r3, #7
 800d74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	4a1f      	ldr	r2, [pc, #124]	; (800d7d0 <prvHeapInit+0xac>)
 800d754:	4413      	add	r3, r2
 800d756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d75c:	4a1d      	ldr	r2, [pc, #116]	; (800d7d4 <prvHeapInit+0xb0>)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d762:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <prvHeapInit+0xb0>)
 800d764:	2200      	movs	r2, #0
 800d766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	4413      	add	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d770:	2208      	movs	r2, #8
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0307 	bic.w	r3, r3, #7
 800d77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4a15      	ldr	r2, [pc, #84]	; (800d7d8 <prvHeapInit+0xb4>)
 800d784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d786:	4b14      	ldr	r3, [pc, #80]	; (800d7d8 <prvHeapInit+0xb4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2200      	movs	r2, #0
 800d78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d78e:	4b12      	ldr	r3, [pc, #72]	; (800d7d8 <prvHeapInit+0xb4>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <prvHeapInit+0xb4>)
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <prvHeapInit+0xb8>)
 800d7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <prvHeapInit+0xbc>)
 800d7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7bc:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <prvHeapInit+0xc0>)
 800d7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7c2:	601a      	str	r2, [r3, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	3714      	adds	r7, #20
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	200010f0 	.word	0x200010f0
 800d7d4:	20004cf0 	.word	0x20004cf0
 800d7d8:	20004cf8 	.word	0x20004cf8
 800d7dc:	20004d00 	.word	0x20004d00
 800d7e0:	20004cfc 	.word	0x20004cfc
 800d7e4:	20004d04 	.word	0x20004d04

0800d7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7f0:	4b28      	ldr	r3, [pc, #160]	; (800d894 <prvInsertBlockIntoFreeList+0xac>)
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e002      	b.n	800d7fc <prvInsertBlockIntoFreeList+0x14>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d8f7      	bhi.n	800d7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	4413      	add	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	429a      	cmp	r2, r3
 800d816:	d108      	bne.n	800d82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	441a      	add	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	441a      	add	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d118      	bne.n	800d870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	4b15      	ldr	r3, [pc, #84]	; (800d898 <prvInsertBlockIntoFreeList+0xb0>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d00d      	beq.n	800d866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	441a      	add	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	e008      	b.n	800d878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <prvInsertBlockIntoFreeList+0xb0>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	e003      	b.n	800d878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d002      	beq.n	800d886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d886:	bf00      	nop
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20004cf0 	.word	0x20004cf0
 800d898:	20004cf8 	.word	0x20004cf8

0800d89c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4912      	ldr	r1, [pc, #72]	; (800d8ec <MX_USB_DEVICE_Init+0x50>)
 800d8a4:	4812      	ldr	r0, [pc, #72]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8a6:	f7fb ff09 	bl	80096bc <USBD_Init>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d8b0:	f7f3 f9a4 	bl	8000bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d8b4:	490f      	ldr	r1, [pc, #60]	; (800d8f4 <MX_USB_DEVICE_Init+0x58>)
 800d8b6:	480e      	ldr	r0, [pc, #56]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8b8:	f7fb ff30 	bl	800971c <USBD_RegisterClass>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d8c2:	f7f3 f99b 	bl	8000bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d8c6:	490c      	ldr	r1, [pc, #48]	; (800d8f8 <MX_USB_DEVICE_Init+0x5c>)
 800d8c8:	4809      	ldr	r0, [pc, #36]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8ca:	f7fb fe27 	bl	800951c <USBD_CDC_RegisterInterface>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d8d4:	f7f3 f992 	bl	8000bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d8d8:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <MX_USB_DEVICE_Init+0x54>)
 800d8da:	f7fb ff55 	bl	8009788 <USBD_Start>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d8e4:	f7f3 f98a 	bl	8000bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d8e8:	bf00      	nop
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	200000b0 	.word	0x200000b0
 800d8f0:	20004d08 	.word	0x20004d08
 800d8f4:	20000018 	.word	0x20000018
 800d8f8:	2000009c 	.word	0x2000009c

0800d8fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d900:	2200      	movs	r2, #0
 800d902:	4905      	ldr	r1, [pc, #20]	; (800d918 <CDC_Init_FS+0x1c>)
 800d904:	4805      	ldr	r0, [pc, #20]	; (800d91c <CDC_Init_FS+0x20>)
 800d906:	f7fb fe23 	bl	8009550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d90a:	4905      	ldr	r1, [pc, #20]	; (800d920 <CDC_Init_FS+0x24>)
 800d90c:	4803      	ldr	r0, [pc, #12]	; (800d91c <CDC_Init_FS+0x20>)
 800d90e:	f7fb fe41 	bl	8009594 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d912:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d914:	4618      	mov	r0, r3
 800d916:	bd80      	pop	{r7, pc}
 800d918:	200057e4 	.word	0x200057e4
 800d91c:	20004d08 	.word	0x20004d08
 800d920:	20004fe4 	.word	0x20004fe4

0800d924 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	4603      	mov	r3, r0
 800d93c:	6039      	str	r1, [r7, #0]
 800d93e:	71fb      	strb	r3, [r7, #7]
 800d940:	4613      	mov	r3, r2
 800d942:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d944:	79fb      	ldrb	r3, [r7, #7]
 800d946:	2b23      	cmp	r3, #35	; 0x23
 800d948:	d84a      	bhi.n	800d9e0 <CDC_Control_FS+0xac>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <CDC_Control_FS+0x1c>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d9e1 	.word	0x0800d9e1
 800d954:	0800d9e1 	.word	0x0800d9e1
 800d958:	0800d9e1 	.word	0x0800d9e1
 800d95c:	0800d9e1 	.word	0x0800d9e1
 800d960:	0800d9e1 	.word	0x0800d9e1
 800d964:	0800d9e1 	.word	0x0800d9e1
 800d968:	0800d9e1 	.word	0x0800d9e1
 800d96c:	0800d9e1 	.word	0x0800d9e1
 800d970:	0800d9e1 	.word	0x0800d9e1
 800d974:	0800d9e1 	.word	0x0800d9e1
 800d978:	0800d9e1 	.word	0x0800d9e1
 800d97c:	0800d9e1 	.word	0x0800d9e1
 800d980:	0800d9e1 	.word	0x0800d9e1
 800d984:	0800d9e1 	.word	0x0800d9e1
 800d988:	0800d9e1 	.word	0x0800d9e1
 800d98c:	0800d9e1 	.word	0x0800d9e1
 800d990:	0800d9e1 	.word	0x0800d9e1
 800d994:	0800d9e1 	.word	0x0800d9e1
 800d998:	0800d9e1 	.word	0x0800d9e1
 800d99c:	0800d9e1 	.word	0x0800d9e1
 800d9a0:	0800d9e1 	.word	0x0800d9e1
 800d9a4:	0800d9e1 	.word	0x0800d9e1
 800d9a8:	0800d9e1 	.word	0x0800d9e1
 800d9ac:	0800d9e1 	.word	0x0800d9e1
 800d9b0:	0800d9e1 	.word	0x0800d9e1
 800d9b4:	0800d9e1 	.word	0x0800d9e1
 800d9b8:	0800d9e1 	.word	0x0800d9e1
 800d9bc:	0800d9e1 	.word	0x0800d9e1
 800d9c0:	0800d9e1 	.word	0x0800d9e1
 800d9c4:	0800d9e1 	.word	0x0800d9e1
 800d9c8:	0800d9e1 	.word	0x0800d9e1
 800d9cc:	0800d9e1 	.word	0x0800d9e1
 800d9d0:	0800d9e1 	.word	0x0800d9e1
 800d9d4:	0800d9e1 	.word	0x0800d9e1
 800d9d8:	0800d9e1 	.word	0x0800d9e1
 800d9dc:	0800d9e1 	.word	0x0800d9e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d9e0:	bf00      	nop
  }

  return (USBD_OK);
 800d9e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	4805      	ldr	r0, [pc, #20]	; (800da14 <CDC_Receive_FS+0x24>)
 800d9fe:	f7fb fdc9 	bl	8009594 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da02:	4804      	ldr	r0, [pc, #16]	; (800da14 <CDC_Receive_FS+0x24>)
 800da04:	f7fb fe24 	bl	8009650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800da08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	20004d08 	.word	0x20004d08

0800da18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800da28:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <CDC_Transmit_FS+0x48>)
 800da2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e00b      	b.n	800da56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800da3e:	887b      	ldrh	r3, [r7, #2]
 800da40:	461a      	mov	r2, r3
 800da42:	6879      	ldr	r1, [r7, #4]
 800da44:	4806      	ldr	r0, [pc, #24]	; (800da60 <CDC_Transmit_FS+0x48>)
 800da46:	f7fb fd83 	bl	8009550 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800da4a:	4805      	ldr	r0, [pc, #20]	; (800da60 <CDC_Transmit_FS+0x48>)
 800da4c:	f7fb fdc0 	bl	80095d0 <USBD_CDC_TransmitPacket>
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20004d08 	.word	0x20004d08

0800da64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	4613      	mov	r3, r2
 800da70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	371c      	adds	r7, #28
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
	...

0800da88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	6039      	str	r1, [r7, #0]
 800da92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2212      	movs	r2, #18
 800da98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da9a:	4b03      	ldr	r3, [pc, #12]	; (800daa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	200000d0 	.word	0x200000d0

0800daac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	6039      	str	r1, [r7, #0]
 800dab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2204      	movs	r2, #4
 800dabc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dabe:	4b03      	ldr	r3, [pc, #12]	; (800dacc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	200000f0 	.word	0x200000f0

0800dad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	6039      	str	r1, [r7, #0]
 800dada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d105      	bne.n	800daee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	4907      	ldr	r1, [pc, #28]	; (800db04 <USBD_FS_ProductStrDescriptor+0x34>)
 800dae6:	4808      	ldr	r0, [pc, #32]	; (800db08 <USBD_FS_ProductStrDescriptor+0x38>)
 800dae8:	f7fd f824 	bl	800ab34 <USBD_GetString>
 800daec:	e004      	b.n	800daf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	4904      	ldr	r1, [pc, #16]	; (800db04 <USBD_FS_ProductStrDescriptor+0x34>)
 800daf2:	4805      	ldr	r0, [pc, #20]	; (800db08 <USBD_FS_ProductStrDescriptor+0x38>)
 800daf4:	f7fd f81e 	bl	800ab34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800daf8:	4b02      	ldr	r3, [pc, #8]	; (800db04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20005fe4 	.word	0x20005fe4
 800db08:	0800eda4 	.word	0x0800eda4

0800db0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	6039      	str	r1, [r7, #0]
 800db16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	4904      	ldr	r1, [pc, #16]	; (800db2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800db1c:	4804      	ldr	r0, [pc, #16]	; (800db30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800db1e:	f7fd f809 	bl	800ab34 <USBD_GetString>
  return USBD_StrDesc;
 800db22:	4b02      	ldr	r3, [pc, #8]	; (800db2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	20005fe4 	.word	0x20005fe4
 800db30:	0800edbc 	.word	0x0800edbc

0800db34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	221a      	movs	r2, #26
 800db44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db46:	f000 f855 	bl	800dbf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800db4a:	4b02      	ldr	r3, [pc, #8]	; (800db54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	200000f4 	.word	0x200000f4

0800db58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	6039      	str	r1, [r7, #0]
 800db62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db64:	79fb      	ldrb	r3, [r7, #7]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d105      	bne.n	800db76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db6a:	683a      	ldr	r2, [r7, #0]
 800db6c:	4907      	ldr	r1, [pc, #28]	; (800db8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db6e:	4808      	ldr	r0, [pc, #32]	; (800db90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db70:	f7fc ffe0 	bl	800ab34 <USBD_GetString>
 800db74:	e004      	b.n	800db80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	4904      	ldr	r1, [pc, #16]	; (800db8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db7a:	4805      	ldr	r0, [pc, #20]	; (800db90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db7c:	f7fc ffda 	bl	800ab34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db80:	4b02      	ldr	r3, [pc, #8]	; (800db8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db82:	4618      	mov	r0, r3
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20005fe4 	.word	0x20005fe4
 800db90:	0800edd0 	.word	0x0800edd0

0800db94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	6039      	str	r1, [r7, #0]
 800db9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dba0:	79fb      	ldrb	r3, [r7, #7]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d105      	bne.n	800dbb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dba6:	683a      	ldr	r2, [r7, #0]
 800dba8:	4907      	ldr	r1, [pc, #28]	; (800dbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dbaa:	4808      	ldr	r0, [pc, #32]	; (800dbcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dbac:	f7fc ffc2 	bl	800ab34 <USBD_GetString>
 800dbb0:	e004      	b.n	800dbbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	4904      	ldr	r1, [pc, #16]	; (800dbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dbb6:	4805      	ldr	r0, [pc, #20]	; (800dbcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dbb8:	f7fc ffbc 	bl	800ab34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbbc:	4b02      	ldr	r3, [pc, #8]	; (800dbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20005fe4 	.word	0x20005fe4
 800dbcc:	0800eddc 	.word	0x0800eddc

0800dbd0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	220c      	movs	r2, #12
 800dbe0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dbe2:	4b03      	ldr	r3, [pc, #12]	; (800dbf0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	200000e4 	.word	0x200000e4

0800dbf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbfa:	4b0f      	ldr	r3, [pc, #60]	; (800dc38 <Get_SerialNum+0x44>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc00:	4b0e      	ldr	r3, [pc, #56]	; (800dc3c <Get_SerialNum+0x48>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc06:	4b0e      	ldr	r3, [pc, #56]	; (800dc40 <Get_SerialNum+0x4c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4413      	add	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc1a:	2208      	movs	r2, #8
 800dc1c:	4909      	ldr	r1, [pc, #36]	; (800dc44 <Get_SerialNum+0x50>)
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f000 f814 	bl	800dc4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc24:	2204      	movs	r2, #4
 800dc26:	4908      	ldr	r1, [pc, #32]	; (800dc48 <Get_SerialNum+0x54>)
 800dc28:	68b8      	ldr	r0, [r7, #8]
 800dc2a:	f000 f80f 	bl	800dc4c <IntToUnicode>
  }
}
 800dc2e:	bf00      	nop
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	1ff0f420 	.word	0x1ff0f420
 800dc3c:	1ff0f424 	.word	0x1ff0f424
 800dc40:	1ff0f428 	.word	0x1ff0f428
 800dc44:	200000f6 	.word	0x200000f6
 800dc48:	20000106 	.word	0x20000106

0800dc4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	4613      	mov	r3, r2
 800dc58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc5e:	2300      	movs	r3, #0
 800dc60:	75fb      	strb	r3, [r7, #23]
 800dc62:	e027      	b.n	800dcb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	0f1b      	lsrs	r3, r3, #28
 800dc68:	2b09      	cmp	r3, #9
 800dc6a:	d80b      	bhi.n	800dc84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	0f1b      	lsrs	r3, r3, #28
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4619      	mov	r1, r3
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3230      	adds	r2, #48	; 0x30
 800dc7e:	b2d2      	uxtb	r2, r2
 800dc80:	701a      	strb	r2, [r3, #0]
 800dc82:	e00a      	b.n	800dc9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	0f1b      	lsrs	r3, r3, #28
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	4619      	mov	r1, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	440b      	add	r3, r1
 800dc94:	3237      	adds	r2, #55	; 0x37
 800dc96:	b2d2      	uxtb	r2, r2
 800dc98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	011b      	lsls	r3, r3, #4
 800dc9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	3301      	adds	r3, #1
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	4413      	add	r3, r2
 800dcaa:	2200      	movs	r2, #0
 800dcac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
 800dcb4:	7dfa      	ldrb	r2, [r7, #23]
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d3d3      	bcc.n	800dc64 <IntToUnicode+0x18>
  }
}
 800dcbc:	bf00      	nop
 800dcbe:	bf00      	nop
 800dcc0:	371c      	adds	r7, #28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
	...

0800dccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b0ae      	sub	sp, #184	; 0xb8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	605a      	str	r2, [r3, #4]
 800dcde:	609a      	str	r2, [r3, #8]
 800dce0:	60da      	str	r2, [r3, #12]
 800dce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dce4:	f107 0314 	add.w	r3, r7, #20
 800dce8:	2290      	movs	r2, #144	; 0x90
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f000 fc47 	bl	800e580 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcfa:	d161      	bne.n	800ddc0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dcfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dd00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dd08:	f107 0314 	add.w	r3, r7, #20
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7f7 fc93 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d001      	beq.n	800dd1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dd18:	f7f2 ff70 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd1c:	4b2a      	ldr	r3, [pc, #168]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd20:	4a29      	ldr	r2, [pc, #164]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	6313      	str	r3, [r2, #48]	; 0x30
 800dd28:	4b27      	ldr	r3, [pc, #156]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2c:	f003 0301 	and.w	r3, r3, #1
 800dd30:	613b      	str	r3, [r7, #16]
 800dd32:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dd34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	481f      	ldr	r0, [pc, #124]	; (800ddcc <HAL_PCD_MspInit+0x100>)
 800dd50:	f7f5 fade 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dd54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd6e:	230a      	movs	r3, #10
 800dd70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd78:	4619      	mov	r1, r3
 800dd7a:	4814      	ldr	r0, [pc, #80]	; (800ddcc <HAL_PCD_MspInit+0x100>)
 800dd7c:	f7f5 fac8 	bl	8003310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd80:	4b11      	ldr	r3, [pc, #68]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd84:	4a10      	ldr	r2, [pc, #64]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd8a:	6353      	str	r3, [r2, #52]	; 0x34
 800dd8c:	4b0e      	ldr	r3, [pc, #56]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd94:	60fb      	str	r3, [r7, #12]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4b0b      	ldr	r3, [pc, #44]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd9c:	4a0a      	ldr	r2, [pc, #40]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dd9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dda2:	6453      	str	r3, [r2, #68]	; 0x44
 800dda4:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <HAL_PCD_MspInit+0xfc>)
 800dda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddac:	60bb      	str	r3, [r7, #8]
 800ddae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2105      	movs	r1, #5
 800ddb4:	2043      	movs	r0, #67	; 0x43
 800ddb6:	f7f4 fe77 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ddba:	2043      	movs	r0, #67	; 0x43
 800ddbc:	f7f4 fe90 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ddc0:	bf00      	nop
 800ddc2:	37b8      	adds	r7, #184	; 0xb8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	40023800 	.word	0x40023800
 800ddcc:	40020000 	.word	0x40020000

0800ddd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f7fb fd1b 	bl	8009822 <USBD_LL_SetupStage>
}
 800ddec:	bf00      	nop
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	4613      	mov	r3, r2
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	4413      	add	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	440b      	add	r3, r1
 800de14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	4619      	mov	r1, r3
 800de1e:	f7fb fd55 	bl	80098cc <USBD_LL_DataOutStage>
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800de3c:	78fa      	ldrb	r2, [r7, #3]
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	4613      	mov	r3, r2
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	4413      	add	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	440b      	add	r3, r1
 800de4a:	334c      	adds	r3, #76	; 0x4c
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	78fb      	ldrb	r3, [r7, #3]
 800de50:	4619      	mov	r1, r3
 800de52:	f7fb fdee 	bl	8009a32 <USBD_LL_DataInStage>
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fb ff22 	bl	8009cb6 <USBD_LL_SOF>
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de82:	2301      	movs	r3, #1
 800de84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d102      	bne.n	800de94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800de8e:	2300      	movs	r3, #0
 800de90:	73fb      	strb	r3, [r7, #15]
 800de92:	e008      	b.n	800dea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d102      	bne.n	800dea2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
 800dea0:	e001      	b.n	800dea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dea2:	f7f2 feab 	bl	8000bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800deac:	7bfa      	ldrb	r2, [r7, #15]
 800deae:	4611      	mov	r1, r2
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fb fec2 	bl	8009c3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800debc:	4618      	mov	r0, r3
 800debe:	f7fb fe6a 	bl	8009b96 <USBD_LL_Reset>
}
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fb febd 	bl	8009c5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800def2:	f043 0301 	orr.w	r3, r3, #1
 800def6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a1b      	ldr	r3, [r3, #32]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df00:	4b04      	ldr	r3, [pc, #16]	; (800df14 <HAL_PCD_SuspendCallback+0x48>)
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	4a03      	ldr	r2, [pc, #12]	; (800df14 <HAL_PCD_SuspendCallback+0x48>)
 800df06:	f043 0306 	orr.w	r3, r3, #6
 800df0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df0c:	bf00      	nop
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	e000ed00 	.word	0xe000ed00

0800df18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df26:	4618      	mov	r0, r3
 800df28:	f7fb fead 	bl	8009c86 <USBD_LL_Resume>
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df46:	78fa      	ldrb	r2, [r7, #3]
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fb ff05 	bl	8009d5a <USBD_LL_IsoOUTIncomplete>
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df6a:	78fa      	ldrb	r2, [r7, #3]
 800df6c:	4611      	mov	r1, r2
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fb fec1 	bl	8009cf6 <USBD_LL_IsoINIncomplete>
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fb ff17 	bl	8009dbe <USBD_LL_DevConnected>
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fb ff14 	bl	8009dd4 <USBD_LL_DevDisconnected>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d13c      	bne.n	800e03e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dfc4:	4a20      	ldr	r2, [pc, #128]	; (800e048 <USBD_LL_Init+0x94>)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a1e      	ldr	r2, [pc, #120]	; (800e048 <USBD_LL_Init+0x94>)
 800dfd0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dfd4:	4b1c      	ldr	r3, [pc, #112]	; (800e048 <USBD_LL_Init+0x94>)
 800dfd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dfda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dfdc:	4b1a      	ldr	r3, [pc, #104]	; (800e048 <USBD_LL_Init+0x94>)
 800dfde:	2206      	movs	r2, #6
 800dfe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dfe2:	4b19      	ldr	r3, [pc, #100]	; (800e048 <USBD_LL_Init+0x94>)
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dfe8:	4b17      	ldr	r3, [pc, #92]	; (800e048 <USBD_LL_Init+0x94>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dfee:	4b16      	ldr	r3, [pc, #88]	; (800e048 <USBD_LL_Init+0x94>)
 800dff0:	2202      	movs	r2, #2
 800dff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dff4:	4b14      	ldr	r3, [pc, #80]	; (800e048 <USBD_LL_Init+0x94>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dffa:	4b13      	ldr	r3, [pc, #76]	; (800e048 <USBD_LL_Init+0x94>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e000:	4b11      	ldr	r3, [pc, #68]	; (800e048 <USBD_LL_Init+0x94>)
 800e002:	2200      	movs	r2, #0
 800e004:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e006:	4b10      	ldr	r3, [pc, #64]	; (800e048 <USBD_LL_Init+0x94>)
 800e008:	2201      	movs	r2, #1
 800e00a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <USBD_LL_Init+0x94>)
 800e00e:	2200      	movs	r2, #0
 800e010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e012:	480d      	ldr	r0, [pc, #52]	; (800e048 <USBD_LL_Init+0x94>)
 800e014:	f7f5 fb42 	bl	800369c <HAL_PCD_Init>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e01e:	f7f2 fded 	bl	8000bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e022:	2180      	movs	r1, #128	; 0x80
 800e024:	4808      	ldr	r0, [pc, #32]	; (800e048 <USBD_LL_Init+0x94>)
 800e026:	f7f6 fdbc 	bl	8004ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e02a:	2240      	movs	r2, #64	; 0x40
 800e02c:	2100      	movs	r1, #0
 800e02e:	4806      	ldr	r0, [pc, #24]	; (800e048 <USBD_LL_Init+0x94>)
 800e030:	f7f6 fd70 	bl	8004b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e034:	2280      	movs	r2, #128	; 0x80
 800e036:	2101      	movs	r1, #1
 800e038:	4803      	ldr	r0, [pc, #12]	; (800e048 <USBD_LL_Init+0x94>)
 800e03a:	f7f6 fd6b 	bl	8004b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	200061e4 	.word	0x200061e4

0800e04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e062:	4618      	mov	r0, r3
 800e064:	f7f5 fc3e 	bl	80038e4 <HAL_PCD_Start>
 800e068:	4603      	mov	r3, r0
 800e06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 f97e 	bl	800e370 <USBD_Get_USB_Status>
 800e074:	4603      	mov	r3, r0
 800e076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e078:	7bbb      	ldrb	r3, [r7, #14]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	4608      	mov	r0, r1
 800e08c:	4611      	mov	r1, r2
 800e08e:	461a      	mov	r2, r3
 800e090:	4603      	mov	r3, r0
 800e092:	70fb      	strb	r3, [r7, #3]
 800e094:	460b      	mov	r3, r1
 800e096:	70bb      	strb	r3, [r7, #2]
 800e098:	4613      	mov	r3, r2
 800e09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0aa:	78bb      	ldrb	r3, [r7, #2]
 800e0ac:	883a      	ldrh	r2, [r7, #0]
 800e0ae:	78f9      	ldrb	r1, [r7, #3]
 800e0b0:	f7f6 f92b 	bl	800430a <HAL_PCD_EP_Open>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f958 	bl	800e370 <USBD_Get_USB_Status>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0e8:	78fa      	ldrb	r2, [r7, #3]
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f6 f974 	bl	80043da <HAL_PCD_EP_Close>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f939 	bl	800e370 <USBD_Get_USB_Status>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e102:	7bbb      	ldrb	r3, [r7, #14]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e11c:	2300      	movs	r3, #0
 800e11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e126:	78fa      	ldrb	r2, [r7, #3]
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f6 fa4c 	bl	80045c8 <HAL_PCD_EP_SetStall>
 800e130:	4603      	mov	r3, r0
 800e132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	4618      	mov	r0, r3
 800e138:	f000 f91a 	bl	800e370 <USBD_Get_USB_Status>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e140:	7bbb      	ldrb	r3, [r7, #14]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b084      	sub	sp, #16
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	460b      	mov	r3, r1
 800e154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f6 fa91 	bl	8004690 <HAL_PCD_EP_ClrStall>
 800e16e:	4603      	mov	r3, r0
 800e170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	4618      	mov	r0, r3
 800e176:	f000 f8fb 	bl	800e370 <USBD_Get_USB_Status>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	da0b      	bge.n	800e1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1aa:	68f9      	ldr	r1, [r7, #12]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	4413      	add	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	440b      	add	r3, r1
 800e1b6:	333e      	adds	r3, #62	; 0x3e
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	e00b      	b.n	800e1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1c2:	68f9      	ldr	r1, [r7, #12]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	440b      	add	r3, r1
 800e1ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1fa:	78fa      	ldrb	r2, [r7, #3]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f6 f85e 	bl	80042c0 <HAL_PCD_SetAddress>
 800e204:	4603      	mov	r3, r0
 800e206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 f8b0 	bl	800e370 <USBD_Get_USB_Status>
 800e210:	4603      	mov	r3, r0
 800e212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e214:	7bbb      	ldrb	r3, [r7, #14]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b086      	sub	sp, #24
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
 800e22a:	460b      	mov	r3, r1
 800e22c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e23c:	7af9      	ldrb	r1, [r7, #11]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	f7f6 f977 	bl	8004534 <HAL_PCD_EP_Transmit>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 f88f 	bl	800e370 <USBD_Get_USB_Status>
 800e252:	4603      	mov	r3, r0
 800e254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e256:	7dbb      	ldrb	r3, [r7, #22]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	603b      	str	r3, [r7, #0]
 800e26c:	460b      	mov	r3, r1
 800e26e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e27e:	7af9      	ldrb	r1, [r7, #11]
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	f7f6 f8f3 	bl	800446e <HAL_PCD_EP_Receive>
 800e288:	4603      	mov	r3, r0
 800e28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 f86e 	bl	800e370 <USBD_Get_USB_Status>
 800e294:	4603      	mov	r3, r0
 800e296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e298:	7dbb      	ldrb	r3, [r7, #22]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3718      	adds	r7, #24
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2b4:	78fa      	ldrb	r2, [r7, #3]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7f6 f923 	bl	8004504 <HAL_PCD_EP_GetRxCount>
 800e2be:	4603      	mov	r3, r0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e2d4:	78fb      	ldrb	r3, [r7, #3]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d002      	beq.n	800e2e0 <HAL_PCDEx_LPM_Callback+0x18>
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d01f      	beq.n	800e31e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e2de:	e03b      	b.n	800e358 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a1b      	ldr	r3, [r3, #32]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d007      	beq.n	800e2f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e2e8:	f000 f83c 	bl	800e364 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2ec:	4b1c      	ldr	r3, [pc, #112]	; (800e360 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	4a1b      	ldr	r2, [pc, #108]	; (800e360 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2f2:	f023 0306 	bic.w	r3, r3, #6
 800e2f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	6812      	ldr	r2, [r2, #0]
 800e306:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e30a:	f023 0301 	bic.w	r3, r3, #1
 800e30e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e316:	4618      	mov	r0, r3
 800e318:	f7fb fcb5 	bl	8009c86 <USBD_LL_Resume>
    break;
 800e31c:	e01c      	b.n	800e358 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e330:	f043 0301 	orr.w	r3, r3, #1
 800e334:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fb fc8c 	bl	8009c5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d005      	beq.n	800e356 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <HAL_PCDEx_LPM_Callback+0x98>)
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	4a04      	ldr	r2, [pc, #16]	; (800e360 <HAL_PCDEx_LPM_Callback+0x98>)
 800e350:	f043 0306 	orr.w	r3, r3, #6
 800e354:	6113      	str	r3, [r2, #16]
    break;
 800e356:	bf00      	nop
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	e000ed00 	.word	0xe000ed00

0800e364 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e368:	f7f2 fa10 	bl	800078c <SystemClock_Config>
}
 800e36c:	bf00      	nop
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	2b03      	cmp	r3, #3
 800e382:	d817      	bhi.n	800e3b4 <USBD_Get_USB_Status+0x44>
 800e384:	a201      	add	r2, pc, #4	; (adr r2, 800e38c <USBD_Get_USB_Status+0x1c>)
 800e386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e38a:	bf00      	nop
 800e38c:	0800e39d 	.word	0x0800e39d
 800e390:	0800e3a3 	.word	0x0800e3a3
 800e394:	0800e3a9 	.word	0x0800e3a9
 800e398:	0800e3af 	.word	0x0800e3af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a0:	e00b      	b.n	800e3ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a6:	e008      	b.n	800e3ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ac:	e005      	b.n	800e3ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e3b2:	e002      	b.n	800e3ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3b8:	bf00      	nop
  }
  return usb_status;
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <malloc>:
 800e3c8:	4b02      	ldr	r3, [pc, #8]	; (800e3d4 <malloc+0xc>)
 800e3ca:	4601      	mov	r1, r0
 800e3cc:	6818      	ldr	r0, [r3, #0]
 800e3ce:	f000 b82b 	b.w	800e428 <_malloc_r>
 800e3d2:	bf00      	nop
 800e3d4:	2000015c 	.word	0x2000015c

0800e3d8 <free>:
 800e3d8:	4b02      	ldr	r3, [pc, #8]	; (800e3e4 <free+0xc>)
 800e3da:	4601      	mov	r1, r0
 800e3dc:	6818      	ldr	r0, [r3, #0]
 800e3de:	f000 b921 	b.w	800e624 <_free_r>
 800e3e2:	bf00      	nop
 800e3e4:	2000015c 	.word	0x2000015c

0800e3e8 <sbrk_aligned>:
 800e3e8:	b570      	push	{r4, r5, r6, lr}
 800e3ea:	4e0e      	ldr	r6, [pc, #56]	; (800e424 <sbrk_aligned+0x3c>)
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	6831      	ldr	r1, [r6, #0]
 800e3f0:	4605      	mov	r5, r0
 800e3f2:	b911      	cbnz	r1, 800e3fa <sbrk_aligned+0x12>
 800e3f4:	f000 f8cc 	bl	800e590 <_sbrk_r>
 800e3f8:	6030      	str	r0, [r6, #0]
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	f000 f8c7 	bl	800e590 <_sbrk_r>
 800e402:	1c43      	adds	r3, r0, #1
 800e404:	d00a      	beq.n	800e41c <sbrk_aligned+0x34>
 800e406:	1cc4      	adds	r4, r0, #3
 800e408:	f024 0403 	bic.w	r4, r4, #3
 800e40c:	42a0      	cmp	r0, r4
 800e40e:	d007      	beq.n	800e420 <sbrk_aligned+0x38>
 800e410:	1a21      	subs	r1, r4, r0
 800e412:	4628      	mov	r0, r5
 800e414:	f000 f8bc 	bl	800e590 <_sbrk_r>
 800e418:	3001      	adds	r0, #1
 800e41a:	d101      	bne.n	800e420 <sbrk_aligned+0x38>
 800e41c:	f04f 34ff 	mov.w	r4, #4294967295
 800e420:	4620      	mov	r0, r4
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	200066f0 	.word	0x200066f0

0800e428 <_malloc_r>:
 800e428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e42c:	1ccd      	adds	r5, r1, #3
 800e42e:	f025 0503 	bic.w	r5, r5, #3
 800e432:	3508      	adds	r5, #8
 800e434:	2d0c      	cmp	r5, #12
 800e436:	bf38      	it	cc
 800e438:	250c      	movcc	r5, #12
 800e43a:	2d00      	cmp	r5, #0
 800e43c:	4607      	mov	r7, r0
 800e43e:	db01      	blt.n	800e444 <_malloc_r+0x1c>
 800e440:	42a9      	cmp	r1, r5
 800e442:	d905      	bls.n	800e450 <_malloc_r+0x28>
 800e444:	230c      	movs	r3, #12
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	2600      	movs	r6, #0
 800e44a:	4630      	mov	r0, r6
 800e44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e524 <_malloc_r+0xfc>
 800e454:	f000 f868 	bl	800e528 <__malloc_lock>
 800e458:	f8d8 3000 	ldr.w	r3, [r8]
 800e45c:	461c      	mov	r4, r3
 800e45e:	bb5c      	cbnz	r4, 800e4b8 <_malloc_r+0x90>
 800e460:	4629      	mov	r1, r5
 800e462:	4638      	mov	r0, r7
 800e464:	f7ff ffc0 	bl	800e3e8 <sbrk_aligned>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	4604      	mov	r4, r0
 800e46c:	d155      	bne.n	800e51a <_malloc_r+0xf2>
 800e46e:	f8d8 4000 	ldr.w	r4, [r8]
 800e472:	4626      	mov	r6, r4
 800e474:	2e00      	cmp	r6, #0
 800e476:	d145      	bne.n	800e504 <_malloc_r+0xdc>
 800e478:	2c00      	cmp	r4, #0
 800e47a:	d048      	beq.n	800e50e <_malloc_r+0xe6>
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	4631      	mov	r1, r6
 800e480:	4638      	mov	r0, r7
 800e482:	eb04 0903 	add.w	r9, r4, r3
 800e486:	f000 f883 	bl	800e590 <_sbrk_r>
 800e48a:	4581      	cmp	r9, r0
 800e48c:	d13f      	bne.n	800e50e <_malloc_r+0xe6>
 800e48e:	6821      	ldr	r1, [r4, #0]
 800e490:	1a6d      	subs	r5, r5, r1
 800e492:	4629      	mov	r1, r5
 800e494:	4638      	mov	r0, r7
 800e496:	f7ff ffa7 	bl	800e3e8 <sbrk_aligned>
 800e49a:	3001      	adds	r0, #1
 800e49c:	d037      	beq.n	800e50e <_malloc_r+0xe6>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	442b      	add	r3, r5
 800e4a2:	6023      	str	r3, [r4, #0]
 800e4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d038      	beq.n	800e51e <_malloc_r+0xf6>
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	42a2      	cmp	r2, r4
 800e4b0:	d12b      	bne.n	800e50a <_malloc_r+0xe2>
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	605a      	str	r2, [r3, #4]
 800e4b6:	e00f      	b.n	800e4d8 <_malloc_r+0xb0>
 800e4b8:	6822      	ldr	r2, [r4, #0]
 800e4ba:	1b52      	subs	r2, r2, r5
 800e4bc:	d41f      	bmi.n	800e4fe <_malloc_r+0xd6>
 800e4be:	2a0b      	cmp	r2, #11
 800e4c0:	d917      	bls.n	800e4f2 <_malloc_r+0xca>
 800e4c2:	1961      	adds	r1, r4, r5
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	6025      	str	r5, [r4, #0]
 800e4c8:	bf18      	it	ne
 800e4ca:	6059      	strne	r1, [r3, #4]
 800e4cc:	6863      	ldr	r3, [r4, #4]
 800e4ce:	bf08      	it	eq
 800e4d0:	f8c8 1000 	streq.w	r1, [r8]
 800e4d4:	5162      	str	r2, [r4, r5]
 800e4d6:	604b      	str	r3, [r1, #4]
 800e4d8:	4638      	mov	r0, r7
 800e4da:	f104 060b 	add.w	r6, r4, #11
 800e4de:	f000 f829 	bl	800e534 <__malloc_unlock>
 800e4e2:	f026 0607 	bic.w	r6, r6, #7
 800e4e6:	1d23      	adds	r3, r4, #4
 800e4e8:	1af2      	subs	r2, r6, r3
 800e4ea:	d0ae      	beq.n	800e44a <_malloc_r+0x22>
 800e4ec:	1b9b      	subs	r3, r3, r6
 800e4ee:	50a3      	str	r3, [r4, r2]
 800e4f0:	e7ab      	b.n	800e44a <_malloc_r+0x22>
 800e4f2:	42a3      	cmp	r3, r4
 800e4f4:	6862      	ldr	r2, [r4, #4]
 800e4f6:	d1dd      	bne.n	800e4b4 <_malloc_r+0x8c>
 800e4f8:	f8c8 2000 	str.w	r2, [r8]
 800e4fc:	e7ec      	b.n	800e4d8 <_malloc_r+0xb0>
 800e4fe:	4623      	mov	r3, r4
 800e500:	6864      	ldr	r4, [r4, #4]
 800e502:	e7ac      	b.n	800e45e <_malloc_r+0x36>
 800e504:	4634      	mov	r4, r6
 800e506:	6876      	ldr	r6, [r6, #4]
 800e508:	e7b4      	b.n	800e474 <_malloc_r+0x4c>
 800e50a:	4613      	mov	r3, r2
 800e50c:	e7cc      	b.n	800e4a8 <_malloc_r+0x80>
 800e50e:	230c      	movs	r3, #12
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	4638      	mov	r0, r7
 800e514:	f000 f80e 	bl	800e534 <__malloc_unlock>
 800e518:	e797      	b.n	800e44a <_malloc_r+0x22>
 800e51a:	6025      	str	r5, [r4, #0]
 800e51c:	e7dc      	b.n	800e4d8 <_malloc_r+0xb0>
 800e51e:	605b      	str	r3, [r3, #4]
 800e520:	deff      	udf	#255	; 0xff
 800e522:	bf00      	nop
 800e524:	200066ec 	.word	0x200066ec

0800e528 <__malloc_lock>:
 800e528:	4801      	ldr	r0, [pc, #4]	; (800e530 <__malloc_lock+0x8>)
 800e52a:	f000 b86b 	b.w	800e604 <__retarget_lock_acquire_recursive>
 800e52e:	bf00      	nop
 800e530:	20006830 	.word	0x20006830

0800e534 <__malloc_unlock>:
 800e534:	4801      	ldr	r0, [pc, #4]	; (800e53c <__malloc_unlock+0x8>)
 800e536:	f000 b866 	b.w	800e606 <__retarget_lock_release_recursive>
 800e53a:	bf00      	nop
 800e53c:	20006830 	.word	0x20006830

0800e540 <siprintf>:
 800e540:	b40e      	push	{r1, r2, r3}
 800e542:	b500      	push	{lr}
 800e544:	b09c      	sub	sp, #112	; 0x70
 800e546:	ab1d      	add	r3, sp, #116	; 0x74
 800e548:	9002      	str	r0, [sp, #8]
 800e54a:	9006      	str	r0, [sp, #24]
 800e54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e550:	4809      	ldr	r0, [pc, #36]	; (800e578 <siprintf+0x38>)
 800e552:	9107      	str	r1, [sp, #28]
 800e554:	9104      	str	r1, [sp, #16]
 800e556:	4909      	ldr	r1, [pc, #36]	; (800e57c <siprintf+0x3c>)
 800e558:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55c:	9105      	str	r1, [sp, #20]
 800e55e:	6800      	ldr	r0, [r0, #0]
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	a902      	add	r1, sp, #8
 800e564:	f000 f904 	bl	800e770 <_svfiprintf_r>
 800e568:	9b02      	ldr	r3, [sp, #8]
 800e56a:	2200      	movs	r2, #0
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	b01c      	add	sp, #112	; 0x70
 800e570:	f85d eb04 	ldr.w	lr, [sp], #4
 800e574:	b003      	add	sp, #12
 800e576:	4770      	bx	lr
 800e578:	2000015c 	.word	0x2000015c
 800e57c:	ffff0208 	.word	0xffff0208

0800e580 <memset>:
 800e580:	4402      	add	r2, r0
 800e582:	4603      	mov	r3, r0
 800e584:	4293      	cmp	r3, r2
 800e586:	d100      	bne.n	800e58a <memset+0xa>
 800e588:	4770      	bx	lr
 800e58a:	f803 1b01 	strb.w	r1, [r3], #1
 800e58e:	e7f9      	b.n	800e584 <memset+0x4>

0800e590 <_sbrk_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	4d06      	ldr	r5, [pc, #24]	; (800e5ac <_sbrk_r+0x1c>)
 800e594:	2300      	movs	r3, #0
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	602b      	str	r3, [r5, #0]
 800e59c:	f7f2 fd68 	bl	8001070 <_sbrk>
 800e5a0:	1c43      	adds	r3, r0, #1
 800e5a2:	d102      	bne.n	800e5aa <_sbrk_r+0x1a>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	b103      	cbz	r3, 800e5aa <_sbrk_r+0x1a>
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	bd38      	pop	{r3, r4, r5, pc}
 800e5ac:	2000682c 	.word	0x2000682c

0800e5b0 <__errno>:
 800e5b0:	4b01      	ldr	r3, [pc, #4]	; (800e5b8 <__errno+0x8>)
 800e5b2:	6818      	ldr	r0, [r3, #0]
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	2000015c 	.word	0x2000015c

0800e5bc <__libc_init_array>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	4d0d      	ldr	r5, [pc, #52]	; (800e5f4 <__libc_init_array+0x38>)
 800e5c0:	4c0d      	ldr	r4, [pc, #52]	; (800e5f8 <__libc_init_array+0x3c>)
 800e5c2:	1b64      	subs	r4, r4, r5
 800e5c4:	10a4      	asrs	r4, r4, #2
 800e5c6:	2600      	movs	r6, #0
 800e5c8:	42a6      	cmp	r6, r4
 800e5ca:	d109      	bne.n	800e5e0 <__libc_init_array+0x24>
 800e5cc:	4d0b      	ldr	r5, [pc, #44]	; (800e5fc <__libc_init_array+0x40>)
 800e5ce:	4c0c      	ldr	r4, [pc, #48]	; (800e600 <__libc_init_array+0x44>)
 800e5d0:	f000 fbae 	bl	800ed30 <_init>
 800e5d4:	1b64      	subs	r4, r4, r5
 800e5d6:	10a4      	asrs	r4, r4, #2
 800e5d8:	2600      	movs	r6, #0
 800e5da:	42a6      	cmp	r6, r4
 800e5dc:	d105      	bne.n	800e5ea <__libc_init_array+0x2e>
 800e5de:	bd70      	pop	{r4, r5, r6, pc}
 800e5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5e4:	4798      	blx	r3
 800e5e6:	3601      	adds	r6, #1
 800e5e8:	e7ee      	b.n	800e5c8 <__libc_init_array+0xc>
 800e5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5ee:	4798      	blx	r3
 800e5f0:	3601      	adds	r6, #1
 800e5f2:	e7f2      	b.n	800e5da <__libc_init_array+0x1e>
 800e5f4:	0800eefc 	.word	0x0800eefc
 800e5f8:	0800eefc 	.word	0x0800eefc
 800e5fc:	0800eefc 	.word	0x0800eefc
 800e600:	0800ef00 	.word	0x0800ef00

0800e604 <__retarget_lock_acquire_recursive>:
 800e604:	4770      	bx	lr

0800e606 <__retarget_lock_release_recursive>:
 800e606:	4770      	bx	lr

0800e608 <memcpy>:
 800e608:	440a      	add	r2, r1
 800e60a:	4291      	cmp	r1, r2
 800e60c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e610:	d100      	bne.n	800e614 <memcpy+0xc>
 800e612:	4770      	bx	lr
 800e614:	b510      	push	{r4, lr}
 800e616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e61a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e61e:	4291      	cmp	r1, r2
 800e620:	d1f9      	bne.n	800e616 <memcpy+0xe>
 800e622:	bd10      	pop	{r4, pc}

0800e624 <_free_r>:
 800e624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e626:	2900      	cmp	r1, #0
 800e628:	d044      	beq.n	800e6b4 <_free_r+0x90>
 800e62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e62e:	9001      	str	r0, [sp, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	f1a1 0404 	sub.w	r4, r1, #4
 800e636:	bfb8      	it	lt
 800e638:	18e4      	addlt	r4, r4, r3
 800e63a:	f7ff ff75 	bl	800e528 <__malloc_lock>
 800e63e:	4a1e      	ldr	r2, [pc, #120]	; (800e6b8 <_free_r+0x94>)
 800e640:	9801      	ldr	r0, [sp, #4]
 800e642:	6813      	ldr	r3, [r2, #0]
 800e644:	b933      	cbnz	r3, 800e654 <_free_r+0x30>
 800e646:	6063      	str	r3, [r4, #4]
 800e648:	6014      	str	r4, [r2, #0]
 800e64a:	b003      	add	sp, #12
 800e64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e650:	f7ff bf70 	b.w	800e534 <__malloc_unlock>
 800e654:	42a3      	cmp	r3, r4
 800e656:	d908      	bls.n	800e66a <_free_r+0x46>
 800e658:	6825      	ldr	r5, [r4, #0]
 800e65a:	1961      	adds	r1, r4, r5
 800e65c:	428b      	cmp	r3, r1
 800e65e:	bf01      	itttt	eq
 800e660:	6819      	ldreq	r1, [r3, #0]
 800e662:	685b      	ldreq	r3, [r3, #4]
 800e664:	1949      	addeq	r1, r1, r5
 800e666:	6021      	streq	r1, [r4, #0]
 800e668:	e7ed      	b.n	800e646 <_free_r+0x22>
 800e66a:	461a      	mov	r2, r3
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	b10b      	cbz	r3, 800e674 <_free_r+0x50>
 800e670:	42a3      	cmp	r3, r4
 800e672:	d9fa      	bls.n	800e66a <_free_r+0x46>
 800e674:	6811      	ldr	r1, [r2, #0]
 800e676:	1855      	adds	r5, r2, r1
 800e678:	42a5      	cmp	r5, r4
 800e67a:	d10b      	bne.n	800e694 <_free_r+0x70>
 800e67c:	6824      	ldr	r4, [r4, #0]
 800e67e:	4421      	add	r1, r4
 800e680:	1854      	adds	r4, r2, r1
 800e682:	42a3      	cmp	r3, r4
 800e684:	6011      	str	r1, [r2, #0]
 800e686:	d1e0      	bne.n	800e64a <_free_r+0x26>
 800e688:	681c      	ldr	r4, [r3, #0]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	6053      	str	r3, [r2, #4]
 800e68e:	440c      	add	r4, r1
 800e690:	6014      	str	r4, [r2, #0]
 800e692:	e7da      	b.n	800e64a <_free_r+0x26>
 800e694:	d902      	bls.n	800e69c <_free_r+0x78>
 800e696:	230c      	movs	r3, #12
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	e7d6      	b.n	800e64a <_free_r+0x26>
 800e69c:	6825      	ldr	r5, [r4, #0]
 800e69e:	1961      	adds	r1, r4, r5
 800e6a0:	428b      	cmp	r3, r1
 800e6a2:	bf04      	itt	eq
 800e6a4:	6819      	ldreq	r1, [r3, #0]
 800e6a6:	685b      	ldreq	r3, [r3, #4]
 800e6a8:	6063      	str	r3, [r4, #4]
 800e6aa:	bf04      	itt	eq
 800e6ac:	1949      	addeq	r1, r1, r5
 800e6ae:	6021      	streq	r1, [r4, #0]
 800e6b0:	6054      	str	r4, [r2, #4]
 800e6b2:	e7ca      	b.n	800e64a <_free_r+0x26>
 800e6b4:	b003      	add	sp, #12
 800e6b6:	bd30      	pop	{r4, r5, pc}
 800e6b8:	200066ec 	.word	0x200066ec

0800e6bc <__ssputs_r>:
 800e6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c0:	688e      	ldr	r6, [r1, #8]
 800e6c2:	461f      	mov	r7, r3
 800e6c4:	42be      	cmp	r6, r7
 800e6c6:	680b      	ldr	r3, [r1, #0]
 800e6c8:	4682      	mov	sl, r0
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	4690      	mov	r8, r2
 800e6ce:	d82c      	bhi.n	800e72a <__ssputs_r+0x6e>
 800e6d0:	898a      	ldrh	r2, [r1, #12]
 800e6d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6d6:	d026      	beq.n	800e726 <__ssputs_r+0x6a>
 800e6d8:	6965      	ldr	r5, [r4, #20]
 800e6da:	6909      	ldr	r1, [r1, #16]
 800e6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6e0:	eba3 0901 	sub.w	r9, r3, r1
 800e6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6e8:	1c7b      	adds	r3, r7, #1
 800e6ea:	444b      	add	r3, r9
 800e6ec:	106d      	asrs	r5, r5, #1
 800e6ee:	429d      	cmp	r5, r3
 800e6f0:	bf38      	it	cc
 800e6f2:	461d      	movcc	r5, r3
 800e6f4:	0553      	lsls	r3, r2, #21
 800e6f6:	d527      	bpl.n	800e748 <__ssputs_r+0x8c>
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7ff fe95 	bl	800e428 <_malloc_r>
 800e6fe:	4606      	mov	r6, r0
 800e700:	b360      	cbz	r0, 800e75c <__ssputs_r+0xa0>
 800e702:	6921      	ldr	r1, [r4, #16]
 800e704:	464a      	mov	r2, r9
 800e706:	f7ff ff7f 	bl	800e608 <memcpy>
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	6126      	str	r6, [r4, #16]
 800e718:	6165      	str	r5, [r4, #20]
 800e71a:	444e      	add	r6, r9
 800e71c:	eba5 0509 	sub.w	r5, r5, r9
 800e720:	6026      	str	r6, [r4, #0]
 800e722:	60a5      	str	r5, [r4, #8]
 800e724:	463e      	mov	r6, r7
 800e726:	42be      	cmp	r6, r7
 800e728:	d900      	bls.n	800e72c <__ssputs_r+0x70>
 800e72a:	463e      	mov	r6, r7
 800e72c:	6820      	ldr	r0, [r4, #0]
 800e72e:	4632      	mov	r2, r6
 800e730:	4641      	mov	r1, r8
 800e732:	f000 faab 	bl	800ec8c <memmove>
 800e736:	68a3      	ldr	r3, [r4, #8]
 800e738:	1b9b      	subs	r3, r3, r6
 800e73a:	60a3      	str	r3, [r4, #8]
 800e73c:	6823      	ldr	r3, [r4, #0]
 800e73e:	4433      	add	r3, r6
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	2000      	movs	r0, #0
 800e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e748:	462a      	mov	r2, r5
 800e74a:	f000 fab9 	bl	800ecc0 <_realloc_r>
 800e74e:	4606      	mov	r6, r0
 800e750:	2800      	cmp	r0, #0
 800e752:	d1e0      	bne.n	800e716 <__ssputs_r+0x5a>
 800e754:	6921      	ldr	r1, [r4, #16]
 800e756:	4650      	mov	r0, sl
 800e758:	f7ff ff64 	bl	800e624 <_free_r>
 800e75c:	230c      	movs	r3, #12
 800e75e:	f8ca 3000 	str.w	r3, [sl]
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e768:	81a3      	strh	r3, [r4, #12]
 800e76a:	f04f 30ff 	mov.w	r0, #4294967295
 800e76e:	e7e9      	b.n	800e744 <__ssputs_r+0x88>

0800e770 <_svfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	4698      	mov	r8, r3
 800e776:	898b      	ldrh	r3, [r1, #12]
 800e778:	061b      	lsls	r3, r3, #24
 800e77a:	b09d      	sub	sp, #116	; 0x74
 800e77c:	4607      	mov	r7, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	4614      	mov	r4, r2
 800e782:	d50e      	bpl.n	800e7a2 <_svfiprintf_r+0x32>
 800e784:	690b      	ldr	r3, [r1, #16]
 800e786:	b963      	cbnz	r3, 800e7a2 <_svfiprintf_r+0x32>
 800e788:	2140      	movs	r1, #64	; 0x40
 800e78a:	f7ff fe4d 	bl	800e428 <_malloc_r>
 800e78e:	6028      	str	r0, [r5, #0]
 800e790:	6128      	str	r0, [r5, #16]
 800e792:	b920      	cbnz	r0, 800e79e <_svfiprintf_r+0x2e>
 800e794:	230c      	movs	r3, #12
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	f04f 30ff 	mov.w	r0, #4294967295
 800e79c:	e0d0      	b.n	800e940 <_svfiprintf_r+0x1d0>
 800e79e:	2340      	movs	r3, #64	; 0x40
 800e7a0:	616b      	str	r3, [r5, #20]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a6:	2320      	movs	r3, #32
 800e7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7b0:	2330      	movs	r3, #48	; 0x30
 800e7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e958 <_svfiprintf_r+0x1e8>
 800e7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7ba:	f04f 0901 	mov.w	r9, #1
 800e7be:	4623      	mov	r3, r4
 800e7c0:	469a      	mov	sl, r3
 800e7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7c6:	b10a      	cbz	r2, 800e7cc <_svfiprintf_r+0x5c>
 800e7c8:	2a25      	cmp	r2, #37	; 0x25
 800e7ca:	d1f9      	bne.n	800e7c0 <_svfiprintf_r+0x50>
 800e7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800e7d0:	d00b      	beq.n	800e7ea <_svfiprintf_r+0x7a>
 800e7d2:	465b      	mov	r3, fp
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff ff6f 	bl	800e6bc <__ssputs_r>
 800e7de:	3001      	adds	r0, #1
 800e7e0:	f000 80a9 	beq.w	800e936 <_svfiprintf_r+0x1c6>
 800e7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7e6:	445a      	add	r2, fp
 800e7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 80a1 	beq.w	800e936 <_svfiprintf_r+0x1c6>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fe:	f10a 0a01 	add.w	sl, sl, #1
 800e802:	9304      	str	r3, [sp, #16]
 800e804:	9307      	str	r3, [sp, #28]
 800e806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e80a:	931a      	str	r3, [sp, #104]	; 0x68
 800e80c:	4654      	mov	r4, sl
 800e80e:	2205      	movs	r2, #5
 800e810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e814:	4850      	ldr	r0, [pc, #320]	; (800e958 <_svfiprintf_r+0x1e8>)
 800e816:	f7f1 fd1b 	bl	8000250 <memchr>
 800e81a:	9a04      	ldr	r2, [sp, #16]
 800e81c:	b9d8      	cbnz	r0, 800e856 <_svfiprintf_r+0xe6>
 800e81e:	06d0      	lsls	r0, r2, #27
 800e820:	bf44      	itt	mi
 800e822:	2320      	movmi	r3, #32
 800e824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e828:	0711      	lsls	r1, r2, #28
 800e82a:	bf44      	itt	mi
 800e82c:	232b      	movmi	r3, #43	; 0x2b
 800e82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e832:	f89a 3000 	ldrb.w	r3, [sl]
 800e836:	2b2a      	cmp	r3, #42	; 0x2a
 800e838:	d015      	beq.n	800e866 <_svfiprintf_r+0xf6>
 800e83a:	9a07      	ldr	r2, [sp, #28]
 800e83c:	4654      	mov	r4, sl
 800e83e:	2000      	movs	r0, #0
 800e840:	f04f 0c0a 	mov.w	ip, #10
 800e844:	4621      	mov	r1, r4
 800e846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e84a:	3b30      	subs	r3, #48	; 0x30
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	d94d      	bls.n	800e8ec <_svfiprintf_r+0x17c>
 800e850:	b1b0      	cbz	r0, 800e880 <_svfiprintf_r+0x110>
 800e852:	9207      	str	r2, [sp, #28]
 800e854:	e014      	b.n	800e880 <_svfiprintf_r+0x110>
 800e856:	eba0 0308 	sub.w	r3, r0, r8
 800e85a:	fa09 f303 	lsl.w	r3, r9, r3
 800e85e:	4313      	orrs	r3, r2
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	46a2      	mov	sl, r4
 800e864:	e7d2      	b.n	800e80c <_svfiprintf_r+0x9c>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	1d19      	adds	r1, r3, #4
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	9103      	str	r1, [sp, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfbb      	ittet	lt
 800e872:	425b      	neglt	r3, r3
 800e874:	f042 0202 	orrlt.w	r2, r2, #2
 800e878:	9307      	strge	r3, [sp, #28]
 800e87a:	9307      	strlt	r3, [sp, #28]
 800e87c:	bfb8      	it	lt
 800e87e:	9204      	strlt	r2, [sp, #16]
 800e880:	7823      	ldrb	r3, [r4, #0]
 800e882:	2b2e      	cmp	r3, #46	; 0x2e
 800e884:	d10c      	bne.n	800e8a0 <_svfiprintf_r+0x130>
 800e886:	7863      	ldrb	r3, [r4, #1]
 800e888:	2b2a      	cmp	r3, #42	; 0x2a
 800e88a:	d134      	bne.n	800e8f6 <_svfiprintf_r+0x186>
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	9203      	str	r2, [sp, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	bfb8      	it	lt
 800e898:	f04f 33ff 	movlt.w	r3, #4294967295
 800e89c:	3402      	adds	r4, #2
 800e89e:	9305      	str	r3, [sp, #20]
 800e8a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e968 <_svfiprintf_r+0x1f8>
 800e8a4:	7821      	ldrb	r1, [r4, #0]
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	f7f1 fcd1 	bl	8000250 <memchr>
 800e8ae:	b138      	cbz	r0, 800e8c0 <_svfiprintf_r+0x150>
 800e8b0:	9b04      	ldr	r3, [sp, #16]
 800e8b2:	eba0 000a 	sub.w	r0, r0, sl
 800e8b6:	2240      	movs	r2, #64	; 0x40
 800e8b8:	4082      	lsls	r2, r0
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	3401      	adds	r4, #1
 800e8be:	9304      	str	r3, [sp, #16]
 800e8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c4:	4825      	ldr	r0, [pc, #148]	; (800e95c <_svfiprintf_r+0x1ec>)
 800e8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8ca:	2206      	movs	r2, #6
 800e8cc:	f7f1 fcc0 	bl	8000250 <memchr>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d038      	beq.n	800e946 <_svfiprintf_r+0x1d6>
 800e8d4:	4b22      	ldr	r3, [pc, #136]	; (800e960 <_svfiprintf_r+0x1f0>)
 800e8d6:	bb1b      	cbnz	r3, 800e920 <_svfiprintf_r+0x1b0>
 800e8d8:	9b03      	ldr	r3, [sp, #12]
 800e8da:	3307      	adds	r3, #7
 800e8dc:	f023 0307 	bic.w	r3, r3, #7
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	9303      	str	r3, [sp, #12]
 800e8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e6:	4433      	add	r3, r6
 800e8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e8ea:	e768      	b.n	800e7be <_svfiprintf_r+0x4e>
 800e8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	e7a6      	b.n	800e844 <_svfiprintf_r+0xd4>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	3401      	adds	r4, #1
 800e8fa:	9305      	str	r3, [sp, #20]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	f04f 0c0a 	mov.w	ip, #10
 800e902:	4620      	mov	r0, r4
 800e904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e908:	3a30      	subs	r2, #48	; 0x30
 800e90a:	2a09      	cmp	r2, #9
 800e90c:	d903      	bls.n	800e916 <_svfiprintf_r+0x1a6>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0c6      	beq.n	800e8a0 <_svfiprintf_r+0x130>
 800e912:	9105      	str	r1, [sp, #20]
 800e914:	e7c4      	b.n	800e8a0 <_svfiprintf_r+0x130>
 800e916:	fb0c 2101 	mla	r1, ip, r1, r2
 800e91a:	4604      	mov	r4, r0
 800e91c:	2301      	movs	r3, #1
 800e91e:	e7f0      	b.n	800e902 <_svfiprintf_r+0x192>
 800e920:	ab03      	add	r3, sp, #12
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	462a      	mov	r2, r5
 800e926:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <_svfiprintf_r+0x1f4>)
 800e928:	a904      	add	r1, sp, #16
 800e92a:	4638      	mov	r0, r7
 800e92c:	f3af 8000 	nop.w
 800e930:	1c42      	adds	r2, r0, #1
 800e932:	4606      	mov	r6, r0
 800e934:	d1d6      	bne.n	800e8e4 <_svfiprintf_r+0x174>
 800e936:	89ab      	ldrh	r3, [r5, #12]
 800e938:	065b      	lsls	r3, r3, #25
 800e93a:	f53f af2d 	bmi.w	800e798 <_svfiprintf_r+0x28>
 800e93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e940:	b01d      	add	sp, #116	; 0x74
 800e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e946:	ab03      	add	r3, sp, #12
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	462a      	mov	r2, r5
 800e94c:	4b05      	ldr	r3, [pc, #20]	; (800e964 <_svfiprintf_r+0x1f4>)
 800e94e:	a904      	add	r1, sp, #16
 800e950:	4638      	mov	r0, r7
 800e952:	f000 f879 	bl	800ea48 <_printf_i>
 800e956:	e7eb      	b.n	800e930 <_svfiprintf_r+0x1c0>
 800e958:	0800eec0 	.word	0x0800eec0
 800e95c:	0800eeca 	.word	0x0800eeca
 800e960:	00000000 	.word	0x00000000
 800e964:	0800e6bd 	.word	0x0800e6bd
 800e968:	0800eec6 	.word	0x0800eec6

0800e96c <_printf_common>:
 800e96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e970:	4616      	mov	r6, r2
 800e972:	4699      	mov	r9, r3
 800e974:	688a      	ldr	r2, [r1, #8]
 800e976:	690b      	ldr	r3, [r1, #16]
 800e978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	bfb8      	it	lt
 800e980:	4613      	movlt	r3, r2
 800e982:	6033      	str	r3, [r6, #0]
 800e984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e988:	4607      	mov	r7, r0
 800e98a:	460c      	mov	r4, r1
 800e98c:	b10a      	cbz	r2, 800e992 <_printf_common+0x26>
 800e98e:	3301      	adds	r3, #1
 800e990:	6033      	str	r3, [r6, #0]
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	0699      	lsls	r1, r3, #26
 800e996:	bf42      	ittt	mi
 800e998:	6833      	ldrmi	r3, [r6, #0]
 800e99a:	3302      	addmi	r3, #2
 800e99c:	6033      	strmi	r3, [r6, #0]
 800e99e:	6825      	ldr	r5, [r4, #0]
 800e9a0:	f015 0506 	ands.w	r5, r5, #6
 800e9a4:	d106      	bne.n	800e9b4 <_printf_common+0x48>
 800e9a6:	f104 0a19 	add.w	sl, r4, #25
 800e9aa:	68e3      	ldr	r3, [r4, #12]
 800e9ac:	6832      	ldr	r2, [r6, #0]
 800e9ae:	1a9b      	subs	r3, r3, r2
 800e9b0:	42ab      	cmp	r3, r5
 800e9b2:	dc26      	bgt.n	800ea02 <_printf_common+0x96>
 800e9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9b8:	1e13      	subs	r3, r2, #0
 800e9ba:	6822      	ldr	r2, [r4, #0]
 800e9bc:	bf18      	it	ne
 800e9be:	2301      	movne	r3, #1
 800e9c0:	0692      	lsls	r2, r2, #26
 800e9c2:	d42b      	bmi.n	800ea1c <_printf_common+0xb0>
 800e9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	47c0      	blx	r8
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	d01e      	beq.n	800ea10 <_printf_common+0xa4>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	6922      	ldr	r2, [r4, #16]
 800e9d6:	f003 0306 	and.w	r3, r3, #6
 800e9da:	2b04      	cmp	r3, #4
 800e9dc:	bf02      	ittt	eq
 800e9de:	68e5      	ldreq	r5, [r4, #12]
 800e9e0:	6833      	ldreq	r3, [r6, #0]
 800e9e2:	1aed      	subeq	r5, r5, r3
 800e9e4:	68a3      	ldr	r3, [r4, #8]
 800e9e6:	bf0c      	ite	eq
 800e9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9ec:	2500      	movne	r5, #0
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	bfc4      	itt	gt
 800e9f2:	1a9b      	subgt	r3, r3, r2
 800e9f4:	18ed      	addgt	r5, r5, r3
 800e9f6:	2600      	movs	r6, #0
 800e9f8:	341a      	adds	r4, #26
 800e9fa:	42b5      	cmp	r5, r6
 800e9fc:	d11a      	bne.n	800ea34 <_printf_common+0xc8>
 800e9fe:	2000      	movs	r0, #0
 800ea00:	e008      	b.n	800ea14 <_printf_common+0xa8>
 800ea02:	2301      	movs	r3, #1
 800ea04:	4652      	mov	r2, sl
 800ea06:	4649      	mov	r1, r9
 800ea08:	4638      	mov	r0, r7
 800ea0a:	47c0      	blx	r8
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d103      	bne.n	800ea18 <_printf_common+0xac>
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295
 800ea14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea18:	3501      	adds	r5, #1
 800ea1a:	e7c6      	b.n	800e9aa <_printf_common+0x3e>
 800ea1c:	18e1      	adds	r1, r4, r3
 800ea1e:	1c5a      	adds	r2, r3, #1
 800ea20:	2030      	movs	r0, #48	; 0x30
 800ea22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea26:	4422      	add	r2, r4
 800ea28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea30:	3302      	adds	r3, #2
 800ea32:	e7c7      	b.n	800e9c4 <_printf_common+0x58>
 800ea34:	2301      	movs	r3, #1
 800ea36:	4622      	mov	r2, r4
 800ea38:	4649      	mov	r1, r9
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	47c0      	blx	r8
 800ea3e:	3001      	adds	r0, #1
 800ea40:	d0e6      	beq.n	800ea10 <_printf_common+0xa4>
 800ea42:	3601      	adds	r6, #1
 800ea44:	e7d9      	b.n	800e9fa <_printf_common+0x8e>
	...

0800ea48 <_printf_i>:
 800ea48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea4c:	7e0f      	ldrb	r7, [r1, #24]
 800ea4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea50:	2f78      	cmp	r7, #120	; 0x78
 800ea52:	4691      	mov	r9, r2
 800ea54:	4680      	mov	r8, r0
 800ea56:	460c      	mov	r4, r1
 800ea58:	469a      	mov	sl, r3
 800ea5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea5e:	d807      	bhi.n	800ea70 <_printf_i+0x28>
 800ea60:	2f62      	cmp	r7, #98	; 0x62
 800ea62:	d80a      	bhi.n	800ea7a <_printf_i+0x32>
 800ea64:	2f00      	cmp	r7, #0
 800ea66:	f000 80d4 	beq.w	800ec12 <_printf_i+0x1ca>
 800ea6a:	2f58      	cmp	r7, #88	; 0x58
 800ea6c:	f000 80c0 	beq.w	800ebf0 <_printf_i+0x1a8>
 800ea70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea78:	e03a      	b.n	800eaf0 <_printf_i+0xa8>
 800ea7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea7e:	2b15      	cmp	r3, #21
 800ea80:	d8f6      	bhi.n	800ea70 <_printf_i+0x28>
 800ea82:	a101      	add	r1, pc, #4	; (adr r1, 800ea88 <_printf_i+0x40>)
 800ea84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea88:	0800eae1 	.word	0x0800eae1
 800ea8c:	0800eaf5 	.word	0x0800eaf5
 800ea90:	0800ea71 	.word	0x0800ea71
 800ea94:	0800ea71 	.word	0x0800ea71
 800ea98:	0800ea71 	.word	0x0800ea71
 800ea9c:	0800ea71 	.word	0x0800ea71
 800eaa0:	0800eaf5 	.word	0x0800eaf5
 800eaa4:	0800ea71 	.word	0x0800ea71
 800eaa8:	0800ea71 	.word	0x0800ea71
 800eaac:	0800ea71 	.word	0x0800ea71
 800eab0:	0800ea71 	.word	0x0800ea71
 800eab4:	0800ebf9 	.word	0x0800ebf9
 800eab8:	0800eb21 	.word	0x0800eb21
 800eabc:	0800ebb3 	.word	0x0800ebb3
 800eac0:	0800ea71 	.word	0x0800ea71
 800eac4:	0800ea71 	.word	0x0800ea71
 800eac8:	0800ec1b 	.word	0x0800ec1b
 800eacc:	0800ea71 	.word	0x0800ea71
 800ead0:	0800eb21 	.word	0x0800eb21
 800ead4:	0800ea71 	.word	0x0800ea71
 800ead8:	0800ea71 	.word	0x0800ea71
 800eadc:	0800ebbb 	.word	0x0800ebbb
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	1d1a      	adds	r2, r3, #4
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	602a      	str	r2, [r5, #0]
 800eae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eaec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e09f      	b.n	800ec34 <_printf_i+0x1ec>
 800eaf4:	6820      	ldr	r0, [r4, #0]
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	0607      	lsls	r7, r0, #24
 800eafa:	f103 0104 	add.w	r1, r3, #4
 800eafe:	6029      	str	r1, [r5, #0]
 800eb00:	d501      	bpl.n	800eb06 <_printf_i+0xbe>
 800eb02:	681e      	ldr	r6, [r3, #0]
 800eb04:	e003      	b.n	800eb0e <_printf_i+0xc6>
 800eb06:	0646      	lsls	r6, r0, #25
 800eb08:	d5fb      	bpl.n	800eb02 <_printf_i+0xba>
 800eb0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eb0e:	2e00      	cmp	r6, #0
 800eb10:	da03      	bge.n	800eb1a <_printf_i+0xd2>
 800eb12:	232d      	movs	r3, #45	; 0x2d
 800eb14:	4276      	negs	r6, r6
 800eb16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb1a:	485a      	ldr	r0, [pc, #360]	; (800ec84 <_printf_i+0x23c>)
 800eb1c:	230a      	movs	r3, #10
 800eb1e:	e012      	b.n	800eb46 <_printf_i+0xfe>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	6820      	ldr	r0, [r4, #0]
 800eb24:	1d19      	adds	r1, r3, #4
 800eb26:	6029      	str	r1, [r5, #0]
 800eb28:	0605      	lsls	r5, r0, #24
 800eb2a:	d501      	bpl.n	800eb30 <_printf_i+0xe8>
 800eb2c:	681e      	ldr	r6, [r3, #0]
 800eb2e:	e002      	b.n	800eb36 <_printf_i+0xee>
 800eb30:	0641      	lsls	r1, r0, #25
 800eb32:	d5fb      	bpl.n	800eb2c <_printf_i+0xe4>
 800eb34:	881e      	ldrh	r6, [r3, #0]
 800eb36:	4853      	ldr	r0, [pc, #332]	; (800ec84 <_printf_i+0x23c>)
 800eb38:	2f6f      	cmp	r7, #111	; 0x6f
 800eb3a:	bf0c      	ite	eq
 800eb3c:	2308      	moveq	r3, #8
 800eb3e:	230a      	movne	r3, #10
 800eb40:	2100      	movs	r1, #0
 800eb42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb46:	6865      	ldr	r5, [r4, #4]
 800eb48:	60a5      	str	r5, [r4, #8]
 800eb4a:	2d00      	cmp	r5, #0
 800eb4c:	bfa2      	ittt	ge
 800eb4e:	6821      	ldrge	r1, [r4, #0]
 800eb50:	f021 0104 	bicge.w	r1, r1, #4
 800eb54:	6021      	strge	r1, [r4, #0]
 800eb56:	b90e      	cbnz	r6, 800eb5c <_printf_i+0x114>
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d04b      	beq.n	800ebf4 <_printf_i+0x1ac>
 800eb5c:	4615      	mov	r5, r2
 800eb5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb62:	fb03 6711 	mls	r7, r3, r1, r6
 800eb66:	5dc7      	ldrb	r7, [r0, r7]
 800eb68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb6c:	4637      	mov	r7, r6
 800eb6e:	42bb      	cmp	r3, r7
 800eb70:	460e      	mov	r6, r1
 800eb72:	d9f4      	bls.n	800eb5e <_printf_i+0x116>
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d10b      	bne.n	800eb90 <_printf_i+0x148>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	07de      	lsls	r6, r3, #31
 800eb7c:	d508      	bpl.n	800eb90 <_printf_i+0x148>
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	4299      	cmp	r1, r3
 800eb84:	bfde      	ittt	le
 800eb86:	2330      	movle	r3, #48	; 0x30
 800eb88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb90:	1b52      	subs	r2, r2, r5
 800eb92:	6122      	str	r2, [r4, #16]
 800eb94:	f8cd a000 	str.w	sl, [sp]
 800eb98:	464b      	mov	r3, r9
 800eb9a:	aa03      	add	r2, sp, #12
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f7ff fee4 	bl	800e96c <_printf_common>
 800eba4:	3001      	adds	r0, #1
 800eba6:	d14a      	bne.n	800ec3e <_printf_i+0x1f6>
 800eba8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebac:	b004      	add	sp, #16
 800ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	f043 0320 	orr.w	r3, r3, #32
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	4833      	ldr	r0, [pc, #204]	; (800ec88 <_printf_i+0x240>)
 800ebbc:	2778      	movs	r7, #120	; 0x78
 800ebbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	6829      	ldr	r1, [r5, #0]
 800ebc6:	061f      	lsls	r7, r3, #24
 800ebc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebcc:	d402      	bmi.n	800ebd4 <_printf_i+0x18c>
 800ebce:	065f      	lsls	r7, r3, #25
 800ebd0:	bf48      	it	mi
 800ebd2:	b2b6      	uxthmi	r6, r6
 800ebd4:	07df      	lsls	r7, r3, #31
 800ebd6:	bf48      	it	mi
 800ebd8:	f043 0320 	orrmi.w	r3, r3, #32
 800ebdc:	6029      	str	r1, [r5, #0]
 800ebde:	bf48      	it	mi
 800ebe0:	6023      	strmi	r3, [r4, #0]
 800ebe2:	b91e      	cbnz	r6, 800ebec <_printf_i+0x1a4>
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	f023 0320 	bic.w	r3, r3, #32
 800ebea:	6023      	str	r3, [r4, #0]
 800ebec:	2310      	movs	r3, #16
 800ebee:	e7a7      	b.n	800eb40 <_printf_i+0xf8>
 800ebf0:	4824      	ldr	r0, [pc, #144]	; (800ec84 <_printf_i+0x23c>)
 800ebf2:	e7e4      	b.n	800ebbe <_printf_i+0x176>
 800ebf4:	4615      	mov	r5, r2
 800ebf6:	e7bd      	b.n	800eb74 <_printf_i+0x12c>
 800ebf8:	682b      	ldr	r3, [r5, #0]
 800ebfa:	6826      	ldr	r6, [r4, #0]
 800ebfc:	6961      	ldr	r1, [r4, #20]
 800ebfe:	1d18      	adds	r0, r3, #4
 800ec00:	6028      	str	r0, [r5, #0]
 800ec02:	0635      	lsls	r5, r6, #24
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	d501      	bpl.n	800ec0c <_printf_i+0x1c4>
 800ec08:	6019      	str	r1, [r3, #0]
 800ec0a:	e002      	b.n	800ec12 <_printf_i+0x1ca>
 800ec0c:	0670      	lsls	r0, r6, #25
 800ec0e:	d5fb      	bpl.n	800ec08 <_printf_i+0x1c0>
 800ec10:	8019      	strh	r1, [r3, #0]
 800ec12:	2300      	movs	r3, #0
 800ec14:	6123      	str	r3, [r4, #16]
 800ec16:	4615      	mov	r5, r2
 800ec18:	e7bc      	b.n	800eb94 <_printf_i+0x14c>
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	1d1a      	adds	r2, r3, #4
 800ec1e:	602a      	str	r2, [r5, #0]
 800ec20:	681d      	ldr	r5, [r3, #0]
 800ec22:	6862      	ldr	r2, [r4, #4]
 800ec24:	2100      	movs	r1, #0
 800ec26:	4628      	mov	r0, r5
 800ec28:	f7f1 fb12 	bl	8000250 <memchr>
 800ec2c:	b108      	cbz	r0, 800ec32 <_printf_i+0x1ea>
 800ec2e:	1b40      	subs	r0, r0, r5
 800ec30:	6060      	str	r0, [r4, #4]
 800ec32:	6863      	ldr	r3, [r4, #4]
 800ec34:	6123      	str	r3, [r4, #16]
 800ec36:	2300      	movs	r3, #0
 800ec38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec3c:	e7aa      	b.n	800eb94 <_printf_i+0x14c>
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	462a      	mov	r2, r5
 800ec42:	4649      	mov	r1, r9
 800ec44:	4640      	mov	r0, r8
 800ec46:	47d0      	blx	sl
 800ec48:	3001      	adds	r0, #1
 800ec4a:	d0ad      	beq.n	800eba8 <_printf_i+0x160>
 800ec4c:	6823      	ldr	r3, [r4, #0]
 800ec4e:	079b      	lsls	r3, r3, #30
 800ec50:	d413      	bmi.n	800ec7a <_printf_i+0x232>
 800ec52:	68e0      	ldr	r0, [r4, #12]
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	4298      	cmp	r0, r3
 800ec58:	bfb8      	it	lt
 800ec5a:	4618      	movlt	r0, r3
 800ec5c:	e7a6      	b.n	800ebac <_printf_i+0x164>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	4632      	mov	r2, r6
 800ec62:	4649      	mov	r1, r9
 800ec64:	4640      	mov	r0, r8
 800ec66:	47d0      	blx	sl
 800ec68:	3001      	adds	r0, #1
 800ec6a:	d09d      	beq.n	800eba8 <_printf_i+0x160>
 800ec6c:	3501      	adds	r5, #1
 800ec6e:	68e3      	ldr	r3, [r4, #12]
 800ec70:	9903      	ldr	r1, [sp, #12]
 800ec72:	1a5b      	subs	r3, r3, r1
 800ec74:	42ab      	cmp	r3, r5
 800ec76:	dcf2      	bgt.n	800ec5e <_printf_i+0x216>
 800ec78:	e7eb      	b.n	800ec52 <_printf_i+0x20a>
 800ec7a:	2500      	movs	r5, #0
 800ec7c:	f104 0619 	add.w	r6, r4, #25
 800ec80:	e7f5      	b.n	800ec6e <_printf_i+0x226>
 800ec82:	bf00      	nop
 800ec84:	0800eed1 	.word	0x0800eed1
 800ec88:	0800eee2 	.word	0x0800eee2

0800ec8c <memmove>:
 800ec8c:	4288      	cmp	r0, r1
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	eb01 0402 	add.w	r4, r1, r2
 800ec94:	d902      	bls.n	800ec9c <memmove+0x10>
 800ec96:	4284      	cmp	r4, r0
 800ec98:	4623      	mov	r3, r4
 800ec9a:	d807      	bhi.n	800ecac <memmove+0x20>
 800ec9c:	1e43      	subs	r3, r0, #1
 800ec9e:	42a1      	cmp	r1, r4
 800eca0:	d008      	beq.n	800ecb4 <memmove+0x28>
 800eca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecaa:	e7f8      	b.n	800ec9e <memmove+0x12>
 800ecac:	4402      	add	r2, r0
 800ecae:	4601      	mov	r1, r0
 800ecb0:	428a      	cmp	r2, r1
 800ecb2:	d100      	bne.n	800ecb6 <memmove+0x2a>
 800ecb4:	bd10      	pop	{r4, pc}
 800ecb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecbe:	e7f7      	b.n	800ecb0 <memmove+0x24>

0800ecc0 <_realloc_r>:
 800ecc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4614      	mov	r4, r2
 800ecc8:	460e      	mov	r6, r1
 800ecca:	b921      	cbnz	r1, 800ecd6 <_realloc_r+0x16>
 800eccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	f7ff bba9 	b.w	800e428 <_malloc_r>
 800ecd6:	b92a      	cbnz	r2, 800ece4 <_realloc_r+0x24>
 800ecd8:	f7ff fca4 	bl	800e624 <_free_r>
 800ecdc:	4625      	mov	r5, r4
 800ecde:	4628      	mov	r0, r5
 800ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece4:	f000 f81b 	bl	800ed1e <_malloc_usable_size_r>
 800ece8:	4284      	cmp	r4, r0
 800ecea:	4607      	mov	r7, r0
 800ecec:	d802      	bhi.n	800ecf4 <_realloc_r+0x34>
 800ecee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecf2:	d812      	bhi.n	800ed1a <_realloc_r+0x5a>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4640      	mov	r0, r8
 800ecf8:	f7ff fb96 	bl	800e428 <_malloc_r>
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d0ed      	beq.n	800ecde <_realloc_r+0x1e>
 800ed02:	42bc      	cmp	r4, r7
 800ed04:	4622      	mov	r2, r4
 800ed06:	4631      	mov	r1, r6
 800ed08:	bf28      	it	cs
 800ed0a:	463a      	movcs	r2, r7
 800ed0c:	f7ff fc7c 	bl	800e608 <memcpy>
 800ed10:	4631      	mov	r1, r6
 800ed12:	4640      	mov	r0, r8
 800ed14:	f7ff fc86 	bl	800e624 <_free_r>
 800ed18:	e7e1      	b.n	800ecde <_realloc_r+0x1e>
 800ed1a:	4635      	mov	r5, r6
 800ed1c:	e7df      	b.n	800ecde <_realloc_r+0x1e>

0800ed1e <_malloc_usable_size_r>:
 800ed1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed22:	1f18      	subs	r0, r3, #4
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	bfbc      	itt	lt
 800ed28:	580b      	ldrlt	r3, [r1, r0]
 800ed2a:	18c0      	addlt	r0, r0, r3
 800ed2c:	4770      	bx	lr
	...

0800ed30 <_init>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	bf00      	nop
 800ed34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed36:	bc08      	pop	{r3}
 800ed38:	469e      	mov	lr, r3
 800ed3a:	4770      	bx	lr

0800ed3c <_fini>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	bf00      	nop
 800ed40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed42:	bc08      	pop	{r3}
 800ed44:	469e      	mov	lr, r3
 800ed46:	4770      	bx	lr
