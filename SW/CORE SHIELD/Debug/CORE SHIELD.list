
CORE SHIELD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800ecf8  0800ecf8  0001ecf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee48  0800ee48  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee48  0800ee48  0001ee48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee50  0800ee50  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee50  0800ee50  0001ee50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ee58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066d0  20000160  0800efb8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006830  0800efb8  00026830  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028052  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058d3  00000000  00000000  00048223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f78  00000000  00000000  0004daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000184e  00000000  00000000  0004fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000776b  00000000  00000000  000512be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000281e5  00000000  00000000  00058a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00113f91  00000000  00000000  00080c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008980  00000000  00000000  00194ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0019d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000160 	.word	0x20000160
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ece0 	.word	0x0800ece0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000164 	.word	0x20000164
 800023c:	0800ece0 	.word	0x0800ece0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fd8b 	bl	800110a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f8ae 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 fa0c 	bl	8000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9ec 	bl	80009d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f916 	bl	8000830 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000604:	f000 f982 	bl	800090c <MX_CAN1_Init>
  MX_UART4_Init();
 8000608:	f000 f9b6 	bl	8000978 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LECTURES_ADC, ADC_BUF_LEN); //ADC with DMA initialization.
 800060c:	2203      	movs	r2, #3
 800060e:	4942      	ldr	r1, [pc, #264]	; (8000718 <main+0x12c>)
 8000610:	4842      	ldr	r0, [pc, #264]	; (800071c <main+0x130>)
 8000612:	f000 ff1f 	bl	8001454 <HAL_ADC_Start_DMA>
  	  	  	  	  	  	  	  	  	  	  	  	  		//(&hadc1): The function uses the ADC 1
	  	  	  	  										//LECTURES_ADC: It saves all the read data in the buffer
  	  	  	  	  	  	  	  	  	  	  	  	  		//"ADC_BUF_LEN": Number of read channels by the ADC..

  canfil.FilterBank = 0;
 8000616:	4b42      	ldr	r3, [pc, #264]	; (8000720 <main+0x134>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x134>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000622:	4b3f      	ldr	r3, [pc, #252]	; (8000720 <main+0x134>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0x0000;						//Si està en 0 acceptem tots els missatges
 8000628:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <main+0x134>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0x0000;						//Si està en 0 acceptem tots els missatges.
 800062e:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <main+0x134>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x0000;
 8000634:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <main+0x134>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <main+0x134>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <main+0x134>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000646:	4b36      	ldr	r3, [pc, #216]	; (8000720 <main+0x134>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <main+0x134>)
 800064e:	220e      	movs	r2, #14
 8000650:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK)
 8000652:	4933      	ldr	r1, [pc, #204]	; (8000720 <main+0x134>)
 8000654:	4833      	ldr	r0, [pc, #204]	; (8000724 <main+0x138>)
 8000656:	f001 fbed 	bl	8001e34 <HAL_CAN_ConfigFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x78>
  {
  	Error_Handler();
 8000660:	f000 faa8 	bl	8000bb4 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000664:	482f      	ldr	r0, [pc, #188]	; (8000724 <main+0x138>)
 8000666:	f001 fcd1 	bl	800200c <HAL_CAN_Start>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <main+0x88>
  {
  	Error_Handler();
 8000670:	f000 faa0 	bl	8000bb4 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000674:	2103      	movs	r1, #3
 8000676:	482b      	ldr	r0, [pc, #172]	; (8000724 <main+0x138>)
 8000678:	f001 feee 	bl	8002458 <HAL_CAN_ActivateNotification>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <main+0x9a>
      {
      	Error_Handler();
 8000682:	f000 fa97 	bl	8000bb4 <Error_Handler>
      }

  TxHeader.DLC = 8; 								//Number of bites to be transmitted max- 8
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <main+0x13c>)
 8000688:	2208      	movs	r2, #8
 800068a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;						//
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <main+0x13c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <main+0x13c>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <main+0x13c>)
 800069a:	f240 3221 	movw	r2, #801	; 0x321
 800069e:	601a      	str	r2, [r3, #0]
  TxHeader.StdId = 0x321;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <main+0x13c>)
 80006a2:	f240 3221 	movw	r2, #801	; 0x321
 80006a6:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <main+0x13c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	751a      	strb	r2, [r3, #20]
  TxData[0] = 1;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <main+0x140>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <main+0x140>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <main+0x140>)
 80006bc:	2203      	movs	r2, #3
 80006be:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <main+0x140>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <main+0x140>)
 80006c8:	2205      	movs	r2, #5
 80006ca:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <main+0x140>)
 80006ce:	2206      	movs	r2, #6
 80006d0:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <main+0x140>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <main+0x140>)
 80006da:	2208      	movs	r2, #8
 80006dc:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006de:	f00a faed 	bl	800acbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Maquina_Estats */
  Maquina_EstatsHandle = osThreadNew(Maquina_estats, NULL, &Maquina_Estats_attributes);
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <main+0x144>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <main+0x148>)
 80006e8:	f00a fb52 	bl	800ad90 <osThreadNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <main+0x14c>)
 80006f0:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX */
  CAN_TXHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_attributes);
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <main+0x150>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <main+0x154>)
 80006f8:	f00a fb4a 	bl	800ad90 <osThreadNew>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <main+0x158>)
 8000700:	6013      	str	r3, [r2, #0]

  /* creation of USB_TASK */
  USB_TASKHandle = osThreadNew(usb_data, NULL, &USB_TASK_attributes);
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <main+0x15c>)
 8000704:	2100      	movs	r1, #0
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0x160>)
 8000708:	f00a fb42 	bl	800ad90 <osThreadNew>
 800070c:	4603      	mov	r3, r0
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <main+0x164>)
 8000710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000712:	f00a fb07 	bl	800ad24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)												//Main while
 8000716:	e7fe      	b.n	8000716 <main+0x12a>
 8000718:	20000350 	.word	0x20000350
 800071c:	2000017c 	.word	0x2000017c
 8000720:	20000324 	.word	0x20000324
 8000724:	20000224 	.word	0x20000224
 8000728:	200002fc 	.word	0x200002fc
 800072c:	20000314 	.word	0x20000314
 8000730:	0800ed88 	.word	0x0800ed88
 8000734:	08000b2d 	.word	0x08000b2d
 8000738:	200002d4 	.word	0x200002d4
 800073c:	0800edac 	.word	0x0800edac
 8000740:	08000b41 	.word	0x08000b41
 8000744:	200002d8 	.word	0x200002d8
 8000748:	0800edd0 	.word	0x0800edd0
 800074c:	08000b81 	.word	0x08000b81
 8000750:	200002dc 	.word	0x200002dc

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00d fee4 	bl	800e530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <SystemClock_Config+0xd4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <SystemClock_Config+0xd4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <SystemClock_Config+0xd4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a25      	ldr	r2, [pc, #148]	; (800082c <SystemClock_Config+0xd8>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80007bc:	230a      	movs	r3, #10
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007c0:	23d8      	movs	r3, #216	; 0xd8
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007c8:	2309      	movs	r3, #9
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fa45 	bl	8004c64 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007e0:	f000 f9e8 	bl	8000bb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e4:	f004 f9ee 	bl	8004bc4 <HAL_PWREx_EnableOverDrive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ee:	f000 f9e1 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2107      	movs	r1, #7
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fcd5 	bl	80051c0 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800081c:	f000 f9ca 	bl	8000bb4 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <MX_ADC1_Init+0xd4>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_ADC1_Init+0xd0>)
 800084a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800084e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000858:	2201      	movs	r2, #1
 800085a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_ADC1_Init+0xd0>)
 800085e:	2201      	movs	r2, #1
 8000860:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_ADC1_Init+0xd0>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <MX_ADC1_Init+0xd8>)
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_ADC1_Init+0xd0>)
 800087e:	2203      	movs	r2, #3
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_ADC1_Init+0xd0>)
 800088c:	2201      	movs	r2, #1
 800088e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	481b      	ldr	r0, [pc, #108]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000892:	f000 fc8b 	bl	80011ac <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 f98a 	bl	8000bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_ADC1_Init+0xd0>)
 80008b2:	f000 fee7 	bl	8001684 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008bc:	f000 f97a 	bl	8000bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ADC1_Init+0xd0>)
 80008ce:	f000 fed9 	bl	8001684 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008d8:	f000 f96c 	bl	8000bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80008dc:	2312      	movs	r3, #18
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008e0:	2303      	movs	r3, #3
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_ADC1_Init+0xd0>)
 80008ea:	f000 fecb 	bl	8001684 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80008f4:	f000 f95e 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000017c 	.word	0x2000017c
 8000904:	40012000 	.word	0x40012000
 8000908:	0f000001 	.word	0x0f000001

0800090c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_CAN1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_CAN1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_CAN1_Init+0x64>)
 8000918:	220c      	movs	r2, #12
 800091a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_CAN1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_CAN1_Init+0x64>)
 800092a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800092e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_CAN1_Init+0x64>)
 8000932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000936:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_CAN1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_CAN1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_CAN1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_CAN1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_CAN1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_CAN1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_CAN1_Init+0x64>)
 800095e:	f001 f96d 	bl	8001c3c <HAL_CAN_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 f924 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000224 	.word	0x20000224
 8000974:	40006400 	.word	0x40006400

08000978 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_UART4_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_UART4_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_UART4_Init+0x58>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_UART4_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_UART4_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_UART4_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_UART4_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_UART4_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_UART4_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_UART4_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_UART4_Init+0x58>)
 80009bc:	f005 fd20 	bl	8006400 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f8f5 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000024c 	.word	0x2000024c
 80009d4:	40004c00 	.word	0x40004c00

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DMA_Init+0x38>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <MX_DMA_Init+0x38>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DMA_Init+0x38>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	2038      	movs	r0, #56	; 0x38
 80009fc:	f002 f830 	bl	8002a60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a00:	2038      	movs	r0, #56	; 0x38
 8000a02:	f002 f849 	bl	8002a98 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_GPIO_Init+0x74>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)		//Completed CAN transmission function
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);								//It changes the LED state
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000a98:	f002 fdc2 	bl	8003620 <HAL_GPIO_TogglePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)			//Received CAN function
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);		//Takes the data from the CAN channel
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ab8:	f001 fbbc 	bl	8002234 <HAL_CAN_GetRxMessage>
																		//&hadc1: The function uses the ADC 1
																		//CAN_RX_FIFO0: Where the received data is located, a FIFO, specifically the FIFO 0
																		//&RxHeader: CAN Bus Transmit Header
																		//RxData: The CAN Bus Receive Buffer
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);								//It changes the LED state
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000ac2:	f002 fdad 	bl	8003620 <HAL_GPIO_TogglePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000031c 	.word	0x2000031c
 8000ad4:	200002e0 	.word	0x200002e0
 8000ad8:	20000224 	.word	0x20000224
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)					//Function called each time the ADC finished the conversions
	  	  {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]

	  	    sprintf(USB_TX, "%d %d %d\n", LECTURES_ADC[0], LECTURES_ADC[1],LECTURES_ADC[2]); 		//Creates an string from each read value
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_ADC_ConvCpltCallback+0x40>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_ADC_ConvCpltCallback+0x40>)
 8000af0:	885b      	ldrh	r3, [r3, #2]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_ADC_ConvCpltCallback+0x40>)
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	460b      	mov	r3, r1
 8000afc:	4909      	ldr	r1, [pc, #36]	; (8000b24 <HAL_ADC_ConvCpltCallback+0x44>)
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b00:	f00d fcf6 	bl	800e4f0 <siprintf>
	  	    																						//USB_TX: Is the buffer where the read and operated data is stored
	  	    																						//%d\: Defines the type of variable, one for each saved variable
	  	    																						//"LECTURES_ADC[X]": Defines each variable, it is defined by the position in the buffer.
	  	    																						//Vbat channel works between 1.65V and 3.6V
	  	    CDC_Transmit_FS((uint8_t*)USB_TX, strlen(USB_TX));										//Sends the USB_TX buffer through USB
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b06:	f7ff fb9b 	bl	8000240 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b12:	f00c ff59 	bl	800d9c8 <CDC_Transmit_FS>
	  	  }
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000350 	.word	0x20000350
 8000b24:	0800ed1c 	.word	0x0800ed1c
 8000b28:	20000358 	.word	0x20000358

08000b2c <Maquina_estats>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Maquina_estats */
void Maquina_estats(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b34:	f00c fe8a 	bl	800d84c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f00a f9cf 	bl	800aedc <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <Maquina_estats+0xc>

08000b40 <CAN_Transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_Transmit */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <CAN_Transmit+0x30>)
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <CAN_Transmit+0x34>)
 8000b4c:	490a      	ldr	r1, [pc, #40]	; (8000b78 <CAN_Transmit+0x38>)
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <CAN_Transmit+0x3c>)
 8000b50:	f001 faa0 	bl	8002094 <HAL_CAN_AddTxMessage>
	  osDelay(500);
 8000b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b58:	f00a f9c0 	bl	800aedc <osDelay>
	  TxData[7] = TxData[7] + 1;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <CAN_Transmit+0x34>)
 8000b5e:	79db      	ldrb	r3, [r3, #7]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <CAN_Transmit+0x34>)
 8000b66:	71da      	strb	r2, [r3, #7]
	  osDelay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f00a f9b7 	bl	800aedc <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b6e:	e7eb      	b.n	8000b48 <CAN_Transmit+0x8>
 8000b70:	2000034c 	.word	0x2000034c
 8000b74:	20000314 	.word	0x20000314
 8000b78:	200002fc 	.word	0x200002fc
 8000b7c:	20000224 	.word	0x20000224

08000b80 <usb_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usb_data */
void usb_data(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usb_data */
  /* Infinite loop */
  for(;;)												//Infinite loop
  {
    osDelay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f00a f9a7 	bl	800aedc <osDelay>
 8000b8e:	e7fb      	b.n	8000b88 <usb_data+0x8>

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 fabf 	bl	8001124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40001000 	.word	0x40001000

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f001 ff2f 	bl	8002a60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <HAL_ADC_MspInit+0xe4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d15b      	bne.n	8000cea <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a30      	ldr	r2, [pc, #192]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_ADC_MspInit+0xe8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c62:	2303      	movs	r3, #3
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <HAL_ADC_MspInit+0xec>)
 8000c76:	f002 fb27 	bl	80032c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <HAL_ADC_MspInit+0xf4>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cc0:	f001 fef8 	bl	8002ab4 <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000cca:	f7ff ff73 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_ADC_MspInit+0xf0>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2105      	movs	r1, #5
 8000cde:	2012      	movs	r0, #18
 8000ce0:	f001 febe 	bl	8002a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ce4:	2012      	movs	r0, #18
 8000ce6:	f001 fed7 	bl	8002a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	200001c4 	.word	0x200001c4
 8000d04:	40026410 	.word	0x40026410

08000d08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_CAN_MspInit+0x9c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d138      	bne.n	8000d9c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_CAN_MspInit+0xa0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <HAL_CAN_MspInit+0xa4>)
 8000d78:	f002 faa6 	bl	80032c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2014      	movs	r0, #20
 8000d82:	f001 fe6d 	bl	8002a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d86:	2014      	movs	r0, #20
 8000d88:	f001 fe86 	bl	8002a98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	2015      	movs	r0, #21
 8000d92:	f001 fe65 	bl	8002a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d96:	2015      	movs	r0, #21
 8000d98:	f001 fe7e 	bl	8002a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40006400 	.word	0x40006400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020400 	.word	0x40020400

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ae      	sub	sp, #184	; 0xb8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2290      	movs	r2, #144	; 0x90
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00d fbad 	bl	800e530 <memset>
  if(huart->Instance==UART4)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <HAL_UART_MspInit+0xc0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d143      	bne.n	8000e68 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fbfe 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dfa:	f7ff fedb 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e46:	2308      	movs	r3, #8
 8000e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_UART_MspInit+0xc8>)
 8000e54:	f002 fa38 	bl	80032c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	2034      	movs	r0, #52	; 0x34
 8000e5e:	f001 fdff 	bl	8002a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e62:	2034      	movs	r0, #52	; 0x34
 8000e64:	f001 fe18 	bl	8002a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	37b8      	adds	r7, #184	; 0xb8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004c00 	.word	0x40004c00
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020c00 	.word	0x40020c00

08000e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_InitTick+0xe0>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_InitTick+0xe0>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_InitTick+0xe0>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea4:	f107 0210 	add.w	r2, r7, #16
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fb6c 	bl	800558c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ebe:	f004 fb3d 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8000ec2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ec4:	e004      	b.n	8000ed0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ec6:	f004 fb39 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <HAL_InitTick+0xe4>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0c9b      	lsrs	r3, r3, #18
 8000eda:	3b01      	subs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_InitTick+0xe8>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_InitTick+0xec>)
 8000ee2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_InitTick+0xe8>)
 8000ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_InitTick+0xe8>)
 8000eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_InitTick+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_InitTick+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_InitTick+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f04:	4817      	ldr	r0, [pc, #92]	; (8000f64 <HAL_InitTick+0xe8>)
 8000f06:	f004 ff9b 	bl	8005e40 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d11b      	bne.n	8000f50 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <HAL_InitTick+0xe8>)
 8000f1a:	f004 fff3 	bl	8005f04 <HAL_TIM_Base_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d111      	bne.n	8000f50 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f001 fdb3 	bl	8002a98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d808      	bhi.n	8000f4a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2036      	movs	r0, #54	; 0x36
 8000f3e:	f001 fd8f 	bl	8002a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_InitTick+0xf0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e002      	b.n	8000f50 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3738      	adds	r7, #56	; 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	20000364 	.word	0x20000364
 8000f68:	40001000 	.word	0x40001000
 8000f6c:	20000004 	.word	0x20000004

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <ADC_IRQHandler+0x10>)
 8000fa2:	f000 f947 	bl	8001234 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000017c 	.word	0x2000017c

08000fb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <CAN1_RX0_IRQHandler+0x10>)
 8000fb6:	f001 fa75 	bl	80024a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000224 	.word	0x20000224

08000fc4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <CAN1_RX1_IRQHandler+0x10>)
 8000fca:	f001 fa6b 	bl	80024a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000224 	.word	0x20000224

08000fd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <UART4_IRQHandler+0x10>)
 8000fde:	f005 fa5d 	bl	800649c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000024c 	.word	0x2000024c

08000fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM6_DAC_IRQHandler+0x10>)
 8000ff2:	f004 ffff 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000364 	.word	0x20000364

08001000 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA2_Stream0_IRQHandler+0x10>)
 8001006:	f001 fef5 	bl	8002df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001c4 	.word	0x200001c4

08001014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <OTG_FS_IRQHandler+0x10>)
 800101a:	f002 fc61 	bl	80038e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200061e0 	.word	0x200061e0

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f00d fa82 	bl	800e560 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20080000 	.word	0x20080000
 8001088:	00000400 	.word	0x00000400
 800108c:	200003b0 	.word	0x200003b0
 8001090:	20006830 	.word	0x20006830

08001094 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x12>
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1a>)
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopFillZerobss+0x1e>)
 80010c2:	2300      	movs	r3, #0
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:
 80010c6:	58d4      	ldr	r4, [r2, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:
 80010cc:	18c4      	adds	r4, r0, r3
 80010ce:	428c      	cmp	r4, r1
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x22>)
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopFillZerobss+0x26>)
 80010d6:	2300      	movs	r3, #0
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>
 80010e2:	f7ff ffd7 	bl	8001094 <SystemInit>
 80010e6:	f00d fa41 	bl	800e56c <__libc_init_array>
 80010ea:	f7ff fa7f 	bl	80005ec <main>
 80010ee:	4770      	bx	lr
 80010f0:	20080000 	.word	0x20080000
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000160 	.word	0x20000160
 80010fc:	0800ee58 	.word	0x0800ee58
 8001100:	20000160 	.word	0x20000160
 8001104:	20006830 	.word	0x20006830

08001108 <CAN1_SCE_IRQHandler>:
 8001108:	e7fe      	b.n	8001108 <CAN1_SCE_IRQHandler>

0800110a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110e:	2003      	movs	r0, #3
 8001110:	f001 fc9b 	bl	8002a4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001114:	200f      	movs	r0, #15
 8001116:	f7ff feb1 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fd51 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008
 8001148:	200003b4 	.word	0x200003b4

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200003b4 	.word	0x200003b4

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008

080011ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e031      	b.n	8001226 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fd20 	bl	8000c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_ADC_Init+0x84>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	f043 0202 	orr.w	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fb98 	bl	8001930 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f023 0303 	bic.w	r3, r3, #3
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
 8001216:	e001      	b.n	800121c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	ffffeefd 	.word	0xffffeefd

08001234 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d049      	beq.n	80012fe <HAL_ADC_IRQHandler+0xca>
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d046      	beq.n	80012fe <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d12b      	bne.n	80012ee <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	d127      	bne.n	80012ee <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d119      	bne.n	80012ee <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0220 	bic.w	r2, r2, #32
 80012c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fbf6 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f06f 0212 	mvn.w	r2, #18
 80012fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d057      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x190>
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d054      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d139      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001358:	2b00      	cmp	r3, #0
 800135a:	d12b      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d124      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001374:	2b00      	cmp	r3, #0
 8001376:	d11d      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800137c:	2b00      	cmp	r3, #0
 800137e:	d119      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fc37 	bl	8001c28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 020c 	mvn.w	r2, #12
 80013c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d017      	beq.n	800140a <HAL_ADC_IRQHandler+0x1d6>
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10d      	bne.n	800140a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f92e 	bl	800165c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f06f 0201 	mvn.w	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001418:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <HAL_ADC_IRQHandler+0x218>
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f06f 0220 	mvn.w	r2, #32
 800143a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f917 	bl	8001670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f06f 0220 	mvn.w	r2, #32
 800144a:	601a      	str	r2, [r3, #0]
  }
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Start_DMA+0x1e>
 800146e:	2302      	movs	r3, #2
 8001470:	e0d4      	b.n	800161c <HAL_ADC_Start_DMA+0x1c8>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d018      	beq.n	80014ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001498:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_ADC_Start_DMA+0x1d0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a62      	ldr	r2, [pc, #392]	; (8001628 <HAL_ADC_Start_DMA+0x1d4>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f9      	bne.n	80014ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f040 809c 	bne.w	8001602 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_ADC_Start_DMA+0x1d8>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001504:	d106      	bne.n	8001514 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f023 0206 	bic.w	r2, r3, #6
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
 8001512:	e002      	b.n	800151a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_ADC_Start_DMA+0x1dc>)
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152e:	4a41      	ldr	r2, [pc, #260]	; (8001634 <HAL_ADC_Start_DMA+0x1e0>)
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_ADC_Start_DMA+0x1e4>)
 8001538:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001542:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001552:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001562:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	334c      	adds	r3, #76	; 0x4c
 800156e:	4619      	mov	r1, r3
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f001 fb4c 	bl	8002c10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_ADC_Start_DMA+0x1e8>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10f      	bne.n	80015a4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d143      	bne.n	800161a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e03a      	b.n	800161a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <HAL_ADC_Start_DMA+0x1ec>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10e      	bne.n	80015cc <HAL_ADC_Start_DMA+0x178>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ca:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_ADC_Start_DMA+0x1e8>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d120      	bne.n	800161a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_ADC_Start_DMA+0x1f0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11b      	bne.n	800161a <HAL_ADC_Start_DMA+0x1c6>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00b      	b.n	800161a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	431bde83 	.word	0x431bde83
 800162c:	fffff8fe 	.word	0xfffff8fe
 8001630:	08001b25 	.word	0x08001b25
 8001634:	08001bdf 	.word	0x08001bdf
 8001638:	08001bfb 	.word	0x08001bfb
 800163c:	40012300 	.word	0x40012300
 8001640:	40012000 	.word	0x40012000
 8001644:	40012200 	.word	0x40012200

08001648 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1c>
 800169c:	2302      	movs	r3, #2
 800169e:	e136      	b.n	800190e <HAL_ADC_ConfigChannel+0x28a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d93a      	bls.n	8001726 <HAL_ADC_ConfigChannel+0xa2>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b8:	d035      	beq.n	8001726 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68d9      	ldr	r1, [r3, #12]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	2207      	movs	r2, #7
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	400a      	ands	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a8d      	ldr	r2, [pc, #564]	; (800191c <HAL_ADC_ConfigChannel+0x298>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10a      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68d9      	ldr	r1, [r3, #12]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	061a      	lsls	r2, r3, #24
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fe:	e035      	b.n	800176c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	4603      	mov	r3, r0
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4403      	add	r3, r0
 8001718:	3b1e      	subs	r3, #30
 800171a:	409a      	lsls	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001724:	e022      	b.n	800176c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6919      	ldr	r1, [r3, #16]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	2207      	movs	r2, #7
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6919      	ldr	r1, [r3, #16]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	4603      	mov	r3, r0
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4403      	add	r3, r0
 8001762:	409a      	lsls	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d824      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b05      	subs	r3, #5
 8001786:	221f      	movs	r2, #31
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43da      	mvns	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	400a      	ands	r2, r1
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b05      	subs	r3, #5
 80017b0:	fa00 f203 	lsl.w	r2, r0, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
 80017bc:	e04c      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d824      	bhi.n	8001810 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b23      	subs	r3, #35	; 0x23
 80017d8:	221f      	movs	r2, #31
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	400a      	ands	r2, r1
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b23      	subs	r3, #35	; 0x23
 8001802:	fa00 f203 	lsl.w	r2, r0, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	e023      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b41      	subs	r3, #65	; 0x41
 8001822:	221f      	movs	r2, #31
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	3b41      	subs	r3, #65	; 0x41
 800184c:	fa00 f203 	lsl.w	r2, r0, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a30      	ldr	r2, [pc, #192]	; (8001920 <HAL_ADC_ConfigChannel+0x29c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1f4>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800186a:	d105      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 8001872:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001876:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <HAL_ADC_ConfigChannel+0x29c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10f      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x21e>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b12      	cmp	r3, #18
 8001888:	d10b      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 8001890:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001894:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 800189c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_ADC_ConfigChannel+0x29c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d12b      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x280>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_ADC_ConfigChannel+0x298>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d003      	beq.n	80018be <HAL_ADC_ConfigChannel+0x23a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b11      	cmp	r3, #17
 80018bc:	d122      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 80018c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018c8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <HAL_ADC_ConfigChannel+0x2a0>)
 80018d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_ConfigChannel+0x298>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_ADC_ConfigChannel+0x2a4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_ADC_ConfigChannel+0x2a8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9a      	lsrs	r2, r3, #18
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018f6:	e002      	b.n	80018fe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	10000012 	.word	0x10000012
 8001920:	40012000 	.word	0x40012000
 8001924:	40012300 	.word	0x40012300
 8001928:	20000000 	.word	0x20000000
 800192c:	431bde83 	.word	0x431bde83

08001930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001938:	4b78      	ldr	r3, [pc, #480]	; (8001b1c <ADC_Init+0x1ec>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a77      	ldr	r2, [pc, #476]	; (8001b1c <ADC_Init+0x1ec>)
 800193e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001942:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001944:	4b75      	ldr	r3, [pc, #468]	; (8001b1c <ADC_Init+0x1ec>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4973      	ldr	r1, [pc, #460]	; (8001b1c <ADC_Init+0x1ec>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	021a      	lsls	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <ADC_Init+0x1f0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e00f      	b.n	8001a2a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0202 	bic.w	r2, r2, #2
 8001a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	005a      	lsls	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01b      	beq.n	8001a90 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	3b01      	subs	r3, #1
 8001a84:	035a      	lsls	r2, r3, #13
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	e007      	b.n	8001aa0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	051a      	lsls	r2, r3, #20
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae2:	025a      	lsls	r2, r3, #9
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	029a      	lsls	r2, r3, #10
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	0f000001 	.word	0x0f000001

08001b24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d13c      	bne.n	8001bb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12b      	bne.n	8001bb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d127      	bne.n	8001bb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d119      	bne.n	8001bb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0220 	bic.w	r2, r2, #32
 8001b8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7fe ff95 	bl	8000ae0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bb6:	e00e      	b.n	8001bd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff fd53 	bl	8001670 <HAL_ADC_ErrorCallback>
}
 8001bca:	e004      	b.n	8001bd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fd2b 	bl	8001648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f043 0204 	orr.w	r2, r3, #4
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fd28 	bl	8001670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0ed      	b.n	8001e2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff f854 	bl	8000d08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c70:	f7ff fa6c 	bl	800114c <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c76:	e012      	b.n	8001c9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c78:	f7ff fa68 	bl	800114c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b0a      	cmp	r3, #10
 8001c84:	d90b      	bls.n	8001c9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0c5      	b.n	8001e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0e5      	beq.n	8001c78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0202 	bic.w	r2, r2, #2
 8001cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbc:	f7ff fa46 	bl	800114c <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cc2:	e012      	b.n	8001cea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc4:	f7ff fa42 	bl	800114c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b0a      	cmp	r3, #10
 8001cd0:	d90b      	bls.n	8001cea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e09f      	b.n	8001e2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e5      	bne.n	8001cc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e1b      	ldrb	r3, [r3, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d108      	bne.n	8001d12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e007      	b.n	8001d22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7e5b      	ldrb	r3, [r3, #25]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e007      	b.n	8001d4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e9b      	ldrb	r3, [r3, #26]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0220 	bic.w	r2, r2, #32
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7edb      	ldrb	r3, [r3, #27]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0210 	bic.w	r2, r2, #16
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0210 	orr.w	r2, r2, #16
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7f1b      	ldrb	r3, [r3, #28]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0208 	orr.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0208 	bic.w	r2, r2, #8
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7f5b      	ldrb	r3, [r3, #29]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0204 	orr.w	r2, r2, #4
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e007      	b.n	8001df4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0204 	bic.w	r2, r2, #4
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	ea42 0103 	orr.w	r1, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d003      	beq.n	8001e5a <HAL_CAN_ConfigFilter+0x26>
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	f040 80c7 	bne.w	8001fe8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_CAN_ConfigFilter+0x1d0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d001      	beq.n	8001e68 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e66:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4a63      	ldr	r2, [pc, #396]	; (8002008 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e86:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2201      	movs	r2, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d123      	bne.n	8001f16 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ef0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3248      	adds	r2, #72	; 0x48
 8001ef6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f0c:	6979      	ldr	r1, [r7, #20]
 8001f0e:	3348      	adds	r3, #72	; 0x48
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d122      	bne.n	8001f64 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3248      	adds	r2, #72	; 0x48
 8001f44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	3348      	adds	r3, #72	; 0x48
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001faa:	e007      	b.n	8001fbc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fda:	f023 0201 	bic.w	r2, r3, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e006      	b.n	8001ff6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40003400 	.word	0x40003400
 8002008:	40006400 	.word	0x40006400

0800200c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d12e      	bne.n	800207e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff f888 	bl	800114c <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800203e:	e012      	b.n	8002066 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002040:	f7ff f884 	bl	800114c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b0a      	cmp	r3, #10
 800204c:	d90b      	bls.n	8002066 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2205      	movs	r2, #5
 800205e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e012      	b.n	800208c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e006      	b.n	800208c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d003      	beq.n	80020c0 <HAL_CAN_AddTxMessage+0x2c>
 80020b8:	7ffb      	ldrb	r3, [r7, #31]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	f040 80ad 	bne.w	800221a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8095 	beq.w	800220a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80020ea:	2201      	movs	r2, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002106:	68f9      	ldr	r1, [r7, #12]
 8002108:	6809      	ldr	r1, [r1, #0]
 800210a:	431a      	orrs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3318      	adds	r3, #24
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	440b      	add	r3, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e00f      	b.n	8002138 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002122:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002128:	68f9      	ldr	r1, [r7, #12]
 800212a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800212c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3318      	adds	r3, #24
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	440b      	add	r3, r1
 8002136:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3318      	adds	r3, #24
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	440b      	add	r3, r1
 8002148:	3304      	adds	r3, #4
 800214a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	7d1b      	ldrb	r3, [r3, #20]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d111      	bne.n	8002178 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3318      	adds	r3, #24
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	6811      	ldr	r1, [r2, #0]
 8002168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3318      	adds	r3, #24
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3307      	adds	r3, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	061a      	lsls	r2, r3, #24
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3306      	adds	r3, #6
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3305      	adds	r3, #5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	4313      	orrs	r3, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	3204      	adds	r2, #4
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	4610      	mov	r0, r2
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	ea43 0200 	orr.w	r2, r3, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3303      	adds	r3, #3
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	061a      	lsls	r2, r3, #24
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3302      	adds	r3, #2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	4313      	orrs	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	4610      	mov	r0, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6811      	ldr	r1, [r2, #0]
 80021d6:	ea43 0200 	orr.w	r2, r3, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	440b      	add	r3, r1
 80021e0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3318      	adds	r3, #24
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3318      	adds	r3, #24
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	440b      	add	r3, r1
 8002204:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e00e      	b.n	8002228 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e006      	b.n	8002228 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3724      	adds	r7, #36	; 0x24
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d003      	beq.n	8002258 <HAL_CAN_GetRxMessage+0x24>
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b02      	cmp	r3, #2
 8002254:	f040 80f3 	bne.w	800243e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10e      	bne.n	800227c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d116      	bne.n	800229a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0e7      	b.n	800244c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d107      	bne.n	800229a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d8      	b.n	800244c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	331b      	adds	r3, #27
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0204 	and.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10c      	bne.n	80022d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	331b      	adds	r3, #27
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4413      	add	r3, r2
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0d5b      	lsrs	r3, r3, #21
 80022c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e00b      	b.n	80022ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	331b      	adds	r3, #27
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0202 	and.w	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	331b      	adds	r3, #27
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 020f 	and.w	r2, r3, #15
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	331b      	adds	r3, #27
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	3304      	adds	r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b2da      	uxtb	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	331b      	adds	r3, #27
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0a1a      	lsrs	r2, r3, #8
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0c1a      	lsrs	r2, r3, #16
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3302      	adds	r3, #2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e1a      	lsrs	r2, r3, #24
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	3303      	adds	r3, #3
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0a1a      	lsrs	r2, r3, #8
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3305      	adds	r3, #5
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0c1a      	lsrs	r2, r3, #16
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3306      	adds	r3, #6
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e1a      	lsrs	r2, r3, #24
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3307      	adds	r3, #7
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0220 	orr.w	r2, r2, #32
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	e007      	b.n	800243a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e006      	b.n	800244c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002468:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d002      	beq.n	8002476 <HAL_CAN_ActivateNotification+0x1e>
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d109      	bne.n	800248a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6959      	ldr	r1, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e006      	b.n	8002498 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d07c      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d023      	beq.n	800253c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fac0 	bl	8000a8c <HAL_CAN_TxMailbox0CompleteCallback>
 800250c:	e016      	b.n	800253c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	e00c      	b.n	800253c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	e002      	b.n	800253c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f97f 	bl	800283a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d024      	beq.n	8002590 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f959 	bl	8002812 <HAL_CAN_TxMailbox1CompleteCallback>
 8002560:	e016      	b.n	8002590 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e00c      	b.n	8002590 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
 8002588:	e002      	b.n	8002590 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f95f 	bl	800284e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f939 	bl	8002826 <HAL_CAN_TxMailbox2CompleteCallback>
 80025b4:	e016      	b.n	80025e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e00c      	b.n	80025e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	e002      	b.n	80025e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f93f 	bl	8002862 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2208      	movs	r2, #8
 8002622:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f926 	bl	8002876 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fa30 	bl	8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002662:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2208      	movs	r2, #8
 8002686:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f908 	bl	800289e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8ef 	bl	800288a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8f2 	bl	80028b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2208      	movs	r2, #8
 80026e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8eb 	bl	80028c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d07b      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d072      	beq.n	80027ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	2b00      	cmp	r3, #0
 8002760:	d043      	beq.n	80027ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03e      	beq.n	80027ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002772:	2b60      	cmp	r3, #96	; 0x60
 8002774:	d02b      	beq.n	80027ce <HAL_CAN_IRQHandler+0x32a>
 8002776:	2b60      	cmp	r3, #96	; 0x60
 8002778:	d82e      	bhi.n	80027d8 <HAL_CAN_IRQHandler+0x334>
 800277a:	2b50      	cmp	r3, #80	; 0x50
 800277c:	d022      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x320>
 800277e:	2b50      	cmp	r3, #80	; 0x50
 8002780:	d82a      	bhi.n	80027d8 <HAL_CAN_IRQHandler+0x334>
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d019      	beq.n	80027ba <HAL_CAN_IRQHandler+0x316>
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d826      	bhi.n	80027d8 <HAL_CAN_IRQHandler+0x334>
 800278a:	2b30      	cmp	r3, #48	; 0x30
 800278c:	d010      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x30c>
 800278e:	2b30      	cmp	r3, #48	; 0x30
 8002790:	d822      	bhi.n	80027d8 <HAL_CAN_IRQHandler+0x334>
 8002792:	2b10      	cmp	r3, #16
 8002794:	d002      	beq.n	800279c <HAL_CAN_IRQHandler+0x2f8>
 8002796:	2b20      	cmp	r3, #32
 8002798:	d005      	beq.n	80027a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800279a:	e01d      	b.n	80027d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a4:	e019      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ae:	e014      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b8:	e00f      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c2:	e00a      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027cc:	e005      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d6:	e000      	b.n	80027da <HAL_CAN_IRQHandler+0x336>
            break;
 80027d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2204      	movs	r2, #4
 80027f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f868 	bl	80028da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <__NVIC_SetPriorityGrouping+0x40>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	4313      	orrs	r3, r2
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x40>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	05fa0000 	.word	0x05fa0000

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db0b      	blt.n	800297e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4907      	ldr	r1, [pc, #28]	; (800298c <__NVIC_EnableIRQ+0x38>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2001      	movs	r0, #1
 8002976:	fa00 f202 	lsl.w	r2, r0, r2
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf28      	it	cs
 8002a02:	2304      	movcs	r3, #4
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b03      	subs	r3, #3
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43d9      	mvns	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	4313      	orrs	r3, r2
         );
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff4c 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a72:	f7ff ff61 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002a76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f7ff ffb1 	bl	80029e4 <NVIC_EncodePriority>
 8002a82:	4602      	mov	r2, r0
 8002a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff80 	bl	8002990 <__NVIC_SetPriority>
}
 8002a90:	bf00      	nop
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff54 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7fe fb44 	bl	800114c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e099      	b.n	8002c04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af0:	e00f      	b.n	8002b12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af2:	f7fe fb2b 	bl	800114c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d908      	bls.n	8002b12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e078      	b.n	8002c04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e8      	bne.n	8002af2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_DMA_Init+0x158>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	4313      	orrs	r3, r2
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d117      	bne.n	8002bd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fb09 	bl	80031d0 <DMA_CheckFifoParam>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e016      	b.n	8002c04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fac0 	bl	8003164 <DMA_CalcBaseAndBitshift>
 8002be4:	4603      	mov	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	223f      	movs	r2, #63	; 0x3f
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	e010803f 	.word	0xe010803f

08002c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Start_IT+0x26>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e048      	b.n	8002cc8 <HAL_DMA_Start_IT+0xb8>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d137      	bne.n	8002cba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa52 	bl	8003108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	223f      	movs	r2, #63	; 0x3f
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0216 	orr.w	r2, r2, #22
 8002c7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0208 	orr.w	r2, r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e005      	b.n	8002cc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cde:	f7fe fa35 	bl	800114c <HAL_GetTick>
 8002ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e052      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0216 	bic.w	r2, r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_DMA_Abort+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0208 	bic.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d52:	e013      	b.n	8002d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d54:	f7fe f9fa 	bl	800114c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d90c      	bls.n	8002d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e015      	b.n	8002da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e4      	bne.n	8002d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	223f      	movs	r2, #63	; 0x3f
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00c      	b.n	8002de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e00:	4b8e      	ldr	r3, [pc, #568]	; (800303c <HAL_DMA_IRQHandler+0x248>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a8e      	ldr	r2, [pc, #568]	; (8003040 <HAL_DMA_IRQHandler+0x24c>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0a9b      	lsrs	r3, r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2208      	movs	r2, #8
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01a      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2201      	movs	r2, #1
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d012      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2204      	movs	r2, #4
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d043      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d03c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	2210      	movs	r2, #16
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d018      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d108      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d024      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
 8002f22:	e01f      	b.n	8002f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
 8002f34:	e016      	b.n	8002f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0208 	bic.w	r2, r2, #8
 8002f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2220      	movs	r2, #32
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 808f 	beq.w	8003094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8087 	beq.w	8003094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d136      	bne.n	800300c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0216 	bic.w	r2, r2, #22
 8002fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <HAL_DMA_IRQHandler+0x1da>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0208 	bic.w	r2, r2, #8
 8002fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	223f      	movs	r2, #63	; 0x3f
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d07e      	beq.n	8003100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
        }
        return;
 800300a:	e079      	b.n	8003100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	2b00      	cmp	r3, #0
 800302e:	d031      	beq.n	8003094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e02c      	b.n	8003094 <HAL_DMA_IRQHandler+0x2a0>
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000
 8003040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e01e      	b.n	8003094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10f      	bne.n	8003084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0210 	bic.w	r2, r2, #16
 8003072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d032      	beq.n	8003102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2205      	movs	r2, #5
 80030ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d307      	bcc.n	80030dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f2      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x2cc>
 80030da:	e000      	b.n	80030de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e000      	b.n	8003102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003100:	bf00      	nop
    }
  }
}
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d108      	bne.n	8003148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003146:	e007      	b.n	8003158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	3b10      	subs	r3, #16
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <DMA_CalcBaseAndBitshift+0x60>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d908      	bls.n	80031a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <DMA_CalcBaseAndBitshift+0x68>)
 800319a:	4013      	ands	r3, r2
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	659a      	str	r2, [r3, #88]	; 0x58
 80031a2:	e006      	b.n	80031b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <DMA_CalcBaseAndBitshift+0x68>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	aaaaaaab 	.word	0xaaaaaaab
 80031c8:	0800ee0c 	.word	0x0800ee0c
 80031cc:	fffffc00 	.word	0xfffffc00

080031d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11f      	bne.n	800322a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d856      	bhi.n	800329e <DMA_CheckFifoParam+0xce>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <DMA_CheckFifoParam+0x28>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003209 	.word	0x08003209
 80031fc:	0800321b 	.word	0x0800321b
 8003200:	08003209 	.word	0x08003209
 8003204:	0800329f 	.word	0x0800329f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d046      	beq.n	80032a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003218:	e043      	b.n	80032a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003222:	d140      	bne.n	80032a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e03d      	b.n	80032a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003232:	d121      	bne.n	8003278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d837      	bhi.n	80032aa <DMA_CheckFifoParam+0xda>
 800323a:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <DMA_CheckFifoParam+0x70>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003251 	.word	0x08003251
 8003244:	08003257 	.word	0x08003257
 8003248:	08003251 	.word	0x08003251
 800324c:	08003269 	.word	0x08003269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e030      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d025      	beq.n	80032ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003266:	e022      	b.n	80032ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003270:	d11f      	bne.n	80032b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003276:	e01c      	b.n	80032b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d903      	bls.n	8003286 <DMA_CheckFifoParam+0xb6>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d003      	beq.n	800328c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003284:	e018      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      break;
 800328a:	e015      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e00b      	b.n	80032b6 <DMA_CheckFifoParam+0xe6>
      break;
 800329e:	bf00      	nop
 80032a0:	e00a      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
 80032a4:	e008      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e006      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
    }
  } 
  
  return status; 
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e175      	b.n	80035d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 8164 	bne.w	80035ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d005      	beq.n	800331e <HAL_GPIO_Init+0x56>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d130      	bne.n	8003380 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80be 	beq.w	80035ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800346a:	4a61      	ldr	r2, [pc, #388]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_GPIO_Init+0x32c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d037      	beq.n	8003506 <HAL_GPIO_Init+0x23e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_GPIO_Init+0x330>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_GPIO_Init+0x23a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_GPIO_Init+0x334>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <HAL_GPIO_Init+0x236>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_GPIO_Init+0x338>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x232>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a54      	ldr	r2, [pc, #336]	; (8003604 <HAL_GPIO_Init+0x33c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x22e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a53      	ldr	r2, [pc, #332]	; (8003608 <HAL_GPIO_Init+0x340>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x22a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_GPIO_Init+0x344>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_GPIO_Init+0x348>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_GPIO_Init+0x34c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	; (8003618 <HAL_GPIO_Init+0x350>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x21a>
 80034de:	2309      	movs	r3, #9
 80034e0:	e012      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e010      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ea:	2307      	movs	r3, #7
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003518:	4935      	ldr	r1, [pc, #212]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_GPIO_Init+0x354>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_GPIO_Init+0x354>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_GPIO_Init+0x354>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <HAL_GPIO_Init+0x354>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_GPIO_Init+0x354>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae86 	bls.w	80032e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020c00 	.word	0x40020c00
 8003604:	40021000 	.word	0x40021000
 8003608:	40021400 	.word	0x40021400
 800360c:	40021800 	.word	0x40021800
 8003610:	40021c00 	.word	0x40021c00
 8003614:	40022000 	.word	0x40022000
 8003618:	40022400 	.word	0x40022400
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43d9      	mvns	r1, r3
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	400b      	ands	r3, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b08f      	sub	sp, #60	; 0x3c
 8003658:	af0a      	add	r7, sp, #40	; 0x28
 800365a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e116      	b.n	8003894 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f00a fafb 	bl	800dc7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 ffd4 	bl	8007652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	687e      	ldr	r6, [r7, #4]
 80036b2:	466d      	mov	r5, sp
 80036b4:	f106 0410 	add.w	r4, r6, #16
 80036b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80036c8:	1d33      	adds	r3, r6, #4
 80036ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036cc:	6838      	ldr	r0, [r7, #0]
 80036ce:	f003 feb5 	bl	800743c <USB_CoreInit>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0d7      	b.n	8003894 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 ffc2 	bl	8007674 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e04a      	b.n	800378c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	333d      	adds	r3, #61	; 0x3d
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	333c      	adds	r3, #60	; 0x3c
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	b298      	uxth	r0, r3
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3344      	adds	r3, #68	; 0x44
 8003732:	4602      	mov	r2, r0
 8003734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3340      	adds	r3, #64	; 0x40
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3348      	adds	r3, #72	; 0x48
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	334c      	adds	r3, #76	; 0x4c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3354      	adds	r3, #84	; 0x54
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3301      	adds	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3af      	bcc.n	80036f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e044      	b.n	8003826 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	3301      	adds	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3b5      	bcc.n	800379c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	687e      	ldr	r6, [r7, #4]
 8003838:	466d      	mov	r5, sp
 800383a:	f106 0410 	add.w	r4, r6, #16
 800383e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384a:	e885 0003 	stmia.w	r5, {r0, r1}
 800384e:	1d33      	adds	r3, r6, #4
 8003850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003852:	6838      	ldr	r0, [r7, #0]
 8003854:	f003 ff5a 	bl	800770c <USB_DevInit>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e014      	b.n	8003894 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f001 f97a 	bl	8004b7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f005 f8a8 	bl	80089e2 <USB_DevDisconnect>

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800389c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_PCD_Start+0x16>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e012      	b.n	80038d8 <HAL_PCD_Start+0x3c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 feb6 	bl	8007630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f005 f869 	bl	80089a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b08d      	sub	sp, #52	; 0x34
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f005 f927 	bl	8008b4a <USB_GetMode>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 84b7 	bne.w	8004272 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f005 f88b 	bl	8008a24 <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 84ad 	beq.w	8004270 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f005 f878 	bl	8008a24 <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d107      	bne.n	800394e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f002 0202 	and.w	r2, r2, #2
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f005 f866 	bl	8008a24 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d161      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0210 	bic.w	r2, r2, #16
 8003970:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0c5b      	lsrs	r3, r3, #17
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2b02      	cmp	r3, #2
 800399c:	d124      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d035      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	6a38      	ldr	r0, [r7, #32]
 80039be:	f004 fe9d 	bl	80086fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ce:	441a      	add	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e0:	441a      	add	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
 80039e6:	e016      	b.n	8003a16 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	0c5b      	lsrs	r3, r3, #17
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d110      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039fa:	2208      	movs	r2, #8
 80039fc:	4619      	mov	r1, r3
 80039fe:	6a38      	ldr	r0, [r7, #32]
 8003a00:	f004 fe7c 	bl	80086fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a10:	441a      	add	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0210 	orr.w	r2, r2, #16
 8003a24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fffa 	bl	8008a24 <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a3a:	f040 80a7 	bne.w	8003b8c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 ffff 	bl	8008a4a <USB_ReadDevAllOutEpInterrupt>
 8003a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a4e:	e099      	b.n	8003b84 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 808e 	beq.w	8003b78 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f005 f823 	bl	8008ab2 <USB_ReadDevOutEPInterrupt>
 8003a6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 feef 	bl	8004870 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2308      	movs	r3, #8
 8003aac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 ffc5 	bl	8004a40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2310      	movs	r3, #16
 8003ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d030      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d109      	bne.n	8003afc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003afa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	78db      	ldrb	r3, [r3, #3]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f00a f9dc 	bl	800dee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	2320      	movs	r3, #32
 8003b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b76:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f47f af62 	bne.w	8003a50 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 ff47 	bl	8008a24 <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ba0:	f040 80db 	bne.w	8003d5a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f004 ff68 	bl	8008a7e <USB_ReadDevAllInEpInterrupt>
 8003bae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003bb4:	e0cd      	b.n	8003d52 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80c2 	beq.w	8003d46 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 ff8e 	bl	8008aee <USB_ReadDevInEPInterrupt>
 8003bd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d057      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	2201      	movs	r2, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69f9      	ldr	r1, [r7, #28]
 8003bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bfe:	4013      	ands	r3, r2
 8003c00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2301      	movs	r3, #1
 8003c12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d132      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	334c      	adds	r3, #76	; 0x4c
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4403      	add	r3, r0
 8003c3c:	3348      	adds	r3, #72	; 0x48
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4419      	add	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4403      	add	r3, r0
 8003c50:	334c      	adds	r3, #76	; 0x4c
 8003c52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x3a2>
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3354      	adds	r3, #84	; 0x54
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	f004 ff97 	bl	8008bb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f00a f8a6 	bl	800ddda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d023      	beq.n	8003d34 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cee:	6a38      	ldr	r0, [r7, #32]
 8003cf0:	f003 fe6a 	bl	80079c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3338      	adds	r3, #56	; 0x38
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	78db      	ldrb	r3, [r3, #3]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d108      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f00a f8f3 	bl	800df08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2302      	movs	r3, #2
 8003d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fd08 	bl	8004756 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	3301      	adds	r3, #1
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f47f af2e 	bne.w	8003bb6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f004 fe60 	bl	8008a24 <USB_ReadInterrupts>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6e:	d122      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d108      	bne.n	8003da0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f00a fa6d 	bl	800e278 <HAL_PCDEx_LPM_Callback>
 8003d9e:	e002      	b.n	8003da6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f00a f891 	bl	800dec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fe32 	bl	8008a24 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d112      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d102      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f00a f84d 	bl	800de7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f004 fe14 	bl	8008a24 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e06:	d121      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d111      	bne.n	8003e46 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f00a fa1a 	bl	800e278 <HAL_PCDEx_LPM_Callback>
 8003e44:	e002      	b.n	8003e4c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f00a f818 	bl	800de7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fde7 	bl	8008a24 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	f040 80b7 	bne.w	8003fd2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fda2 	bl	80079c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e88:	e046      	b.n	8003f18 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	461a      	mov	r2, r3
 8003e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ebc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ed0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ef0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	3301      	adds	r3, #1
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3b3      	bcc.n	8003e8a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4e:	f043 030b 	orr.w	r3, r3, #11
 8003f52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f043 030b 	orr.w	r3, r3, #11
 8003f68:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6a:	e015      	b.n	8003f98 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f242 032b 	movw	r3, #8235	; 0x202b
 8003f80:	4313      	orrs	r3, r2
 8003f82:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f92:	f043 030b 	orr.w	r3, r3, #11
 8003f96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003faa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f004 fdf7 	bl	8008bb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 fd24 	bl	8008a24 <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe6:	d124      	bne.n	8004032 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 fdbb 	bl	8008b68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fd63 	bl	8007ac2 <USB_GetDevSpeed>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681c      	ldr	r4, [r3, #0]
 8004008:	f001 fa8c 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800400c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	4620      	mov	r0, r4
 8004018:	f003 fa68 	bl	80074ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f009 ff04 	bl	800de2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004030:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f004 fcf4 	bl	8008a24 <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b08      	cmp	r3, #8
 8004044:	d10a      	bne.n	800405c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f009 fee1 	bl	800de0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f002 0208 	and.w	r2, r2, #8
 800405a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f004 fcdf 	bl	8008a24 <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b80      	cmp	r3, #128	; 0x80
 800406e:	d122      	bne.n	80040b6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800407c:	2301      	movs	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	e014      	b.n	80040ac <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	b2db      	uxtb	r3, r3
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb27 	bl	80046f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	3301      	adds	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3e5      	bcc.n	8004082 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 fcb2 	bl	8008a24 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ca:	d13b      	bne.n	8004144 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	e02b      	b.n	800412a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3340      	adds	r3, #64	; 0x40
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d115      	bne.n	8004124 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da12      	bge.n	8004124 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	333f      	adds	r3, #63	; 0x3f
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800411a:	b2db      	uxtb	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fae8 	bl	80046f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	3301      	adds	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	429a      	cmp	r2, r3
 8004132:	d3ce      	bcc.n	80040d2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 fc6b 	bl	8008a24 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004158:	d155      	bne.n	8004206 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800415a:	2301      	movs	r3, #1
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	e045      	b.n	80041ec <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d12e      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004188:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	da2b      	bge.n	80041e6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800419a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800419e:	429a      	cmp	r2, r3
 80041a0:	d121      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e2:	6053      	str	r3, [r2, #4]
            break;
 80041e4:	e007      	b.n	80041f6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	3301      	adds	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3b4      	bcc.n	8004160 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fc0a 	bl	8008a24 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d10a      	bne.n	8004232 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f009 fe85 	bl	800df2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f004 fbf4 	bl	8008a24 <USB_ReadInterrupts>
 800423c:	4603      	mov	r3, r0
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d115      	bne.n	8004272 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f009 fe75 	bl	800df48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e000      	b.n	8004272 <HAL_PCD_IRQHandler+0x992>
      return;
 8004270:	bf00      	nop
    }
  }
}
 8004272:	3734      	adds	r7, #52	; 0x34
 8004274:	46bd      	mov	sp, r7
 8004276:	bd90      	pop	{r4, r7, pc}

08004278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_PCD_SetAddress+0x1a>
 800428e:	2302      	movs	r3, #2
 8004290:	e013      	b.n	80042ba <HAL_PCD_SetAddress+0x42>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f004 fb52 	bl	8008954 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	4608      	mov	r0, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	461a      	mov	r2, r3
 80042d0:	4603      	mov	r3, r0
 80042d2:	70fb      	strb	r3, [r7, #3]
 80042d4:	460b      	mov	r3, r1
 80042d6:	803b      	strh	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00f      	b.n	8004328 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004334:	883a      	ldrh	r2, [r7, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	78ba      	ldrb	r2, [r7, #2]
 800433e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004352:	78bb      	ldrb	r3, [r7, #2]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d102      	bne.n	800435e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_PCD_EP_Open+0xaa>
 8004368:	2302      	movs	r3, #2
 800436a:	e00e      	b.n	800438a <HAL_PCD_EP_Open+0xc8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	4618      	mov	r0, r3
 800437c:	f003 fbc6 	bl	8007b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004388:	7afb      	ldrb	r3, [r7, #11]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800439e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da0f      	bge.n	80043c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	3338      	adds	r3, #56	; 0x38
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	705a      	strb	r2, [r3, #1]
 80043c4:	e00f      	b.n	80043e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_PCD_EP_Close+0x6e>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e00e      	b.n	800441e <HAL_PCD_EP_Close+0x8c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fc04 	bl	8007c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	460b      	mov	r3, r1
 8004434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	3304      	adds	r3, #4
 800444e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2200      	movs	r2, #0
 8004460:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	b2da      	uxtb	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	f003 feeb 	bl	8008274 <USB_EP0StartXfer>
 800449e:	e008      	b.n	80044b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	f003 fc91 	bl	8007dd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	f003 020f 	and.w	r2, r3, #15
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3338      	adds	r3, #56	; 0x38
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2201      	movs	r2, #1
 800452a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	b2da      	uxtb	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d102      	bne.n	8004546 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	6979      	ldr	r1, [r7, #20]
 800455e:	f003 fe89 	bl	8008274 <USB_EP0StartXfer>
 8004562:	e008      	b.n	8004576 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	f003 fc2f 	bl	8007dd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 020f 	and.w	r2, r3, #15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	d901      	bls.n	800459e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e050      	b.n	8004640 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800459e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da0f      	bge.n	80045c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	3338      	adds	r3, #56	; 0x38
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	3304      	adds	r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	705a      	strb	r2, [r3, #1]
 80045c4:	e00d      	b.n	80045e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	3304      	adds	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_PCD_EP_SetStall+0x82>
 80045fe:	2302      	movs	r3, #2
 8004600:	e01e      	b.n	8004640 <HAL_PCD_EP_SetStall+0xc0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	4618      	mov	r0, r3
 8004612:	f004 f8cb 	bl	80087ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	b2d9      	uxtb	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004630:	461a      	mov	r2, r3
 8004632:	f004 fabd 	bl	8008bb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d901      	bls.n	8004666 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e042      	b.n	80046ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466a:	2b00      	cmp	r3, #0
 800466c:	da0f      	bge.n	800468e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	3338      	adds	r3, #56	; 0x38
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	705a      	strb	r2, [r3, #1]
 800468c:	e00f      	b.n	80046ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	3304      	adds	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_PCD_EP_ClrStall+0x86>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e00e      	b.n	80046ec <HAL_PCD_EP_ClrStall+0xa4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	4618      	mov	r0, r3
 80046de:	f004 f8d3 	bl	8008888 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	da0c      	bge.n	8004722 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 020f 	and.w	r2, r3, #15
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	3338      	adds	r3, #56	; 0x38
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	3304      	adds	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e00c      	b.n	800473c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	4413      	add	r3, r2
 8004738:	3304      	adds	r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	4618      	mov	r0, r3
 8004744:	f003 fef2 	bl	800852c <USB_EPStopXfer>
 8004748:	4603      	mov	r3, r0
 800474a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800474c:	7afb      	ldrb	r3, [r7, #11]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b08a      	sub	sp, #40	; 0x28
 800475a:	af02      	add	r7, sp, #8
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	3338      	adds	r3, #56	; 0x38
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	429a      	cmp	r2, r3
 8004788:	d901      	bls.n	800478e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e06c      	b.n	8004868 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d902      	bls.n	80047aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3303      	adds	r3, #3
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b2:	e02b      	b.n	800480c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d902      	bls.n	80047d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3303      	adds	r3, #3
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6919      	ldr	r1, [r3, #16]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4603      	mov	r3, r0
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f003 ff46 	bl	8008680 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	441a      	add	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	429a      	cmp	r2, r3
 8004820:	d809      	bhi.n	8004836 <PCD_WriteEmptyTxFifo+0xe0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800482a:	429a      	cmp	r2, r3
 800482c:	d203      	bcs.n	8004836 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1be      	bne.n	80047b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	429a      	cmp	r2, r3
 8004840:	d811      	bhi.n	8004866 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2201      	movs	r2, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	43db      	mvns	r3, r3
 800485c:	6939      	ldr	r1, [r7, #16]
 800485e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004862:	4013      	ands	r3, r2
 8004864:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	333c      	adds	r3, #60	; 0x3c
 8004888:	3304      	adds	r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d17b      	bne.n	800499e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4a61      	ldr	r2, [pc, #388]	; (8004a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	f240 80b9 	bls.w	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80b3 	beq.w	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	461a      	mov	r2, r3
 80048d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d8:	6093      	str	r3, [r2, #8]
 80048da:	e0a7      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f2:	461a      	mov	r2, r3
 80048f4:	2320      	movs	r3, #32
 80048f6:	6093      	str	r3, [r2, #8]
 80048f8:	e098      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 8093 	bne.w	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	4a4b      	ldr	r2, [pc, #300]	; (8004a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d90f      	bls.n	800492e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	461a      	mov	r2, r3
 8004926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492a:	6093      	str	r3, [r2, #8]
 800492c:	e07e      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	0159      	lsls	r1, r3, #5
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	440b      	add	r3, r1
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d114      	bne.n	8004990 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004978:	461a      	mov	r2, r3
 800497a:	2101      	movs	r1, #1
 800497c:	f004 f918 	bl	8008bb0 <USB_EP0_OutStart>
 8004980:	e006      	b.n	8004990 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f009 fa04 	bl	800dda4 <HAL_PCD_DataOutStageCallback>
 800499c:	e046      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d124      	bne.n	80049f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	461a      	mov	r2, r3
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	e032      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	2320      	movs	r3, #32
 80049e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f009 f9db 	bl	800dda4 <HAL_PCD_DataOutStageCallback>
 80049ee:	e01d      	b.n	8004a2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d114      	bne.n	8004a20 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f004 f8c8 	bl	8008bb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f009 f9bc 	bl	800dda4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	4f54300a 	.word	0x4f54300a
 8004a3c:	4f54310a 	.word	0x4f54310a

08004a40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	333c      	adds	r3, #60	; 0x3c
 8004a58:	3304      	adds	r3, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d90e      	bls.n	8004a94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f009 f973 	bl	800dd80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d90c      	bls.n	8004abc <PCD_EP_OutSetupPacket_int+0x7c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d108      	bne.n	8004abc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	f004 f87a 	bl	8008bb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	4f54300a 	.word	0x4f54300a

08004acc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004aea:	883b      	ldrh	r3, [r7, #0]
 8004aec:	0419      	lsls	r1, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
 8004af8:	e028      	b.n	8004b4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4413      	add	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e00d      	b.n	8004b2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	3340      	adds	r3, #64	; 0x40
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	3301      	adds	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3ec      	bcc.n	8004b0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b34:	883b      	ldrh	r3, [r7, #0]
 8004b36:	0418      	lsls	r0, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4302      	orrs	r2, r0
 8004b44:	3340      	adds	r3, #64	; 0x40
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	10000003 	.word	0x10000003

08004bc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf2:	f7fc faab 	bl	800114c <HAL_GetTick>
 8004bf6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bf8:	e009      	b.n	8004c0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bfa:	f7fc faa7 	bl	800114c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c08:	d901      	bls.n	8004c0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e022      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c0e:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c28:	f7fc fa90 	bl	800114c <HAL_GetTick>
 8004c2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c2e:	e009      	b.n	8004c44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c30:	f7fc fa8c 	bl	800114c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3e:	d901      	bls.n	8004c44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e007      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c50:	d1ee      	bne.n	8004c30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40007000 	.word	0x40007000

08004c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e29b      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8087 	beq.w	8004d96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c88:	4b96      	ldr	r3, [pc, #600]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d00c      	beq.n	8004cae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c94:	4b93      	ldr	r3, [pc, #588]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d112      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x62>
 8004ca0:	4b90      	ldr	r3, [pc, #576]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cac:	d10b      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cae:	4b8d      	ldr	r3, [pc, #564]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d06c      	beq.n	8004d94 <HAL_RCC_OscConfig+0x130>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d168      	bne.n	8004d94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e275      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x7a>
 8004cd0:	4b84      	ldr	r3, [pc, #528]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a83      	ldr	r2, [pc, #524]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e02e      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x9c>
 8004ce6:	4b7f      	ldr	r3, [pc, #508]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a7e      	ldr	r2, [pc, #504]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b7c      	ldr	r3, [pc, #496]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7b      	ldr	r2, [pc, #492]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0xc0>
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a75      	ldr	r2, [pc, #468]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a72      	ldr	r2, [pc, #456]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xd8>
 8004d24:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a6e      	ldr	r2, [pc, #440]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b6c      	ldr	r3, [pc, #432]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6b      	ldr	r2, [pc, #428]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fa02 	bl	800114c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fc f9fe 	bl	800114c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e229      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xe8>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fc f9ee 	bl	800114c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fc f9ea 	bl	800114c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e215      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x110>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d069      	beq.n	8004e76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004da2:	4b50      	ldr	r3, [pc, #320]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x190>
 8004dba:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x17a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1e9      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	493d      	ldr	r1, [pc, #244]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e040      	b.n	8004e76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d023      	beq.n	8004e44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a38      	ldr	r2, [pc, #224]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fc f9a0 	bl	800114c <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fc f99c 	bl	800114c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e1c7      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4929      	ldr	r1, [pc, #164]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
 8004e42:	e018      	b.n	8004e76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fc f97c 	bl	800114c <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e58:	f7fc f978 	bl	800114c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1a3      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d038      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fc f959 	bl	800114c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9e:	f7fc f955 	bl	800114c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e180      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x23a>
 8004ebc:	e01a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fc f93f 	bl	800114c <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fc f93b 	bl	800114c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d903      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e166      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
 8004ee4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee8:	4b92      	ldr	r3, [pc, #584]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ee      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a4 	beq.w	800504a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f02:	4b8c      	ldr	r3, [pc, #560]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10d      	bne.n	8004f2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	4b89      	ldr	r3, [pc, #548]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	4a88      	ldr	r2, [pc, #544]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1a:	4b86      	ldr	r3, [pc, #536]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2a:	4b83      	ldr	r3, [pc, #524]	; (8005138 <HAL_RCC_OscConfig+0x4d4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d118      	bne.n	8004f68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f36:	4b80      	ldr	r3, [pc, #512]	; (8005138 <HAL_RCC_OscConfig+0x4d4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7f      	ldr	r2, [pc, #508]	; (8005138 <HAL_RCC_OscConfig+0x4d4>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f42:	f7fc f903 	bl	800114c <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4a:	f7fc f8ff 	bl	800114c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b64      	cmp	r3, #100	; 0x64
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e12a      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5c:	4b76      	ldr	r3, [pc, #472]	; (8005138 <HAL_RCC_OscConfig+0x4d4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCC_OscConfig+0x31a>
 8004f70:	4b70      	ldr	r3, [pc, #448]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a6f      	ldr	r2, [pc, #444]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	e02d      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x33c>
 8004f86:	4b6b      	ldr	r3, [pc, #428]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a6a      	ldr	r2, [pc, #424]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
 8004f92:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	4a67      	ldr	r2, [pc, #412]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9e:	e01c      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x35e>
 8004fa8:	4b62      	ldr	r3, [pc, #392]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a61      	ldr	r2, [pc, #388]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	4a5e      	ldr	r2, [pc, #376]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc0:	e00b      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fce:	4b59      	ldr	r3, [pc, #356]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	4a58      	ldr	r2, [pc, #352]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d015      	beq.n	800500e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe2:	f7fc f8b3 	bl	800114c <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fc f8af 	bl	800114c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0d8      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ee      	beq.n	8004fea <HAL_RCC_OscConfig+0x386>
 800500c:	e014      	b.n	8005038 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fc f89d 	bl	800114c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fc f899 	bl	800114c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0c2      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	4b41      	ldr	r3, [pc, #260]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ee      	bne.n	8005016 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80ae 	beq.w	80051b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005054:	4b37      	ldr	r3, [pc, #220]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d06d      	beq.n	800513c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d14b      	bne.n	8005100 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a31      	ldr	r2, [pc, #196]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fc f86a 	bl	800114c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fc f866 	bl	800114c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e091      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	4b29      	ldr	r3, [pc, #164]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	491b      	ldr	r1, [pc, #108]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 80050d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fc f838 	bl	800114c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fc f834 	bl	800114c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e05f      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x47c>
 80050fe:	e057      	b.n	80051b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fc f81e 	bl	800114c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005114:	f7fc f81a 	bl	800114c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e045      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005126:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCC_OscConfig+0x4d0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x4b0>
 8005132:	e03d      	b.n	80051b0 <HAL_RCC_OscConfig+0x54c>
 8005134:	40023800 	.word	0x40023800
 8005138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800513c:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <HAL_RCC_OscConfig+0x558>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d030      	beq.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d129      	bne.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d122      	bne.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005172:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005174:	4293      	cmp	r3, r2
 8005176:	d119      	bne.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	3b01      	subs	r3, #1
 8005186:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d10f      	bne.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d107      	bne.n	80051ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800

080051c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0d0      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d8:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d910      	bls.n	8005208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b67      	ldr	r3, [pc, #412]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 020f 	bic.w	r2, r3, #15
 80051ee:	4965      	ldr	r1, [pc, #404]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b63      	ldr	r3, [pc, #396]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0b8      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005220:	4b59      	ldr	r3, [pc, #356]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a58      	ldr	r2, [pc, #352]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800522a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4a52      	ldr	r2, [pc, #328]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800523e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005244:	4b50      	ldr	r3, [pc, #320]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	494d      	ldr	r1, [pc, #308]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d040      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d115      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e07f      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d107      	bne.n	8005292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005282:	4b41      	ldr	r3, [pc, #260]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e073      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005292:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e06b      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052a2:	4b39      	ldr	r3, [pc, #228]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f023 0203 	bic.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4936      	ldr	r1, [pc, #216]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b4:	f7fb ff4a 	bl	800114c <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ba:	e00a      	b.n	80052d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052bc:	f7fb ff46 	bl	800114c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e053      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d2:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 020c 	and.w	r2, r3, #12
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d1eb      	bne.n	80052bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d210      	bcs.n	8005314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 020f 	bic.w	r2, r3, #15
 80052fa:	4922      	ldr	r1, [pc, #136]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e032      	b.n	800537a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4916      	ldr	r1, [pc, #88]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	490e      	ldr	r1, [pc, #56]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005352:	f000 f821 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490a      	ldr	r1, [pc, #40]	; (800538c <HAL_RCC_ClockConfig+0x1cc>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	fa22 f303 	lsr.w	r3, r2, r3
 800536a:	4a09      	ldr	r2, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1d0>)
 800536c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCC_ClockConfig+0x1d4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fb fd82 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023c00 	.word	0x40023c00
 8005388:	40023800 	.word	0x40023800
 800538c:	0800edf4 	.word	0x0800edf4
 8005390:	20000000 	.word	0x20000000
 8005394:	20000004 	.word	0x20000004

08005398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b090      	sub	sp, #64	; 0x40
 800539e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a8:	2300      	movs	r3, #0
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b0:	4b59      	ldr	r3, [pc, #356]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d00d      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x40>
 80053bc:	2b08      	cmp	r3, #8
 80053be:	f200 80a1 	bhi.w	8005504 <HAL_RCC_GetSysClockFreq+0x16c>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x34>
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d003      	beq.n	80053d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ca:	e09b      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053cc:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_RCC_GetSysClockFreq+0x184>)
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053d0:	e09b      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d2:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_GetSysClockFreq+0x188>)
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053d6:	e098      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d8:	4b4f      	ldr	r3, [pc, #316]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053e2:	4b4d      	ldr	r3, [pc, #308]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d028      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ee:	4b4a      	ldr	r3, [pc, #296]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	2200      	movs	r2, #0
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	627a      	str	r2, [r7, #36]	; 0x24
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005400:	2100      	movs	r1, #0
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCC_GetSysClockFreq+0x188>)
 8005404:	fb03 f201 	mul.w	r2, r3, r1
 8005408:	2300      	movs	r3, #0
 800540a:	fb00 f303 	mul.w	r3, r0, r3
 800540e:	4413      	add	r3, r2
 8005410:	4a43      	ldr	r2, [pc, #268]	; (8005520 <HAL_RCC_GetSysClockFreq+0x188>)
 8005412:	fba0 1202 	umull	r1, r2, r0, r2
 8005416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005418:	460a      	mov	r2, r1
 800541a:	62ba      	str	r2, [r7, #40]	; 0x28
 800541c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541e:	4413      	add	r3, r2
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	2200      	movs	r2, #0
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	61fa      	str	r2, [r7, #28]
 800542a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005432:	f7fa ff5d 	bl	80002f0 <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4613      	mov	r3, r2
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543e:	e053      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	099b      	lsrs	r3, r3, #6
 8005446:	2200      	movs	r2, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	617a      	str	r2, [r7, #20]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005452:	f04f 0b00 	mov.w	fp, #0
 8005456:	4652      	mov	r2, sl
 8005458:	465b      	mov	r3, fp
 800545a:	f04f 0000 	mov.w	r0, #0
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	0159      	lsls	r1, r3, #5
 8005464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005468:	0150      	lsls	r0, r2, #5
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	ebb2 080a 	subs.w	r8, r2, sl
 8005472:	eb63 090b 	sbc.w	r9, r3, fp
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800548a:	ebb2 0408 	subs.w	r4, r2, r8
 800548e:	eb63 0509 	sbc.w	r5, r3, r9
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	00eb      	lsls	r3, r5, #3
 800549c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a0:	00e2      	lsls	r2, r4, #3
 80054a2:	4614      	mov	r4, r2
 80054a4:	461d      	mov	r5, r3
 80054a6:	eb14 030a 	adds.w	r3, r4, sl
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	eb45 030b 	adc.w	r3, r5, fp
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054be:	4629      	mov	r1, r5
 80054c0:	028b      	lsls	r3, r1, #10
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c8:	4621      	mov	r1, r4
 80054ca:	028a      	lsls	r2, r1, #10
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	2200      	movs	r2, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	60fa      	str	r2, [r7, #12]
 80054d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054dc:	f7fa ff08 	bl	80002f0 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80054f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005502:	e002      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetSysClockFreq+0x184>)
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800550c:	4618      	mov	r0, r3
 800550e:	3740      	adds	r7, #64	; 0x40
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	00f42400 	.word	0x00f42400
 8005520:	01312d00 	.word	0x01312d00

08005524 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000000 	.word	0x20000000

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	0800ee04 	.word	0x0800ee04

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffdc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0b5b      	lsrs	r3, r3, #13
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	0800ee04 	.word	0x0800ee04

0800558c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	220f      	movs	r2, #15
 800559a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0203 	and.w	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_RCC_GetClockConfig+0x60>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	601a      	str	r2, [r3, #0]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40023c00 	.word	0x40023c00

080055f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005618:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005622:	6093      	str	r3, [r2, #8]
 8005624:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	4964      	ldr	r1, [pc, #400]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	4959      	ldr	r1, [pc, #356]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005668:	d101      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d017      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005686:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	494a      	ldr	r1, [pc, #296]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a4:	d101      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 808b 	beq.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
 80056e0:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fb fd28 	bl	800114c <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fb fd24 	bl	800114c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e38f      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d035      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d02e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d114      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fb fcec 	bl	800114c <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fb fce8 	bl	800114c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e351      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ee      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d111      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057b6:	400b      	ands	r3, r1
 80057b8:	4901      	ldr	r1, [pc, #4]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	0ffffcff 	.word	0x0ffffcff
 80057cc:	4bac      	ldr	r3, [pc, #688]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4aab      	ldr	r2, [pc, #684]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	4ba9      	ldr	r3, [pc, #676]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	49a6      	ldr	r1, [pc, #664]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f6:	4ba2      	ldr	r3, [pc, #648]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	4aa0      	ldr	r2, [pc, #640]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005806:	4b9e      	ldr	r3, [pc, #632]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	499b      	ldr	r1, [pc, #620]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005824:	4b96      	ldr	r3, [pc, #600]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005832:	4993      	ldr	r1, [pc, #588]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005846:	4b8e      	ldr	r3, [pc, #568]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	498a      	ldr	r1, [pc, #552]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005868:	4b85      	ldr	r3, [pc, #532]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005876:	4982      	ldr	r1, [pc, #520]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800588a:	4b7d      	ldr	r3, [pc, #500]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4979      	ldr	r1, [pc, #484]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ac:	4b74      	ldr	r3, [pc, #464]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4971      	ldr	r1, [pc, #452]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058ce:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f023 020c 	bic.w	r2, r3, #12
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	4968      	ldr	r1, [pc, #416]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f0:	4b63      	ldr	r3, [pc, #396]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4960      	ldr	r1, [pc, #384]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005912:	4b5b      	ldr	r3, [pc, #364]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	4957      	ldr	r1, [pc, #348]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005934:	4b52      	ldr	r3, [pc, #328]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	494f      	ldr	r1, [pc, #316]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005956:	4b4a      	ldr	r3, [pc, #296]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	4946      	ldr	r1, [pc, #280]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005978:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	493e      	ldr	r1, [pc, #248]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	4935      	ldr	r1, [pc, #212]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059bc:	4b30      	ldr	r3, [pc, #192]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ca:	492d      	ldr	r1, [pc, #180]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059de:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	4924      	ldr	r1, [pc, #144]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059fc:	d101      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059fe:	2301      	movs	r3, #1
 8005a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b18      	ldr	r3, [pc, #96]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	4914      	ldr	r1, [pc, #80]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	490b      	ldr	r1, [pc, #44]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00f      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	4902      	ldr	r1, [pc, #8]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a90:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	4986      	ldr	r1, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ab4:	4b81      	ldr	r3, [pc, #516]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac4:	497d      	ldr	r1, [pc, #500]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d006      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80d6 	beq.w	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a75      	ldr	r2, [pc, #468]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fb fb2e 	bl	800114c <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005af4:	f7fb fb2a 	bl	800114c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e195      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b06:	4b6d      	ldr	r3, [pc, #436]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d021      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b34:	4b61      	ldr	r3, [pc, #388]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	0e1b      	lsrs	r3, r3, #24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	019a      	lsls	r2, r3, #6
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	4958      	ldr	r1, [pc, #352]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d129      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	0f1b      	lsrs	r3, r3, #28
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	493e      	ldr	r1, [pc, #248]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f023 021f 	bic.w	r2, r3, #31
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4938      	ldr	r1, [pc, #224]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01d      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bee:	4b33      	ldr	r3, [pc, #204]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	0e1b      	lsrs	r3, r3, #24
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	019a      	lsls	r2, r3, #6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	071b      	lsls	r3, r3, #28
 8005c22:	4926      	ldr	r1, [pc, #152]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	491a      	ldr	r1, [pc, #104]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fb fa71 	bl	800114c <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c6e:	f7fb fa6d 	bl	800114c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b64      	cmp	r3, #100	; 0x64
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e0d8      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f040 80ce 	bne.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fb fa54 	bl	800114c <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ca8:	f7fb fa50 	bl	800114c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d904      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0bb      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cc0:	4b5e      	ldr	r3, [pc, #376]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ccc:	d0ec      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02e      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d12a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf6:	4b51      	ldr	r3, [pc, #324]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d04:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	0f1b      	lsrs	r3, r3, #28
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	019a      	lsls	r2, r3, #6
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	4944      	ldr	r1, [pc, #272]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d32:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	493d      	ldr	r1, [pc, #244]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d60:	d11d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	0f1b      	lsrs	r3, r3, #28
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	019a      	lsls	r2, r3, #6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	4929      	ldr	r1, [pc, #164]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	019a      	lsls	r2, r3, #6
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	071b      	lsls	r3, r3, #28
 8005dde:	4917      	ldr	r1, [pc, #92]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	4911      	ldr	r1, [pc, #68]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e08:	f7fb f9a0 	bl	800114c <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e10:	f7fb f99c 	bl	800114c <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e007      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2e:	d1ef      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e049      	b.n	8005ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f841 	bl	8005eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 fa00 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e054      	b.n	8005fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIM_Base_Start_IT+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d115      	bne.n	8005fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d015      	beq.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9c:	d011      	beq.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	e008      	b.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40001800 	.word	0x40001800
 8005ff0:	00010007 	.word	0x00010007

08005ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f905 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8f7 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f908 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b04      	cmp	r3, #4
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b04      	cmp	r3, #4
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0204 	mvn.w	r2, #4
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8db 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8cd 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8de 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0208 	mvn.w	r2, #8
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8b1 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8a3 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8b4 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d122      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b10      	cmp	r3, #16
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f887 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f879 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f88a 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fa fd0c 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d10e      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	d107      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f91a 	bl	80063d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b2:	d10e      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d107      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f90d 	bl	80063ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d10e      	bne.n	80061fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f838 	bl	800626e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b20      	cmp	r3, #32
 800620a:	d10e      	bne.n	800622a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b20      	cmp	r3, #32
 8006218:	d107      	bne.n	800622a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0220 	mvn.w	r2, #32
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8cd 	bl	80063c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a40      	ldr	r2, [pc, #256]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d00f      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3d      	ldr	r2, [pc, #244]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3c      	ldr	r2, [pc, #240]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3b      	ldr	r2, [pc, #236]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a3a      	ldr	r2, [pc, #232]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <TIM_Base_SetConfig+0x114>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d027      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d023      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2b      	ldr	r2, [pc, #172]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a28      	ldr	r2, [pc, #160]	; (80063ac <TIM_Base_SetConfig+0x128>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <TIM_Base_SetConfig+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <TIM_Base_SetConfig+0x130>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <TIM_Base_SetConfig+0x134>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <TIM_Base_SetConfig+0x138>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <TIM_Base_SetConfig+0x13c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d103      	bne.n	8006384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	615a      	str	r2, [r3, #20]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800
 80063b8:	40001800 	.word	0x40001800
 80063bc:	40001c00 	.word	0x40001c00
 80063c0:	40002000 	.word	0x40002000

080063c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e040      	b.n	8006494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fa fcc4 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fb3e 	bl	8006ac0 <UART_SetConfig>
 8006444:	4603      	mov	r3, r0
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e022      	b.n	8006494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fd96 	bl	8006f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800646a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800647a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fe1d 	bl	80070cc <UART_CheckIdleState>
 8006492:	4603      	mov	r3, r0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b0ba      	sub	sp, #232	; 0xe8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ca:	4013      	ands	r3, r2
 80064cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d115      	bne.n	8006504 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00f      	beq.n	8006504 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 82ac 	beq.w	8006a52 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
      }
      return;
 8006502:	e2a6      	b.n	8006a52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8117 	beq.w	800673c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800650e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800651a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800651e:	4b85      	ldr	r3, [pc, #532]	; (8006734 <HAL_UART_IRQHandler+0x298>)
 8006520:	4013      	ands	r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 810a 	beq.w	800673c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d011      	beq.n	8006558 <HAL_UART_IRQHandler+0xbc>
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2201      	movs	r2, #1
 8006546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654e:	f043 0201 	orr.w	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <HAL_UART_IRQHandler+0xec>
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2202      	movs	r2, #2
 8006576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800657e:	f043 0204 	orr.w	r2, r3, #4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d011      	beq.n	80065b8 <HAL_UART_IRQHandler+0x11c>
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2204      	movs	r2, #4
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ae:	f043 0202 	orr.w	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ea:	f043 0208 	orr.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <HAL_UART_IRQHandler+0x18a>
 8006600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00c      	beq.n	8006626 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8212 	beq.w	8006a56 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d005      	beq.n	800667e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006676:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04f      	beq.n	800671e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fe37 	bl	80072f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d141      	bne.n	8006716 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1d9      	bne.n	8006692 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ea:	4a13      	ldr	r2, [pc, #76]	; (8006738 <HAL_UART_IRQHandler+0x29c>)
 80066ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fc fb5c 	bl	8002db0 <HAL_DMA_Abort_IT>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00f      	b.n	800672e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9b6 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e00b      	b.n	800672e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9b2 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	e007      	b.n	800672e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f9ae 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800672c:	e193      	b.n	8006a56 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	bf00      	nop
    return;
 8006730:	e191      	b.n	8006a56 <HAL_UART_IRQHandler+0x5ba>
 8006732:	bf00      	nop
 8006734:	04000120 	.word	0x04000120
 8006738:	080073bb 	.word	0x080073bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	2b01      	cmp	r3, #1
 8006742:	f040 814c 	bne.w	80069de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8145 	beq.w	80069de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 813e 	beq.w	80069de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2210      	movs	r2, #16
 8006768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	f040 80b6 	bne.w	80068e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006786:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8165 	beq.w	8006a5a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800679a:	429a      	cmp	r2, r3
 800679c:	f080 815d 	bcs.w	8006a5a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	f000 8086 	beq.w	80068c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1da      	bne.n	80067b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800682a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800682e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e1      	bne.n	8006802 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	f023 0310 	bic.w	r3, r3, #16
 8006898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e4      	bne.n	8006884 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fc fa06 	bl	8002cd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f8d8 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068e4:	e0b9      	b.n	8006a5a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80ab 	beq.w	8006a5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a6 	beq.w	8006a5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006934:	647b      	str	r3, [r7, #68]	; 0x44
 8006936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800693a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e4      	bne.n	8006912 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3308      	adds	r3, #8
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	623b      	str	r3, [r7, #32]
   return(result);
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696c:	633a      	str	r2, [r7, #48]	; 0x30
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e3      	bne.n	8006948 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	69b9      	ldr	r1, [r7, #24]
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	617b      	str	r3, [r7, #20]
   return(result);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e4      	bne.n	8006994 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f85c 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069dc:	e03f      	b.n	8006a5e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <HAL_UART_IRQHandler+0x56c>
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f853 	bl	8006aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a06:	e02d      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00e      	beq.n	8006a32 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01c      	beq.n	8006a62 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
    }
    return;
 8006a30:	e017      	b.n	8006a62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d012      	beq.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
 8006a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fccb 	bl	80073e6 <UART_EndTransmit_IT>
    return;
 8006a50:	e008      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a52:	bf00      	nop
 8006a54:	e006      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a56:	bf00      	nop
 8006a58:	e004      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006a62:	bf00      	nop
  }

}
 8006a64:	37e8      	adds	r7, #232	; 0xe8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4ba6      	ldr	r3, [pc, #664]	; (8006d84 <UART_SetConfig+0x2c4>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a94      	ldr	r2, [pc, #592]	; (8006d88 <UART_SetConfig+0x2c8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d120      	bne.n	8006b7e <UART_SetConfig+0xbe>
 8006b3c:	4b93      	ldr	r3, [pc, #588]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d816      	bhi.n	8006b78 <UART_SetConfig+0xb8>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x90>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b61 	.word	0x08006b61
 8006b54:	08006b6d 	.word	0x08006b6d
 8006b58:	08006b67 	.word	0x08006b67
 8006b5c:	08006b73 	.word	0x08006b73
 8006b60:	2301      	movs	r3, #1
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e150      	b.n	8006e08 <UART_SetConfig+0x348>
 8006b66:	2302      	movs	r3, #2
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e14d      	b.n	8006e08 <UART_SetConfig+0x348>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e14a      	b.n	8006e08 <UART_SetConfig+0x348>
 8006b72:	2308      	movs	r3, #8
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e147      	b.n	8006e08 <UART_SetConfig+0x348>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e144      	b.n	8006e08 <UART_SetConfig+0x348>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a83      	ldr	r2, [pc, #524]	; (8006d90 <UART_SetConfig+0x2d0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d132      	bne.n	8006bee <UART_SetConfig+0x12e>
 8006b88:	4b80      	ldr	r3, [pc, #512]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b0c      	cmp	r3, #12
 8006b94:	d828      	bhi.n	8006be8 <UART_SetConfig+0x128>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0xdc>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bd1 	.word	0x08006bd1
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006be9 	.word	0x08006be9
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006bdd 	.word	0x08006bdd
 8006bb0:	08006be9 	.word	0x08006be9
 8006bb4:	08006be9 	.word	0x08006be9
 8006bb8:	08006be9 	.word	0x08006be9
 8006bbc:	08006bd7 	.word	0x08006bd7
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006be9 	.word	0x08006be9
 8006bcc:	08006be3 	.word	0x08006be3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e118      	b.n	8006e08 <UART_SetConfig+0x348>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e115      	b.n	8006e08 <UART_SetConfig+0x348>
 8006bdc:	2304      	movs	r3, #4
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e112      	b.n	8006e08 <UART_SetConfig+0x348>
 8006be2:	2308      	movs	r3, #8
 8006be4:	77fb      	strb	r3, [r7, #31]
 8006be6:	e10f      	b.n	8006e08 <UART_SetConfig+0x348>
 8006be8:	2310      	movs	r3, #16
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e10c      	b.n	8006e08 <UART_SetConfig+0x348>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a68      	ldr	r2, [pc, #416]	; (8006d94 <UART_SetConfig+0x2d4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d120      	bne.n	8006c3a <UART_SetConfig+0x17a>
 8006bf8:	4b64      	ldr	r3, [pc, #400]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d013      	beq.n	8006c2e <UART_SetConfig+0x16e>
 8006c06:	2b30      	cmp	r3, #48	; 0x30
 8006c08:	d814      	bhi.n	8006c34 <UART_SetConfig+0x174>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d009      	beq.n	8006c22 <UART_SetConfig+0x162>
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d810      	bhi.n	8006c34 <UART_SetConfig+0x174>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <UART_SetConfig+0x15c>
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d006      	beq.n	8006c28 <UART_SetConfig+0x168>
 8006c1a:	e00b      	b.n	8006c34 <UART_SetConfig+0x174>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e0f2      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c22:	2302      	movs	r3, #2
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e0ef      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e0ec      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e0e9      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c34:	2310      	movs	r3, #16
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e0e6      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a56      	ldr	r2, [pc, #344]	; (8006d98 <UART_SetConfig+0x2d8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d120      	bne.n	8006c86 <UART_SetConfig+0x1c6>
 8006c44:	4b51      	ldr	r3, [pc, #324]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c50:	d013      	beq.n	8006c7a <UART_SetConfig+0x1ba>
 8006c52:	2bc0      	cmp	r3, #192	; 0xc0
 8006c54:	d814      	bhi.n	8006c80 <UART_SetConfig+0x1c0>
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d009      	beq.n	8006c6e <UART_SetConfig+0x1ae>
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d810      	bhi.n	8006c80 <UART_SetConfig+0x1c0>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <UART_SetConfig+0x1a8>
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d006      	beq.n	8006c74 <UART_SetConfig+0x1b4>
 8006c66:	e00b      	b.n	8006c80 <UART_SetConfig+0x1c0>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e0cc      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e0c9      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c74:	2304      	movs	r3, #4
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e0c6      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e0c3      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c80:	2310      	movs	r3, #16
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e0c0      	b.n	8006e08 <UART_SetConfig+0x348>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a44      	ldr	r2, [pc, #272]	; (8006d9c <UART_SetConfig+0x2dc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d125      	bne.n	8006cdc <UART_SetConfig+0x21c>
 8006c90:	4b3e      	ldr	r3, [pc, #248]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9e:	d017      	beq.n	8006cd0 <UART_SetConfig+0x210>
 8006ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca4:	d817      	bhi.n	8006cd6 <UART_SetConfig+0x216>
 8006ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006caa:	d00b      	beq.n	8006cc4 <UART_SetConfig+0x204>
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb0:	d811      	bhi.n	8006cd6 <UART_SetConfig+0x216>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <UART_SetConfig+0x1fe>
 8006cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cba:	d006      	beq.n	8006cca <UART_SetConfig+0x20a>
 8006cbc:	e00b      	b.n	8006cd6 <UART_SetConfig+0x216>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e0a1      	b.n	8006e08 <UART_SetConfig+0x348>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e09e      	b.n	8006e08 <UART_SetConfig+0x348>
 8006cca:	2304      	movs	r3, #4
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e09b      	b.n	8006e08 <UART_SetConfig+0x348>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e098      	b.n	8006e08 <UART_SetConfig+0x348>
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e095      	b.n	8006e08 <UART_SetConfig+0x348>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <UART_SetConfig+0x2e0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d125      	bne.n	8006d32 <UART_SetConfig+0x272>
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf4:	d017      	beq.n	8006d26 <UART_SetConfig+0x266>
 8006cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfa:	d817      	bhi.n	8006d2c <UART_SetConfig+0x26c>
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d00:	d00b      	beq.n	8006d1a <UART_SetConfig+0x25a>
 8006d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d06:	d811      	bhi.n	8006d2c <UART_SetConfig+0x26c>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <UART_SetConfig+0x254>
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d10:	d006      	beq.n	8006d20 <UART_SetConfig+0x260>
 8006d12:	e00b      	b.n	8006d2c <UART_SetConfig+0x26c>
 8006d14:	2301      	movs	r3, #1
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e076      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e073      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d20:	2304      	movs	r3, #4
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e070      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d26:	2308      	movs	r3, #8
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e06d      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e06a      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <UART_SetConfig+0x2e4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d138      	bne.n	8006dae <UART_SetConfig+0x2ee>
 8006d3c:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <UART_SetConfig+0x2cc>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d4a:	d017      	beq.n	8006d7c <UART_SetConfig+0x2bc>
 8006d4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d50:	d82a      	bhi.n	8006da8 <UART_SetConfig+0x2e8>
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d56:	d00b      	beq.n	8006d70 <UART_SetConfig+0x2b0>
 8006d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5c:	d824      	bhi.n	8006da8 <UART_SetConfig+0x2e8>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <UART_SetConfig+0x2aa>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d006      	beq.n	8006d76 <UART_SetConfig+0x2b6>
 8006d68:	e01e      	b.n	8006da8 <UART_SetConfig+0x2e8>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e04b      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d70:	2302      	movs	r3, #2
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e048      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d76:	2304      	movs	r3, #4
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e045      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e042      	b.n	8006e08 <UART_SetConfig+0x348>
 8006d82:	bf00      	nop
 8006d84:	efff69f3 	.word	0xefff69f3
 8006d88:	40011000 	.word	0x40011000
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40004400 	.word	0x40004400
 8006d94:	40004800 	.word	0x40004800
 8006d98:	40004c00 	.word	0x40004c00
 8006d9c:	40005000 	.word	0x40005000
 8006da0:	40011400 	.word	0x40011400
 8006da4:	40007800 	.word	0x40007800
 8006da8:	2310      	movs	r3, #16
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e02c      	b.n	8006e08 <UART_SetConfig+0x348>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a72      	ldr	r2, [pc, #456]	; (8006f7c <UART_SetConfig+0x4bc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d125      	bne.n	8006e04 <UART_SetConfig+0x344>
 8006db8:	4b71      	ldr	r3, [pc, #452]	; (8006f80 <UART_SetConfig+0x4c0>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dc6:	d017      	beq.n	8006df8 <UART_SetConfig+0x338>
 8006dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dcc:	d817      	bhi.n	8006dfe <UART_SetConfig+0x33e>
 8006dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd2:	d00b      	beq.n	8006dec <UART_SetConfig+0x32c>
 8006dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd8:	d811      	bhi.n	8006dfe <UART_SetConfig+0x33e>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <UART_SetConfig+0x326>
 8006dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de2:	d006      	beq.n	8006df2 <UART_SetConfig+0x332>
 8006de4:	e00b      	b.n	8006dfe <UART_SetConfig+0x33e>
 8006de6:	2300      	movs	r3, #0
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e00d      	b.n	8006e08 <UART_SetConfig+0x348>
 8006dec:	2302      	movs	r3, #2
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e00a      	b.n	8006e08 <UART_SetConfig+0x348>
 8006df2:	2304      	movs	r3, #4
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e007      	b.n	8006e08 <UART_SetConfig+0x348>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e004      	b.n	8006e08 <UART_SetConfig+0x348>
 8006dfe:	2310      	movs	r3, #16
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e001      	b.n	8006e08 <UART_SetConfig+0x348>
 8006e04:	2310      	movs	r3, #16
 8006e06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
 8006e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e10:	d15b      	bne.n	8006eca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e12:	7ffb      	ldrb	r3, [r7, #31]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d828      	bhi.n	8006e6a <UART_SetConfig+0x3aa>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x360>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e6b 	.word	0x08006e6b
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006e6b 	.word	0x08006e6b
 8006e3c:	08006e6b 	.word	0x08006e6b
 8006e40:	08006e63 	.word	0x08006e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e44:	f7fe fb7a 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006e48:	61b8      	str	r0, [r7, #24]
        break;
 8006e4a:	e013      	b.n	8006e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7fe fb8a 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006e50:	61b8      	str	r0, [r7, #24]
        break;
 8006e52:	e00f      	b.n	8006e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e54:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <UART_SetConfig+0x4c4>)
 8006e56:	61bb      	str	r3, [r7, #24]
        break;
 8006e58:	e00c      	b.n	8006e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5a:	f7fe fa9d 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8006e5e:	61b8      	str	r0, [r7, #24]
        break;
 8006e60:	e008      	b.n	8006e74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e66:	61bb      	str	r3, [r7, #24]
        break;
 8006e68:	e004      	b.n	8006e74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	77bb      	strb	r3, [r7, #30]
        break;
 8006e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d074      	beq.n	8006f64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	005a      	lsls	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b0f      	cmp	r3, #15
 8006e94:	d916      	bls.n	8006ec4 <UART_SetConfig+0x404>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d212      	bcs.n	8006ec4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f023 030f 	bic.w	r3, r3, #15
 8006ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	89fb      	ldrh	r3, [r7, #14]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	89fa      	ldrh	r2, [r7, #14]
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	e04f      	b.n	8006f64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	77bb      	strb	r3, [r7, #30]
 8006ec8:	e04c      	b.n	8006f64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eca:	7ffb      	ldrb	r3, [r7, #31]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d828      	bhi.n	8006f22 <UART_SetConfig+0x462>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x418>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f23 	.word	0x08006f23
 8006ee8:	08006f13 	.word	0x08006f13
 8006eec:	08006f23 	.word	0x08006f23
 8006ef0:	08006f23 	.word	0x08006f23
 8006ef4:	08006f23 	.word	0x08006f23
 8006ef8:	08006f1b 	.word	0x08006f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efc:	f7fe fb1e 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006f00:	61b8      	str	r0, [r7, #24]
        break;
 8006f02:	e013      	b.n	8006f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f04:	f7fe fb2e 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006f08:	61b8      	str	r0, [r7, #24]
        break;
 8006f0a:	e00f      	b.n	8006f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <UART_SetConfig+0x4c4>)
 8006f0e:	61bb      	str	r3, [r7, #24]
        break;
 8006f10:	e00c      	b.n	8006f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f12:	f7fe fa41 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8006f16:	61b8      	str	r0, [r7, #24]
        break;
 8006f18:	e008      	b.n	8006f2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1e:	61bb      	str	r3, [r7, #24]
        break;
 8006f20:	e004      	b.n	8006f2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	77bb      	strb	r3, [r7, #30]
        break;
 8006f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d018      	beq.n	8006f64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	085a      	lsrs	r2, r3, #1
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	441a      	add	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b0f      	cmp	r3, #15
 8006f4a:	d909      	bls.n	8006f60 <UART_SetConfig+0x4a0>
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f52:	d205      	bcs.n	8006f60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	e001      	b.n	8006f64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f70:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40007c00 	.word	0x40007c00
 8006f80:	40023800 	.word	0x40023800
 8006f84:	00f42400 	.word	0x00f42400

08006f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007086:	d10a      	bne.n	800709e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	605a      	str	r2, [r3, #4]
  }
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070dc:	f7fa f836 	bl	800114c <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d10e      	bne.n	800710e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f831 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e027      	b.n	800715e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d10e      	bne.n	800713a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f81b 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e011      	b.n	800715e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b09c      	sub	sp, #112	; 0x70
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007176:	e0a7      	b.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	f000 80a3 	beq.w	80072c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7f9 ffe3 	bl	800114c <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
 8007192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007194:	2b00      	cmp	r3, #0
 8007196:	d13f      	bne.n	8007218 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	663b      	str	r3, [r7, #96]	; 0x60
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e068      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d050      	beq.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d148      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007254:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
 8007260:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	613b      	str	r3, [r7, #16]
   return(result);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	66bb      	str	r3, [r7, #104]	; 0x68
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007292:	623a      	str	r2, [r7, #32]
 8007294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	69f9      	ldr	r1, [r7, #28]
 8007298:	6a3a      	ldr	r2, [r7, #32]
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e010      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69da      	ldr	r2, [r3, #28]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4013      	ands	r3, r2
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	f43f af48 	beq.w	8007178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3770      	adds	r7, #112	; 0x70
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b095      	sub	sp, #84	; 0x54
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
 800731a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800731e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007364:	2b01      	cmp	r3, #1
 8007366:	d118      	bne.n	800739a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	60bb      	str	r3, [r7, #8]
   return(result);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f023 0310 	bic.w	r3, r3, #16
 800737c:	647b      	str	r3, [r7, #68]	; 0x44
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6979      	ldr	r1, [r7, #20]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	613b      	str	r3, [r7, #16]
   return(result);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2220      	movs	r2, #32
 800739e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073ae:	bf00      	nop
 80073b0:	3754      	adds	r7, #84	; 0x54
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fb51 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b088      	sub	sp, #32
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007402:	61fb      	str	r3, [r7, #28]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6979      	ldr	r1, [r7, #20]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	613b      	str	r3, [r7, #16]
   return(result);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fb1d 	bl	8006a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007432:	bf00      	nop
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800743c:	b084      	sub	sp, #16
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	f107 001c 	add.w	r0, r7, #28
 800744a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2b01      	cmp	r3, #1
 8007452:	d120      	bne.n	8007496 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <USB_CoreInit+0xac>)
 8007466:	4013      	ands	r3, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fbee 	bl	8008c6c <USB_CoreReset>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e010      	b.n	80074b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fbe2 	bl	8008c6c <USB_CoreReset>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10b      	bne.n	80074d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f043 0206 	orr.w	r2, r3, #6
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f043 0220 	orr.w	r2, r3, #32
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074e2:	b004      	add	sp, #16
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	ffbdffbf 	.word	0xffbdffbf

080074ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d165      	bne.n	80075cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a41      	ldr	r2, [pc, #260]	; (8007608 <USB_SetTurnaroundTime+0x11c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d906      	bls.n	8007516 <USB_SetTurnaroundTime+0x2a>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a40      	ldr	r2, [pc, #256]	; (800760c <USB_SetTurnaroundTime+0x120>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d202      	bcs.n	8007516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007510:	230f      	movs	r3, #15
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e062      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a3c      	ldr	r2, [pc, #240]	; (800760c <USB_SetTurnaroundTime+0x120>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d306      	bcc.n	800752c <USB_SetTurnaroundTime+0x40>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a3b      	ldr	r2, [pc, #236]	; (8007610 <USB_SetTurnaroundTime+0x124>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d202      	bcs.n	800752c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007526:	230e      	movs	r3, #14
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e057      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a38      	ldr	r2, [pc, #224]	; (8007610 <USB_SetTurnaroundTime+0x124>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d306      	bcc.n	8007542 <USB_SetTurnaroundTime+0x56>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a37      	ldr	r2, [pc, #220]	; (8007614 <USB_SetTurnaroundTime+0x128>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800753c:	230d      	movs	r3, #13
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e04c      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a33      	ldr	r2, [pc, #204]	; (8007614 <USB_SetTurnaroundTime+0x128>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d306      	bcc.n	8007558 <USB_SetTurnaroundTime+0x6c>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4a32      	ldr	r2, [pc, #200]	; (8007618 <USB_SetTurnaroundTime+0x12c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d802      	bhi.n	8007558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007552:	230c      	movs	r3, #12
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e041      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a2f      	ldr	r2, [pc, #188]	; (8007618 <USB_SetTurnaroundTime+0x12c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d906      	bls.n	800756e <USB_SetTurnaroundTime+0x82>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a2e      	ldr	r2, [pc, #184]	; (800761c <USB_SetTurnaroundTime+0x130>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d802      	bhi.n	800756e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007568:	230b      	movs	r3, #11
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e036      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a2a      	ldr	r2, [pc, #168]	; (800761c <USB_SetTurnaroundTime+0x130>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d906      	bls.n	8007584 <USB_SetTurnaroundTime+0x98>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a29      	ldr	r2, [pc, #164]	; (8007620 <USB_SetTurnaroundTime+0x134>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d802      	bhi.n	8007584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800757e:	230a      	movs	r3, #10
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e02b      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a26      	ldr	r2, [pc, #152]	; (8007620 <USB_SetTurnaroundTime+0x134>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d906      	bls.n	800759a <USB_SetTurnaroundTime+0xae>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a25      	ldr	r2, [pc, #148]	; (8007624 <USB_SetTurnaroundTime+0x138>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d202      	bcs.n	800759a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007594:	2309      	movs	r3, #9
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e020      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a21      	ldr	r2, [pc, #132]	; (8007624 <USB_SetTurnaroundTime+0x138>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d306      	bcc.n	80075b0 <USB_SetTurnaroundTime+0xc4>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4a20      	ldr	r2, [pc, #128]	; (8007628 <USB_SetTurnaroundTime+0x13c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d802      	bhi.n	80075b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075aa:	2308      	movs	r3, #8
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e015      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <USB_SetTurnaroundTime+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d906      	bls.n	80075c6 <USB_SetTurnaroundTime+0xda>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	; (800762c <USB_SetTurnaroundTime+0x140>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d202      	bcs.n	80075c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075c0:	2307      	movs	r3, #7
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e00a      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075c6:	2306      	movs	r3, #6
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e007      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075d2:	2309      	movs	r3, #9
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e001      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075d8:	2309      	movs	r3, #9
 80075da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00d8acbf 	.word	0x00d8acbf
 800760c:	00e4e1c0 	.word	0x00e4e1c0
 8007610:	00f42400 	.word	0x00f42400
 8007614:	01067380 	.word	0x01067380
 8007618:	011a499f 	.word	0x011a499f
 800761c:	01312cff 	.word	0x01312cff
 8007620:	014ca43f 	.word	0x014ca43f
 8007624:	016e3600 	.word	0x016e3600
 8007628:	01a6ab1f 	.word	0x01a6ab1f
 800762c:	01e84800 	.word	0x01e84800

08007630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f043 0201 	orr.w	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f023 0201 	bic.w	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d115      	bne.n	80076c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076a2:	2001      	movs	r0, #1
 80076a4:	f7f9 fd5e 	bl	8001164 <HAL_Delay>
      ms++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fa4b 	bl	8008b4a <USB_GetMode>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d01e      	beq.n	80076f8 <USB_SetCurrentMode+0x84>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b31      	cmp	r3, #49	; 0x31
 80076be:	d9f0      	bls.n	80076a2 <USB_SetCurrentMode+0x2e>
 80076c0:	e01a      	b.n	80076f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d115      	bne.n	80076f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076d4:	2001      	movs	r0, #1
 80076d6:	f7f9 fd45 	bl	8001164 <HAL_Delay>
      ms++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fa32 	bl	8008b4a <USB_GetMode>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <USB_SetCurrentMode+0x84>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b31      	cmp	r3, #49	; 0x31
 80076f0:	d9f0      	bls.n	80076d4 <USB_SetCurrentMode+0x60>
 80076f2:	e001      	b.n	80076f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e005      	b.n	8007704 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b32      	cmp	r3, #50	; 0x32
 80076fc:	d101      	bne.n	8007702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800770c:	b084      	sub	sp, #16
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800771a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	e009      	b.n	8007740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3340      	adds	r3, #64	; 0x40
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3301      	adds	r3, #1
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b0e      	cmp	r3, #14
 8007744:	d9f2      	bls.n	800772c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11c      	bne.n	8007786 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775a:	f043 0302 	orr.w	r3, r3, #2
 800775e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e005      	b.n	8007792 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007798:	461a      	mov	r2, r3
 800779a:	2300      	movs	r3, #0
 800779c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	4619      	mov	r1, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ac:	461a      	mov	r2, r3
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10c      	bne.n	80077d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f965 	bl	8007a90 <USB_SetDevSpeed>
 80077c6:	e008      	b.n	80077da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077c8:	2101      	movs	r1, #1
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f960 	bl	8007a90 <USB_SetDevSpeed>
 80077d0:	e003      	b.n	80077da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077d2:	2103      	movs	r1, #3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f95b 	bl	8007a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077da:	2110      	movs	r1, #16
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8f3 	bl	80079c8 <USB_FlushTxFifo>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f91f 	bl	8007a30 <USB_FlushRxFifo>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	461a      	mov	r2, r3
 8007804:	2300      	movs	r3, #0
 8007806:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	461a      	mov	r2, r3
 8007810:	2300      	movs	r3, #0
 8007812:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	461a      	mov	r2, r3
 800781c:	2300      	movs	r3, #0
 800781e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	e043      	b.n	80078ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800783c:	d118      	bne.n	8007870 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	461a      	mov	r2, r3
 8007852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e013      	b.n	8007882 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	461a      	mov	r2, r3
 8007868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	e008      	b.n	8007882 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787c:	461a      	mov	r2, r3
 800787e:	2300      	movs	r3, #0
 8007880:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	461a      	mov	r2, r3
 8007890:	2300      	movs	r3, #0
 8007892:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	461a      	mov	r2, r3
 80078a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3301      	adds	r3, #1
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d3b7      	bcc.n	8007826 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e043      	b.n	8007944 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d2:	d118      	bne.n	8007906 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	461a      	mov	r2, r3
 80078e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e013      	b.n	8007918 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	461a      	mov	r2, r3
 80078fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	e008      	b.n	8007918 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	461a      	mov	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	461a      	mov	r2, r3
 8007938:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800793c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	3301      	adds	r3, #1
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	429a      	cmp	r2, r3
 800794a:	d3b7      	bcc.n	80078bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800795a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800795e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800796c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f043 0210 	orr.w	r2, r3, #16
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <USB_DevInit+0x2b4>)
 8007986:	4313      	orrs	r3, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800798c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f043 0208 	orr.w	r2, r3, #8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800799e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d105      	bne.n	80079b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699a      	ldr	r2, [r3, #24]
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <USB_DevInit+0x2b8>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079bc:	b004      	add	sp, #16
 80079be:	4770      	bx	lr
 80079c0:	803c3800 	.word	0x803c3800
 80079c4:	40000004 	.word	0x40000004

080079c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4a13      	ldr	r2, [pc, #76]	; (8007a2c <USB_FlushTxFifo+0x64>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d901      	bls.n	80079e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e01b      	b.n	8007a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	daf2      	bge.n	80079d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	019b      	lsls	r3, r3, #6
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4a08      	ldr	r2, [pc, #32]	; (8007a2c <USB_FlushTxFifo+0x64>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d901      	bls.n	8007a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e006      	b.n	8007a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d0f0      	beq.n	8007a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	00030d40 	.word	0x00030d40

08007a30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a11      	ldr	r2, [pc, #68]	; (8007a8c <USB_FlushRxFifo+0x5c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d901      	bls.n	8007a4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e018      	b.n	8007a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	daf2      	bge.n	8007a3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2210      	movs	r2, #16
 8007a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4a08      	ldr	r2, [pc, #32]	; (8007a8c <USB_FlushRxFifo+0x5c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e006      	b.n	8007a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d0f0      	beq.n	8007a60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	00030d40 	.word	0x00030d40

08007a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0306 	and.w	r3, r3, #6
 8007ada:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
 8007ae6:	e00a      	b.n	8007afe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d002      	beq.n	8007af4 <USB_GetDevSpeed+0x32>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b06      	cmp	r3, #6
 8007af2:	d102      	bne.n	8007afa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007af4:	2302      	movs	r3, #2
 8007af6:	75fb      	strb	r3, [r7, #23]
 8007af8:	e001      	b.n	8007afe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007afa:	230f      	movs	r3, #15
 8007afc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d139      	bne.n	8007b9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	69da      	ldr	r2, [r3, #28]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	2101      	movs	r1, #1
 8007b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d153      	bne.n	8007c08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	059b      	lsls	r3, r3, #22
 8007b82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b84:	431a      	orrs	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	0159      	lsls	r1, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	440b      	add	r3, r1
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b92:	4619      	mov	r1, r3
 8007b94:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <USB_ActivateEndpoint+0x10c>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]
 8007b9a:	e035      	b.n	8007c08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	2101      	movs	r1, #1
 8007bae:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	68f9      	ldr	r1, [r7, #12]
 8007bb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d119      	bne.n	8007c08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	791b      	ldrb	r3, [r3, #4]
 8007bee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	0159      	lsls	r1, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	4619      	mov	r1, r3
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <USB_ActivateEndpoint+0x10c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	10008000 	.word	0x10008000

08007c1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d161      	bne.n	8007cfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c4e:	d11f      	bne.n	8007c90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	0159      	lsls	r1, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	440b      	add	r3, r1
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4b35      	ldr	r3, [pc, #212]	; (8007dcc <USB_DeactivateEndpoint+0x1b0>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	600b      	str	r3, [r1, #0]
 8007cfa:	e060      	b.n	8007dbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d12:	d11f      	bne.n	8007d54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	0151      	lsls	r1, r2, #5
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	440a      	add	r2, r1
 8007d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 030f 	and.w	r3, r3, #15
 8007d64:	2101      	movs	r1, #1
 8007d66:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	43db      	mvns	r3, r3
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d74:	4013      	ands	r3, r2
 8007d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	43db      	mvns	r3, r3
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d98:	4013      	ands	r3, r2
 8007d9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	0159      	lsls	r1, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	440b      	add	r3, r1
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	4619      	mov	r1, r3
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <USB_DeactivateEndpoint+0x1b4>)
 8007dba:	4013      	ands	r3, r2
 8007dbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	ec337800 	.word	0xec337800
 8007dd0:	eff37800 	.word	0xeff37800

08007dd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	f040 8163 	bne.w	80080bc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d132      	bne.n	8007e64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	0159      	lsls	r1, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	440b      	add	r3, r1
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4ba5      	ldr	r3, [pc, #660]	; (80080b0 <USB_EPStartXfer+0x2dc>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	0159      	lsls	r1, r3, #5
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	440b      	add	r3, r1
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4b95      	ldr	r3, [pc, #596]	; (80080b4 <USB_EPStartXfer+0x2e0>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	610b      	str	r3, [r1, #16]
 8007e62:	e074      	b.n	8007f4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	0159      	lsls	r1, r3, #5
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	440b      	add	r3, r1
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4b8c      	ldr	r3, [pc, #560]	; (80080b4 <USB_EPStartXfer+0x2e0>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	0159      	lsls	r1, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	440b      	add	r3, r1
 8007e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4b83      	ldr	r3, [pc, #524]	; (80080b0 <USB_EPStartXfer+0x2dc>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6999      	ldr	r1, [r3, #24]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	440b      	add	r3, r1
 8007ec0:	1e59      	subs	r1, r3, #1
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007eca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ecc:	4b7a      	ldr	r3, [pc, #488]	; (80080b8 <USB_EPStartXfer+0x2e4>)
 8007ece:	400b      	ands	r3, r1
 8007ed0:	69b9      	ldr	r1, [r7, #24]
 8007ed2:	0148      	lsls	r0, r1, #5
 8007ed4:	69f9      	ldr	r1, [r7, #28]
 8007ed6:	4401      	add	r1, r0
 8007ed8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007edc:	4313      	orrs	r3, r2
 8007ede:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	691a      	ldr	r2, [r3, #16]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef6:	69b9      	ldr	r1, [r7, #24]
 8007ef8:	0148      	lsls	r0, r1, #5
 8007efa:	69f9      	ldr	r1, [r7, #28]
 8007efc:	4401      	add	r1, r0
 8007efe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f02:	4313      	orrs	r3, r2
 8007f04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d11f      	bne.n	8007f4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d14b      	bne.n	8007fec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d009      	beq.n	8007f70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	791b      	ldrb	r3, [r3, #4]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d128      	bne.n	8007fca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	e00f      	b.n	8007fca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	0151      	lsls	r1, r2, #5
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	440a      	add	r2, r1
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e137      	b.n	800825c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800800a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	791b      	ldrb	r3, [r3, #4]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d015      	beq.n	8008040 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 811f 	beq.w	800825c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	2101      	movs	r1, #1
 8008030:	fa01 f303 	lsl.w	r3, r1, r3
 8008034:	69f9      	ldr	r1, [r7, #28]
 8008036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800803a:	4313      	orrs	r3, r2
 800803c:	634b      	str	r3, [r1, #52]	; 0x34
 800803e:	e10d      	b.n	800825c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d110      	bne.n	8008072 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	e00f      	b.n	8008092 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008090:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6919      	ldr	r1, [r3, #16]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	b298      	uxth	r0, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	4603      	mov	r3, r0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 faea 	bl	8008680 <USB_WritePacket>
 80080ac:	e0d6      	b.n	800825c <USB_EPStartXfer+0x488>
 80080ae:	bf00      	nop
 80080b0:	e007ffff 	.word	0xe007ffff
 80080b4:	fff80000 	.word	0xfff80000
 80080b8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	0159      	lsls	r1, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	440b      	add	r3, r1
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	4619      	mov	r1, r3
 80080d8:	4b63      	ldr	r3, [pc, #396]	; (8008268 <USB_EPStartXfer+0x494>)
 80080da:	4013      	ands	r3, r2
 80080dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	0159      	lsls	r1, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	440b      	add	r3, r1
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	4619      	mov	r1, r3
 80080fa:	4b5c      	ldr	r3, [pc, #368]	; (800826c <USB_EPStartXfer+0x498>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d123      	bne.n	8008150 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	0148      	lsls	r0, r1, #5
 8008122:	69f9      	ldr	r1, [r7, #28]
 8008124:	4401      	add	r1, r0
 8008126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800812a:	4313      	orrs	r3, r2
 800812c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800814c:	6113      	str	r3, [r2, #16]
 800814e:	e037      	b.n	80081c0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4413      	add	r3, r2
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	8afa      	ldrh	r2, [r7, #22]
 800816c:	fb03 f202 	mul.w	r2, r3, r2
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	8afb      	ldrh	r3, [r7, #22]
 8008184:	04d9      	lsls	r1, r3, #19
 8008186:	4b3a      	ldr	r3, [pc, #232]	; (8008270 <USB_EPStartXfer+0x49c>)
 8008188:	400b      	ands	r3, r1
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	0148      	lsls	r0, r1, #5
 800818e:	69f9      	ldr	r1, [r7, #28]
 8008190:	4401      	add	r1, r0
 8008192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008196:	4313      	orrs	r3, r2
 8008198:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081b0:	69b9      	ldr	r1, [r7, #24]
 80081b2:	0148      	lsls	r0, r1, #5
 80081b4:	69f9      	ldr	r1, [r7, #28]
 80081b6:	4401      	add	r1, r0
 80081b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081bc:	4313      	orrs	r3, r2
 80081be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d10d      	bne.n	80081e2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6919      	ldr	r1, [r3, #16]
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081de:	460a      	mov	r2, r1
 80081e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	791b      	ldrb	r3, [r3, #4]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d128      	bne.n	800823c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d110      	bne.n	800821c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	440a      	add	r2, r1
 8008210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e00f      	b.n	800823c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800823a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800825a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	fff80000 	.word	0xfff80000
 800826c:	e007ffff 	.word	0xe007ffff
 8008270:	1ff80000 	.word	0x1ff80000

08008274 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 80ce 	bne.w	8008432 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d132      	bne.n	8008304 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	0159      	lsls	r1, r3, #5
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	440b      	add	r3, r1
 80082b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b8:	4619      	mov	r1, r3
 80082ba:	4b9a      	ldr	r3, [pc, #616]	; (8008524 <USB_EP0StartXfer+0x2b0>)
 80082bc:	4013      	ands	r3, r2
 80082be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	0159      	lsls	r1, r3, #5
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	440b      	add	r3, r1
 80082f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fa:	4619      	mov	r1, r3
 80082fc:	4b8a      	ldr	r3, [pc, #552]	; (8008528 <USB_EP0StartXfer+0x2b4>)
 80082fe:	4013      	ands	r3, r2
 8008300:	610b      	str	r3, [r1, #16]
 8008302:	e04e      	b.n	80083a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	0159      	lsls	r1, r3, #5
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	440b      	add	r3, r1
 800831a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831e:	4619      	mov	r1, r3
 8008320:	4b81      	ldr	r3, [pc, #516]	; (8008528 <USB_EP0StartXfer+0x2b4>)
 8008322:	4013      	ands	r3, r2
 8008324:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	0159      	lsls	r1, r3, #5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	440b      	add	r3, r1
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	4619      	mov	r1, r3
 8008342:	4b78      	ldr	r3, [pc, #480]	; (8008524 <USB_EP0StartXfer+0x2b0>)
 8008344:	4013      	ands	r3, r2
 8008346:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	429a      	cmp	r2, r3
 8008352:	d903      	bls.n	800835c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800837a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008392:	6939      	ldr	r1, [r7, #16]
 8008394:	0148      	lsls	r0, r1, #5
 8008396:	6979      	ldr	r1, [r7, #20]
 8008398:	4401      	add	r1, r0
 800839a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800839e:	4313      	orrs	r3, r2
 80083a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d11e      	bne.n	80083e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083bc:	461a      	mov	r2, r3
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	0151      	lsls	r1, r2, #5
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	440a      	add	r2, r1
 80083da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	e097      	b.n	8008516 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008404:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8083 	beq.w	8008516 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	2101      	movs	r1, #1
 8008422:	fa01 f303 	lsl.w	r3, r1, r3
 8008426:	6979      	ldr	r1, [r7, #20]
 8008428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800842c:	4313      	orrs	r3, r2
 800842e:	634b      	str	r3, [r1, #52]	; 0x34
 8008430:	e071      	b.n	8008516 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	0159      	lsls	r1, r3, #5
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	440b      	add	r3, r1
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	4619      	mov	r1, r3
 800844e:	4b36      	ldr	r3, [pc, #216]	; (8008528 <USB_EP0StartXfer+0x2b4>)
 8008450:	4013      	ands	r3, r2
 8008452:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	0159      	lsls	r1, r3, #5
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	440b      	add	r3, r1
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	4619      	mov	r1, r3
 8008470:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <USB_EP0StartXfer+0x2b0>)
 8008472:	4013      	ands	r3, r2
 8008474:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	0151      	lsls	r1, r2, #5
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	440a      	add	r2, r1
 80084a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c4:	6939      	ldr	r1, [r7, #16]
 80084c6:	0148      	lsls	r0, r1, #5
 80084c8:	6979      	ldr	r1, [r7, #20]
 80084ca:	4401      	add	r1, r0
 80084cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084d0:	4313      	orrs	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d10d      	bne.n	80084f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6919      	ldr	r1, [r3, #16]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	460a      	mov	r2, r1
 80084f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008514:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	e007ffff 	.word	0xe007ffff
 8008528:	fff80000 	.word	0xfff80000

0800852c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d14a      	bne.n	80085e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008562:	f040 8086 	bne.w	8008672 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	7812      	ldrb	r2, [r2, #0]
 800857a:	0151      	lsls	r1, r2, #5
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	440a      	add	r2, r1
 8008580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008584:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008588:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d902      	bls.n	80085c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
          break;
 80085c2:	e056      	b.n	8008672 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085dc:	d0e7      	beq.n	80085ae <USB_EPStopXfer+0x82>
 80085de:	e048      	b.n	8008672 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f8:	d13b      	bne.n	8008672 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800861c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008640:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3301      	adds	r3, #1
 8008646:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f242 7210 	movw	r2, #10000	; 0x2710
 800864e:	4293      	cmp	r3, r2
 8008650:	d902      	bls.n	8008658 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
          break;
 8008656:	e00c      	b.n	8008672 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008670:	d0e7      	beq.n	8008642 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008680:	b480      	push	{r7}
 8008682:	b089      	sub	sp, #36	; 0x24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	71fb      	strb	r3, [r7, #7]
 8008692:	4613      	mov	r3, r2
 8008694:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800869e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d123      	bne.n	80086ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086a6:	88bb      	ldrh	r3, [r7, #4]
 80086a8:	3303      	adds	r3, #3
 80086aa:	089b      	lsrs	r3, r3, #2
 80086ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e018      	b.n	80086e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	031a      	lsls	r2, r3, #12
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c0:	461a      	mov	r2, r3
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	3301      	adds	r3, #1
 80086cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	3301      	adds	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	3301      	adds	r3, #1
 80086d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3301      	adds	r3, #1
 80086de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	3301      	adds	r3, #1
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d3e2      	bcc.n	80086b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3724      	adds	r7, #36	; 0x24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b08b      	sub	sp, #44	; 0x2c
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	089b      	lsrs	r3, r3, #2
 8008716:	b29b      	uxth	r3, r3
 8008718:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e014      	b.n	8008752 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	601a      	str	r2, [r3, #0]
    pDest++;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	3301      	adds	r3, #1
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	3301      	adds	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	3301      	adds	r3, #1
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	3301      	adds	r3, #1
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	3301      	adds	r3, #1
 8008750:	623b      	str	r3, [r7, #32]
 8008752:	6a3a      	ldr	r2, [r7, #32]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	429a      	cmp	r2, r3
 8008758:	d3e6      	bcc.n	8008728 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800875a:	8bfb      	ldrh	r3, [r7, #30]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01e      	beq.n	800879e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876a:	461a      	mov	r2, r3
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	b2da      	uxtb	r2, r3
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	701a      	strb	r2, [r3, #0]
      i++;
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	3301      	adds	r3, #1
 800878a:	623b      	str	r3, [r7, #32]
      pDest++;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	3301      	adds	r3, #1
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008792:	8bfb      	ldrh	r3, [r7, #30]
 8008794:	3b01      	subs	r3, #1
 8008796:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008798:	8bfb      	ldrh	r3, [r7, #30]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ea      	bne.n	8008774 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	372c      	adds	r7, #44	; 0x2c
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d12c      	bne.n	8008822 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	db12      	blt.n	8008800 <USB_EPSetStall+0x54>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00f      	beq.n	8008800 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	e02b      	b.n	800887a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	db12      	blt.n	800885a <USB_EPSetStall+0xae>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00f      	beq.n	800885a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008854:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008858:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008878:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d128      	bne.n	80088f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	791b      	ldrb	r3, [r3, #4]
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d003      	beq.n	80088d4 <USB_EPClearStall+0x4c>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	791b      	ldrb	r3, [r3, #4]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d138      	bne.n	8008946 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e027      	b.n	8008946 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008914:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	791b      	ldrb	r3, [r3, #4]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d003      	beq.n	8008926 <USB_EPClearStall+0x9e>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	791b      	ldrb	r3, [r3, #4]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d10f      	bne.n	8008946 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	0151      	lsls	r1, r2, #5
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	440a      	add	r2, r1
 800893c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008944:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008972:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008976:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008988:	68f9      	ldr	r1, [r7, #12]
 800898a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800898e:	4313      	orrs	r3, r2
 8008990:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ce:	f023 0302 	bic.w	r3, r3, #2
 80089d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b085      	sub	sp, #20
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089fc:	f023 0303 	bic.w	r3, r3, #3
 8008a00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a10:	f043 0302 	orr.w	r3, r3, #2
 8008a14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	0c1b      	lsrs	r3, r3, #16
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	b29b      	uxth	r3, r3
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4013      	ands	r3, r2
 8008ade:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b087      	sub	sp, #28
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1e:	01db      	lsls	r3, r3, #7
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	f003 0301 	and.w	r3, r3, #1
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	4619      	mov	r1, r3
 8008b84:	4b09      	ldr	r3, [pc, #36]	; (8008bac <USB_ActivateSetup+0x44>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	fffff800 	.word	0xfffff800

08008bb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	333c      	adds	r3, #60	; 0x3c
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4a26      	ldr	r2, [pc, #152]	; (8008c68 <USB_EP0_OutStart+0xb8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d90a      	bls.n	8008bea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be4:	d101      	bne.n	8008bea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e037      	b.n	8008c5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	f043 0318 	orr.w	r3, r3, #24
 8008c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10f      	bne.n	8008c58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	4f54300a 	.word	0x4f54300a

08008c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <USB_CoreReset+0x64>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e01b      	b.n	8008cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	daf2      	bge.n	8008c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f043 0201 	orr.w	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <USB_CoreReset+0x64>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d901      	bls.n	8008cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e006      	b.n	8008cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d0f0      	beq.n	8008ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	00030d40 	.word	0x00030d40

08008cd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ce0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ce4:	f005 fb48 	bl	800e378 <malloc>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	32b0      	adds	r2, #176	; 0xb0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d02:	2302      	movs	r3, #2
 8008d04:	e0d4      	b.n	8008eb0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d06:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f005 fc0f 	bl	800e530 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32b0      	adds	r2, #176	; 0xb0
 8008d1c:	68f9      	ldr	r1, [r7, #12]
 8008d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32b0      	adds	r2, #176	; 0xb0
 8008d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d138      	bne.n	8008db0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d3e:	4b5e      	ldr	r3, [pc, #376]	; (8008eb8 <USBD_CDC_Init+0x1e4>)
 8008d40:	7819      	ldrb	r1, [r3, #0]
 8008d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d46:	2202      	movs	r2, #2
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f005 f972 	bl	800e032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d4e:	4b5a      	ldr	r3, [pc, #360]	; (8008eb8 <USBD_CDC_Init+0x1e4>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	2201      	movs	r2, #1
 8008d66:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d68:	4b54      	ldr	r3, [pc, #336]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008d6a:	7819      	ldrb	r1, [r3, #0]
 8008d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d70:	2202      	movs	r2, #2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f005 f95d 	bl	800e032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d78:	4b50      	ldr	r3, [pc, #320]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d90:	2201      	movs	r2, #1
 8008d92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d94:	4b4a      	ldr	r3, [pc, #296]	; (8008ec0 <USBD_CDC_Init+0x1ec>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3326      	adds	r3, #38	; 0x26
 8008daa:	2210      	movs	r2, #16
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	e035      	b.n	8008e1c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008db0:	4b41      	ldr	r3, [pc, #260]	; (8008eb8 <USBD_CDC_Init+0x1e4>)
 8008db2:	7819      	ldrb	r1, [r3, #0]
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	2202      	movs	r2, #2
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f005 f93a 	bl	800e032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dbe:	4b3e      	ldr	r3, [pc, #248]	; (8008eb8 <USBD_CDC_Init+0x1e4>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 020f 	and.w	r2, r3, #15
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	3324      	adds	r3, #36	; 0x24
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008dd8:	4b38      	ldr	r3, [pc, #224]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008dda:	7819      	ldrb	r1, [r3, #0]
 8008ddc:	2340      	movs	r3, #64	; 0x40
 8008dde:	2202      	movs	r2, #2
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f005 f926 	bl	800e032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008de6:	4b35      	ldr	r3, [pc, #212]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	f003 020f 	and.w	r2, r3, #15
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008dfe:	2201      	movs	r2, #1
 8008e00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e02:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <USBD_CDC_Init+0x1ec>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 020f 	and.w	r2, r3, #15
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	3326      	adds	r3, #38	; 0x26
 8008e18:	2210      	movs	r2, #16
 8008e1a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e1c:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <USBD_CDC_Init+0x1ec>)
 8008e1e:	7819      	ldrb	r1, [r3, #0]
 8008e20:	2308      	movs	r3, #8
 8008e22:	2203      	movs	r2, #3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f005 f904 	bl	800e032 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e2a:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <USBD_CDC_Init+0x1ec>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f003 020f 	and.w	r2, r3, #15
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	3324      	adds	r3, #36	; 0x24
 8008e40:	2201      	movs	r2, #1
 8008e42:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	33b0      	adds	r3, #176	; 0xb0
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e018      	b.n	8008eb0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7c1b      	ldrb	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e86:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008e88:	7819      	ldrb	r1, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f005 f9bb 	bl	800e210 <USBD_LL_PrepareReceive>
 8008e9a:	e008      	b.n	8008eae <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <USBD_CDC_Init+0x1e8>)
 8008e9e:	7819      	ldrb	r1, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f005 f9b1 	bl	800e210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000093 	.word	0x20000093
 8008ebc:	20000094 	.word	0x20000094
 8008ec0:	20000095 	.word	0x20000095

08008ec4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ed0:	4b3a      	ldr	r3, [pc, #232]	; (8008fbc <USBD_CDC_DeInit+0xf8>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f005 f8d1 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008edc:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <USBD_CDC_DeInit+0xf8>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 020f 	and.w	r2, r3, #15
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	3324      	adds	r3, #36	; 0x24
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ef6:	4b32      	ldr	r3, [pc, #200]	; (8008fc0 <USBD_CDC_DeInit+0xfc>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f005 f8be 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f02:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <USBD_CDC_DeInit+0xfc>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	f003 020f 	and.w	r2, r3, #15
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f1e:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <USBD_CDC_DeInit+0x100>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f005 f8aa 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f2a:	4b26      	ldr	r3, [pc, #152]	; (8008fc4 <USBD_CDC_DeInit+0x100>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f003 020f 	and.w	r2, r3, #15
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	3324      	adds	r3, #36	; 0x24
 8008f40:	2200      	movs	r2, #0
 8008f42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f44:	4b1f      	ldr	r3, [pc, #124]	; (8008fc4 <USBD_CDC_DeInit+0x100>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 020f 	and.w	r2, r3, #15
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	3326      	adds	r3, #38	; 0x26
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	32b0      	adds	r2, #176	; 0xb0
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01f      	beq.n	8008fb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	33b0      	adds	r3, #176	; 0xb0
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	32b0      	adds	r2, #176	; 0xb0
 8008f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f005 f9f8 	bl	800e388 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32b0      	adds	r2, #176	; 0xb0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000093 	.word	0x20000093
 8008fc0:	20000094 	.word	0x20000094
 8008fc4:	20000095 	.word	0x20000095

08008fc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	32b0      	adds	r2, #176	; 0xb0
 8008fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e0bf      	b.n	8009178 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009000:	2b00      	cmp	r3, #0
 8009002:	d050      	beq.n	80090a6 <USBD_CDC_Setup+0xde>
 8009004:	2b20      	cmp	r3, #32
 8009006:	f040 80af 	bne.w	8009168 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	88db      	ldrh	r3, [r3, #6]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d03a      	beq.n	8009088 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b25b      	sxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	da1b      	bge.n	8009054 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	; 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009032:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	88d2      	ldrh	r2, [r2, #6]
 8009038:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b07      	cmp	r3, #7
 8009040:	bf28      	it	cs
 8009042:	2307      	movcs	r3, #7
 8009044:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	89fa      	ldrh	r2, [r7, #14]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fdad 	bl	800abac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009052:	e090      	b.n	8009176 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	785a      	ldrb	r2, [r3, #1]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b3f      	cmp	r3, #63	; 0x3f
 8009064:	d803      	bhi.n	800906e <USBD_CDC_Setup+0xa6>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	88db      	ldrh	r3, [r3, #6]
 800906a:	b2da      	uxtb	r2, r3
 800906c:	e000      	b.n	8009070 <USBD_CDC_Setup+0xa8>
 800906e:	2240      	movs	r2, #64	; 0x40
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009076:	6939      	ldr	r1, [r7, #16]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800907e:	461a      	mov	r2, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 fdbf 	bl	800ac04 <USBD_CtlPrepareRx>
      break;
 8009086:	e076      	b.n	8009176 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	33b0      	adds	r3, #176	; 0xb0
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	7850      	ldrb	r0, [r2, #1]
 800909e:	2200      	movs	r2, #0
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	4798      	blx	r3
      break;
 80090a4:	e067      	b.n	8009176 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	2b0b      	cmp	r3, #11
 80090ac:	d851      	bhi.n	8009152 <USBD_CDC_Setup+0x18a>
 80090ae:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <USBD_CDC_Setup+0xec>)
 80090b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b4:	080090e5 	.word	0x080090e5
 80090b8:	08009161 	.word	0x08009161
 80090bc:	08009153 	.word	0x08009153
 80090c0:	08009153 	.word	0x08009153
 80090c4:	08009153 	.word	0x08009153
 80090c8:	08009153 	.word	0x08009153
 80090cc:	08009153 	.word	0x08009153
 80090d0:	08009153 	.word	0x08009153
 80090d4:	08009153 	.word	0x08009153
 80090d8:	08009153 	.word	0x08009153
 80090dc:	0800910f 	.word	0x0800910f
 80090e0:	08009139 	.word	0x08009139
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d107      	bne.n	8009100 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090f0:	f107 030a 	add.w	r3, r7, #10
 80090f4:	2202      	movs	r2, #2
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 fd57 	bl	800abac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090fe:	e032      	b.n	8009166 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 fce1 	bl	800aaca <USBD_CtlError>
            ret = USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	75fb      	strb	r3, [r7, #23]
          break;
 800910c:	e02b      	b.n	8009166 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d107      	bne.n	800912a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800911a:	f107 030d 	add.w	r3, r7, #13
 800911e:	2201      	movs	r2, #1
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fd42 	bl	800abac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009128:	e01d      	b.n	8009166 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 fccc 	bl	800aaca <USBD_CtlError>
            ret = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	75fb      	strb	r3, [r7, #23]
          break;
 8009136:	e016      	b.n	8009166 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b03      	cmp	r3, #3
 8009142:	d00f      	beq.n	8009164 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fcbf 	bl	800aaca <USBD_CtlError>
            ret = USBD_FAIL;
 800914c:	2303      	movs	r3, #3
 800914e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009150:	e008      	b.n	8009164 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fcb8 	bl	800aaca <USBD_CtlError>
          ret = USBD_FAIL;
 800915a:	2303      	movs	r3, #3
 800915c:	75fb      	strb	r3, [r7, #23]
          break;
 800915e:	e002      	b.n	8009166 <USBD_CDC_Setup+0x19e>
          break;
 8009160:	bf00      	nop
 8009162:	e008      	b.n	8009176 <USBD_CDC_Setup+0x1ae>
          break;
 8009164:	bf00      	nop
      }
      break;
 8009166:	e006      	b.n	8009176 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fcad 	bl	800aaca <USBD_CtlError>
      ret = USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	75fb      	strb	r3, [r7, #23]
      break;
 8009174:	bf00      	nop
  }

  return (uint8_t)ret;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	32b0      	adds	r2, #176	; 0xb0
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e065      	b.n	8009276 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	32b0      	adds	r2, #176	; 0xb0
 80091b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	f003 020f 	and.w	r2, r3, #15
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	3318      	adds	r3, #24
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d02f      	beq.n	8009234 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3318      	adds	r3, #24
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	f003 010f 	and.w	r1, r3, #15
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	460b      	mov	r3, r1
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	440b      	add	r3, r1
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4403      	add	r3, r0
 80091fc:	3348      	adds	r3, #72	; 0x48
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	fbb2 f1f3 	udiv	r1, r2, r3
 8009204:	fb01 f303 	mul.w	r3, r1, r3
 8009208:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800920a:	2b00      	cmp	r3, #0
 800920c:	d112      	bne.n	8009234 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	f003 020f 	and.w	r2, r3, #15
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	3318      	adds	r3, #24
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009226:	78f9      	ldrb	r1, [r7, #3]
 8009228:	2300      	movs	r3, #0
 800922a:	2200      	movs	r2, #0
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f004 ffce 	bl	800e1ce <USBD_LL_Transmit>
 8009232:	e01f      	b.n	8009274 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	33b0      	adds	r3, #176	; 0xb0
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d010      	beq.n	8009274 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	33b0      	adds	r3, #176	; 0xb0
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32b0      	adds	r2, #176	; 0xb0
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	32b0      	adds	r2, #176	; 0xb0
 80092a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e01a      	b.n	80092e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f004 ffcc 	bl	800e252 <USBD_LL_GetRxDataSize>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	33b0      	adds	r3, #176	; 0xb0
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092e0:	4611      	mov	r1, r2
 80092e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	32b0      	adds	r2, #176	; 0xb0
 8009300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009304:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800930c:	2303      	movs	r3, #3
 800930e:	e025      	b.n	800935c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	33b0      	adds	r3, #176	; 0xb0
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01a      	beq.n	800935a <USBD_CDC_EP0_RxReady+0x6c>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800932a:	2bff      	cmp	r3, #255	; 0xff
 800932c:	d015      	beq.n	800935a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	33b0      	adds	r3, #176	; 0xb0
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009346:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800934e:	b292      	uxth	r2, r2
 8009350:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	22ff      	movs	r2, #255	; 0xff
 8009356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800936c:	2182      	movs	r1, #130	; 0x82
 800936e:	4818      	ldr	r0, [pc, #96]	; (80093d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009370:	f000 fd49 	bl	8009e06 <USBD_GetEpDesc>
 8009374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009376:	2101      	movs	r1, #1
 8009378:	4815      	ldr	r0, [pc, #84]	; (80093d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800937a:	f000 fd44 	bl	8009e06 <USBD_GetEpDesc>
 800937e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009380:	2181      	movs	r1, #129	; 0x81
 8009382:	4813      	ldr	r0, [pc, #76]	; (80093d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009384:	f000 fd3f 	bl	8009e06 <USBD_GetEpDesc>
 8009388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2210      	movs	r2, #16
 8009394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d006      	beq.n	80093aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2200      	movs	r2, #0
 80093a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a4:	711a      	strb	r2, [r3, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d006      	beq.n	80093be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b8:	711a      	strb	r2, [r3, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2243      	movs	r2, #67	; 0x43
 80093c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000050 	.word	0x20000050

080093d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093dc:	2182      	movs	r1, #130	; 0x82
 80093de:	4818      	ldr	r0, [pc, #96]	; (8009440 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093e0:	f000 fd11 	bl	8009e06 <USBD_GetEpDesc>
 80093e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093e6:	2101      	movs	r1, #1
 80093e8:	4815      	ldr	r0, [pc, #84]	; (8009440 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093ea:	f000 fd0c 	bl	8009e06 <USBD_GetEpDesc>
 80093ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093f0:	2181      	movs	r1, #129	; 0x81
 80093f2:	4813      	ldr	r0, [pc, #76]	; (8009440 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093f4:	f000 fd07 	bl	8009e06 <USBD_GetEpDesc>
 80093f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2210      	movs	r2, #16
 8009404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d006      	beq.n	800941a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2200      	movs	r2, #0
 8009410:	711a      	strb	r2, [r3, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f042 0202 	orr.w	r2, r2, #2
 8009418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d006      	beq.n	800942e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	711a      	strb	r2, [r3, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f042 0202 	orr.w	r2, r2, #2
 800942c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2243      	movs	r2, #67	; 0x43
 8009432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000050 	.word	0x20000050

08009444 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800944c:	2182      	movs	r1, #130	; 0x82
 800944e:	4818      	ldr	r0, [pc, #96]	; (80094b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009450:	f000 fcd9 	bl	8009e06 <USBD_GetEpDesc>
 8009454:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009456:	2101      	movs	r1, #1
 8009458:	4815      	ldr	r0, [pc, #84]	; (80094b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800945a:	f000 fcd4 	bl	8009e06 <USBD_GetEpDesc>
 800945e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009460:	2181      	movs	r1, #129	; 0x81
 8009462:	4813      	ldr	r0, [pc, #76]	; (80094b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009464:	f000 fccf 	bl	8009e06 <USBD_GetEpDesc>
 8009468:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2210      	movs	r2, #16
 8009474:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2200      	movs	r2, #0
 8009480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009484:	711a      	strb	r2, [r3, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d006      	beq.n	800949e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009498:	711a      	strb	r2, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2243      	movs	r2, #67	; 0x43
 80094a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094a4:	4b02      	ldr	r3, [pc, #8]	; (80094b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	20000050 	.word	0x20000050

080094b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	220a      	movs	r2, #10
 80094c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	2000000c 	.word	0x2000000c

080094d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e009      	b.n	80094fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	33b0      	adds	r3, #176	; 0xb0
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	32b0      	adds	r2, #176	; 0xb0
 800951e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009522:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800952a:	2303      	movs	r3, #3
 800952c:	e008      	b.n	8009540 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	371c      	adds	r7, #28
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	32b0      	adds	r2, #176	; 0xb0
 8009560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009564:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	e004      	b.n	800957a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
	...

08009588 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	32b0      	adds	r2, #176	; 0xb0
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80095a0:	2301      	movs	r3, #1
 80095a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e025      	b.n	80095fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d11f      	bne.n	80095f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <USBD_CDC_TransmitPacket+0x7c>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4403      	add	r3, r0
 80095da:	3318      	adds	r3, #24
 80095dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <USBD_CDC_TransmitPacket+0x7c>)
 80095e0:	7819      	ldrb	r1, [r3, #0]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f004 fded 	bl	800e1ce <USBD_LL_Transmit>

    ret = USBD_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000093 	.word	0x20000093

08009608 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32b0      	adds	r2, #176	; 0xb0
 800961a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	32b0      	adds	r2, #176	; 0xb0
 800962a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009632:	2303      	movs	r3, #3
 8009634:	e018      	b.n	8009668 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7c1b      	ldrb	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <USBD_CDC_ReceivePacket+0x68>)
 8009640:	7819      	ldrb	r1, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f004 fddf 	bl	800e210 <USBD_LL_PrepareReceive>
 8009652:	e008      	b.n	8009666 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <USBD_CDC_ReceivePacket+0x68>)
 8009656:	7819      	ldrb	r1, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800965e:	2340      	movs	r3, #64	; 0x40
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f004 fdd5 	bl	800e210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000094 	.word	0x20000094

08009674 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009688:	2303      	movs	r3, #3
 800968a:	e01f      	b.n	80096cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	79fa      	ldrb	r2, [r7, #7]
 80096be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f004 fc4f 	bl	800df64 <USBD_LL_Init>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e025      	b.n	8009738 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	32ae      	adds	r2, #174	; 0xae
 80096fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00f      	beq.n	8009728 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	32ae      	adds	r2, #174	; 0xae
 8009712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	f107 020e 	add.w	r2, r7, #14
 800971c:	4610      	mov	r0, r2
 800971e:	4798      	blx	r3
 8009720:	4602      	mov	r2, r0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f004 fc57 	bl	800dffc <USBD_LL_Start>
 800974e:	4603      	mov	r3, r0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d009      	beq.n	800979c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	4611      	mov	r1, r2
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	4611      	mov	r1, r2
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	4798      	blx	r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097cc:	2303      	movs	r3, #3
 80097ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f001 f932 	bl	800aa56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009800:	461a      	mov	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800980e:	f003 031f 	and.w	r3, r3, #31
 8009812:	2b02      	cmp	r3, #2
 8009814:	d01a      	beq.n	800984c <USBD_LL_SetupStage+0x72>
 8009816:	2b02      	cmp	r3, #2
 8009818:	d822      	bhi.n	8009860 <USBD_LL_SetupStage+0x86>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <USBD_LL_SetupStage+0x4a>
 800981e:	2b01      	cmp	r3, #1
 8009820:	d00a      	beq.n	8009838 <USBD_LL_SetupStage+0x5e>
 8009822:	e01d      	b.n	8009860 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fb5f 	bl	8009ef0 <USBD_StdDevReq>
 8009832:	4603      	mov	r3, r0
 8009834:	73fb      	strb	r3, [r7, #15]
      break;
 8009836:	e020      	b.n	800987a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fbc7 	bl	8009fd4 <USBD_StdItfReq>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
      break;
 800984a:	e016      	b.n	800987a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc29 	bl	800a0ac <USBD_StdEPReq>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]
      break;
 800985e:	e00c      	b.n	800987a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009866:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800986a:	b2db      	uxtb	r3, r3
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f004 fc24 	bl	800e0bc <USBD_LL_StallEP>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
      break;
 8009878:	bf00      	nop
  }

  return ret;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	460b      	mov	r3, r1
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009896:	7afb      	ldrb	r3, [r7, #11]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d16e      	bne.n	800997a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	f040 8098 	bne.w	80099e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d913      	bls.n	80098e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	1ad2      	subs	r2, r2, r3
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	bf28      	it	cs
 80098d6:	4613      	movcs	r3, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f001 f9ae 	bl	800ac3e <USBD_CtlContinueRx>
 80098e2:	e07d      	b.n	80099e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098ea:	f003 031f 	and.w	r3, r3, #31
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d014      	beq.n	800991c <USBD_LL_DataOutStage+0x98>
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d81d      	bhi.n	8009932 <USBD_LL_DataOutStage+0xae>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <USBD_LL_DataOutStage+0x7c>
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d003      	beq.n	8009906 <USBD_LL_DataOutStage+0x82>
 80098fe:	e018      	b.n	8009932 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	75bb      	strb	r3, [r7, #22]
            break;
 8009904:	e018      	b.n	8009938 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4619      	mov	r1, r3
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fa5e 	bl	8009dd2 <USBD_CoreFindIF>
 8009916:	4603      	mov	r3, r0
 8009918:	75bb      	strb	r3, [r7, #22]
            break;
 800991a:	e00d      	b.n	8009938 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009922:	b2db      	uxtb	r3, r3
 8009924:	4619      	mov	r1, r3
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fa60 	bl	8009dec <USBD_CoreFindEP>
 800992c:	4603      	mov	r3, r0
 800992e:	75bb      	strb	r3, [r7, #22]
            break;
 8009930:	e002      	b.n	8009938 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	75bb      	strb	r3, [r7, #22]
            break;
 8009936:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009938:	7dbb      	ldrb	r3, [r7, #22]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d119      	bne.n	8009972 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b03      	cmp	r3, #3
 8009948:	d113      	bne.n	8009972 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800994a:	7dba      	ldrb	r2, [r7, #22]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	32ae      	adds	r2, #174	; 0xae
 8009950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800995a:	7dba      	ldrb	r2, [r7, #22]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009962:	7dba      	ldrb	r2, [r7, #22]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	32ae      	adds	r2, #174	; 0xae
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f001 f974 	bl	800ac60 <USBD_CtlSendStatus>
 8009978:	e032      	b.n	80099e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800997a:	7afb      	ldrb	r3, [r7, #11]
 800997c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009980:	b2db      	uxtb	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fa31 	bl	8009dec <USBD_CoreFindEP>
 800998a:	4603      	mov	r3, r0
 800998c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800998e:	7dbb      	ldrb	r3, [r7, #22]
 8009990:	2bff      	cmp	r3, #255	; 0xff
 8009992:	d025      	beq.n	80099e0 <USBD_LL_DataOutStage+0x15c>
 8009994:	7dbb      	ldrb	r3, [r7, #22]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d122      	bne.n	80099e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d117      	bne.n	80099d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099a6:	7dba      	ldrb	r2, [r7, #22]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	32ae      	adds	r2, #174	; 0xae
 80099ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00f      	beq.n	80099d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099b6:	7dba      	ldrb	r2, [r7, #22]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80099be:	7dba      	ldrb	r2, [r7, #22]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	32ae      	adds	r2, #174	; 0xae
 80099c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	7afa      	ldrb	r2, [r7, #11]
 80099cc:	4611      	mov	r1, r2
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	4798      	blx	r3
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	e000      	b.n	80099e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b086      	sub	sp, #24
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	460b      	mov	r3, r1
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d16f      	bne.n	8009ade <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3314      	adds	r3, #20
 8009a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d15a      	bne.n	8009ac4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d914      	bls.n	8009a44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f001 f8d6 	bl	800abe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a36:	2300      	movs	r3, #0
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f004 fbe7 	bl	800e210 <USBD_LL_PrepareReceive>
 8009a42:	e03f      	b.n	8009ac4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d11c      	bne.n	8009a8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d316      	bcc.n	8009a8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d20f      	bcs.n	8009a8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f001 f8b7 	bl	800abe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2100      	movs	r1, #0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f004 fbc4 	bl	800e210 <USBD_LL_PrepareReceive>
 8009a88:	e01c      	b.n	8009ac4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d10f      	bne.n	8009ab6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ab6:	2180      	movs	r1, #128	; 0x80
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f004 faff 	bl	800e0bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f001 f8e1 	bl	800ac86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d03a      	beq.n	8009b44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7ff fe42 	bl	8009758 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009adc:	e032      	b.n	8009b44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f97f 	bl	8009dec <USBD_CoreFindEP>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	2bff      	cmp	r3, #255	; 0xff
 8009af6:	d025      	beq.n	8009b44 <USBD_LL_DataInStage+0x15a>
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d122      	bne.n	8009b44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d11c      	bne.n	8009b44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b0a:	7dfa      	ldrb	r2, [r7, #23]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	32ae      	adds	r2, #174	; 0xae
 8009b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d014      	beq.n	8009b44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b1a:	7dfa      	ldrb	r2, [r7, #23]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b22:	7dfa      	ldrb	r2, [r7, #23]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	32ae      	adds	r2, #174	; 0xae
 8009b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	7afa      	ldrb	r2, [r7, #11]
 8009b30:	4611      	mov	r1, r2
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	4798      	blx	r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b3a:	7dbb      	ldrb	r3, [r7, #22]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b40:	7dbb      	ldrb	r3, [r7, #22]
 8009b42:	e000      	b.n	8009b46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d014      	beq.n	8009bb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f004 fa39 	bl	800e032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2240      	movs	r2, #64	; 0x40
 8009bcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2180      	movs	r1, #128	; 0x80
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f004 fa2b 	bl	800e032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2240      	movs	r2, #64	; 0x40
 8009be6:	621a      	str	r2, [r3, #32]

  return ret;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d106      	bne.n	8009c60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d110      	bne.n	8009ca4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	32ae      	adds	r2, #174	; 0xae
 8009cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e01c      	b.n	8009d0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d115      	bne.n	8009d08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	32ae      	adds	r2, #174	; 0xae
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	32ae      	adds	r2, #174	; 0xae
 8009cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	78fa      	ldrb	r2, [r7, #3]
 8009d02:	4611      	mov	r1, r2
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	32ae      	adds	r2, #174	; 0xae
 8009d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e01c      	b.n	8009d6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d115      	bne.n	8009d6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00b      	beq.n	8009d6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	32ae      	adds	r2, #174	; 0xae
 8009d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	4611      	mov	r1, r2
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00e      	beq.n	8009dc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6852      	ldr	r2, [r2, #4]
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	4611      	mov	r1, r2
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009df8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	885b      	ldrh	r3, [r3, #2]
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d920      	bls.n	8009e70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e36:	e013      	b.n	8009e60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e38:	f107 030a 	add.w	r3, r7, #10
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6978      	ldr	r0, [r7, #20]
 8009e40:	f000 f81b 	bl	8009e7a <USBD_GetNextDesc>
 8009e44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d108      	bne.n	8009e60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	789b      	ldrb	r3, [r3, #2]
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d008      	beq.n	8009e6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	897b      	ldrh	r3, [r7, #10]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d8e5      	bhi.n	8009e38 <USBD_GetEpDesc+0x32>
 8009e6c:	e000      	b.n	8009e70 <USBD_GetEpDesc+0x6a>
          break;
 8009e6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e70:	693b      	ldr	r3, [r7, #16]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	881a      	ldrh	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4413      	add	r3, r2
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ed2:	8a3b      	ldrh	r3, [r7, #16]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	b21a      	sxth	r2, r3
 8009ed8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ee2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	d005      	beq.n	8009f16 <USBD_StdDevReq+0x26>
 8009f0a:	2b40      	cmp	r3, #64	; 0x40
 8009f0c:	d857      	bhi.n	8009fbe <USBD_StdDevReq+0xce>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00f      	beq.n	8009f32 <USBD_StdDevReq+0x42>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d153      	bne.n	8009fbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	32ae      	adds	r2, #174	; 0xae
 8009f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f30:	e04a      	b.n	8009fc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d83b      	bhi.n	8009fb2 <USBD_StdDevReq+0xc2>
 8009f3a:	a201      	add	r2, pc, #4	; (adr r2, 8009f40 <USBD_StdDevReq+0x50>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f95 	.word	0x08009f95
 8009f44:	08009fa9 	.word	0x08009fa9
 8009f48:	08009fb3 	.word	0x08009fb3
 8009f4c:	08009f9f 	.word	0x08009f9f
 8009f50:	08009fb3 	.word	0x08009fb3
 8009f54:	08009f73 	.word	0x08009f73
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009fb3 	.word	0x08009fb3
 8009f60:	08009f8b 	.word	0x08009f8b
 8009f64:	08009f7d 	.word	0x08009f7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fa3c 	bl	800a3e8 <USBD_GetDescriptor>
          break;
 8009f70:	e024      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fbcb 	bl	800a710 <USBD_SetAddress>
          break;
 8009f7a:	e01f      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fc0a 	bl	800a798 <USBD_SetConfig>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
          break;
 8009f88:	e018      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fcad 	bl	800a8ec <USBD_GetConfig>
          break;
 8009f92:	e013      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fcde 	bl	800a958 <USBD_GetStatus>
          break;
 8009f9c:	e00e      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fd0d 	bl	800a9c0 <USBD_SetFeature>
          break;
 8009fa6:	e009      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fd31 	bl	800aa12 <USBD_ClrFeature>
          break;
 8009fb0:	e004      	b.n	8009fbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fd88 	bl	800aaca <USBD_CtlError>
          break;
 8009fba:	bf00      	nop
      }
      break;
 8009fbc:	e004      	b.n	8009fc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fd82 	bl	800aaca <USBD_CtlError>
      break;
 8009fc6:	bf00      	nop
  }

  return ret;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop

08009fd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fea:	2b40      	cmp	r3, #64	; 0x40
 8009fec:	d005      	beq.n	8009ffa <USBD_StdItfReq+0x26>
 8009fee:	2b40      	cmp	r3, #64	; 0x40
 8009ff0:	d852      	bhi.n	800a098 <USBD_StdItfReq+0xc4>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <USBD_StdItfReq+0x26>
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d14e      	bne.n	800a098 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	3b01      	subs	r3, #1
 800a004:	2b02      	cmp	r3, #2
 800a006:	d840      	bhi.n	800a08a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	889b      	ldrh	r3, [r3, #4]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d836      	bhi.n	800a080 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	889b      	ldrh	r3, [r3, #4]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff fed9 	bl	8009dd2 <USBD_CoreFindIF>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2bff      	cmp	r3, #255	; 0xff
 800a028:	d01d      	beq.n	800a066 <USBD_StdItfReq+0x92>
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11a      	bne.n	800a066 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a030:	7bba      	ldrb	r2, [r7, #14]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	32ae      	adds	r2, #174	; 0xae
 800a036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00f      	beq.n	800a060 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a040:	7bba      	ldrb	r2, [r7, #14]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a048:	7bba      	ldrb	r2, [r7, #14]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	32ae      	adds	r2, #174	; 0xae
 800a04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a05e:	e004      	b.n	800a06a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a060:	2303      	movs	r3, #3
 800a062:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a064:	e001      	b.n	800a06a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a066:	2303      	movs	r3, #3
 800a068:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d110      	bne.n	800a094 <USBD_StdItfReq+0xc0>
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10d      	bne.n	800a094 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fdf1 	bl	800ac60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a07e:	e009      	b.n	800a094 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fd21 	bl	800aaca <USBD_CtlError>
          break;
 800a088:	e004      	b.n	800a094 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fd1c 	bl	800aaca <USBD_CtlError>
          break;
 800a092:	e000      	b.n	800a096 <USBD_StdItfReq+0xc2>
          break;
 800a094:	bf00      	nop
      }
      break;
 800a096:	e004      	b.n	800a0a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fd15 	bl	800aaca <USBD_CtlError>
      break;
 800a0a0:	bf00      	nop
  }

  return ret;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	889b      	ldrh	r3, [r3, #4]
 800a0be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d007      	beq.n	800a0dc <USBD_StdEPReq+0x30>
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	f200 817f 	bhi.w	800a3d0 <USBD_StdEPReq+0x324>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d02a      	beq.n	800a12c <USBD_StdEPReq+0x80>
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	f040 817a 	bne.w	800a3d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff fe83 	bl	8009dec <USBD_CoreFindEP>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ea:	7b7b      	ldrb	r3, [r7, #13]
 800a0ec:	2bff      	cmp	r3, #255	; 0xff
 800a0ee:	f000 8174 	beq.w	800a3da <USBD_StdEPReq+0x32e>
 800a0f2:	7b7b      	ldrb	r3, [r7, #13]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f040 8170 	bne.w	800a3da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0fa:	7b7a      	ldrb	r2, [r7, #13]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a102:	7b7a      	ldrb	r2, [r7, #13]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	32ae      	adds	r2, #174	; 0xae
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 8163 	beq.w	800a3da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a114:	7b7a      	ldrb	r2, [r7, #13]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	32ae      	adds	r2, #174	; 0xae
 800a11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a12a:	e156      	b.n	800a3da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	785b      	ldrb	r3, [r3, #1]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d008      	beq.n	800a146 <USBD_StdEPReq+0x9a>
 800a134:	2b03      	cmp	r3, #3
 800a136:	f300 8145 	bgt.w	800a3c4 <USBD_StdEPReq+0x318>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 809b 	beq.w	800a276 <USBD_StdEPReq+0x1ca>
 800a140:	2b01      	cmp	r3, #1
 800a142:	d03c      	beq.n	800a1be <USBD_StdEPReq+0x112>
 800a144:	e13e      	b.n	800a3c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d002      	beq.n	800a158 <USBD_StdEPReq+0xac>
 800a152:	2b03      	cmp	r3, #3
 800a154:	d016      	beq.n	800a184 <USBD_StdEPReq+0xd8>
 800a156:	e02c      	b.n	800a1b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a158:	7bbb      	ldrb	r3, [r7, #14]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00d      	beq.n	800a17a <USBD_StdEPReq+0xce>
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	2b80      	cmp	r3, #128	; 0x80
 800a162:	d00a      	beq.n	800a17a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f003 ffa7 	bl	800e0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a16e:	2180      	movs	r1, #128	; 0x80
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f003 ffa3 	bl	800e0bc <USBD_LL_StallEP>
 800a176:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a178:	e020      	b.n	800a1bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fca4 	bl	800aaca <USBD_CtlError>
              break;
 800a182:	e01b      	b.n	800a1bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	885b      	ldrh	r3, [r3, #2]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10e      	bne.n	800a1aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00b      	beq.n	800a1aa <USBD_StdEPReq+0xfe>
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	2b80      	cmp	r3, #128	; 0x80
 800a196:	d008      	beq.n	800a1aa <USBD_StdEPReq+0xfe>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	88db      	ldrh	r3, [r3, #6]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d104      	bne.n	800a1aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f003 ff89 	bl	800e0bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd58 	bl	800ac60 <USBD_CtlSendStatus>

              break;
 800a1b0:	e004      	b.n	800a1bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fc88 	bl	800aaca <USBD_CtlError>
              break;
 800a1ba:	bf00      	nop
          }
          break;
 800a1bc:	e107      	b.n	800a3ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d002      	beq.n	800a1d0 <USBD_StdEPReq+0x124>
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d016      	beq.n	800a1fc <USBD_StdEPReq+0x150>
 800a1ce:	e04b      	b.n	800a268 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00d      	beq.n	800a1f2 <USBD_StdEPReq+0x146>
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b80      	cmp	r3, #128	; 0x80
 800a1da:	d00a      	beq.n	800a1f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f003 ff6b 	bl	800e0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1e6:	2180      	movs	r1, #128	; 0x80
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f003 ff67 	bl	800e0bc <USBD_LL_StallEP>
 800a1ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1f0:	e040      	b.n	800a274 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fc68 	bl	800aaca <USBD_CtlError>
              break;
 800a1fa:	e03b      	b.n	800a274 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	885b      	ldrh	r3, [r3, #2]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d136      	bne.n	800a272 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f003 ff71 	bl	800e0fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fd21 	bl	800ac60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff fde2 	bl	8009dec <USBD_CoreFindEP>
 800a228:	4603      	mov	r3, r0
 800a22a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a22c:	7b7b      	ldrb	r3, [r7, #13]
 800a22e:	2bff      	cmp	r3, #255	; 0xff
 800a230:	d01f      	beq.n	800a272 <USBD_StdEPReq+0x1c6>
 800a232:	7b7b      	ldrb	r3, [r7, #13]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d11c      	bne.n	800a272 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a238:	7b7a      	ldrb	r2, [r7, #13]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a240:	7b7a      	ldrb	r2, [r7, #13]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	32ae      	adds	r2, #174	; 0xae
 800a246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d010      	beq.n	800a272 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a250:	7b7a      	ldrb	r2, [r7, #13]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	32ae      	adds	r2, #174	; 0xae
 800a256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	4798      	blx	r3
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a266:	e004      	b.n	800a272 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fc2d 	bl	800aaca <USBD_CtlError>
              break;
 800a270:	e000      	b.n	800a274 <USBD_StdEPReq+0x1c8>
              break;
 800a272:	bf00      	nop
          }
          break;
 800a274:	e0ab      	b.n	800a3ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d002      	beq.n	800a288 <USBD_StdEPReq+0x1dc>
 800a282:	2b03      	cmp	r3, #3
 800a284:	d032      	beq.n	800a2ec <USBD_StdEPReq+0x240>
 800a286:	e097      	b.n	800a3b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <USBD_StdEPReq+0x1f2>
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	2b80      	cmp	r3, #128	; 0x80
 800a292:	d004      	beq.n	800a29e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fc17 	bl	800aaca <USBD_CtlError>
                break;
 800a29c:	e091      	b.n	800a3c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a29e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	da0b      	bge.n	800a2be <USBD_StdEPReq+0x212>
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	e00b      	b.n	800a2d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fc61 	bl	800abac <USBD_CtlSendData>
              break;
 800a2ea:	e06a      	b.n	800a3c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	da11      	bge.n	800a318 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	f003 020f 	and.w	r2, r3, #15
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	440b      	add	r3, r1
 800a306:	3324      	adds	r3, #36	; 0x24
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d117      	bne.n	800a33e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fbda 	bl	800aaca <USBD_CtlError>
                  break;
 800a316:	e054      	b.n	800a3c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	f003 020f 	and.w	r2, r3, #15
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	440b      	add	r3, r1
 800a32a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fbc7 	bl	800aaca <USBD_CtlError>
                  break;
 800a33c:	e041      	b.n	800a3c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a33e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da0b      	bge.n	800a35e <USBD_StdEPReq+0x2b2>
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	3310      	adds	r3, #16
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	3304      	adds	r3, #4
 800a35c:	e00b      	b.n	800a376 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <USBD_StdEPReq+0x2d8>
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d103      	bne.n	800a38c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	e00e      	b.n	800a3aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f003 fed1 	bl	800e138 <USBD_LL_IsStallEP>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d003      	beq.n	800a3a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	e002      	b.n	800a3aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fbfb 	bl	800abac <USBD_CtlSendData>
              break;
 800a3b6:	e004      	b.n	800a3c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fb85 	bl	800aaca <USBD_CtlError>
              break;
 800a3c0:	bf00      	nop
          }
          break;
 800a3c2:	e004      	b.n	800a3ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb7f 	bl	800aaca <USBD_CtlError>
          break;
 800a3cc:	bf00      	nop
      }
      break;
 800a3ce:	e005      	b.n	800a3dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fb79 	bl	800aaca <USBD_CtlError>
      break;
 800a3d8:	e000      	b.n	800a3dc <USBD_StdEPReq+0x330>
      break;
 800a3da:	bf00      	nop
  }

  return ret;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	885b      	ldrh	r3, [r3, #2]
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	2b0e      	cmp	r3, #14
 800a40a:	f200 8152 	bhi.w	800a6b2 <USBD_GetDescriptor+0x2ca>
 800a40e:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <USBD_GetDescriptor+0x2c>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a485 	.word	0x0800a485
 800a418:	0800a49d 	.word	0x0800a49d
 800a41c:	0800a4dd 	.word	0x0800a4dd
 800a420:	0800a6b3 	.word	0x0800a6b3
 800a424:	0800a6b3 	.word	0x0800a6b3
 800a428:	0800a653 	.word	0x0800a653
 800a42c:	0800a67f 	.word	0x0800a67f
 800a430:	0800a6b3 	.word	0x0800a6b3
 800a434:	0800a6b3 	.word	0x0800a6b3
 800a438:	0800a6b3 	.word	0x0800a6b3
 800a43c:	0800a6b3 	.word	0x0800a6b3
 800a440:	0800a6b3 	.word	0x0800a6b3
 800a444:	0800a6b3 	.word	0x0800a6b3
 800a448:	0800a6b3 	.word	0x0800a6b3
 800a44c:	0800a451 	.word	0x0800a451
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	7c12      	ldrb	r2, [r2, #16]
 800a468:	f107 0108 	add.w	r1, r7, #8
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a472:	e126      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fb27 	bl	800aaca <USBD_CtlError>
        err++;
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	3301      	adds	r3, #1
 800a480:	72fb      	strb	r3, [r7, #11]
      break;
 800a482:	e11e      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	7c12      	ldrb	r2, [r2, #16]
 800a490:	f107 0108 	add.w	r1, r7, #8
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
 800a498:	60f8      	str	r0, [r7, #12]
      break;
 800a49a:	e112      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7c1b      	ldrb	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	f107 0208 	add.w	r2, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4be:	e100      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	f107 0208 	add.w	r2, r7, #8
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	701a      	strb	r2, [r3, #0]
      break;
 800a4da:	e0f2      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	885b      	ldrh	r3, [r3, #2]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	f200 80ac 	bhi.w	800a640 <USBD_GetDescriptor+0x258>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBD_GetDescriptor+0x108>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a53d 	.word	0x0800a53d
 800a4f8:	0800a571 	.word	0x0800a571
 800a4fc:	0800a5a5 	.word	0x0800a5a5
 800a500:	0800a5d9 	.word	0x0800a5d9
 800a504:	0800a60d 	.word	0x0800a60d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	7c12      	ldrb	r2, [r2, #16]
 800a520:	f107 0108 	add.w	r1, r7, #8
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
 800a528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a52a:	e091      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 facb 	bl	800aaca <USBD_CtlError>
            err++;
 800a534:	7afb      	ldrb	r3, [r7, #11]
 800a536:	3301      	adds	r3, #1
 800a538:	72fb      	strb	r3, [r7, #11]
          break;
 800a53a:	e089      	b.n	800a650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	7c12      	ldrb	r2, [r2, #16]
 800a554:	f107 0108 	add.w	r1, r7, #8
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
 800a55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55e:	e077      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fab1 	bl	800aaca <USBD_CtlError>
            err++;
 800a568:	7afb      	ldrb	r3, [r7, #11]
 800a56a:	3301      	adds	r3, #1
 800a56c:	72fb      	strb	r3, [r7, #11]
          break;
 800a56e:	e06f      	b.n	800a650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	7c12      	ldrb	r2, [r2, #16]
 800a588:	f107 0108 	add.w	r1, r7, #8
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
 800a590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a592:	e05d      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fa97 	bl	800aaca <USBD_CtlError>
            err++;
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5a2:	e055      	b.n	800a650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c6:	e043      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fa7d 	bl	800aaca <USBD_CtlError>
            err++;
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d6:	e03b      	b.n	800a650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e029      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa63 	bl	800aaca <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e021      	b.n	800a650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	7c12      	ldrb	r2, [r2, #16]
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a62e:	e00f      	b.n	800a650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa49 	bl	800aaca <USBD_CtlError>
            err++;
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	3301      	adds	r3, #1
 800a63c:	72fb      	strb	r3, [r7, #11]
          break;
 800a63e:	e007      	b.n	800a650 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa41 	bl	800aaca <USBD_CtlError>
          err++;
 800a648:	7afb      	ldrb	r3, [r7, #11]
 800a64a:	3301      	adds	r3, #1
 800a64c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a64e:	bf00      	nop
      }
      break;
 800a650:	e037      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7c1b      	ldrb	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d109      	bne.n	800a66e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a662:	f107 0208 	add.w	r2, r7, #8
 800a666:	4610      	mov	r0, r2
 800a668:	4798      	blx	r3
 800a66a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a66c:	e029      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa2a 	bl	800aaca <USBD_CtlError>
        err++;
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	3301      	adds	r3, #1
 800a67a:	72fb      	strb	r3, [r7, #11]
      break;
 800a67c:	e021      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	7c1b      	ldrb	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10d      	bne.n	800a6a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	f107 0208 	add.w	r2, r7, #8
 800a692:	4610      	mov	r0, r2
 800a694:	4798      	blx	r3
 800a696:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	2207      	movs	r2, #7
 800a69e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6a0:	e00f      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa10 	bl	800aaca <USBD_CtlError>
        err++;
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b0:	e007      	b.n	800a6c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fa08 	bl	800aaca <USBD_CtlError>
      err++;
 800a6ba:	7afb      	ldrb	r3, [r7, #11]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	72fb      	strb	r3, [r7, #11]
      break;
 800a6c0:	bf00      	nop
  }

  if (err != 0U)
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11e      	bne.n	800a706 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d016      	beq.n	800a6fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a6d0:	893b      	ldrh	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00e      	beq.n	800a6f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	88da      	ldrh	r2, [r3, #6]
 800a6da:	893b      	ldrh	r3, [r7, #8]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	bf28      	it	cs
 800a6e0:	4613      	movcs	r3, r2
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6e6:	893b      	ldrh	r3, [r7, #8]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fa5d 	bl	800abac <USBD_CtlSendData>
 800a6f2:	e009      	b.n	800a708 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f9e7 	bl	800aaca <USBD_CtlError>
 800a6fc:	e004      	b.n	800a708 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 faae 	bl	800ac60 <USBD_CtlSendStatus>
 800a704:	e000      	b.n	800a708 <USBD_GetDescriptor+0x320>
    return;
 800a706:	bf00      	nop
  }
}
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop

0800a710 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	889b      	ldrh	r3, [r3, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d131      	bne.n	800a786 <USBD_SetAddress+0x76>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	88db      	ldrh	r3, [r3, #6]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d12d      	bne.n	800a786 <USBD_SetAddress+0x76>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	2b7f      	cmp	r3, #127	; 0x7f
 800a730:	d829      	bhi.n	800a786 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b03      	cmp	r3, #3
 800a748:	d104      	bne.n	800a754 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f9bc 	bl	800aaca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a752:	e01d      	b.n	800a790 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7bfa      	ldrb	r2, [r7, #15]
 800a758:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f003 fd15 	bl	800e190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fa7a 	bl	800ac60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	e009      	b.n	800a790 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a784:	e004      	b.n	800a790 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f99e 	bl	800aaca <USBD_CtlError>
  }
}
 800a78e:	bf00      	nop
 800a790:	bf00      	nop
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	4b4e      	ldr	r3, [pc, #312]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a7ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7b0:	4b4d      	ldr	r3, [pc, #308]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d905      	bls.n	800a7c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f985 	bl	800aaca <USBD_CtlError>
    return USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e08c      	b.n	800a8de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d002      	beq.n	800a7d6 <USBD_SetConfig+0x3e>
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d029      	beq.n	800a828 <USBD_SetConfig+0x90>
 800a7d4:	e075      	b.n	800a8c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7d6:	4b44      	ldr	r3, [pc, #272]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d020      	beq.n	800a820 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7de:	4b42      	ldr	r3, [pc, #264]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7e8:	4b3f      	ldr	r3, [pc, #252]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7fe ffbd 	bl	800976e <USBD_SetClassConfig>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d008      	beq.n	800a810 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f962 	bl	800aaca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2202      	movs	r2, #2
 800a80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a80e:	e065      	b.n	800a8dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fa25 	bl	800ac60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2203      	movs	r2, #3
 800a81a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a81e:	e05d      	b.n	800a8dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fa1d 	bl	800ac60 <USBD_CtlSendStatus>
      break;
 800a826:	e059      	b.n	800a8dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a828:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d112      	bne.n	800a856 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2202      	movs	r2, #2
 800a834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a838:	4b2b      	ldr	r3, [pc, #172]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a842:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7fe ffac 	bl	80097a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa06 	bl	800ac60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a854:	e042      	b.n	800a8dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a856:	4b24      	ldr	r3, [pc, #144]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d02a      	beq.n	800a8ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7fe ff9a 	bl	80097a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a872:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a87c:	4b1a      	ldr	r3, [pc, #104]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7fe ff73 	bl	800976e <USBD_SetClassConfig>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f918 	bl	800aaca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fe ff7f 	bl	80097a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8b0:	e014      	b.n	800a8dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f9d4 	bl	800ac60 <USBD_CtlSendStatus>
      break;
 800a8b8:	e010      	b.n	800a8dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9d0 	bl	800ac60 <USBD_CtlSendStatus>
      break;
 800a8c0:	e00c      	b.n	800a8dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f900 	bl	800aaca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <USBD_SetConfig+0x150>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7fe ff68 	bl	80097a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8da:	bf00      	nop
  }

  return ret;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200003b8 	.word	0x200003b8

0800a8ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	88db      	ldrh	r3, [r3, #6]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d004      	beq.n	800a908 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8e2 	bl	800aaca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a906:	e023      	b.n	800a950 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b02      	cmp	r3, #2
 800a912:	dc02      	bgt.n	800a91a <USBD_GetConfig+0x2e>
 800a914:	2b00      	cmp	r3, #0
 800a916:	dc03      	bgt.n	800a920 <USBD_GetConfig+0x34>
 800a918:	e015      	b.n	800a946 <USBD_GetConfig+0x5a>
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d00b      	beq.n	800a936 <USBD_GetConfig+0x4a>
 800a91e:	e012      	b.n	800a946 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	3308      	adds	r3, #8
 800a92a:	2201      	movs	r2, #1
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f93c 	bl	800abac <USBD_CtlSendData>
        break;
 800a934:	e00c      	b.n	800a950 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3304      	adds	r3, #4
 800a93a:	2201      	movs	r2, #1
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f934 	bl	800abac <USBD_CtlSendData>
        break;
 800a944:	e004      	b.n	800a950 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f8be 	bl	800aaca <USBD_CtlError>
        break;
 800a94e:	bf00      	nop
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d81e      	bhi.n	800a9ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	88db      	ldrh	r3, [r3, #6]
 800a974:	2b02      	cmp	r3, #2
 800a976:	d004      	beq.n	800a982 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f8a5 	bl	800aaca <USBD_CtlError>
        break;
 800a980:	e01a      	b.n	800a9b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f043 0202 	orr.w	r2, r3, #2
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	330c      	adds	r3, #12
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f900 	bl	800abac <USBD_CtlSendData>
      break;
 800a9ac:	e004      	b.n	800a9b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f88a 	bl	800aaca <USBD_CtlError>
      break;
 800a9b6:	bf00      	nop
  }
}
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	885b      	ldrh	r3, [r3, #2]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d107      	bne.n	800a9e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f940 	bl	800ac60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9e0:	e013      	b.n	800aa0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	885b      	ldrh	r3, [r3, #2]
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d10b      	bne.n	800aa02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	889b      	ldrh	r3, [r3, #4]
 800a9ee:	0a1b      	lsrs	r3, r3, #8
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f930 	bl	800ac60 <USBD_CtlSendStatus>
}
 800aa00:	e003      	b.n	800aa0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f860 	bl	800aaca <USBD_CtlError>
}
 800aa0a:	bf00      	nop
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d80b      	bhi.n	800aa42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d10c      	bne.n	800aa4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f910 	bl	800ac60 <USBD_CtlSendStatus>
      }
      break;
 800aa40:	e004      	b.n	800aa4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f840 	bl	800aaca <USBD_CtlError>
      break;
 800aa4a:	e000      	b.n	800aa4e <USBD_ClrFeature+0x3c>
      break;
 800aa4c:	bf00      	nop
  }
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	781a      	ldrb	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	781a      	ldrb	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fa17 	bl	8009eb4 <SWAPBYTE>
 800aa86:	4603      	mov	r3, r0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3301      	adds	r3, #1
 800aa92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff fa0a 	bl	8009eb4 <SWAPBYTE>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7ff f9fd 	bl	8009eb4 <SWAPBYTE>
 800aaba:	4603      	mov	r3, r0
 800aabc:	461a      	mov	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	80da      	strh	r2, [r3, #6]
}
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad4:	2180      	movs	r1, #128	; 0x80
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f003 faf0 	bl	800e0bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aadc:	2100      	movs	r1, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f003 faec 	bl	800e0bc <USBD_LL_StallEP>
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d036      	beq.n	800ab70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f000 f836 	bl	800ab78 <USBD_GetLen>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	3301      	adds	r3, #1
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	4413      	add	r3, r2
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7812      	ldrb	r2, [r2, #0]
 800ab24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	2203      	movs	r2, #3
 800ab34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab3c:	e013      	b.n	800ab66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	4413      	add	r3, r2
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	7812      	ldrb	r2, [r2, #0]
 800ab48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	613b      	str	r3, [r7, #16]
    idx++;
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
 800ab52:	3301      	adds	r3, #1
 800ab54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	3301      	adds	r3, #1
 800ab64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e7      	bne.n	800ab3e <USBD_GetString+0x52>
 800ab6e:	e000      	b.n	800ab72 <USBD_GetString+0x86>
    return;
 800ab70:	bf00      	nop
  }
}
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab88:	e005      	b.n	800ab96 <USBD_GetLen+0x1e>
  {
    len++;
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3301      	adds	r3, #1
 800ab94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1f5      	bne.n	800ab8a <USBD_GetLen+0x12>
  }

  return len;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2202      	movs	r2, #2
 800abbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	2100      	movs	r1, #0
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f003 fafb 	bl	800e1ce <USBD_LL_Transmit>

  return USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	2100      	movs	r1, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f003 faea 	bl	800e1ce <USBD_LL_Transmit>

  return USBD_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2203      	movs	r2, #3
 800ac14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f003 faee 	bl	800e210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	2100      	movs	r1, #0
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f003 fadd 	bl	800e210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac70:	2300      	movs	r3, #0
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f003 faa9 	bl	800e1ce <USBD_LL_Transmit>

  return USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2205      	movs	r2, #5
 800ac92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac96:	2300      	movs	r3, #0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f003 fab7 	bl	800e210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800acb0:	bf00      	nop
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
	...

0800acbc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acc2:	f3ef 8305 	mrs	r3, IPSR
 800acc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800acc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10f      	bne.n	800acee <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acce:	f3ef 8310 	mrs	r3, PRIMASK
 800acd2:	607b      	str	r3, [r7, #4]
  return(result);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acda:	f3ef 8311 	mrs	r3, BASEPRI
 800acde:	603b      	str	r3, [r7, #0]
  return(result);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <osKernelInitialize+0x3a>
 800ace6:	4b0e      	ldr	r3, [pc, #56]	; (800ad20 <osKernelInitialize+0x64>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b02      	cmp	r3, #2
 800acec:	d103      	bne.n	800acf6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800acee:	f06f 0305 	mvn.w	r3, #5
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e00c      	b.n	800ad10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acf6:	4b0a      	ldr	r3, [pc, #40]	; (800ad20 <osKernelInitialize+0x64>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d105      	bne.n	800ad0a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acfe:	4b08      	ldr	r3, [pc, #32]	; (800ad20 <osKernelInitialize+0x64>)
 800ad00:	2201      	movs	r2, #1
 800ad02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	e002      	b.n	800ad10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ad0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad10:	68fb      	ldr	r3, [r7, #12]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	200003bc 	.word	0x200003bc

0800ad24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad2a:	f3ef 8305 	mrs	r3, IPSR
 800ad2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10f      	bne.n	800ad56 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad36:	f3ef 8310 	mrs	r3, PRIMASK
 800ad3a:	607b      	str	r3, [r7, #4]
  return(result);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d105      	bne.n	800ad4e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad42:	f3ef 8311 	mrs	r3, BASEPRI
 800ad46:	603b      	str	r3, [r7, #0]
  return(result);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d007      	beq.n	800ad5e <osKernelStart+0x3a>
 800ad4e:	4b0f      	ldr	r3, [pc, #60]	; (800ad8c <osKernelStart+0x68>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d103      	bne.n	800ad5e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ad56:	f06f 0305 	mvn.w	r3, #5
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e010      	b.n	800ad80 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad5e:	4b0b      	ldr	r3, [pc, #44]	; (800ad8c <osKernelStart+0x68>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d109      	bne.n	800ad7a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad66:	f7ff ffa1 	bl	800acac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad6a:	4b08      	ldr	r3, [pc, #32]	; (800ad8c <osKernelStart+0x68>)
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad70:	f001 f8b4 	bl	800bedc <vTaskStartScheduler>
      stat = osOK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e002      	b.n	800ad80 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ad7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ad80:	68fb      	ldr	r3, [r7, #12]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200003bc 	.word	0x200003bc

0800ad90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b090      	sub	sp, #64	; 0x40
 800ad94:	af04      	add	r7, sp, #16
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ada0:	f3ef 8305 	mrs	r3, IPSR
 800ada4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ada6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f040 808f 	bne.w	800aecc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adae:	f3ef 8310 	mrs	r3, PRIMASK
 800adb2:	61bb      	str	r3, [r7, #24]
  return(result);
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800adba:	f3ef 8311 	mrs	r3, BASEPRI
 800adbe:	617b      	str	r3, [r7, #20]
  return(result);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <osThreadNew+0x3e>
 800adc6:	4b44      	ldr	r3, [pc, #272]	; (800aed8 <osThreadNew+0x148>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d07e      	beq.n	800aecc <osThreadNew+0x13c>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d07b      	beq.n	800aecc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800add4:	2380      	movs	r3, #128	; 0x80
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800add8:	2318      	movs	r3, #24
 800adda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295
 800ade4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d045      	beq.n	800ae78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <osThreadNew+0x6a>
        name = attr->name;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d008      	beq.n	800ae20 <osThreadNew+0x90>
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	2b38      	cmp	r3, #56	; 0x38
 800ae12:	d805      	bhi.n	800ae20 <osThreadNew+0x90>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <osThreadNew+0x94>
        return (NULL);
 800ae20:	2300      	movs	r3, #0
 800ae22:	e054      	b.n	800aece <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	089b      	lsrs	r3, r3, #2
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00e      	beq.n	800ae5a <osThreadNew+0xca>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b5b      	cmp	r3, #91	; 0x5b
 800ae42:	d90a      	bls.n	800ae5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <osThreadNew+0xca>
        mem = 1;
 800ae54:	2301      	movs	r3, #1
 800ae56:	623b      	str	r3, [r7, #32]
 800ae58:	e010      	b.n	800ae7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10c      	bne.n	800ae7c <osThreadNew+0xec>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d108      	bne.n	800ae7c <osThreadNew+0xec>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d104      	bne.n	800ae7c <osThreadNew+0xec>
          mem = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	623b      	str	r3, [r7, #32]
 800ae76:	e001      	b.n	800ae7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d110      	bne.n	800aea4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae8a:	9202      	str	r2, [sp, #8]
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 fe3f 	bl	800bb1c <xTaskCreateStatic>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	e013      	b.n	800aecc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d110      	bne.n	800aecc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	f107 0310 	add.w	r3, r7, #16
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 fe90 	bl	800bbe2 <xTaskCreate>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d001      	beq.n	800aecc <osThreadNew+0x13c>
          hTask = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aecc:	693b      	ldr	r3, [r7, #16]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3730      	adds	r7, #48	; 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200003bc 	.word	0x200003bc

0800aedc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aee4:	f3ef 8305 	mrs	r3, IPSR
 800aee8:	613b      	str	r3, [r7, #16]
  return(result);
 800aeea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d10f      	bne.n	800af10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef0:	f3ef 8310 	mrs	r3, PRIMASK
 800aef4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d105      	bne.n	800af08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aefc:	f3ef 8311 	mrs	r3, BASEPRI
 800af00:	60bb      	str	r3, [r7, #8]
  return(result);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <osDelay+0x3c>
 800af08:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <osDelay+0x58>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d103      	bne.n	800af18 <osDelay+0x3c>
    stat = osErrorISR;
 800af10:	f06f 0305 	mvn.w	r3, #5
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	e007      	b.n	800af28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <osDelay+0x4c>
      vTaskDelay(ticks);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 ffa4 	bl	800be70 <vTaskDelay>
    }
  }

  return (stat);
 800af28:	697b      	ldr	r3, [r7, #20]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200003bc 	.word	0x200003bc

0800af38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4a07      	ldr	r2, [pc, #28]	; (800af64 <vApplicationGetIdleTaskMemory+0x2c>)
 800af48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	4a06      	ldr	r2, [pc, #24]	; (800af68 <vApplicationGetIdleTaskMemory+0x30>)
 800af4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2280      	movs	r2, #128	; 0x80
 800af54:	601a      	str	r2, [r3, #0]
}
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	200003c0 	.word	0x200003c0
 800af68:	2000041c 	.word	0x2000041c

0800af6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4a07      	ldr	r2, [pc, #28]	; (800af98 <vApplicationGetTimerTaskMemory+0x2c>)
 800af7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4a06      	ldr	r2, [pc, #24]	; (800af9c <vApplicationGetTimerTaskMemory+0x30>)
 800af82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af8a:	601a      	str	r2, [r3, #0]
}
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	2000061c 	.word	0x2000061c
 800af9c:	20000678 	.word	0x20000678

0800afa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f103 0208 	add.w	r2, r3, #8
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f04f 32ff 	mov.w	r2, #4294967295
 800afb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f103 0208 	add.w	r2, r3, #8
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f103 0208 	add.w	r2, r3, #8
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800affa:	b480      	push	{r7}
 800affc:	b085      	sub	sp, #20
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	601a      	str	r2, [r3, #0]
}
 800b036:	bf00      	nop
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b058:	d103      	bne.n	800b062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e00c      	b.n	800b07c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3308      	adds	r3, #8
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e002      	b.n	800b070 <vListInsert+0x2e>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d2f6      	bcs.n	800b06a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	601a      	str	r2, [r3, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	6892      	ldr	r2, [r2, #8]
 800b0ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6852      	ldr	r2, [r2, #4]
 800b0d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d103      	bne.n	800b0e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	1e5a      	subs	r2, r3, #1
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10c      	bne.n	800b136 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	b672      	cpsid	i
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	b662      	cpsie	i
 800b130:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b136:	f002 f879 	bl	800d22c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b146:	fb01 f303 	mul.w	r3, r1, r3
 800b14a:	441a      	add	r2, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b166:	3b01      	subs	r3, #1
 800b168:	68f9      	ldr	r1, [r7, #12]
 800b16a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b16c:	fb01 f303 	mul.w	r3, r1, r3
 800b170:	441a      	add	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	22ff      	movs	r2, #255	; 0xff
 800b17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	22ff      	movs	r2, #255	; 0xff
 800b182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d114      	bne.n	800b1b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01a      	beq.n	800b1ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3310      	adds	r3, #16
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 f937 	bl	800c40c <xTaskRemoveFromEventList>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d012      	beq.n	800b1ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1a4:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <xQueueGenericReset+0xd0>)
 800b1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	e009      	b.n	800b1ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3310      	adds	r3, #16
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fef0 	bl	800afa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3324      	adds	r3, #36	; 0x24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff feeb 	bl	800afa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b1ca:	f002 f863 	bl	800d294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b1ce:	2301      	movs	r3, #1
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08e      	sub	sp, #56	; 0x38
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	b672      	cpsid	i
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	b662      	cpsie	i
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b206:	bf00      	nop
 800b208:	e7fe      	b.n	800b208 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10c      	bne.n	800b22a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	b672      	cpsid	i
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	b662      	cpsie	i
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <xQueueGenericCreateStatic+0x5a>
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <xQueueGenericCreateStatic+0x5e>
 800b236:	2301      	movs	r3, #1
 800b238:	e000      	b.n	800b23c <xQueueGenericCreateStatic+0x60>
 800b23a:	2300      	movs	r3, #0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10c      	bne.n	800b25a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	b672      	cpsid	i
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	b662      	cpsie	i
 800b254:	623b      	str	r3, [r7, #32]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <xQueueGenericCreateStatic+0x8a>
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <xQueueGenericCreateStatic+0x8e>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <xQueueGenericCreateStatic+0x90>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10c      	bne.n	800b28a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	b672      	cpsid	i
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	b662      	cpsie	i
 800b284:	61fb      	str	r3, [r7, #28]
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b28a:	2350      	movs	r3, #80	; 0x50
 800b28c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b50      	cmp	r3, #80	; 0x50
 800b292:	d00c      	beq.n	800b2ae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	b672      	cpsid	i
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	b662      	cpsie	i
 800b2a8:	61bb      	str	r3, [r7, #24]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00d      	beq.n	800b2d6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f805 	bl	800b2e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3730      	adds	r7, #48	; 0x30
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d103      	bne.n	800b2fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b30e:	2101      	movs	r1, #1
 800b310:	69b8      	ldr	r0, [r7, #24]
 800b312:	f7ff fef9 	bl	800b108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	78fa      	ldrb	r2, [r7, #3]
 800b31a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08e      	sub	sp, #56	; 0x38
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b336:	2300      	movs	r3, #0
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10c      	bne.n	800b35e <xQueueGenericSend+0x36>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	b672      	cpsid	i
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	b662      	cpsie	i
 800b358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b35a:	bf00      	nop
 800b35c:	e7fe      	b.n	800b35c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d103      	bne.n	800b36c <xQueueGenericSend+0x44>
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <xQueueGenericSend+0x48>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <xQueueGenericSend+0x4a>
 800b370:	2300      	movs	r3, #0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10c      	bne.n	800b390 <xQueueGenericSend+0x68>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	b672      	cpsid	i
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	b662      	cpsie	i
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d103      	bne.n	800b39e <xQueueGenericSend+0x76>
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <xQueueGenericSend+0x7a>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <xQueueGenericSend+0x7c>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10c      	bne.n	800b3c2 <xQueueGenericSend+0x9a>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	b672      	cpsid	i
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	b662      	cpsie	i
 800b3bc:	623b      	str	r3, [r7, #32]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3c2:	f001 f9e9 	bl	800c798 <xTaskGetSchedulerState>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <xQueueGenericSend+0xaa>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <xQueueGenericSend+0xae>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <xQueueGenericSend+0xb0>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10c      	bne.n	800b3f6 <xQueueGenericSend+0xce>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	b672      	cpsid	i
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	b662      	cpsie	i
 800b3f0:	61fb      	str	r3, [r7, #28]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3f6:	f001 ff19 	bl	800d22c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b402:	429a      	cmp	r2, r3
 800b404:	d302      	bcc.n	800b40c <xQueueGenericSend+0xe4>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d129      	bne.n	800b460 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b412:	f000 fa15 	bl	800b840 <prvCopyDataToQueue>
 800b416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d010      	beq.n	800b442 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	3324      	adds	r3, #36	; 0x24
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fff1 	bl	800c40c <xTaskRemoveFromEventList>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d013      	beq.n	800b458 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b430:	4b3f      	ldr	r3, [pc, #252]	; (800b530 <xQueueGenericSend+0x208>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	e00a      	b.n	800b458 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d007      	beq.n	800b458 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b448:	4b39      	ldr	r3, [pc, #228]	; (800b530 <xQueueGenericSend+0x208>)
 800b44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b458:	f001 ff1c 	bl	800d294 <vPortExitCritical>
				return pdPASS;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e063      	b.n	800b528 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d103      	bne.n	800b46e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b466:	f001 ff15 	bl	800d294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	e05c      	b.n	800b528 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b474:	f107 0314 	add.w	r3, r7, #20
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 f82d 	bl	800c4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b47e:	2301      	movs	r3, #1
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b482:	f001 ff07 	bl	800d294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b486:	f000 fd93 	bl	800bfb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b48a:	f001 fecf 	bl	800d22c <vPortEnterCritical>
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b494:	b25b      	sxtb	r3, r3
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d103      	bne.n	800b4a4 <xQueueGenericSend+0x17c>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d103      	bne.n	800b4ba <xQueueGenericSend+0x192>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4ba:	f001 feeb 	bl	800d294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4be:	1d3a      	adds	r2, r7, #4
 800b4c0:	f107 0314 	add.w	r3, r7, #20
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 f81c 	bl	800c504 <xTaskCheckForTimeOut>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d124      	bne.n	800b51c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4d4:	f000 faac 	bl	800ba30 <prvIsQueueFull>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d018      	beq.n	800b510 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 ff3c 	bl	800c364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ee:	f000 fa37 	bl	800b960 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4f2:	f000 fd6b 	bl	800bfcc <xTaskResumeAll>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f47f af7c 	bne.w	800b3f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <xQueueGenericSend+0x208>)
 800b500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	e772      	b.n	800b3f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b512:	f000 fa25 	bl	800b960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b516:	f000 fd59 	bl	800bfcc <xTaskResumeAll>
 800b51a:	e76c      	b.n	800b3f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b51c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b51e:	f000 fa1f 	bl	800b960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b522:	f000 fd53 	bl	800bfcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3738      	adds	r7, #56	; 0x38
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08e      	sub	sp, #56	; 0x38
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10c      	bne.n	800b566 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	b672      	cpsid	i
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	b662      	cpsie	i
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <xQueueGenericSendFromISR+0x40>
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <xQueueGenericSendFromISR+0x44>
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <xQueueGenericSendFromISR+0x46>
 800b578:	2300      	movs	r3, #0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10c      	bne.n	800b598 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	b672      	cpsid	i
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	b662      	cpsie	i
 800b592:	623b      	str	r3, [r7, #32]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d103      	bne.n	800b5a6 <xQueueGenericSendFromISR+0x72>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <xQueueGenericSendFromISR+0x76>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e000      	b.n	800b5ac <xQueueGenericSendFromISR+0x78>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10c      	bne.n	800b5ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	b672      	cpsid	i
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	b662      	cpsie	i
 800b5c4:	61fb      	str	r3, [r7, #28]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5ca:	f001 ff17 	bl	800d3fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5ce:	f3ef 8211 	mrs	r2, BASEPRI
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	b672      	cpsid	i
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	b662      	cpsie	i
 800b5e6:	61ba      	str	r2, [r7, #24]
 800b5e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d302      	bcc.n	800b600 <xQueueGenericSendFromISR+0xcc>
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d12c      	bne.n	800b65a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	68b9      	ldr	r1, [r7, #8]
 800b60e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b610:	f000 f916 	bl	800b840 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b614:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61c:	d112      	bne.n	800b644 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	2b00      	cmp	r3, #0
 800b624:	d016      	beq.n	800b654 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	3324      	adds	r3, #36	; 0x24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 feee 	bl	800c40c <xTaskRemoveFromEventList>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00e      	beq.n	800b654 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00b      	beq.n	800b654 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e007      	b.n	800b654 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b644:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b648:	3301      	adds	r3, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	b25a      	sxtb	r2, r3
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b654:	2301      	movs	r3, #1
 800b656:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b658:	e001      	b.n	800b65e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	637b      	str	r3, [r7, #52]	; 0x34
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b668:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3738      	adds	r7, #56	; 0x38
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08c      	sub	sp, #48	; 0x30
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b680:	2300      	movs	r3, #0
 800b682:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10c      	bne.n	800b6a8 <xQueueReceive+0x34>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	b672      	cpsid	i
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	b662      	cpsie	i
 800b6a2:	623b      	str	r3, [r7, #32]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d103      	bne.n	800b6b6 <xQueueReceive+0x42>
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <xQueueReceive+0x46>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <xQueueReceive+0x48>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10c      	bne.n	800b6da <xQueueReceive+0x66>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	b672      	cpsid	i
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	b662      	cpsie	i
 800b6d4:	61fb      	str	r3, [r7, #28]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6da:	f001 f85d 	bl	800c798 <xTaskGetSchedulerState>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <xQueueReceive+0x76>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <xQueueReceive+0x7a>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueReceive+0x7c>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10c      	bne.n	800b70e <xQueueReceive+0x9a>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	b672      	cpsid	i
 800b6fa:	f383 8811 	msr	BASEPRI, r3
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	b662      	cpsie	i
 800b708:	61bb      	str	r3, [r7, #24]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b70e:	f001 fd8d 	bl	800d22c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d01f      	beq.n	800b75e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b71e:	68b9      	ldr	r1, [r7, #8]
 800b720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b722:	f000 f8f7 	bl	800b914 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	1e5a      	subs	r2, r3, #1
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00f      	beq.n	800b756 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	3310      	adds	r3, #16
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 fe66 	bl	800c40c <xTaskRemoveFromEventList>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d007      	beq.n	800b756 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b746:	4b3d      	ldr	r3, [pc, #244]	; (800b83c <xQueueReceive+0x1c8>)
 800b748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b756:	f001 fd9d 	bl	800d294 <vPortExitCritical>
				return pdPASS;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e069      	b.n	800b832 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d103      	bne.n	800b76c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b764:	f001 fd96 	bl	800d294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b768:	2300      	movs	r3, #0
 800b76a:	e062      	b.n	800b832 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b772:	f107 0310 	add.w	r3, r7, #16
 800b776:	4618      	mov	r0, r3
 800b778:	f000 feae 	bl	800c4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b780:	f001 fd88 	bl	800d294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b784:	f000 fc14 	bl	800bfb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b788:	f001 fd50 	bl	800d22c <vPortEnterCritical>
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b792:	b25b      	sxtb	r3, r3
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d103      	bne.n	800b7a2 <xQueueReceive+0x12e>
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a8:	b25b      	sxtb	r3, r3
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ae:	d103      	bne.n	800b7b8 <xQueueReceive+0x144>
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b8:	f001 fd6c 	bl	800d294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7bc:	1d3a      	adds	r2, r7, #4
 800b7be:	f107 0310 	add.w	r3, r7, #16
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 fe9d 	bl	800c504 <xTaskCheckForTimeOut>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d123      	bne.n	800b818 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d2:	f000 f917 	bl	800ba04 <prvIsQueueEmpty>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d017      	beq.n	800b80c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	3324      	adds	r3, #36	; 0x24
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 fdbd 	bl	800c364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ec:	f000 f8b8 	bl	800b960 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7f0:	f000 fbec 	bl	800bfcc <xTaskResumeAll>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d189      	bne.n	800b70e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b7fa:	4b10      	ldr	r3, [pc, #64]	; (800b83c <xQueueReceive+0x1c8>)
 800b7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	e780      	b.n	800b70e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80e:	f000 f8a7 	bl	800b960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b812:	f000 fbdb 	bl	800bfcc <xTaskResumeAll>
 800b816:	e77a      	b.n	800b70e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b81a:	f000 f8a1 	bl	800b960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b81e:	f000 fbd5 	bl	800bfcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b824:	f000 f8ee 	bl	800ba04 <prvIsQueueEmpty>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f43f af6f 	beq.w	800b70e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b832:	4618      	mov	r0, r3
 800b834:	3730      	adds	r7, #48	; 0x30
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10d      	bne.n	800b87a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d14d      	bne.n	800b902 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 ffb2 	bl	800c7d4 <xTaskPriorityDisinherit>
 800b870:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	609a      	str	r2, [r3, #8]
 800b878:	e043      	b.n	800b902 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d119      	bne.n	800b8b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6858      	ldr	r0, [r3, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b888:	461a      	mov	r2, r3
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	f002 fe94 	bl	800e5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b898:	441a      	add	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d32b      	bcc.n	800b902 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	605a      	str	r2, [r3, #4]
 800b8b2:	e026      	b.n	800b902 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68d8      	ldr	r0, [r3, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	f002 fe7a 	bl	800e5b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68da      	ldr	r2, [r3, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8cc:	425b      	negs	r3, r3
 800b8ce:	441a      	add	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d207      	bcs.n	800b8f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	441a      	add	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d105      	bne.n	800b902 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b90a:	697b      	ldr	r3, [r7, #20]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d018      	beq.n	800b958 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	441a      	add	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d303      	bcc.n	800b948 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68d9      	ldr	r1, [r3, #12]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	461a      	mov	r2, r3
 800b952:	6838      	ldr	r0, [r7, #0]
 800b954:	f002 fe30 	bl	800e5b8 <memcpy>
	}
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b968:	f001 fc60 	bl	800d22c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b972:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b974:	e011      	b.n	800b99a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d012      	beq.n	800b9a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3324      	adds	r3, #36	; 0x24
 800b982:	4618      	mov	r0, r3
 800b984:	f000 fd42 	bl	800c40c <xTaskRemoveFromEventList>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b98e:	f000 fe1f 	bl	800c5d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	3b01      	subs	r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dce9      	bgt.n	800b976 <prvUnlockQueue+0x16>
 800b9a2:	e000      	b.n	800b9a6 <prvUnlockQueue+0x46>
					break;
 800b9a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	22ff      	movs	r2, #255	; 0xff
 800b9aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9ae:	f001 fc71 	bl	800d294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9b2:	f001 fc3b 	bl	800d22c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9be:	e011      	b.n	800b9e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d012      	beq.n	800b9ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3310      	adds	r3, #16
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fd1d 	bl	800c40c <xTaskRemoveFromEventList>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9d8:	f000 fdfa 	bl	800c5d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	dce9      	bgt.n	800b9c0 <prvUnlockQueue+0x60>
 800b9ec:	e000      	b.n	800b9f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	22ff      	movs	r2, #255	; 0xff
 800b9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9f8:	f001 fc4c 	bl	800d294 <vPortExitCritical>
}
 800b9fc:	bf00      	nop
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba0c:	f001 fc0e 	bl	800d22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	e001      	b.n	800ba22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba22:	f001 fc37 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800ba26:	68fb      	ldr	r3, [r7, #12]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba38:	f001 fbf8 	bl	800d22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d102      	bne.n	800ba4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	e001      	b.n	800ba52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba52:	f001 fc1f 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800ba56:	68fb      	ldr	r3, [r7, #12]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e014      	b.n	800ba9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba70:	4a0f      	ldr	r2, [pc, #60]	; (800bab0 <vQueueAddToRegistry+0x50>)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba7c:	490c      	ldr	r1, [pc, #48]	; (800bab0 <vQueueAddToRegistry+0x50>)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba86:	4a0a      	ldr	r2, [pc, #40]	; (800bab0 <vQueueAddToRegistry+0x50>)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba92:	e006      	b.n	800baa2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b07      	cmp	r3, #7
 800ba9e:	d9e7      	bls.n	800ba70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	20000a78 	.word	0x20000a78

0800bab4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bac4:	f001 fbb2 	bl	800d22c <vPortEnterCritical>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bace:	b25b      	sxtb	r3, r3
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad4:	d103      	bne.n	800bade <vQueueWaitForMessageRestricted+0x2a>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae4:	b25b      	sxtb	r3, r3
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d103      	bne.n	800baf4 <vQueueWaitForMessageRestricted+0x40>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baf4:	f001 fbce 	bl	800d294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d106      	bne.n	800bb0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fc51 	bl	800c3b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb0e:	6978      	ldr	r0, [r7, #20]
 800bb10:	f7ff ff26 	bl	800b960 <prvUnlockQueue>
	}
 800bb14:	bf00      	nop
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af04      	add	r7, sp, #16
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10c      	bne.n	800bb4a <xTaskCreateStatic+0x2e>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	b672      	cpsid	i
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	b662      	cpsie	i
 800bb44:	623b      	str	r3, [r7, #32]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10c      	bne.n	800bb6a <xTaskCreateStatic+0x4e>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	b672      	cpsid	i
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	b662      	cpsie	i
 800bb64:	61fb      	str	r3, [r7, #28]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb6a:	235c      	movs	r3, #92	; 0x5c
 800bb6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b5c      	cmp	r3, #92	; 0x5c
 800bb72:	d00c      	beq.n	800bb8e <xTaskCreateStatic+0x72>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	b672      	cpsid	i
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	b662      	cpsie	i
 800bb88:	61bb      	str	r3, [r7, #24]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d01e      	beq.n	800bbd4 <xTaskCreateStatic+0xb8>
 800bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d01b      	beq.n	800bbd4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	9302      	str	r3, [sp, #8]
 800bbb6:	f107 0314 	add.w	r3, r7, #20
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	68b9      	ldr	r1, [r7, #8]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 f850 	bl	800bc6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbce:	f000 f8df 	bl	800bd90 <prvAddNewTaskToReadyList>
 800bbd2:	e001      	b.n	800bbd8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbd8:	697b      	ldr	r3, [r7, #20]
	}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3728      	adds	r7, #40	; 0x28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b08c      	sub	sp, #48	; 0x30
 800bbe6:	af04      	add	r7, sp, #16
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	603b      	str	r3, [r7, #0]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f001 fc44 	bl	800d484 <pvPortMalloc>
 800bbfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc04:	205c      	movs	r0, #92	; 0x5c
 800bc06:	f001 fc3d 	bl	800d484 <pvPortMalloc>
 800bc0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	631a      	str	r2, [r3, #48]	; 0x30
 800bc18:	e005      	b.n	800bc26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc1a:	6978      	ldr	r0, [r7, #20]
 800bc1c:	f001 fcfc 	bl	800d618 <vPortFree>
 800bc20:	e001      	b.n	800bc26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d017      	beq.n	800bc5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc34:	88fa      	ldrh	r2, [r7, #6]
 800bc36:	2300      	movs	r3, #0
 800bc38:	9303      	str	r3, [sp, #12]
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	9301      	str	r3, [sp, #4]
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68b9      	ldr	r1, [r7, #8]
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 f80e 	bl	800bc6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc50:	69f8      	ldr	r0, [r7, #28]
 800bc52:	f000 f89d 	bl	800bd90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc56:	2301      	movs	r3, #1
 800bc58:	61bb      	str	r3, [r7, #24]
 800bc5a:	e002      	b.n	800bc62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc62:	69bb      	ldr	r3, [r7, #24]
	}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3720      	adds	r7, #32
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	461a      	mov	r2, r3
 800bc84:	21a5      	movs	r1, #165	; 0xa5
 800bc86:	f002 fc53 	bl	800e530 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc94:	440b      	add	r3, r1
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	f023 0307 	bic.w	r3, r3, #7
 800bca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00c      	beq.n	800bcc8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	b672      	cpsid	i
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	b662      	cpsie	i
 800bcc2:	617b      	str	r3, [r7, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d01f      	beq.n	800bd0e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e012      	b.n	800bcfa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	7819      	ldrb	r1, [r3, #0]
 800bcdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	4413      	add	r3, r2
 800bce2:	3334      	adds	r3, #52	; 0x34
 800bce4:	460a      	mov	r2, r1
 800bce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	4413      	add	r3, r2
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d006      	beq.n	800bd02 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	61fb      	str	r3, [r7, #28]
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	2b0f      	cmp	r3, #15
 800bcfe:	d9e9      	bls.n	800bcd4 <prvInitialiseNewTask+0x68>
 800bd00:	e000      	b.n	800bd04 <prvInitialiseNewTask+0x98>
			{
				break;
 800bd02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd0c:	e003      	b.n	800bd16 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	2b37      	cmp	r3, #55	; 0x37
 800bd1a:	d901      	bls.n	800bd20 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd1c:	2337      	movs	r3, #55	; 0x37
 800bd1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	2200      	movs	r2, #0
 800bd30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff f952 	bl	800afe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3e:	3318      	adds	r3, #24
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff f94d 	bl	800afe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	2200      	movs	r2, #0
 800bd60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	68f9      	ldr	r1, [r7, #12]
 800bd6e:	69b8      	ldr	r0, [r7, #24]
 800bd70:	f001 f952 	bl	800d018 <pxPortInitialiseStack>
 800bd74:	4602      	mov	r2, r0
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd86:	bf00      	nop
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd98:	f001 fa48 	bl	800d22c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd9c:	4b2d      	ldr	r3, [pc, #180]	; (800be54 <prvAddNewTaskToReadyList+0xc4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	4a2c      	ldr	r2, [pc, #176]	; (800be54 <prvAddNewTaskToReadyList+0xc4>)
 800bda4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bda6:	4b2c      	ldr	r3, [pc, #176]	; (800be58 <prvAddNewTaskToReadyList+0xc8>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d109      	bne.n	800bdc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdae:	4a2a      	ldr	r2, [pc, #168]	; (800be58 <prvAddNewTaskToReadyList+0xc8>)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdb4:	4b27      	ldr	r3, [pc, #156]	; (800be54 <prvAddNewTaskToReadyList+0xc4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d110      	bne.n	800bdde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bdbc:	f000 fc2c 	bl	800c618 <prvInitialiseTaskLists>
 800bdc0:	e00d      	b.n	800bdde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdc2:	4b26      	ldr	r3, [pc, #152]	; (800be5c <prvAddNewTaskToReadyList+0xcc>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d109      	bne.n	800bdde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdca:	4b23      	ldr	r3, [pc, #140]	; (800be58 <prvAddNewTaskToReadyList+0xc8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d802      	bhi.n	800bdde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bdd8:	4a1f      	ldr	r2, [pc, #124]	; (800be58 <prvAddNewTaskToReadyList+0xc8>)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdde:	4b20      	ldr	r3, [pc, #128]	; (800be60 <prvAddNewTaskToReadyList+0xd0>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	4a1e      	ldr	r2, [pc, #120]	; (800be60 <prvAddNewTaskToReadyList+0xd0>)
 800bde6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bde8:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <prvAddNewTaskToReadyList+0xd0>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf4:	4b1b      	ldr	r3, [pc, #108]	; (800be64 <prvAddNewTaskToReadyList+0xd4>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d903      	bls.n	800be04 <prvAddNewTaskToReadyList+0x74>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	4a18      	ldr	r2, [pc, #96]	; (800be64 <prvAddNewTaskToReadyList+0xd4>)
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be08:	4613      	mov	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4a15      	ldr	r2, [pc, #84]	; (800be68 <prvAddNewTaskToReadyList+0xd8>)
 800be12:	441a      	add	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3304      	adds	r3, #4
 800be18:	4619      	mov	r1, r3
 800be1a:	4610      	mov	r0, r2
 800be1c:	f7ff f8ed 	bl	800affa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be20:	f001 fa38 	bl	800d294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be24:	4b0d      	ldr	r3, [pc, #52]	; (800be5c <prvAddNewTaskToReadyList+0xcc>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00e      	beq.n	800be4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <prvAddNewTaskToReadyList+0xc8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	429a      	cmp	r2, r3
 800be38:	d207      	bcs.n	800be4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <prvAddNewTaskToReadyList+0xdc>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000f8c 	.word	0x20000f8c
 800be58:	20000ab8 	.word	0x20000ab8
 800be5c:	20000f98 	.word	0x20000f98
 800be60:	20000fa8 	.word	0x20000fa8
 800be64:	20000f94 	.word	0x20000f94
 800be68:	20000abc 	.word	0x20000abc
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d019      	beq.n	800beb6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be82:	4b14      	ldr	r3, [pc, #80]	; (800bed4 <vTaskDelay+0x64>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00c      	beq.n	800bea4 <vTaskDelay+0x34>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	b672      	cpsid	i
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	b662      	cpsie	i
 800be9e:	60bb      	str	r3, [r7, #8]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bea4:	f000 f884 	bl	800bfb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bea8:	2100      	movs	r1, #0
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fd04 	bl	800c8b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800beb0:	f000 f88c 	bl	800bfcc <xTaskResumeAll>
 800beb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d107      	bne.n	800becc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <vTaskDelay+0x68>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	20000fb4 	.word	0x20000fb4
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08a      	sub	sp, #40	; 0x28
 800bee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800beea:	463a      	mov	r2, r7
 800beec:	1d39      	adds	r1, r7, #4
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff f820 	bl	800af38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	9202      	str	r2, [sp, #8]
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2300      	movs	r3, #0
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	2300      	movs	r3, #0
 800bf08:	460a      	mov	r2, r1
 800bf0a:	4923      	ldr	r1, [pc, #140]	; (800bf98 <vTaskStartScheduler+0xbc>)
 800bf0c:	4823      	ldr	r0, [pc, #140]	; (800bf9c <vTaskStartScheduler+0xc0>)
 800bf0e:	f7ff fe05 	bl	800bb1c <xTaskCreateStatic>
 800bf12:	4603      	mov	r3, r0
 800bf14:	4a22      	ldr	r2, [pc, #136]	; (800bfa0 <vTaskStartScheduler+0xc4>)
 800bf16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf18:	4b21      	ldr	r3, [pc, #132]	; (800bfa0 <vTaskStartScheduler+0xc4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	e001      	b.n	800bf2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d102      	bne.n	800bf36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf30:	f000 fd16 	bl	800c960 <xTimerCreateTimerTask>
 800bf34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d118      	bne.n	800bf6e <vTaskStartScheduler+0x92>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	b672      	cpsid	i
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	b662      	cpsie	i
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <vTaskStartScheduler+0xc8>)
 800bf56:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf5c:	4b12      	ldr	r3, [pc, #72]	; (800bfa8 <vTaskStartScheduler+0xcc>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <vTaskStartScheduler+0xd0>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf68:	f001 f8e2 	bl	800d130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf6c:	e010      	b.n	800bf90 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d10c      	bne.n	800bf90 <vTaskStartScheduler+0xb4>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	b672      	cpsid	i
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	b662      	cpsie	i
 800bf8a:	60fb      	str	r3, [r7, #12]
}
 800bf8c:	bf00      	nop
 800bf8e:	e7fe      	b.n	800bf8e <vTaskStartScheduler+0xb2>
}
 800bf90:	bf00      	nop
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	0800ed28 	.word	0x0800ed28
 800bf9c:	0800c5e9 	.word	0x0800c5e9
 800bfa0:	20000fb0 	.word	0x20000fb0
 800bfa4:	20000fac 	.word	0x20000fac
 800bfa8:	20000f98 	.word	0x20000f98
 800bfac:	20000f90 	.word	0x20000f90

0800bfb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <vTaskSuspendAll+0x18>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <vTaskSuspendAll+0x18>)
 800bfbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bfbe:	bf00      	nop
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	20000fb4 	.word	0x20000fb4

0800bfcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfda:	4b43      	ldr	r3, [pc, #268]	; (800c0e8 <xTaskResumeAll+0x11c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10c      	bne.n	800bffc <xTaskResumeAll+0x30>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	b672      	cpsid	i
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	b662      	cpsie	i
 800bff6:	603b      	str	r3, [r7, #0]
}
 800bff8:	bf00      	nop
 800bffa:	e7fe      	b.n	800bffa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bffc:	f001 f916 	bl	800d22c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c000:	4b39      	ldr	r3, [pc, #228]	; (800c0e8 <xTaskResumeAll+0x11c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3b01      	subs	r3, #1
 800c006:	4a38      	ldr	r2, [pc, #224]	; (800c0e8 <xTaskResumeAll+0x11c>)
 800c008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c00a:	4b37      	ldr	r3, [pc, #220]	; (800c0e8 <xTaskResumeAll+0x11c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d162      	bne.n	800c0d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c012:	4b36      	ldr	r3, [pc, #216]	; (800c0ec <xTaskResumeAll+0x120>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d05e      	beq.n	800c0d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c01a:	e02f      	b.n	800c07c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	4b34      	ldr	r3, [pc, #208]	; (800c0f0 <xTaskResumeAll+0x124>)
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3318      	adds	r3, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff f843 	bl	800b0b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3304      	adds	r3, #4
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff f83e 	bl	800b0b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03c:	4b2d      	ldr	r3, [pc, #180]	; (800c0f4 <xTaskResumeAll+0x128>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d903      	bls.n	800c04c <xTaskResumeAll+0x80>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c048:	4a2a      	ldr	r2, [pc, #168]	; (800c0f4 <xTaskResumeAll+0x128>)
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4a27      	ldr	r2, [pc, #156]	; (800c0f8 <xTaskResumeAll+0x12c>)
 800c05a:	441a      	add	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3304      	adds	r3, #4
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f7fe ffc9 	bl	800affa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	4b23      	ldr	r3, [pc, #140]	; (800c0fc <xTaskResumeAll+0x130>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	429a      	cmp	r2, r3
 800c074:	d302      	bcc.n	800c07c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c076:	4b22      	ldr	r3, [pc, #136]	; (800c100 <xTaskResumeAll+0x134>)
 800c078:	2201      	movs	r2, #1
 800c07a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c07c:	4b1c      	ldr	r3, [pc, #112]	; (800c0f0 <xTaskResumeAll+0x124>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1cb      	bne.n	800c01c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c08a:	f000 fb65 	bl	800c758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c08e:	4b1d      	ldr	r3, [pc, #116]	; (800c104 <xTaskResumeAll+0x138>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d010      	beq.n	800c0bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c09a:	f000 f847 	bl	800c12c <xTaskIncrementTick>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c0a4:	4b16      	ldr	r3, [pc, #88]	; (800c100 <xTaskResumeAll+0x134>)
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1f1      	bne.n	800c09a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c0b6:	4b13      	ldr	r3, [pc, #76]	; (800c104 <xTaskResumeAll+0x138>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0bc:	4b10      	ldr	r3, [pc, #64]	; (800c100 <xTaskResumeAll+0x134>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d009      	beq.n	800c0d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <xTaskResumeAll+0x13c>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0d8:	f001 f8dc 	bl	800d294 <vPortExitCritical>

	return xAlreadyYielded;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20000fb4 	.word	0x20000fb4
 800c0ec:	20000f8c 	.word	0x20000f8c
 800c0f0:	20000f4c 	.word	0x20000f4c
 800c0f4:	20000f94 	.word	0x20000f94
 800c0f8:	20000abc 	.word	0x20000abc
 800c0fc:	20000ab8 	.word	0x20000ab8
 800c100:	20000fa0 	.word	0x20000fa0
 800c104:	20000f9c 	.word	0x20000f9c
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <xTaskGetTickCount+0x1c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c118:	687b      	ldr	r3, [r7, #4]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	20000f90 	.word	0x20000f90

0800c12c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c132:	2300      	movs	r3, #0
 800c134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c136:	4b50      	ldr	r3, [pc, #320]	; (800c278 <xTaskIncrementTick+0x14c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f040 808b 	bne.w	800c256 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c140:	4b4e      	ldr	r3, [pc, #312]	; (800c27c <xTaskIncrementTick+0x150>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3301      	adds	r3, #1
 800c146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c148:	4a4c      	ldr	r2, [pc, #304]	; (800c27c <xTaskIncrementTick+0x150>)
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d122      	bne.n	800c19a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c154:	4b4a      	ldr	r3, [pc, #296]	; (800c280 <xTaskIncrementTick+0x154>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00c      	beq.n	800c178 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	603b      	str	r3, [r7, #0]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xTaskIncrementTick+0x4a>
 800c178:	4b41      	ldr	r3, [pc, #260]	; (800c280 <xTaskIncrementTick+0x154>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	4b41      	ldr	r3, [pc, #260]	; (800c284 <xTaskIncrementTick+0x158>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a3f      	ldr	r2, [pc, #252]	; (800c280 <xTaskIncrementTick+0x154>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	4a3f      	ldr	r2, [pc, #252]	; (800c284 <xTaskIncrementTick+0x158>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	4b3e      	ldr	r3, [pc, #248]	; (800c288 <xTaskIncrementTick+0x15c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	4a3d      	ldr	r2, [pc, #244]	; (800c288 <xTaskIncrementTick+0x15c>)
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	f000 fadf 	bl	800c758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c19a:	4b3c      	ldr	r3, [pc, #240]	; (800c28c <xTaskIncrementTick+0x160>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d349      	bcc.n	800c238 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1a4:	4b36      	ldr	r3, [pc, #216]	; (800c280 <xTaskIncrementTick+0x154>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d104      	bne.n	800c1b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ae:	4b37      	ldr	r3, [pc, #220]	; (800c28c <xTaskIncrementTick+0x160>)
 800c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b4:	601a      	str	r2, [r3, #0]
					break;
 800c1b6:	e03f      	b.n	800c238 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1b8:	4b31      	ldr	r3, [pc, #196]	; (800c280 <xTaskIncrementTick+0x154>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d203      	bcs.n	800c1d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1d0:	4a2e      	ldr	r2, [pc, #184]	; (800c28c <xTaskIncrementTick+0x160>)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1d6:	e02f      	b.n	800c238 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe ff69 	bl	800b0b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	3318      	adds	r3, #24
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe ff60 	bl	800b0b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4b25      	ldr	r3, [pc, #148]	; (800c290 <xTaskIncrementTick+0x164>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d903      	bls.n	800c208 <xTaskIncrementTick+0xdc>
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c204:	4a22      	ldr	r2, [pc, #136]	; (800c290 <xTaskIncrementTick+0x164>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4a1f      	ldr	r2, [pc, #124]	; (800c294 <xTaskIncrementTick+0x168>)
 800c216:	441a      	add	r2, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	f7fe feeb 	bl	800affa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c228:	4b1b      	ldr	r3, [pc, #108]	; (800c298 <xTaskIncrementTick+0x16c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	429a      	cmp	r2, r3
 800c230:	d3b8      	bcc.n	800c1a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c232:	2301      	movs	r3, #1
 800c234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c236:	e7b5      	b.n	800c1a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c238:	4b17      	ldr	r3, [pc, #92]	; (800c298 <xTaskIncrementTick+0x16c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4915      	ldr	r1, [pc, #84]	; (800c294 <xTaskIncrementTick+0x168>)
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	440b      	add	r3, r1
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d907      	bls.n	800c260 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c250:	2301      	movs	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	e004      	b.n	800c260 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c256:	4b11      	ldr	r3, [pc, #68]	; (800c29c <xTaskIncrementTick+0x170>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3301      	adds	r3, #1
 800c25c:	4a0f      	ldr	r2, [pc, #60]	; (800c29c <xTaskIncrementTick+0x170>)
 800c25e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <xTaskIncrementTick+0x174>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c268:	2301      	movs	r3, #1
 800c26a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c26c:	697b      	ldr	r3, [r7, #20]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20000fb4 	.word	0x20000fb4
 800c27c:	20000f90 	.word	0x20000f90
 800c280:	20000f44 	.word	0x20000f44
 800c284:	20000f48 	.word	0x20000f48
 800c288:	20000fa4 	.word	0x20000fa4
 800c28c:	20000fac 	.word	0x20000fac
 800c290:	20000f94 	.word	0x20000f94
 800c294:	20000abc 	.word	0x20000abc
 800c298:	20000ab8 	.word	0x20000ab8
 800c29c:	20000f9c 	.word	0x20000f9c
 800c2a0:	20000fa0 	.word	0x20000fa0

0800c2a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2aa:	4b29      	ldr	r3, [pc, #164]	; (800c350 <vTaskSwitchContext+0xac>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2b2:	4b28      	ldr	r3, [pc, #160]	; (800c354 <vTaskSwitchContext+0xb0>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2b8:	e043      	b.n	800c342 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c2ba:	4b26      	ldr	r3, [pc, #152]	; (800c354 <vTaskSwitchContext+0xb0>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c0:	4b25      	ldr	r3, [pc, #148]	; (800c358 <vTaskSwitchContext+0xb4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	e012      	b.n	800c2ee <vTaskSwitchContext+0x4a>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10c      	bne.n	800c2e8 <vTaskSwitchContext+0x44>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d2:	b672      	cpsid	i
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	b662      	cpsie	i
 800c2e2:	607b      	str	r3, [r7, #4]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <vTaskSwitchContext+0x42>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	491b      	ldr	r1, [pc, #108]	; (800c35c <vTaskSwitchContext+0xb8>)
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	440b      	add	r3, r1
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0e2      	beq.n	800c2c8 <vTaskSwitchContext+0x24>
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4a13      	ldr	r2, [pc, #76]	; (800c35c <vTaskSwitchContext+0xb8>)
 800c30e:	4413      	add	r3, r2
 800c310:	60bb      	str	r3, [r7, #8]
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	605a      	str	r2, [r3, #4]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	3308      	adds	r3, #8
 800c324:	429a      	cmp	r2, r3
 800c326:	d104      	bne.n	800c332 <vTaskSwitchContext+0x8e>
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	605a      	str	r2, [r3, #4]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <vTaskSwitchContext+0xbc>)
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	4a06      	ldr	r2, [pc, #24]	; (800c358 <vTaskSwitchContext+0xb4>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6013      	str	r3, [r2, #0]
}
 800c342:	bf00      	nop
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	20000fb4 	.word	0x20000fb4
 800c354:	20000fa0 	.word	0x20000fa0
 800c358:	20000f94 	.word	0x20000f94
 800c35c:	20000abc 	.word	0x20000abc
 800c360:	20000ab8 	.word	0x20000ab8

0800c364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10c      	bne.n	800c38e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	b672      	cpsid	i
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	b662      	cpsie	i
 800c388:	60fb      	str	r3, [r7, #12]
}
 800c38a:	bf00      	nop
 800c38c:	e7fe      	b.n	800c38c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c38e:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <vTaskPlaceOnEventList+0x48>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3318      	adds	r3, #24
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7fe fe53 	bl	800b042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c39c:	2101      	movs	r1, #1
 800c39e:	6838      	ldr	r0, [r7, #0]
 800c3a0:	f000 fa8a 	bl	800c8b8 <prvAddCurrentTaskToDelayedList>
}
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000ab8 	.word	0x20000ab8

0800c3b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10c      	bne.n	800c3dc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	b672      	cpsid	i
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	b662      	cpsie	i
 800c3d6:	617b      	str	r3, [r7, #20]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <vTaskPlaceOnEventListRestricted+0x58>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7fe fe08 	bl	800affa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	68b8      	ldr	r0, [r7, #8]
 800c3fa:	f000 fa5d 	bl	800c8b8 <prvAddCurrentTaskToDelayedList>
	}
 800c3fe:	bf00      	nop
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20000ab8 	.word	0x20000ab8

0800c40c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10c      	bne.n	800c43c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	b672      	cpsid	i
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	b662      	cpsie	i
 800c436:	60fb      	str	r3, [r7, #12]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	3318      	adds	r3, #24
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe fe37 	bl	800b0b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c446:	4b1e      	ldr	r3, [pc, #120]	; (800c4c0 <xTaskRemoveFromEventList+0xb4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d11d      	bne.n	800c48a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	3304      	adds	r3, #4
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fe2e 	bl	800b0b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45c:	4b19      	ldr	r3, [pc, #100]	; (800c4c4 <xTaskRemoveFromEventList+0xb8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d903      	bls.n	800c46c <xTaskRemoveFromEventList+0x60>
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	4a16      	ldr	r2, [pc, #88]	; (800c4c4 <xTaskRemoveFromEventList+0xb8>)
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4a13      	ldr	r2, [pc, #76]	; (800c4c8 <xTaskRemoveFromEventList+0xbc>)
 800c47a:	441a      	add	r2, r3
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	3304      	adds	r3, #4
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fe fdb9 	bl	800affa <vListInsertEnd>
 800c488:	e005      	b.n	800c496 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3318      	adds	r3, #24
 800c48e:	4619      	mov	r1, r3
 800c490:	480e      	ldr	r0, [pc, #56]	; (800c4cc <xTaskRemoveFromEventList+0xc0>)
 800c492:	f7fe fdb2 	bl	800affa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49a:	4b0d      	ldr	r3, [pc, #52]	; (800c4d0 <xTaskRemoveFromEventList+0xc4>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d905      	bls.n	800c4b0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <xTaskRemoveFromEventList+0xc8>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	e001      	b.n	800c4b4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4b4:	697b      	ldr	r3, [r7, #20]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3718      	adds	r7, #24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	20000fb4 	.word	0x20000fb4
 800c4c4:	20000f94 	.word	0x20000f94
 800c4c8:	20000abc 	.word	0x20000abc
 800c4cc:	20000f4c 	.word	0x20000f4c
 800c4d0:	20000ab8 	.word	0x20000ab8
 800c4d4:	20000fa0 	.word	0x20000fa0

0800c4d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <vTaskInternalSetTimeOutState+0x24>)
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4e8:	4b05      	ldr	r3, [pc, #20]	; (800c500 <vTaskInternalSetTimeOutState+0x28>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	605a      	str	r2, [r3, #4]
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	20000fa4 	.word	0x20000fa4
 800c500:	20000f90 	.word	0x20000f90

0800c504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10c      	bne.n	800c52e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c518:	b672      	cpsid	i
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	b662      	cpsie	i
 800c528:	613b      	str	r3, [r7, #16]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10c      	bne.n	800c54e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	b672      	cpsid	i
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	b662      	cpsie	i
 800c548:	60fb      	str	r3, [r7, #12]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c54e:	f000 fe6d 	bl	800d22c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c552:	4b1d      	ldr	r3, [pc, #116]	; (800c5c8 <xTaskCheckForTimeOut+0xc4>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	69ba      	ldr	r2, [r7, #24]
 800c55e:	1ad3      	subs	r3, r2, r3
 800c560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56a:	d102      	bne.n	800c572 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e023      	b.n	800c5ba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <xTaskCheckForTimeOut+0xc8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d007      	beq.n	800c58e <xTaskCheckForTimeOut+0x8a>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	429a      	cmp	r2, r3
 800c586:	d302      	bcc.n	800c58e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c588:	2301      	movs	r3, #1
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	e015      	b.n	800c5ba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	429a      	cmp	r2, r3
 800c596:	d20b      	bcs.n	800c5b0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	1ad2      	subs	r2, r2, r3
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff ff97 	bl	800c4d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	61fb      	str	r3, [r7, #28]
 800c5ae:	e004      	b.n	800c5ba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5ba:	f000 fe6b 	bl	800d294 <vPortExitCritical>

	return xReturn;
 800c5be:	69fb      	ldr	r3, [r7, #28]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20000f90 	.word	0x20000f90
 800c5cc:	20000fa4 	.word	0x20000fa4

0800c5d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5d4:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <vTaskMissedYield+0x14>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
}
 800c5da:	bf00      	nop
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	20000fa0 	.word	0x20000fa0

0800c5e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5f0:	f000 f852 	bl	800c698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5f4:	4b06      	ldr	r3, [pc, #24]	; (800c610 <prvIdleTask+0x28>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d9f9      	bls.n	800c5f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5fc:	4b05      	ldr	r3, [pc, #20]	; (800c614 <prvIdleTask+0x2c>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c60c:	e7f0      	b.n	800c5f0 <prvIdleTask+0x8>
 800c60e:	bf00      	nop
 800c610:	20000abc 	.word	0x20000abc
 800c614:	e000ed04 	.word	0xe000ed04

0800c618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c61e:	2300      	movs	r3, #0
 800c620:	607b      	str	r3, [r7, #4]
 800c622:	e00c      	b.n	800c63e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4a12      	ldr	r2, [pc, #72]	; (800c678 <prvInitialiseTaskLists+0x60>)
 800c630:	4413      	add	r3, r2
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fcb4 	bl	800afa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3301      	adds	r3, #1
 800c63c:	607b      	str	r3, [r7, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b37      	cmp	r3, #55	; 0x37
 800c642:	d9ef      	bls.n	800c624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c644:	480d      	ldr	r0, [pc, #52]	; (800c67c <prvInitialiseTaskLists+0x64>)
 800c646:	f7fe fcab 	bl	800afa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c64a:	480d      	ldr	r0, [pc, #52]	; (800c680 <prvInitialiseTaskLists+0x68>)
 800c64c:	f7fe fca8 	bl	800afa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c650:	480c      	ldr	r0, [pc, #48]	; (800c684 <prvInitialiseTaskLists+0x6c>)
 800c652:	f7fe fca5 	bl	800afa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c656:	480c      	ldr	r0, [pc, #48]	; (800c688 <prvInitialiseTaskLists+0x70>)
 800c658:	f7fe fca2 	bl	800afa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c65c:	480b      	ldr	r0, [pc, #44]	; (800c68c <prvInitialiseTaskLists+0x74>)
 800c65e:	f7fe fc9f 	bl	800afa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c662:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <prvInitialiseTaskLists+0x78>)
 800c664:	4a05      	ldr	r2, [pc, #20]	; (800c67c <prvInitialiseTaskLists+0x64>)
 800c666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <prvInitialiseTaskLists+0x7c>)
 800c66a:	4a05      	ldr	r2, [pc, #20]	; (800c680 <prvInitialiseTaskLists+0x68>)
 800c66c:	601a      	str	r2, [r3, #0]
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000abc 	.word	0x20000abc
 800c67c:	20000f1c 	.word	0x20000f1c
 800c680:	20000f30 	.word	0x20000f30
 800c684:	20000f4c 	.word	0x20000f4c
 800c688:	20000f60 	.word	0x20000f60
 800c68c:	20000f78 	.word	0x20000f78
 800c690:	20000f44 	.word	0x20000f44
 800c694:	20000f48 	.word	0x20000f48

0800c698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c69e:	e019      	b.n	800c6d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6a0:	f000 fdc4 	bl	800d22c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a4:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <prvCheckTasksWaitingTermination+0x50>)
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe fcff 	bl	800b0b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <prvCheckTasksWaitingTermination+0x54>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	4a0b      	ldr	r2, [pc, #44]	; (800c6ec <prvCheckTasksWaitingTermination+0x54>)
 800c6be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6c0:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <prvCheckTasksWaitingTermination+0x58>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	4a0a      	ldr	r2, [pc, #40]	; (800c6f0 <prvCheckTasksWaitingTermination+0x58>)
 800c6c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6ca:	f000 fde3 	bl	800d294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f810 	bl	800c6f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6d4:	4b06      	ldr	r3, [pc, #24]	; (800c6f0 <prvCheckTasksWaitingTermination+0x58>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e1      	bne.n	800c6a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6dc:	bf00      	nop
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000f60 	.word	0x20000f60
 800c6ec:	20000f8c 	.word	0x20000f8c
 800c6f0:	20000f74 	.word	0x20000f74

0800c6f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c702:	2b00      	cmp	r3, #0
 800c704:	d108      	bne.n	800c718 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 ff84 	bl	800d618 <vPortFree>
				vPortFree( pxTCB );
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 ff81 	bl	800d618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c716:	e01a      	b.n	800c74e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d103      	bne.n	800c72a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 ff78 	bl	800d618 <vPortFree>
	}
 800c728:	e011      	b.n	800c74e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c730:	2b02      	cmp	r3, #2
 800c732:	d00c      	beq.n	800c74e <prvDeleteTCB+0x5a>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	b672      	cpsid	i
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	b662      	cpsie	i
 800c748:	60fb      	str	r3, [r7, #12]
}
 800c74a:	bf00      	nop
 800c74c:	e7fe      	b.n	800c74c <prvDeleteTCB+0x58>
	}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c75e:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <prvResetNextTaskUnblockTime+0x38>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <prvResetNextTaskUnblockTime+0x3c>)
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295
 800c76e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c770:	e008      	b.n	800c784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c772:	4b07      	ldr	r3, [pc, #28]	; (800c790 <prvResetNextTaskUnblockTime+0x38>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4a04      	ldr	r2, [pc, #16]	; (800c794 <prvResetNextTaskUnblockTime+0x3c>)
 800c782:	6013      	str	r3, [r2, #0]
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	20000f44 	.word	0x20000f44
 800c794:	20000fac 	.word	0x20000fac

0800c798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c79e:	4b0b      	ldr	r3, [pc, #44]	; (800c7cc <xTaskGetSchedulerState+0x34>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d102      	bne.n	800c7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	607b      	str	r3, [r7, #4]
 800c7aa:	e008      	b.n	800c7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ac:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <xTaskGetSchedulerState+0x38>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	607b      	str	r3, [r7, #4]
 800c7b8:	e001      	b.n	800c7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7be:	687b      	ldr	r3, [r7, #4]
	}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	20000f98 	.word	0x20000f98
 800c7d0:	20000fb4 	.word	0x20000fb4

0800c7d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d05a      	beq.n	800c8a0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7ea:	4b30      	ldr	r3, [pc, #192]	; (800c8ac <xTaskPriorityDisinherit+0xd8>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d00c      	beq.n	800c80e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	b672      	cpsid	i
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	b662      	cpsie	i
 800c808:	60fb      	str	r3, [r7, #12]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10c      	bne.n	800c830 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	b672      	cpsid	i
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	b662      	cpsie	i
 800c82a:	60bb      	str	r3, [r7, #8]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c834:	1e5a      	subs	r2, r3, #1
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c842:	429a      	cmp	r2, r3
 800c844:	d02c      	beq.n	800c8a0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d128      	bne.n	800c8a0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	3304      	adds	r3, #4
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fc2e 	bl	800b0b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c870:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <xTaskPriorityDisinherit+0xdc>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	429a      	cmp	r2, r3
 800c876:	d903      	bls.n	800c880 <xTaskPriorityDisinherit+0xac>
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	4a0c      	ldr	r2, [pc, #48]	; (800c8b0 <xTaskPriorityDisinherit+0xdc>)
 800c87e:	6013      	str	r3, [r2, #0]
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c884:	4613      	mov	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4a09      	ldr	r2, [pc, #36]	; (800c8b4 <xTaskPriorityDisinherit+0xe0>)
 800c88e:	441a      	add	r2, r3
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3304      	adds	r3, #4
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f7fe fbaf 	bl	800affa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8a0:	697b      	ldr	r3, [r7, #20]
	}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3718      	adds	r7, #24
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20000ab8 	.word	0x20000ab8
 800c8b0:	20000f94 	.word	0x20000f94
 800c8b4:	20000abc 	.word	0x20000abc

0800c8b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8c2:	4b21      	ldr	r3, [pc, #132]	; (800c948 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8c8:	4b20      	ldr	r3, [pc, #128]	; (800c94c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe fbf0 	bl	800b0b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8da:	d10a      	bne.n	800c8f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d007      	beq.n	800c8f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8e2:	4b1a      	ldr	r3, [pc, #104]	; (800c94c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4819      	ldr	r0, [pc, #100]	; (800c950 <prvAddCurrentTaskToDelayedList+0x98>)
 800c8ec:	f7fe fb85 	bl	800affa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8f0:	e026      	b.n	800c940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8fa:	4b14      	ldr	r3, [pc, #80]	; (800c94c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	429a      	cmp	r2, r3
 800c908:	d209      	bcs.n	800c91e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c90a:	4b12      	ldr	r3, [pc, #72]	; (800c954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <prvAddCurrentTaskToDelayedList+0x94>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3304      	adds	r3, #4
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f7fe fb93 	bl	800b042 <vListInsert>
}
 800c91c:	e010      	b.n	800c940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c91e:	4b0e      	ldr	r3, [pc, #56]	; (800c958 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <prvAddCurrentTaskToDelayedList+0x94>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3304      	adds	r3, #4
 800c928:	4619      	mov	r1, r3
 800c92a:	4610      	mov	r0, r2
 800c92c:	f7fe fb89 	bl	800b042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c930:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	429a      	cmp	r2, r3
 800c938:	d202      	bcs.n	800c940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c93a:	4a08      	ldr	r2, [pc, #32]	; (800c95c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	6013      	str	r3, [r2, #0]
}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	20000f90 	.word	0x20000f90
 800c94c:	20000ab8 	.word	0x20000ab8
 800c950:	20000f78 	.word	0x20000f78
 800c954:	20000f48 	.word	0x20000f48
 800c958:	20000f44 	.word	0x20000f44
 800c95c:	20000fac 	.word	0x20000fac

0800c960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08a      	sub	sp, #40	; 0x28
 800c964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c96a:	f000 fb15 	bl	800cf98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c96e:	4b1d      	ldr	r3, [pc, #116]	; (800c9e4 <xTimerCreateTimerTask+0x84>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d021      	beq.n	800c9ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c97e:	1d3a      	adds	r2, r7, #4
 800c980:	f107 0108 	add.w	r1, r7, #8
 800c984:	f107 030c 	add.w	r3, r7, #12
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fe faef 	bl	800af6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	9202      	str	r2, [sp, #8]
 800c996:	9301      	str	r3, [sp, #4]
 800c998:	2302      	movs	r3, #2
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	2300      	movs	r3, #0
 800c99e:	460a      	mov	r2, r1
 800c9a0:	4911      	ldr	r1, [pc, #68]	; (800c9e8 <xTimerCreateTimerTask+0x88>)
 800c9a2:	4812      	ldr	r0, [pc, #72]	; (800c9ec <xTimerCreateTimerTask+0x8c>)
 800c9a4:	f7ff f8ba 	bl	800bb1c <xTaskCreateStatic>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <xTimerCreateTimerTask+0x90>)
 800c9ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9ae:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <xTimerCreateTimerTask+0x90>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10c      	bne.n	800c9da <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c4:	b672      	cpsid	i
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	b662      	cpsie	i
 800c9d4:	613b      	str	r3, [r7, #16]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c9da:	697b      	ldr	r3, [r7, #20]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20000fe8 	.word	0x20000fe8
 800c9e8:	0800ed30 	.word	0x0800ed30
 800c9ec:	0800cb31 	.word	0x0800cb31
 800c9f0:	20000fec 	.word	0x20000fec

0800c9f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08a      	sub	sp, #40	; 0x28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10c      	bne.n	800ca26 <xTimerGenericCommand+0x32>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	b672      	cpsid	i
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	b662      	cpsie	i
 800ca20:	623b      	str	r3, [r7, #32]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca26:	4b1a      	ldr	r3, [pc, #104]	; (800ca90 <xTimerGenericCommand+0x9c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d02a      	beq.n	800ca84 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b05      	cmp	r3, #5
 800ca3e:	dc18      	bgt.n	800ca72 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca40:	f7ff feaa 	bl	800c798 <xTaskGetSchedulerState>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d109      	bne.n	800ca5e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <xTimerGenericCommand+0x9c>)
 800ca4c:	6818      	ldr	r0, [r3, #0]
 800ca4e:	f107 0110 	add.w	r1, r7, #16
 800ca52:	2300      	movs	r3, #0
 800ca54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca56:	f7fe fc67 	bl	800b328 <xQueueGenericSend>
 800ca5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ca5c:	e012      	b.n	800ca84 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <xTimerGenericCommand+0x9c>)
 800ca60:	6818      	ldr	r0, [r3, #0]
 800ca62:	f107 0110 	add.w	r1, r7, #16
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f7fe fc5d 	bl	800b328 <xQueueGenericSend>
 800ca6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca70:	e008      	b.n	800ca84 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <xTimerGenericCommand+0x9c>)
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f107 0110 	add.w	r1, r7, #16
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	f7fe fd59 	bl	800b534 <xQueueGenericSendFromISR>
 800ca82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3728      	adds	r7, #40	; 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000fe8 	.word	0x20000fe8

0800ca94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca9e:	4b23      	ldr	r3, [pc, #140]	; (800cb2c <prvProcessExpiredTimer+0x98>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	3304      	adds	r3, #4
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fb01 	bl	800b0b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d024      	beq.n	800cb0a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	699a      	ldr	r2, [r3, #24]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	18d1      	adds	r1, r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	6978      	ldr	r0, [r7, #20]
 800cace:	f000 f8d3 	bl	800cc78 <prvInsertTimerInActiveList>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d021      	beq.n	800cb1c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cad8:	2300      	movs	r3, #0
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	2300      	movs	r3, #0
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	2100      	movs	r1, #0
 800cae2:	6978      	ldr	r0, [r7, #20]
 800cae4:	f7ff ff86 	bl	800c9f4 <xTimerGenericCommand>
 800cae8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d115      	bne.n	800cb1c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	b672      	cpsid	i
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	b662      	cpsie	i
 800cb04:	60fb      	str	r3, [r7, #12]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb10:	f023 0301 	bic.w	r3, r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	6978      	ldr	r0, [r7, #20]
 800cb22:	4798      	blx	r3
}
 800cb24:	bf00      	nop
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20000fe0 	.word	0x20000fe0

0800cb30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb38:	f107 0308 	add.w	r3, r7, #8
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f857 	bl	800cbf0 <prvGetNextExpireTime>
 800cb42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 f803 	bl	800cb54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb4e:	f000 f8d5 	bl	800ccfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb52:	e7f1      	b.n	800cb38 <prvTimerTask+0x8>

0800cb54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb5e:	f7ff fa27 	bl	800bfb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb62:	f107 0308 	add.w	r3, r7, #8
 800cb66:	4618      	mov	r0, r3
 800cb68:	f000 f866 	bl	800cc38 <prvSampleTimeNow>
 800cb6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d130      	bne.n	800cbd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <prvProcessTimerOrBlockTask+0x3c>
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d806      	bhi.n	800cb90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb82:	f7ff fa23 	bl	800bfcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb86:	68f9      	ldr	r1, [r7, #12]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff ff83 	bl	800ca94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb8e:	e024      	b.n	800cbda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d008      	beq.n	800cba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb96:	4b13      	ldr	r3, [pc, #76]	; (800cbe4 <prvProcessTimerOrBlockTask+0x90>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <prvProcessTimerOrBlockTask+0x50>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <prvProcessTimerOrBlockTask+0x52>
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cba8:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <prvProcessTimerOrBlockTask+0x94>)
 800cbaa:	6818      	ldr	r0, [r3, #0]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	f7fe ff7d 	bl	800bab4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbba:	f7ff fa07 	bl	800bfcc <xTaskResumeAll>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbc4:	4b09      	ldr	r3, [pc, #36]	; (800cbec <prvProcessTimerOrBlockTask+0x98>)
 800cbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	f3bf 8f6f 	isb	sy
}
 800cbd4:	e001      	b.n	800cbda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbd6:	f7ff f9f9 	bl	800bfcc <xTaskResumeAll>
}
 800cbda:	bf00      	nop
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000fe4 	.word	0x20000fe4
 800cbe8:	20000fe8 	.word	0x20000fe8
 800cbec:	e000ed04 	.word	0xe000ed04

0800cbf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbf8:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <prvGetNextExpireTime+0x44>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <prvGetNextExpireTime+0x16>
 800cc02:	2201      	movs	r2, #1
 800cc04:	e000      	b.n	800cc08 <prvGetNextExpireTime+0x18>
 800cc06:	2200      	movs	r2, #0
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <prvGetNextExpireTime+0x44>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	e001      	b.n	800cc24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc24:	68fb      	ldr	r3, [r7, #12]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	20000fe0 	.word	0x20000fe0

0800cc38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc40:	f7ff fa64 	bl	800c10c <xTaskGetTickCount>
 800cc44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <prvSampleTimeNow+0x3c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d205      	bcs.n	800cc5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc50:	f000 f93c 	bl	800cecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	e002      	b.n	800cc62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc62:	4a04      	ldr	r2, [pc, #16]	; (800cc74 <prvSampleTimeNow+0x3c>)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc68:	68fb      	ldr	r3, [r7, #12]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000ff0 	.word	0x20000ff0

0800cc78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d812      	bhi.n	800ccc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	1ad2      	subs	r2, r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d302      	bcc.n	800ccb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccac:	2301      	movs	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	e01b      	b.n	800ccea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccb2:	4b10      	ldr	r3, [pc, #64]	; (800ccf4 <prvInsertTimerInActiveList+0x7c>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3304      	adds	r3, #4
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	f7fe f9c0 	bl	800b042 <vListInsert>
 800ccc2:	e012      	b.n	800ccea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d206      	bcs.n	800ccda <prvInsertTimerInActiveList+0x62>
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d302      	bcc.n	800ccda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	617b      	str	r3, [r7, #20]
 800ccd8:	e007      	b.n	800ccea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccda:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <prvInsertTimerInActiveList+0x80>)
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3304      	adds	r3, #4
 800cce2:	4619      	mov	r1, r3
 800cce4:	4610      	mov	r0, r2
 800cce6:	f7fe f9ac 	bl	800b042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccea:	697b      	ldr	r3, [r7, #20]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20000fe4 	.word	0x20000fe4
 800ccf8:	20000fe0 	.word	0x20000fe0

0800ccfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	; 0x38
 800cd00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd02:	e0d0      	b.n	800cea6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da1a      	bge.n	800cd40 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd0a:	1d3b      	adds	r3, r7, #4
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10c      	bne.n	800cd30 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	b672      	cpsid	i
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	b662      	cpsie	i
 800cd2a:	61fb      	str	r3, [r7, #28]
}
 800cd2c:	bf00      	nop
 800cd2e:	e7fe      	b.n	800cd2e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd36:	6850      	ldr	r0, [r2, #4]
 800cd38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd3a:	6892      	ldr	r2, [r2, #8]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f2c0 80af 	blt.w	800cea6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d004      	beq.n	800cd5e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	3304      	adds	r3, #4
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fe f9ab 	bl	800b0b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd5e:	463b      	mov	r3, r7
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff ff69 	bl	800cc38 <prvSampleTimeNow>
 800cd66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b09      	cmp	r3, #9
 800cd6c:	f200 809a 	bhi.w	800cea4 <prvProcessReceivedCommands+0x1a8>
 800cd70:	a201      	add	r2, pc, #4	; (adr r2, 800cd78 <prvProcessReceivedCommands+0x7c>)
 800cd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd76:	bf00      	nop
 800cd78:	0800cda1 	.word	0x0800cda1
 800cd7c:	0800cda1 	.word	0x0800cda1
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800ce19 	.word	0x0800ce19
 800cd88:	0800ce2d 	.word	0x0800ce2d
 800cd8c:	0800ce7b 	.word	0x0800ce7b
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800cda1 	.word	0x0800cda1
 800cd98:	0800ce19 	.word	0x0800ce19
 800cd9c:	0800ce2d 	.word	0x0800ce2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda6:	f043 0301 	orr.w	r3, r3, #1
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	18d1      	adds	r1, r2, r3
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdc0:	f7ff ff5a 	bl	800cc78 <prvInsertTimerInActiveList>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d06d      	beq.n	800cea6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d062      	beq.n	800cea6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	441a      	add	r2, r3
 800cde8:	2300      	movs	r3, #0
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	2300      	movs	r3, #0
 800cdee:	2100      	movs	r1, #0
 800cdf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdf2:	f7ff fdff 	bl	800c9f4 <xTimerGenericCommand>
 800cdf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d153      	bne.n	800cea6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	b672      	cpsid	i
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	b662      	cpsie	i
 800ce12:	61bb      	str	r3, [r7, #24]
}
 800ce14:	bf00      	nop
 800ce16:	e7fe      	b.n	800ce16 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce1e:	f023 0301 	bic.w	r3, r3, #1
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce2a:	e03c      	b.n	800cea6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce32:	f043 0301 	orr.w	r3, r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce3e:	68ba      	ldr	r2, [r7, #8]
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	b672      	cpsid	i
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	b662      	cpsie	i
 800ce60:	617b      	str	r3, [r7, #20]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	699a      	ldr	r2, [r3, #24]
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	18d1      	adds	r1, r2, r3
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce74:	f7ff ff00 	bl	800cc78 <prvInsertTimerInActiveList>
					break;
 800ce78:	e015      	b.n	800cea6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ce88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce8a:	f000 fbc5 	bl	800d618 <vPortFree>
 800ce8e:	e00a      	b.n	800cea6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce96:	f023 0301 	bic.w	r3, r3, #1
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cea2:	e000      	b.n	800cea6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800cea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cea6:	4b08      	ldr	r3, [pc, #32]	; (800cec8 <prvProcessReceivedCommands+0x1cc>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	1d39      	adds	r1, r7, #4
 800ceac:	2200      	movs	r2, #0
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fbe0 	bl	800b674 <xQueueReceive>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f47f af24 	bne.w	800cd04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cebc:	bf00      	nop
 800cebe:	bf00      	nop
 800cec0:	3730      	adds	r7, #48	; 0x30
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20000fe8 	.word	0x20000fe8

0800cecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ced2:	e04a      	b.n	800cf6a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ced4:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cede:	4b2c      	ldr	r3, [pc, #176]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe f8e1 	bl	800b0b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6a1b      	ldr	r3, [r3, #32]
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf00:	f003 0304 	and.w	r3, r3, #4
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d030      	beq.n	800cf6a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	4413      	add	r3, r2
 800cf10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d90e      	bls.n	800cf38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf26:	4b1a      	ldr	r3, [pc, #104]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fe f886 	bl	800b042 <vListInsert>
 800cf36:	e018      	b.n	800cf6a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf38:	2300      	movs	r3, #0
 800cf3a:	9300      	str	r3, [sp, #0]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	2100      	movs	r1, #0
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff fd56 	bl	800c9f4 <xTimerGenericCommand>
 800cf48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10c      	bne.n	800cf6a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	b672      	cpsid	i
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	b662      	cpsie	i
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf6a:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1af      	bne.n	800ced4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf74:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf7a:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <prvSwitchTimerLists+0xc8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a04      	ldr	r2, [pc, #16]	; (800cf90 <prvSwitchTimerLists+0xc4>)
 800cf80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf82:	4a04      	ldr	r2, [pc, #16]	; (800cf94 <prvSwitchTimerLists+0xc8>)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	6013      	str	r3, [r2, #0]
}
 800cf88:	bf00      	nop
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20000fe0 	.word	0x20000fe0
 800cf94:	20000fe4 	.word	0x20000fe4

0800cf98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf9e:	f000 f945 	bl	800d22c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfa2:	4b15      	ldr	r3, [pc, #84]	; (800cff8 <prvCheckForValidListAndQueue+0x60>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d120      	bne.n	800cfec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfaa:	4814      	ldr	r0, [pc, #80]	; (800cffc <prvCheckForValidListAndQueue+0x64>)
 800cfac:	f7fd fff8 	bl	800afa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfb0:	4813      	ldr	r0, [pc, #76]	; (800d000 <prvCheckForValidListAndQueue+0x68>)
 800cfb2:	f7fd fff5 	bl	800afa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfb6:	4b13      	ldr	r3, [pc, #76]	; (800d004 <prvCheckForValidListAndQueue+0x6c>)
 800cfb8:	4a10      	ldr	r2, [pc, #64]	; (800cffc <prvCheckForValidListAndQueue+0x64>)
 800cfba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfbc:	4b12      	ldr	r3, [pc, #72]	; (800d008 <prvCheckForValidListAndQueue+0x70>)
 800cfbe:	4a10      	ldr	r2, [pc, #64]	; (800d000 <prvCheckForValidListAndQueue+0x68>)
 800cfc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4b11      	ldr	r3, [pc, #68]	; (800d00c <prvCheckForValidListAndQueue+0x74>)
 800cfc8:	4a11      	ldr	r2, [pc, #68]	; (800d010 <prvCheckForValidListAndQueue+0x78>)
 800cfca:	2110      	movs	r1, #16
 800cfcc:	200a      	movs	r0, #10
 800cfce:	f7fe f905 	bl	800b1dc <xQueueGenericCreateStatic>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4a08      	ldr	r2, [pc, #32]	; (800cff8 <prvCheckForValidListAndQueue+0x60>)
 800cfd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <prvCheckForValidListAndQueue+0x60>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d005      	beq.n	800cfec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfe0:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <prvCheckForValidListAndQueue+0x60>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	490b      	ldr	r1, [pc, #44]	; (800d014 <prvCheckForValidListAndQueue+0x7c>)
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe fd3a 	bl	800ba60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfec:	f000 f952 	bl	800d294 <vPortExitCritical>
}
 800cff0:	bf00      	nop
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20000fe8 	.word	0x20000fe8
 800cffc:	20000fb8 	.word	0x20000fb8
 800d000:	20000fcc 	.word	0x20000fcc
 800d004:	20000fe0 	.word	0x20000fe0
 800d008:	20000fe4 	.word	0x20000fe4
 800d00c:	20001094 	.word	0x20001094
 800d010:	20000ff4 	.word	0x20000ff4
 800d014:	0800ed38 	.word	0x0800ed38

0800d018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3b04      	subs	r3, #4
 800d028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3b04      	subs	r3, #4
 800d036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f023 0201 	bic.w	r2, r3, #1
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3b04      	subs	r3, #4
 800d046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d048:	4a0c      	ldr	r2, [pc, #48]	; (800d07c <pxPortInitialiseStack+0x64>)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3b14      	subs	r3, #20
 800d052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3b04      	subs	r3, #4
 800d05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f06f 0202 	mvn.w	r2, #2
 800d066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3b20      	subs	r3, #32
 800d06c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d06e:	68fb      	ldr	r3, [r7, #12]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	0800d081 	.word	0x0800d081

0800d080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d08a:	4b14      	ldr	r3, [pc, #80]	; (800d0dc <prvTaskExitError+0x5c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d00c      	beq.n	800d0ae <prvTaskExitError+0x2e>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d098:	b672      	cpsid	i
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	b662      	cpsie	i
 800d0a8:	60fb      	str	r3, [r7, #12]
}
 800d0aa:	bf00      	nop
 800d0ac:	e7fe      	b.n	800d0ac <prvTaskExitError+0x2c>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	b672      	cpsid	i
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	b662      	cpsie	i
 800d0c2:	60bb      	str	r3, [r7, #8]
}
 800d0c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0c6:	bf00      	nop
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0fc      	beq.n	800d0c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	20000098 	.word	0x20000098

0800d0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0e0:	4b07      	ldr	r3, [pc, #28]	; (800d100 <pxCurrentTCBConst2>)
 800d0e2:	6819      	ldr	r1, [r3, #0]
 800d0e4:	6808      	ldr	r0, [r1, #0]
 800d0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ea:	f380 8809 	msr	PSP, r0
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f04f 0000 	mov.w	r0, #0
 800d0f6:	f380 8811 	msr	BASEPRI, r0
 800d0fa:	4770      	bx	lr
 800d0fc:	f3af 8000 	nop.w

0800d100 <pxCurrentTCBConst2>:
 800d100:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop

0800d108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d108:	4808      	ldr	r0, [pc, #32]	; (800d12c <prvPortStartFirstTask+0x24>)
 800d10a:	6800      	ldr	r0, [r0, #0]
 800d10c:	6800      	ldr	r0, [r0, #0]
 800d10e:	f380 8808 	msr	MSP, r0
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	f380 8814 	msr	CONTROL, r0
 800d11a:	b662      	cpsie	i
 800d11c:	b661      	cpsie	f
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	df00      	svc	0
 800d128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d12a:	bf00      	nop
 800d12c:	e000ed08 	.word	0xe000ed08

0800d130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d136:	4b37      	ldr	r3, [pc, #220]	; (800d214 <xPortStartScheduler+0xe4>)
 800d138:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	22ff      	movs	r2, #255	; 0xff
 800d146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	4b2f      	ldr	r3, [pc, #188]	; (800d218 <xPortStartScheduler+0xe8>)
 800d15c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d15e:	4b2f      	ldr	r3, [pc, #188]	; (800d21c <xPortStartScheduler+0xec>)
 800d160:	2207      	movs	r2, #7
 800d162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d164:	e009      	b.n	800d17a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d166:	4b2d      	ldr	r3, [pc, #180]	; (800d21c <xPortStartScheduler+0xec>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	4a2b      	ldr	r2, [pc, #172]	; (800d21c <xPortStartScheduler+0xec>)
 800d16e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	b2db      	uxtb	r3, r3
 800d178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d182:	2b80      	cmp	r3, #128	; 0x80
 800d184:	d0ef      	beq.n	800d166 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d186:	4b25      	ldr	r3, [pc, #148]	; (800d21c <xPortStartScheduler+0xec>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1c3 0307 	rsb	r3, r3, #7
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d00c      	beq.n	800d1ac <xPortStartScheduler+0x7c>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	b672      	cpsid	i
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	b662      	cpsie	i
 800d1a6:	60bb      	str	r3, [r7, #8]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1ac:	4b1b      	ldr	r3, [pc, #108]	; (800d21c <xPortStartScheduler+0xec>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	021b      	lsls	r3, r3, #8
 800d1b2:	4a1a      	ldr	r2, [pc, #104]	; (800d21c <xPortStartScheduler+0xec>)
 800d1b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1b6:	4b19      	ldr	r3, [pc, #100]	; (800d21c <xPortStartScheduler+0xec>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1be:	4a17      	ldr	r2, [pc, #92]	; (800d21c <xPortStartScheduler+0xec>)
 800d1c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1ca:	4b15      	ldr	r3, [pc, #84]	; (800d220 <xPortStartScheduler+0xf0>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a14      	ldr	r2, [pc, #80]	; (800d220 <xPortStartScheduler+0xf0>)
 800d1d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1d6:	4b12      	ldr	r3, [pc, #72]	; (800d220 <xPortStartScheduler+0xf0>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a11      	ldr	r2, [pc, #68]	; (800d220 <xPortStartScheduler+0xf0>)
 800d1dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1e2:	f000 f8dd 	bl	800d3a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <xPortStartScheduler+0xf4>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1ec:	f000 f8fc 	bl	800d3e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1f0:	4b0d      	ldr	r3, [pc, #52]	; (800d228 <xPortStartScheduler+0xf8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a0c      	ldr	r2, [pc, #48]	; (800d228 <xPortStartScheduler+0xf8>)
 800d1f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d1fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1fc:	f7ff ff84 	bl	800d108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d200:	f7ff f850 	bl	800c2a4 <vTaskSwitchContext>
	prvTaskExitError();
 800d204:	f7ff ff3c 	bl	800d080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	e000e400 	.word	0xe000e400
 800d218:	200010e4 	.word	0x200010e4
 800d21c:	200010e8 	.word	0x200010e8
 800d220:	e000ed20 	.word	0xe000ed20
 800d224:	20000098 	.word	0x20000098
 800d228:	e000ef34 	.word	0xe000ef34

0800d22c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	b672      	cpsid	i
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	b662      	cpsie	i
 800d246:	607b      	str	r3, [r7, #4]
}
 800d248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d24a:	4b10      	ldr	r3, [pc, #64]	; (800d28c <vPortEnterCritical+0x60>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3301      	adds	r3, #1
 800d250:	4a0e      	ldr	r2, [pc, #56]	; (800d28c <vPortEnterCritical+0x60>)
 800d252:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d254:	4b0d      	ldr	r3, [pc, #52]	; (800d28c <vPortEnterCritical+0x60>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d111      	bne.n	800d280 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d25c:	4b0c      	ldr	r3, [pc, #48]	; (800d290 <vPortEnterCritical+0x64>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00c      	beq.n	800d280 <vPortEnterCritical+0x54>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	b672      	cpsid	i
 800d26c:	f383 8811 	msr	BASEPRI, r3
 800d270:	f3bf 8f6f 	isb	sy
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	b662      	cpsie	i
 800d27a:	603b      	str	r3, [r7, #0]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <vPortEnterCritical+0x52>
	}
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	20000098 	.word	0x20000098
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d29a:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <vPortExitCritical+0x54>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10c      	bne.n	800d2bc <vPortExitCritical+0x28>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	b672      	cpsid	i
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	b662      	cpsie	i
 800d2b6:	607b      	str	r3, [r7, #4]
}
 800d2b8:	bf00      	nop
 800d2ba:	e7fe      	b.n	800d2ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <vPortExitCritical+0x54>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	4a09      	ldr	r2, [pc, #36]	; (800d2e8 <vPortExitCritical+0x54>)
 800d2c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2c6:	4b08      	ldr	r3, [pc, #32]	; (800d2e8 <vPortExitCritical+0x54>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d105      	bne.n	800d2da <vPortExitCritical+0x46>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	f383 8811 	msr	BASEPRI, r3
}
 800d2d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2da:	bf00      	nop
 800d2dc:	370c      	adds	r7, #12
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	20000098 	.word	0x20000098
 800d2ec:	00000000 	.word	0x00000000

0800d2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2f0:	f3ef 8009 	mrs	r0, PSP
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	4b15      	ldr	r3, [pc, #84]	; (800d350 <pxCurrentTCBConst>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	f01e 0f10 	tst.w	lr, #16
 800d300:	bf08      	it	eq
 800d302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30a:	6010      	str	r0, [r2, #0]
 800d30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d310:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d314:	b672      	cpsid	i
 800d316:	f380 8811 	msr	BASEPRI, r0
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	b662      	cpsie	i
 800d324:	f7fe ffbe 	bl	800c2a4 <vTaskSwitchContext>
 800d328:	f04f 0000 	mov.w	r0, #0
 800d32c:	f380 8811 	msr	BASEPRI, r0
 800d330:	bc09      	pop	{r0, r3}
 800d332:	6819      	ldr	r1, [r3, #0]
 800d334:	6808      	ldr	r0, [r1, #0]
 800d336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	f01e 0f10 	tst.w	lr, #16
 800d33e:	bf08      	it	eq
 800d340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d344:	f380 8809 	msr	PSP, r0
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop

0800d350 <pxCurrentTCBConst>:
 800d350:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop

0800d358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	607b      	str	r3, [r7, #4]
}
 800d374:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d376:	f7fe fed9 	bl	800c12c <xTaskIncrementTick>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d003      	beq.n	800d388 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d380:	4b06      	ldr	r3, [pc, #24]	; (800d39c <SysTick_Handler+0x44>)
 800d382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	2300      	movs	r3, #0
 800d38a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	f383 8811 	msr	BASEPRI, r3
}
 800d392:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	e000ed04 	.word	0xe000ed04

0800d3a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3a4:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <vPortSetupTimerInterrupt+0x34>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3aa:	4b0b      	ldr	r3, [pc, #44]	; (800d3d8 <vPortSetupTimerInterrupt+0x38>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3b0:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <vPortSetupTimerInterrupt+0x3c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a0a      	ldr	r2, [pc, #40]	; (800d3e0 <vPortSetupTimerInterrupt+0x40>)
 800d3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ba:	099b      	lsrs	r3, r3, #6
 800d3bc:	4a09      	ldr	r2, [pc, #36]	; (800d3e4 <vPortSetupTimerInterrupt+0x44>)
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3c2:	4b04      	ldr	r3, [pc, #16]	; (800d3d4 <vPortSetupTimerInterrupt+0x34>)
 800d3c4:	2207      	movs	r2, #7
 800d3c6:	601a      	str	r2, [r3, #0]
}
 800d3c8:	bf00      	nop
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	e000e010 	.word	0xe000e010
 800d3d8:	e000e018 	.word	0xe000e018
 800d3dc:	20000000 	.word	0x20000000
 800d3e0:	10624dd3 	.word	0x10624dd3
 800d3e4:	e000e014 	.word	0xe000e014

0800d3e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d3f8 <vPortEnableVFP+0x10>
 800d3ec:	6801      	ldr	r1, [r0, #0]
 800d3ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d3f2:	6001      	str	r1, [r0, #0]
 800d3f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3f6:	bf00      	nop
 800d3f8:	e000ed88 	.word	0xe000ed88

0800d3fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d402:	f3ef 8305 	mrs	r3, IPSR
 800d406:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b0f      	cmp	r3, #15
 800d40c:	d916      	bls.n	800d43c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d40e:	4a19      	ldr	r2, [pc, #100]	; (800d474 <vPortValidateInterruptPriority+0x78>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4413      	add	r3, r2
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d418:	4b17      	ldr	r3, [pc, #92]	; (800d478 <vPortValidateInterruptPriority+0x7c>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	7afa      	ldrb	r2, [r7, #11]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d20c      	bcs.n	800d43c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	b672      	cpsid	i
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	b662      	cpsie	i
 800d436:	607b      	str	r3, [r7, #4]
}
 800d438:	bf00      	nop
 800d43a:	e7fe      	b.n	800d43a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d43c:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <vPortValidateInterruptPriority+0x80>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d444:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <vPortValidateInterruptPriority+0x84>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d90c      	bls.n	800d466 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	b672      	cpsid	i
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	b662      	cpsie	i
 800d460:	603b      	str	r3, [r7, #0]
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <vPortValidateInterruptPriority+0x68>
	}
 800d466:	bf00      	nop
 800d468:	3714      	adds	r7, #20
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	e000e3f0 	.word	0xe000e3f0
 800d478:	200010e4 	.word	0x200010e4
 800d47c:	e000ed0c 	.word	0xe000ed0c
 800d480:	200010e8 	.word	0x200010e8

0800d484 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b08a      	sub	sp, #40	; 0x28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d48c:	2300      	movs	r3, #0
 800d48e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d490:	f7fe fd8e 	bl	800bfb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d494:	4b5b      	ldr	r3, [pc, #364]	; (800d604 <pvPortMalloc+0x180>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d101      	bne.n	800d4a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d49c:	f000 f91a 	bl	800d6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4a0:	4b59      	ldr	r3, [pc, #356]	; (800d608 <pvPortMalloc+0x184>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f040 8092 	bne.w	800d5d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d01f      	beq.n	800d4f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d4b4:	2208      	movs	r2, #8
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f003 0307 	and.w	r3, r3, #7
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d016      	beq.n	800d4f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f023 0307 	bic.w	r3, r3, #7
 800d4cc:	3308      	adds	r3, #8
 800d4ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00c      	beq.n	800d4f4 <pvPortMalloc+0x70>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	b672      	cpsid	i
 800d4e0:	f383 8811 	msr	BASEPRI, r3
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	f3bf 8f4f 	dsb	sy
 800d4ec:	b662      	cpsie	i
 800d4ee:	617b      	str	r3, [r7, #20]
}
 800d4f0:	bf00      	nop
 800d4f2:	e7fe      	b.n	800d4f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d06b      	beq.n	800d5d2 <pvPortMalloc+0x14e>
 800d4fa:	4b44      	ldr	r3, [pc, #272]	; (800d60c <pvPortMalloc+0x188>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	429a      	cmp	r2, r3
 800d502:	d866      	bhi.n	800d5d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d504:	4b42      	ldr	r3, [pc, #264]	; (800d610 <pvPortMalloc+0x18c>)
 800d506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d508:	4b41      	ldr	r3, [pc, #260]	; (800d610 <pvPortMalloc+0x18c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d50e:	e004      	b.n	800d51a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	d903      	bls.n	800d52c <pvPortMalloc+0xa8>
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1f1      	bne.n	800d510 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d52c:	4b35      	ldr	r3, [pc, #212]	; (800d604 <pvPortMalloc+0x180>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d532:	429a      	cmp	r2, r3
 800d534:	d04d      	beq.n	800d5d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2208      	movs	r2, #8
 800d53c:	4413      	add	r3, r2
 800d53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	2308      	movs	r3, #8
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	429a      	cmp	r2, r3
 800d556:	d921      	bls.n	800d59c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4413      	add	r3, r2
 800d55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	f003 0307 	and.w	r3, r3, #7
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00c      	beq.n	800d584 <pvPortMalloc+0x100>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	613b      	str	r3, [r7, #16]
}
 800d580:	bf00      	nop
 800d582:	e7fe      	b.n	800d582 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	1ad2      	subs	r2, r2, r3
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d596:	69b8      	ldr	r0, [r7, #24]
 800d598:	f000 f8fe 	bl	800d798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <pvPortMalloc+0x188>)
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	4a19      	ldr	r2, [pc, #100]	; (800d60c <pvPortMalloc+0x188>)
 800d5a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5aa:	4b18      	ldr	r3, [pc, #96]	; (800d60c <pvPortMalloc+0x188>)
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	4b19      	ldr	r3, [pc, #100]	; (800d614 <pvPortMalloc+0x190>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d203      	bcs.n	800d5be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5b6:	4b15      	ldr	r3, [pc, #84]	; (800d60c <pvPortMalloc+0x188>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a16      	ldr	r2, [pc, #88]	; (800d614 <pvPortMalloc+0x190>)
 800d5bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	685a      	ldr	r2, [r3, #4]
 800d5c2:	4b11      	ldr	r3, [pc, #68]	; (800d608 <pvPortMalloc+0x184>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d5d2:	f7fe fcfb 	bl	800bfcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	f003 0307 	and.w	r3, r3, #7
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00c      	beq.n	800d5fa <pvPortMalloc+0x176>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	b672      	cpsid	i
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	b662      	cpsie	i
 800d5f4:	60fb      	str	r3, [r7, #12]
}
 800d5f6:	bf00      	nop
 800d5f8:	e7fe      	b.n	800d5f8 <pvPortMalloc+0x174>
	return pvReturn;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3728      	adds	r7, #40	; 0x28
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20004cf4 	.word	0x20004cf4
 800d608:	20004d00 	.word	0x20004d00
 800d60c:	20004cf8 	.word	0x20004cf8
 800d610:	20004cec 	.word	0x20004cec
 800d614:	20004cfc 	.word	0x20004cfc

0800d618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d04c      	beq.n	800d6c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d62a:	2308      	movs	r3, #8
 800d62c:	425b      	negs	r3, r3
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	4413      	add	r3, r2
 800d632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	4b23      	ldr	r3, [pc, #140]	; (800d6cc <vPortFree+0xb4>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4013      	ands	r3, r2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10c      	bne.n	800d660 <vPortFree+0x48>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	b672      	cpsid	i
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	b662      	cpsie	i
 800d65a:	60fb      	str	r3, [r7, #12]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00c      	beq.n	800d682 <vPortFree+0x6a>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	b672      	cpsid	i
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	b662      	cpsie	i
 800d67c:	60bb      	str	r3, [r7, #8]
}
 800d67e:	bf00      	nop
 800d680:	e7fe      	b.n	800d680 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	4b11      	ldr	r3, [pc, #68]	; (800d6cc <vPortFree+0xb4>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4013      	ands	r3, r2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d019      	beq.n	800d6c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d115      	bne.n	800d6c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <vPortFree+0xb4>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	401a      	ands	r2, r3
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6a8:	f7fe fc82 	bl	800bfb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <vPortFree+0xb8>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <vPortFree+0xb8>)
 800d6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6ba:	6938      	ldr	r0, [r7, #16]
 800d6bc:	f000 f86c 	bl	800d798 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d6c0:	f7fe fc84 	bl	800bfcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6c4:	bf00      	nop
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20004d00 	.word	0x20004d00
 800d6d0:	20004cf8 	.word	0x20004cf8

0800d6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d6e0:	4b27      	ldr	r3, [pc, #156]	; (800d780 <prvHeapInit+0xac>)
 800d6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00c      	beq.n	800d708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	3307      	adds	r3, #7
 800d6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f023 0307 	bic.w	r3, r3, #7
 800d6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	4a1f      	ldr	r2, [pc, #124]	; (800d780 <prvHeapInit+0xac>)
 800d704:	4413      	add	r3, r2
 800d706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d70c:	4a1d      	ldr	r2, [pc, #116]	; (800d784 <prvHeapInit+0xb0>)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d712:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <prvHeapInit+0xb0>)
 800d714:	2200      	movs	r2, #0
 800d716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	4413      	add	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d720:	2208      	movs	r2, #8
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	1a9b      	subs	r3, r3, r2
 800d726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f023 0307 	bic.w	r3, r3, #7
 800d72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4a15      	ldr	r2, [pc, #84]	; (800d788 <prvHeapInit+0xb4>)
 800d734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d736:	4b14      	ldr	r3, [pc, #80]	; (800d788 <prvHeapInit+0xb4>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2200      	movs	r2, #0
 800d73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d73e:	4b12      	ldr	r3, [pc, #72]	; (800d788 <prvHeapInit+0xb4>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2200      	movs	r2, #0
 800d744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	1ad2      	subs	r2, r2, r3
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d754:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <prvHeapInit+0xb4>)
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <prvHeapInit+0xb8>)
 800d762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	4a09      	ldr	r2, [pc, #36]	; (800d790 <prvHeapInit+0xbc>)
 800d76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d76c:	4b09      	ldr	r3, [pc, #36]	; (800d794 <prvHeapInit+0xc0>)
 800d76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d772:	601a      	str	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	200010ec 	.word	0x200010ec
 800d784:	20004cec 	.word	0x20004cec
 800d788:	20004cf4 	.word	0x20004cf4
 800d78c:	20004cfc 	.word	0x20004cfc
 800d790:	20004cf8 	.word	0x20004cf8
 800d794:	20004d00 	.word	0x20004d00

0800d798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7a0:	4b28      	ldr	r3, [pc, #160]	; (800d844 <prvInsertBlockIntoFreeList+0xac>)
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e002      	b.n	800d7ac <prvInsertBlockIntoFreeList+0x14>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d8f7      	bhi.n	800d7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d108      	bne.n	800d7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	441a      	add	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	441a      	add	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d118      	bne.n	800d820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	4b15      	ldr	r3, [pc, #84]	; (800d848 <prvInsertBlockIntoFreeList+0xb0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d00d      	beq.n	800d816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	441a      	add	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	e008      	b.n	800d828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d816:	4b0c      	ldr	r3, [pc, #48]	; (800d848 <prvInsertBlockIntoFreeList+0xb0>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e003      	b.n	800d828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d002      	beq.n	800d836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	20004cec 	.word	0x20004cec
 800d848:	20004cf4 	.word	0x20004cf4

0800d84c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d850:	2200      	movs	r2, #0
 800d852:	4912      	ldr	r1, [pc, #72]	; (800d89c <MX_USB_DEVICE_Init+0x50>)
 800d854:	4812      	ldr	r0, [pc, #72]	; (800d8a0 <MX_USB_DEVICE_Init+0x54>)
 800d856:	f7fb ff0d 	bl	8009674 <USBD_Init>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d860:	f7f3 f9a8 	bl	8000bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d864:	490f      	ldr	r1, [pc, #60]	; (800d8a4 <MX_USB_DEVICE_Init+0x58>)
 800d866:	480e      	ldr	r0, [pc, #56]	; (800d8a0 <MX_USB_DEVICE_Init+0x54>)
 800d868:	f7fb ff34 	bl	80096d4 <USBD_RegisterClass>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d872:	f7f3 f99f 	bl	8000bb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d876:	490c      	ldr	r1, [pc, #48]	; (800d8a8 <MX_USB_DEVICE_Init+0x5c>)
 800d878:	4809      	ldr	r0, [pc, #36]	; (800d8a0 <MX_USB_DEVICE_Init+0x54>)
 800d87a:	f7fb fe2b 	bl	80094d4 <USBD_CDC_RegisterInterface>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d884:	f7f3 f996 	bl	8000bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d888:	4805      	ldr	r0, [pc, #20]	; (800d8a0 <MX_USB_DEVICE_Init+0x54>)
 800d88a:	f7fb ff59 	bl	8009740 <USBD_Start>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d894:	f7f3 f98e 	bl	8000bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d898:	bf00      	nop
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	200000b0 	.word	0x200000b0
 800d8a0:	20004d04 	.word	0x20004d04
 800d8a4:	20000018 	.word	0x20000018
 800d8a8:	2000009c 	.word	0x2000009c

0800d8ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4905      	ldr	r1, [pc, #20]	; (800d8c8 <CDC_Init_FS+0x1c>)
 800d8b4:	4805      	ldr	r0, [pc, #20]	; (800d8cc <CDC_Init_FS+0x20>)
 800d8b6:	f7fb fe27 	bl	8009508 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d8ba:	4905      	ldr	r1, [pc, #20]	; (800d8d0 <CDC_Init_FS+0x24>)
 800d8bc:	4803      	ldr	r0, [pc, #12]	; (800d8cc <CDC_Init_FS+0x20>)
 800d8be:	f7fb fe45 	bl	800954c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	200057e0 	.word	0x200057e0
 800d8cc:	20004d04 	.word	0x20004d04
 800d8d0:	20004fe0 	.word	0x20004fe0

0800d8d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	6039      	str	r1, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	2b23      	cmp	r3, #35	; 0x23
 800d8f8:	d84a      	bhi.n	800d990 <CDC_Control_FS+0xac>
 800d8fa:	a201      	add	r2, pc, #4	; (adr r2, 800d900 <CDC_Control_FS+0x1c>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d991 	.word	0x0800d991
 800d904:	0800d991 	.word	0x0800d991
 800d908:	0800d991 	.word	0x0800d991
 800d90c:	0800d991 	.word	0x0800d991
 800d910:	0800d991 	.word	0x0800d991
 800d914:	0800d991 	.word	0x0800d991
 800d918:	0800d991 	.word	0x0800d991
 800d91c:	0800d991 	.word	0x0800d991
 800d920:	0800d991 	.word	0x0800d991
 800d924:	0800d991 	.word	0x0800d991
 800d928:	0800d991 	.word	0x0800d991
 800d92c:	0800d991 	.word	0x0800d991
 800d930:	0800d991 	.word	0x0800d991
 800d934:	0800d991 	.word	0x0800d991
 800d938:	0800d991 	.word	0x0800d991
 800d93c:	0800d991 	.word	0x0800d991
 800d940:	0800d991 	.word	0x0800d991
 800d944:	0800d991 	.word	0x0800d991
 800d948:	0800d991 	.word	0x0800d991
 800d94c:	0800d991 	.word	0x0800d991
 800d950:	0800d991 	.word	0x0800d991
 800d954:	0800d991 	.word	0x0800d991
 800d958:	0800d991 	.word	0x0800d991
 800d95c:	0800d991 	.word	0x0800d991
 800d960:	0800d991 	.word	0x0800d991
 800d964:	0800d991 	.word	0x0800d991
 800d968:	0800d991 	.word	0x0800d991
 800d96c:	0800d991 	.word	0x0800d991
 800d970:	0800d991 	.word	0x0800d991
 800d974:	0800d991 	.word	0x0800d991
 800d978:	0800d991 	.word	0x0800d991
 800d97c:	0800d991 	.word	0x0800d991
 800d980:	0800d991 	.word	0x0800d991
 800d984:	0800d991 	.word	0x0800d991
 800d988:	0800d991 	.word	0x0800d991
 800d98c:	0800d991 	.word	0x0800d991
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d990:	bf00      	nop
  }

  return (USBD_OK);
 800d992:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	4805      	ldr	r0, [pc, #20]	; (800d9c4 <CDC_Receive_FS+0x24>)
 800d9ae:	f7fb fdcd 	bl	800954c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d9b2:	4804      	ldr	r0, [pc, #16]	; (800d9c4 <CDC_Receive_FS+0x24>)
 800d9b4:	f7fb fe28 	bl	8009608 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d9b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20004d04 	.word	0x20004d04

0800d9c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d9d8:	4b0d      	ldr	r3, [pc, #52]	; (800da10 <CDC_Transmit_FS+0x48>)
 800d9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e00b      	b.n	800da06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9ee:	887b      	ldrh	r3, [r7, #2]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	4806      	ldr	r0, [pc, #24]	; (800da10 <CDC_Transmit_FS+0x48>)
 800d9f6:	f7fb fd87 	bl	8009508 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9fa:	4805      	ldr	r0, [pc, #20]	; (800da10 <CDC_Transmit_FS+0x48>)
 800d9fc:	f7fb fdc4 	bl	8009588 <USBD_CDC_TransmitPacket>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	20004d04 	.word	0x20004d04

0800da14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4613      	mov	r3, r2
 800da20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	371c      	adds	r7, #28
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
	...

0800da38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2212      	movs	r2, #18
 800da48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800da4a:	4b03      	ldr	r3, [pc, #12]	; (800da58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	200000d0 	.word	0x200000d0

0800da5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	4603      	mov	r3, r0
 800da64:	6039      	str	r1, [r7, #0]
 800da66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2204      	movs	r2, #4
 800da6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da6e:	4b03      	ldr	r3, [pc, #12]	; (800da7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	200000f0 	.word	0x200000f0

0800da80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	4603      	mov	r3, r0
 800da88:	6039      	str	r1, [r7, #0]
 800da8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da8c:	79fb      	ldrb	r3, [r7, #7]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	4907      	ldr	r1, [pc, #28]	; (800dab4 <USBD_FS_ProductStrDescriptor+0x34>)
 800da96:	4808      	ldr	r0, [pc, #32]	; (800dab8 <USBD_FS_ProductStrDescriptor+0x38>)
 800da98:	f7fd f828 	bl	800aaec <USBD_GetString>
 800da9c:	e004      	b.n	800daa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	4904      	ldr	r1, [pc, #16]	; (800dab4 <USBD_FS_ProductStrDescriptor+0x34>)
 800daa2:	4805      	ldr	r0, [pc, #20]	; (800dab8 <USBD_FS_ProductStrDescriptor+0x38>)
 800daa4:	f7fd f822 	bl	800aaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800daa8:	4b02      	ldr	r3, [pc, #8]	; (800dab4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20005fe0 	.word	0x20005fe0
 800dab8:	0800ed40 	.word	0x0800ed40

0800dabc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	6039      	str	r1, [r7, #0]
 800dac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	4904      	ldr	r1, [pc, #16]	; (800dadc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dacc:	4804      	ldr	r0, [pc, #16]	; (800dae0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dace:	f7fd f80d 	bl	800aaec <USBD_GetString>
  return USBD_StrDesc;
 800dad2:	4b02      	ldr	r3, [pc, #8]	; (800dadc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20005fe0 	.word	0x20005fe0
 800dae0:	0800ed58 	.word	0x0800ed58

0800dae4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	4603      	mov	r3, r0
 800daec:	6039      	str	r1, [r7, #0]
 800daee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	221a      	movs	r2, #26
 800daf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800daf6:	f000 f855 	bl	800dba4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dafa:	4b02      	ldr	r3, [pc, #8]	; (800db04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	200000f4 	.word	0x200000f4

0800db08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	4603      	mov	r3, r0
 800db10:	6039      	str	r1, [r7, #0]
 800db12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d105      	bne.n	800db26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4907      	ldr	r1, [pc, #28]	; (800db3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db1e:	4808      	ldr	r0, [pc, #32]	; (800db40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db20:	f7fc ffe4 	bl	800aaec <USBD_GetString>
 800db24:	e004      	b.n	800db30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	4904      	ldr	r1, [pc, #16]	; (800db3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800db2a:	4805      	ldr	r0, [pc, #20]	; (800db40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800db2c:	f7fc ffde 	bl	800aaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800db30:	4b02      	ldr	r3, [pc, #8]	; (800db3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db32:	4618      	mov	r0, r3
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20005fe0 	.word	0x20005fe0
 800db40:	0800ed6c 	.word	0x0800ed6c

0800db44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	6039      	str	r1, [r7, #0]
 800db4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d105      	bne.n	800db62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	4907      	ldr	r1, [pc, #28]	; (800db78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db5a:	4808      	ldr	r0, [pc, #32]	; (800db7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db5c:	f7fc ffc6 	bl	800aaec <USBD_GetString>
 800db60:	e004      	b.n	800db6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	4904      	ldr	r1, [pc, #16]	; (800db78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db66:	4805      	ldr	r0, [pc, #20]	; (800db7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db68:	f7fc ffc0 	bl	800aaec <USBD_GetString>
  }
  return USBD_StrDesc;
 800db6c:	4b02      	ldr	r3, [pc, #8]	; (800db78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20005fe0 	.word	0x20005fe0
 800db7c:	0800ed78 	.word	0x0800ed78

0800db80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	220c      	movs	r2, #12
 800db90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800db92:	4b03      	ldr	r3, [pc, #12]	; (800dba0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	200000e4 	.word	0x200000e4

0800dba4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbaa:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <Get_SerialNum+0x44>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <Get_SerialNum+0x48>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbb6:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <Get_SerialNum+0x4c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d009      	beq.n	800dbde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dbca:	2208      	movs	r2, #8
 800dbcc:	4909      	ldr	r1, [pc, #36]	; (800dbf4 <Get_SerialNum+0x50>)
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 f814 	bl	800dbfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dbd4:	2204      	movs	r2, #4
 800dbd6:	4908      	ldr	r1, [pc, #32]	; (800dbf8 <Get_SerialNum+0x54>)
 800dbd8:	68b8      	ldr	r0, [r7, #8]
 800dbda:	f000 f80f 	bl	800dbfc <IntToUnicode>
  }
}
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	1ff0f420 	.word	0x1ff0f420
 800dbec:	1ff0f424 	.word	0x1ff0f424
 800dbf0:	1ff0f428 	.word	0x1ff0f428
 800dbf4:	200000f6 	.word	0x200000f6
 800dbf8:	20000106 	.word	0x20000106

0800dbfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	4613      	mov	r3, r2
 800dc08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
 800dc12:	e027      	b.n	800dc64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	0f1b      	lsrs	r3, r3, #28
 800dc18:	2b09      	cmp	r3, #9
 800dc1a:	d80b      	bhi.n	800dc34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	0f1b      	lsrs	r3, r3, #28
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	7dfb      	ldrb	r3, [r7, #23]
 800dc24:	005b      	lsls	r3, r3, #1
 800dc26:	4619      	mov	r1, r3
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	440b      	add	r3, r1
 800dc2c:	3230      	adds	r2, #48	; 0x30
 800dc2e:	b2d2      	uxtb	r2, r2
 800dc30:	701a      	strb	r2, [r3, #0]
 800dc32:	e00a      	b.n	800dc4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	0f1b      	lsrs	r3, r3, #28
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	7dfb      	ldrb	r3, [r7, #23]
 800dc3c:	005b      	lsls	r3, r3, #1
 800dc3e:	4619      	mov	r1, r3
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	440b      	add	r3, r1
 800dc44:	3237      	adds	r2, #55	; 0x37
 800dc46:	b2d2      	uxtb	r2, r2
 800dc48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	011b      	lsls	r3, r3, #4
 800dc4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	3301      	adds	r3, #1
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	4413      	add	r3, r2
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	3301      	adds	r3, #1
 800dc62:	75fb      	strb	r3, [r7, #23]
 800dc64:	7dfa      	ldrb	r2, [r7, #23]
 800dc66:	79fb      	ldrb	r3, [r7, #7]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d3d3      	bcc.n	800dc14 <IntToUnicode+0x18>
  }
}
 800dc6c:	bf00      	nop
 800dc6e:	bf00      	nop
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
	...

0800dc7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b0ae      	sub	sp, #184	; 0xb8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dc88:	2200      	movs	r2, #0
 800dc8a:	601a      	str	r2, [r3, #0]
 800dc8c:	605a      	str	r2, [r3, #4]
 800dc8e:	609a      	str	r2, [r3, #8]
 800dc90:	60da      	str	r2, [r3, #12]
 800dc92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dc94:	f107 0314 	add.w	r3, r7, #20
 800dc98:	2290      	movs	r2, #144	; 0x90
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 fc47 	bl	800e530 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcaa:	d161      	bne.n	800dd70 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dcac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dcb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcb8:	f107 0314 	add.w	r3, r7, #20
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f7 fc97 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dcc8:	f7f2 ff74 	bl	8000bb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dccc:	4b2a      	ldr	r3, [pc, #168]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd0:	4a29      	ldr	r2, [pc, #164]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dcd2:	f043 0301 	orr.w	r3, r3, #1
 800dcd6:	6313      	str	r3, [r2, #48]	; 0x30
 800dcd8:	4b27      	ldr	r3, [pc, #156]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	613b      	str	r3, [r7, #16]
 800dce2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dcec:	2300      	movs	r3, #0
 800dcee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	481f      	ldr	r0, [pc, #124]	; (800dd7c <HAL_PCD_MspInit+0x100>)
 800dd00:	f7f5 fae2 	bl	80032c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dd04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd18:	2303      	movs	r3, #3
 800dd1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd1e:	230a      	movs	r3, #10
 800dd20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4814      	ldr	r0, [pc, #80]	; (800dd7c <HAL_PCD_MspInit+0x100>)
 800dd2c:	f7f5 facc 	bl	80032c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd30:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd34:	4a10      	ldr	r2, [pc, #64]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd3a:	6353      	str	r3, [r2, #52]	; 0x34
 800dd3c:	4b0e      	ldr	r3, [pc, #56]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd44:	60fb      	str	r3, [r7, #12]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	4b0b      	ldr	r3, [pc, #44]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd4c:	4a0a      	ldr	r2, [pc, #40]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd52:	6453      	str	r3, [r2, #68]	; 0x44
 800dd54:	4b08      	ldr	r3, [pc, #32]	; (800dd78 <HAL_PCD_MspInit+0xfc>)
 800dd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd5c:	60bb      	str	r3, [r7, #8]
 800dd5e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dd60:	2200      	movs	r2, #0
 800dd62:	2105      	movs	r1, #5
 800dd64:	2043      	movs	r0, #67	; 0x43
 800dd66:	f7f4 fe7b 	bl	8002a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd6a:	2043      	movs	r0, #67	; 0x43
 800dd6c:	f7f4 fe94 	bl	8002a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd70:	bf00      	nop
 800dd72:	37b8      	adds	r7, #184	; 0xb8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	40023800 	.word	0x40023800
 800dd7c:	40020000 	.word	0x40020000

0800dd80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dd94:	4619      	mov	r1, r3
 800dd96:	4610      	mov	r0, r2
 800dd98:	f7fb fd1f 	bl	80097da <USBD_LL_SetupStage>
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ddb6:	78fa      	ldrb	r2, [r7, #3]
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	4413      	add	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	440b      	add	r3, r1
 800ddc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f7fb fd59 	bl	8009884 <USBD_LL_DataOutStage>
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	460b      	mov	r3, r1
 800dde4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ddec:	78fa      	ldrb	r2, [r7, #3]
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	440b      	add	r3, r1
 800ddfa:	334c      	adds	r3, #76	; 0x4c
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	78fb      	ldrb	r3, [r7, #3]
 800de00:	4619      	mov	r1, r3
 800de02:	f7fb fdf2 	bl	80099ea <USBD_LL_DataInStage>
}
 800de06:	bf00      	nop
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fb ff26 	bl	8009c6e <USBD_LL_SOF>
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de32:	2301      	movs	r3, #1
 800de34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d102      	bne.n	800de44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800de3e:	2300      	movs	r3, #0
 800de40:	73fb      	strb	r3, [r7, #15]
 800de42:	e008      	b.n	800de56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d102      	bne.n	800de52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800de4c:	2301      	movs	r3, #1
 800de4e:	73fb      	strb	r3, [r7, #15]
 800de50:	e001      	b.n	800de56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800de52:	f7f2 feaf 	bl	8000bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de5c:	7bfa      	ldrb	r2, [r7, #15]
 800de5e:	4611      	mov	r1, r2
 800de60:	4618      	mov	r0, r3
 800de62:	f7fb fec6 	bl	8009bf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fb fe6e 	bl	8009b4e <USBD_LL_Reset>
}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
	...

0800de7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fb fec1 	bl	8009c12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	6812      	ldr	r2, [r2, #0]
 800de9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dea2:	f043 0301 	orr.w	r3, r3, #1
 800dea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a1b      	ldr	r3, [r3, #32]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d005      	beq.n	800debc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800deb0:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <HAL_PCD_SuspendCallback+0x48>)
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	4a03      	ldr	r2, [pc, #12]	; (800dec4 <HAL_PCD_SuspendCallback+0x48>)
 800deb6:	f043 0306 	orr.w	r3, r3, #6
 800deba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	e000ed00 	.word	0xe000ed00

0800dec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fb feb1 	bl	8009c3e <USBD_LL_Resume>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800def6:	78fa      	ldrb	r2, [r7, #3]
 800def8:	4611      	mov	r1, r2
 800defa:	4618      	mov	r0, r3
 800defc:	f7fb ff09 	bl	8009d12 <USBD_LL_IsoOUTIncomplete>
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df1a:	78fa      	ldrb	r2, [r7, #3]
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fb fec5 	bl	8009cae <USBD_LL_IsoINIncomplete>
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fb ff1b 	bl	8009d76 <USBD_LL_DevConnected>
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df56:	4618      	mov	r0, r3
 800df58:	f7fb ff18 	bl	8009d8c <USBD_LL_DevDisconnected>
}
 800df5c:	bf00      	nop
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d13c      	bne.n	800dfee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800df74:	4a20      	ldr	r2, [pc, #128]	; (800dff8 <USBD_LL_Init+0x94>)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a1e      	ldr	r2, [pc, #120]	; (800dff8 <USBD_LL_Init+0x94>)
 800df80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df84:	4b1c      	ldr	r3, [pc, #112]	; (800dff8 <USBD_LL_Init+0x94>)
 800df86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800df8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800df8c:	4b1a      	ldr	r3, [pc, #104]	; (800dff8 <USBD_LL_Init+0x94>)
 800df8e:	2206      	movs	r2, #6
 800df90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800df92:	4b19      	ldr	r3, [pc, #100]	; (800dff8 <USBD_LL_Init+0x94>)
 800df94:	2202      	movs	r2, #2
 800df96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df98:	4b17      	ldr	r3, [pc, #92]	; (800dff8 <USBD_LL_Init+0x94>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df9e:	4b16      	ldr	r3, [pc, #88]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dfa4:	4b14      	ldr	r3, [pc, #80]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dfaa:	4b13      	ldr	r3, [pc, #76]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dfb0:	4b11      	ldr	r3, [pc, #68]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800dfb6:	4b10      	ldr	r3, [pc, #64]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dfbc:	4b0e      	ldr	r3, [pc, #56]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dfc2:	480d      	ldr	r0, [pc, #52]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfc4:	f7f5 fb46 	bl	8003654 <HAL_PCD_Init>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dfce:	f7f2 fdf1 	bl	8000bb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dfd2:	2180      	movs	r1, #128	; 0x80
 800dfd4:	4808      	ldr	r0, [pc, #32]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfd6:	f7f6 fdc0 	bl	8004b5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dfda:	2240      	movs	r2, #64	; 0x40
 800dfdc:	2100      	movs	r1, #0
 800dfde:	4806      	ldr	r0, [pc, #24]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfe0:	f7f6 fd74 	bl	8004acc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dfe4:	2280      	movs	r2, #128	; 0x80
 800dfe6:	2101      	movs	r1, #1
 800dfe8:	4803      	ldr	r0, [pc, #12]	; (800dff8 <USBD_LL_Init+0x94>)
 800dfea:	f7f6 fd6f 	bl	8004acc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	200061e0 	.word	0x200061e0

0800dffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e012:	4618      	mov	r0, r3
 800e014:	f7f5 fc42 	bl	800389c <HAL_PCD_Start>
 800e018:	4603      	mov	r3, r0
 800e01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f97e 	bl	800e320 <USBD_Get_USB_Status>
 800e024:	4603      	mov	r3, r0
 800e026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e028:	7bbb      	ldrb	r3, [r7, #14]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b084      	sub	sp, #16
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	4608      	mov	r0, r1
 800e03c:	4611      	mov	r1, r2
 800e03e:	461a      	mov	r2, r3
 800e040:	4603      	mov	r3, r0
 800e042:	70fb      	strb	r3, [r7, #3]
 800e044:	460b      	mov	r3, r1
 800e046:	70bb      	strb	r3, [r7, #2]
 800e048:	4613      	mov	r3, r2
 800e04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e05a:	78bb      	ldrb	r3, [r7, #2]
 800e05c:	883a      	ldrh	r2, [r7, #0]
 800e05e:	78f9      	ldrb	r1, [r7, #3]
 800e060:	f7f6 f92f 	bl	80042c2 <HAL_PCD_EP_Open>
 800e064:	4603      	mov	r3, r0
 800e066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f958 	bl	800e320 <USBD_Get_USB_Status>
 800e070:	4603      	mov	r3, r0
 800e072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e074:	7bbb      	ldrb	r3, [r7, #14]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	460b      	mov	r3, r1
 800e088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e098:	78fa      	ldrb	r2, [r7, #3]
 800e09a:	4611      	mov	r1, r2
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7f6 f978 	bl	8004392 <HAL_PCD_EP_Close>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f939 	bl	800e320 <USBD_Get_USB_Status>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0d6:	78fa      	ldrb	r2, [r7, #3]
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f6 fa50 	bl	8004580 <HAL_PCD_EP_SetStall>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 f91a 	bl	800e320 <USBD_Get_USB_Status>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b084      	sub	sp, #16
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	460b      	mov	r3, r1
 800e104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e114:	78fa      	ldrb	r2, [r7, #3]
 800e116:	4611      	mov	r1, r2
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f6 fa95 	bl	8004648 <HAL_PCD_EP_ClrStall>
 800e11e:	4603      	mov	r3, r0
 800e120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	4618      	mov	r0, r3
 800e126:	f000 f8fb 	bl	800e320 <USBD_Get_USB_Status>
 800e12a:	4603      	mov	r3, r0
 800e12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	460b      	mov	r3, r1
 800e142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e150:	2b00      	cmp	r3, #0
 800e152:	da0b      	bge.n	800e16c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e154:	78fb      	ldrb	r3, [r7, #3]
 800e156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e15a:	68f9      	ldr	r1, [r7, #12]
 800e15c:	4613      	mov	r3, r2
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	440b      	add	r3, r1
 800e166:	333e      	adds	r3, #62	; 0x3e
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	e00b      	b.n	800e184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e16c:	78fb      	ldrb	r3, [r7, #3]
 800e16e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e172:	68f9      	ldr	r1, [r7, #12]
 800e174:	4613      	mov	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	440b      	add	r3, r1
 800e17e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e182:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	460b      	mov	r3, r1
 800e19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1aa:	78fa      	ldrb	r2, [r7, #3]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7f6 f862 	bl	8004278 <HAL_PCD_SetAddress>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 f8b0 	bl	800e320 <USBD_Get_USB_Status>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b086      	sub	sp, #24
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	60f8      	str	r0, [r7, #12]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1ec:	7af9      	ldrb	r1, [r7, #11]
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	f7f6 f97b 	bl	80044ec <HAL_PCD_EP_Transmit>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 f88f 	bl	800e320 <USBD_Get_USB_Status>
 800e202:	4603      	mov	r3, r0
 800e204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e206:	7dbb      	ldrb	r3, [r7, #22]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	607a      	str	r2, [r7, #4]
 800e21a:	603b      	str	r3, [r7, #0]
 800e21c:	460b      	mov	r3, r1
 800e21e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e224:	2300      	movs	r3, #0
 800e226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e22e:	7af9      	ldrb	r1, [r7, #11]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	f7f6 f8f7 	bl	8004426 <HAL_PCD_EP_Receive>
 800e238:	4603      	mov	r3, r0
 800e23a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	4618      	mov	r0, r3
 800e240:	f000 f86e 	bl	800e320 <USBD_Get_USB_Status>
 800e244:	4603      	mov	r3, r0
 800e246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e248:	7dbb      	ldrb	r3, [r7, #22]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e252:	b580      	push	{r7, lr}
 800e254:	b082      	sub	sp, #8
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
 800e25a:	460b      	mov	r3, r1
 800e25c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e264:	78fa      	ldrb	r2, [r7, #3]
 800e266:	4611      	mov	r1, r2
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f6 f927 	bl	80044bc <HAL_PCD_EP_GetRxCount>
 800e26e:	4603      	mov	r3, r0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <HAL_PCDEx_LPM_Callback+0x18>
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d01f      	beq.n	800e2ce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e28e:	e03b      	b.n	800e308 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a1b      	ldr	r3, [r3, #32]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d007      	beq.n	800e2a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e298:	f000 f83c 	bl	800e314 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e29c:	4b1c      	ldr	r3, [pc, #112]	; (800e310 <HAL_PCDEx_LPM_Callback+0x98>)
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	4a1b      	ldr	r2, [pc, #108]	; (800e310 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2a2:	f023 0306 	bic.w	r3, r3, #6
 800e2a6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	6812      	ldr	r2, [r2, #0]
 800e2b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2ba:	f023 0301 	bic.w	r3, r3, #1
 800e2be:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fb fcb9 	bl	8009c3e <USBD_LL_Resume>
    break;
 800e2cc:	e01c      	b.n	800e308 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	6812      	ldr	r2, [r2, #0]
 800e2dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fb fc90 	bl	8009c12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d005      	beq.n	800e306 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	4a04      	ldr	r2, [pc, #16]	; (800e310 <HAL_PCDEx_LPM_Callback+0x98>)
 800e300:	f043 0306 	orr.w	r3, r3, #6
 800e304:	6113      	str	r3, [r2, #16]
    break;
 800e306:	bf00      	nop
}
 800e308:	bf00      	nop
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	e000ed00 	.word	0xe000ed00

0800e314 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e318:	f7f2 fa1c 	bl	8000754 <SystemClock_Config>
}
 800e31c:	bf00      	nop
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32a:	2300      	movs	r3, #0
 800e32c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	2b03      	cmp	r3, #3
 800e332:	d817      	bhi.n	800e364 <USBD_Get_USB_Status+0x44>
 800e334:	a201      	add	r2, pc, #4	; (adr r2, 800e33c <USBD_Get_USB_Status+0x1c>)
 800e336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33a:	bf00      	nop
 800e33c:	0800e34d 	.word	0x0800e34d
 800e340:	0800e353 	.word	0x0800e353
 800e344:	0800e359 	.word	0x0800e359
 800e348:	0800e35f 	.word	0x0800e35f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]
    break;
 800e350:	e00b      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e352:	2303      	movs	r3, #3
 800e354:	73fb      	strb	r3, [r7, #15]
    break;
 800e356:	e008      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e358:	2301      	movs	r3, #1
 800e35a:	73fb      	strb	r3, [r7, #15]
    break;
 800e35c:	e005      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e35e:	2303      	movs	r3, #3
 800e360:	73fb      	strb	r3, [r7, #15]
    break;
 800e362:	e002      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e364:	2303      	movs	r3, #3
 800e366:	73fb      	strb	r3, [r7, #15]
    break;
 800e368:	bf00      	nop
  }
  return usb_status;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <malloc>:
 800e378:	4b02      	ldr	r3, [pc, #8]	; (800e384 <malloc+0xc>)
 800e37a:	4601      	mov	r1, r0
 800e37c:	6818      	ldr	r0, [r3, #0]
 800e37e:	f000 b82b 	b.w	800e3d8 <_malloc_r>
 800e382:	bf00      	nop
 800e384:	2000015c 	.word	0x2000015c

0800e388 <free>:
 800e388:	4b02      	ldr	r3, [pc, #8]	; (800e394 <free+0xc>)
 800e38a:	4601      	mov	r1, r0
 800e38c:	6818      	ldr	r0, [r3, #0]
 800e38e:	f000 b921 	b.w	800e5d4 <_free_r>
 800e392:	bf00      	nop
 800e394:	2000015c 	.word	0x2000015c

0800e398 <sbrk_aligned>:
 800e398:	b570      	push	{r4, r5, r6, lr}
 800e39a:	4e0e      	ldr	r6, [pc, #56]	; (800e3d4 <sbrk_aligned+0x3c>)
 800e39c:	460c      	mov	r4, r1
 800e39e:	6831      	ldr	r1, [r6, #0]
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	b911      	cbnz	r1, 800e3aa <sbrk_aligned+0x12>
 800e3a4:	f000 f8cc 	bl	800e540 <_sbrk_r>
 800e3a8:	6030      	str	r0, [r6, #0]
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f000 f8c7 	bl	800e540 <_sbrk_r>
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d00a      	beq.n	800e3cc <sbrk_aligned+0x34>
 800e3b6:	1cc4      	adds	r4, r0, #3
 800e3b8:	f024 0403 	bic.w	r4, r4, #3
 800e3bc:	42a0      	cmp	r0, r4
 800e3be:	d007      	beq.n	800e3d0 <sbrk_aligned+0x38>
 800e3c0:	1a21      	subs	r1, r4, r0
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	f000 f8bc 	bl	800e540 <_sbrk_r>
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d101      	bne.n	800e3d0 <sbrk_aligned+0x38>
 800e3cc:	f04f 34ff 	mov.w	r4, #4294967295
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}
 800e3d4:	200066ec 	.word	0x200066ec

0800e3d8 <_malloc_r>:
 800e3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3dc:	1ccd      	adds	r5, r1, #3
 800e3de:	f025 0503 	bic.w	r5, r5, #3
 800e3e2:	3508      	adds	r5, #8
 800e3e4:	2d0c      	cmp	r5, #12
 800e3e6:	bf38      	it	cc
 800e3e8:	250c      	movcc	r5, #12
 800e3ea:	2d00      	cmp	r5, #0
 800e3ec:	4607      	mov	r7, r0
 800e3ee:	db01      	blt.n	800e3f4 <_malloc_r+0x1c>
 800e3f0:	42a9      	cmp	r1, r5
 800e3f2:	d905      	bls.n	800e400 <_malloc_r+0x28>
 800e3f4:	230c      	movs	r3, #12
 800e3f6:	603b      	str	r3, [r7, #0]
 800e3f8:	2600      	movs	r6, #0
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e4d4 <_malloc_r+0xfc>
 800e404:	f000 f868 	bl	800e4d8 <__malloc_lock>
 800e408:	f8d8 3000 	ldr.w	r3, [r8]
 800e40c:	461c      	mov	r4, r3
 800e40e:	bb5c      	cbnz	r4, 800e468 <_malloc_r+0x90>
 800e410:	4629      	mov	r1, r5
 800e412:	4638      	mov	r0, r7
 800e414:	f7ff ffc0 	bl	800e398 <sbrk_aligned>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	4604      	mov	r4, r0
 800e41c:	d155      	bne.n	800e4ca <_malloc_r+0xf2>
 800e41e:	f8d8 4000 	ldr.w	r4, [r8]
 800e422:	4626      	mov	r6, r4
 800e424:	2e00      	cmp	r6, #0
 800e426:	d145      	bne.n	800e4b4 <_malloc_r+0xdc>
 800e428:	2c00      	cmp	r4, #0
 800e42a:	d048      	beq.n	800e4be <_malloc_r+0xe6>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	4631      	mov	r1, r6
 800e430:	4638      	mov	r0, r7
 800e432:	eb04 0903 	add.w	r9, r4, r3
 800e436:	f000 f883 	bl	800e540 <_sbrk_r>
 800e43a:	4581      	cmp	r9, r0
 800e43c:	d13f      	bne.n	800e4be <_malloc_r+0xe6>
 800e43e:	6821      	ldr	r1, [r4, #0]
 800e440:	1a6d      	subs	r5, r5, r1
 800e442:	4629      	mov	r1, r5
 800e444:	4638      	mov	r0, r7
 800e446:	f7ff ffa7 	bl	800e398 <sbrk_aligned>
 800e44a:	3001      	adds	r0, #1
 800e44c:	d037      	beq.n	800e4be <_malloc_r+0xe6>
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	442b      	add	r3, r5
 800e452:	6023      	str	r3, [r4, #0]
 800e454:	f8d8 3000 	ldr.w	r3, [r8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d038      	beq.n	800e4ce <_malloc_r+0xf6>
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	42a2      	cmp	r2, r4
 800e460:	d12b      	bne.n	800e4ba <_malloc_r+0xe2>
 800e462:	2200      	movs	r2, #0
 800e464:	605a      	str	r2, [r3, #4]
 800e466:	e00f      	b.n	800e488 <_malloc_r+0xb0>
 800e468:	6822      	ldr	r2, [r4, #0]
 800e46a:	1b52      	subs	r2, r2, r5
 800e46c:	d41f      	bmi.n	800e4ae <_malloc_r+0xd6>
 800e46e:	2a0b      	cmp	r2, #11
 800e470:	d917      	bls.n	800e4a2 <_malloc_r+0xca>
 800e472:	1961      	adds	r1, r4, r5
 800e474:	42a3      	cmp	r3, r4
 800e476:	6025      	str	r5, [r4, #0]
 800e478:	bf18      	it	ne
 800e47a:	6059      	strne	r1, [r3, #4]
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	bf08      	it	eq
 800e480:	f8c8 1000 	streq.w	r1, [r8]
 800e484:	5162      	str	r2, [r4, r5]
 800e486:	604b      	str	r3, [r1, #4]
 800e488:	4638      	mov	r0, r7
 800e48a:	f104 060b 	add.w	r6, r4, #11
 800e48e:	f000 f829 	bl	800e4e4 <__malloc_unlock>
 800e492:	f026 0607 	bic.w	r6, r6, #7
 800e496:	1d23      	adds	r3, r4, #4
 800e498:	1af2      	subs	r2, r6, r3
 800e49a:	d0ae      	beq.n	800e3fa <_malloc_r+0x22>
 800e49c:	1b9b      	subs	r3, r3, r6
 800e49e:	50a3      	str	r3, [r4, r2]
 800e4a0:	e7ab      	b.n	800e3fa <_malloc_r+0x22>
 800e4a2:	42a3      	cmp	r3, r4
 800e4a4:	6862      	ldr	r2, [r4, #4]
 800e4a6:	d1dd      	bne.n	800e464 <_malloc_r+0x8c>
 800e4a8:	f8c8 2000 	str.w	r2, [r8]
 800e4ac:	e7ec      	b.n	800e488 <_malloc_r+0xb0>
 800e4ae:	4623      	mov	r3, r4
 800e4b0:	6864      	ldr	r4, [r4, #4]
 800e4b2:	e7ac      	b.n	800e40e <_malloc_r+0x36>
 800e4b4:	4634      	mov	r4, r6
 800e4b6:	6876      	ldr	r6, [r6, #4]
 800e4b8:	e7b4      	b.n	800e424 <_malloc_r+0x4c>
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	e7cc      	b.n	800e458 <_malloc_r+0x80>
 800e4be:	230c      	movs	r3, #12
 800e4c0:	603b      	str	r3, [r7, #0]
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f000 f80e 	bl	800e4e4 <__malloc_unlock>
 800e4c8:	e797      	b.n	800e3fa <_malloc_r+0x22>
 800e4ca:	6025      	str	r5, [r4, #0]
 800e4cc:	e7dc      	b.n	800e488 <_malloc_r+0xb0>
 800e4ce:	605b      	str	r3, [r3, #4]
 800e4d0:	deff      	udf	#255	; 0xff
 800e4d2:	bf00      	nop
 800e4d4:	200066e8 	.word	0x200066e8

0800e4d8 <__malloc_lock>:
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <__malloc_lock+0x8>)
 800e4da:	f000 b86b 	b.w	800e5b4 <__retarget_lock_acquire_recursive>
 800e4de:	bf00      	nop
 800e4e0:	2000682c 	.word	0x2000682c

0800e4e4 <__malloc_unlock>:
 800e4e4:	4801      	ldr	r0, [pc, #4]	; (800e4ec <__malloc_unlock+0x8>)
 800e4e6:	f000 b866 	b.w	800e5b6 <__retarget_lock_release_recursive>
 800e4ea:	bf00      	nop
 800e4ec:	2000682c 	.word	0x2000682c

0800e4f0 <siprintf>:
 800e4f0:	b40e      	push	{r1, r2, r3}
 800e4f2:	b500      	push	{lr}
 800e4f4:	b09c      	sub	sp, #112	; 0x70
 800e4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e4f8:	9002      	str	r0, [sp, #8]
 800e4fa:	9006      	str	r0, [sp, #24]
 800e4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e500:	4809      	ldr	r0, [pc, #36]	; (800e528 <siprintf+0x38>)
 800e502:	9107      	str	r1, [sp, #28]
 800e504:	9104      	str	r1, [sp, #16]
 800e506:	4909      	ldr	r1, [pc, #36]	; (800e52c <siprintf+0x3c>)
 800e508:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50c:	9105      	str	r1, [sp, #20]
 800e50e:	6800      	ldr	r0, [r0, #0]
 800e510:	9301      	str	r3, [sp, #4]
 800e512:	a902      	add	r1, sp, #8
 800e514:	f000 f904 	bl	800e720 <_svfiprintf_r>
 800e518:	9b02      	ldr	r3, [sp, #8]
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
 800e51e:	b01c      	add	sp, #112	; 0x70
 800e520:	f85d eb04 	ldr.w	lr, [sp], #4
 800e524:	b003      	add	sp, #12
 800e526:	4770      	bx	lr
 800e528:	2000015c 	.word	0x2000015c
 800e52c:	ffff0208 	.word	0xffff0208

0800e530 <memset>:
 800e530:	4402      	add	r2, r0
 800e532:	4603      	mov	r3, r0
 800e534:	4293      	cmp	r3, r2
 800e536:	d100      	bne.n	800e53a <memset+0xa>
 800e538:	4770      	bx	lr
 800e53a:	f803 1b01 	strb.w	r1, [r3], #1
 800e53e:	e7f9      	b.n	800e534 <memset+0x4>

0800e540 <_sbrk_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d06      	ldr	r5, [pc, #24]	; (800e55c <_sbrk_r+0x1c>)
 800e544:	2300      	movs	r3, #0
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	602b      	str	r3, [r5, #0]
 800e54c:	f7f2 fd6c 	bl	8001028 <_sbrk>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_sbrk_r+0x1a>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	b103      	cbz	r3, 800e55a <_sbrk_r+0x1a>
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	20006828 	.word	0x20006828

0800e560 <__errno>:
 800e560:	4b01      	ldr	r3, [pc, #4]	; (800e568 <__errno+0x8>)
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	2000015c 	.word	0x2000015c

0800e56c <__libc_init_array>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	4d0d      	ldr	r5, [pc, #52]	; (800e5a4 <__libc_init_array+0x38>)
 800e570:	4c0d      	ldr	r4, [pc, #52]	; (800e5a8 <__libc_init_array+0x3c>)
 800e572:	1b64      	subs	r4, r4, r5
 800e574:	10a4      	asrs	r4, r4, #2
 800e576:	2600      	movs	r6, #0
 800e578:	42a6      	cmp	r6, r4
 800e57a:	d109      	bne.n	800e590 <__libc_init_array+0x24>
 800e57c:	4d0b      	ldr	r5, [pc, #44]	; (800e5ac <__libc_init_array+0x40>)
 800e57e:	4c0c      	ldr	r4, [pc, #48]	; (800e5b0 <__libc_init_array+0x44>)
 800e580:	f000 fbae 	bl	800ece0 <_init>
 800e584:	1b64      	subs	r4, r4, r5
 800e586:	10a4      	asrs	r4, r4, #2
 800e588:	2600      	movs	r6, #0
 800e58a:	42a6      	cmp	r6, r4
 800e58c:	d105      	bne.n	800e59a <__libc_init_array+0x2e>
 800e58e:	bd70      	pop	{r4, r5, r6, pc}
 800e590:	f855 3b04 	ldr.w	r3, [r5], #4
 800e594:	4798      	blx	r3
 800e596:	3601      	adds	r6, #1
 800e598:	e7ee      	b.n	800e578 <__libc_init_array+0xc>
 800e59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e59e:	4798      	blx	r3
 800e5a0:	3601      	adds	r6, #1
 800e5a2:	e7f2      	b.n	800e58a <__libc_init_array+0x1e>
 800e5a4:	0800ee50 	.word	0x0800ee50
 800e5a8:	0800ee50 	.word	0x0800ee50
 800e5ac:	0800ee50 	.word	0x0800ee50
 800e5b0:	0800ee54 	.word	0x0800ee54

0800e5b4 <__retarget_lock_acquire_recursive>:
 800e5b4:	4770      	bx	lr

0800e5b6 <__retarget_lock_release_recursive>:
 800e5b6:	4770      	bx	lr

0800e5b8 <memcpy>:
 800e5b8:	440a      	add	r2, r1
 800e5ba:	4291      	cmp	r1, r2
 800e5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5c0:	d100      	bne.n	800e5c4 <memcpy+0xc>
 800e5c2:	4770      	bx	lr
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5ce:	4291      	cmp	r1, r2
 800e5d0:	d1f9      	bne.n	800e5c6 <memcpy+0xe>
 800e5d2:	bd10      	pop	{r4, pc}

0800e5d4 <_free_r>:
 800e5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5d6:	2900      	cmp	r1, #0
 800e5d8:	d044      	beq.n	800e664 <_free_r+0x90>
 800e5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5de:	9001      	str	r0, [sp, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e5e6:	bfb8      	it	lt
 800e5e8:	18e4      	addlt	r4, r4, r3
 800e5ea:	f7ff ff75 	bl	800e4d8 <__malloc_lock>
 800e5ee:	4a1e      	ldr	r2, [pc, #120]	; (800e668 <_free_r+0x94>)
 800e5f0:	9801      	ldr	r0, [sp, #4]
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	b933      	cbnz	r3, 800e604 <_free_r+0x30>
 800e5f6:	6063      	str	r3, [r4, #4]
 800e5f8:	6014      	str	r4, [r2, #0]
 800e5fa:	b003      	add	sp, #12
 800e5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e600:	f7ff bf70 	b.w	800e4e4 <__malloc_unlock>
 800e604:	42a3      	cmp	r3, r4
 800e606:	d908      	bls.n	800e61a <_free_r+0x46>
 800e608:	6825      	ldr	r5, [r4, #0]
 800e60a:	1961      	adds	r1, r4, r5
 800e60c:	428b      	cmp	r3, r1
 800e60e:	bf01      	itttt	eq
 800e610:	6819      	ldreq	r1, [r3, #0]
 800e612:	685b      	ldreq	r3, [r3, #4]
 800e614:	1949      	addeq	r1, r1, r5
 800e616:	6021      	streq	r1, [r4, #0]
 800e618:	e7ed      	b.n	800e5f6 <_free_r+0x22>
 800e61a:	461a      	mov	r2, r3
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	b10b      	cbz	r3, 800e624 <_free_r+0x50>
 800e620:	42a3      	cmp	r3, r4
 800e622:	d9fa      	bls.n	800e61a <_free_r+0x46>
 800e624:	6811      	ldr	r1, [r2, #0]
 800e626:	1855      	adds	r5, r2, r1
 800e628:	42a5      	cmp	r5, r4
 800e62a:	d10b      	bne.n	800e644 <_free_r+0x70>
 800e62c:	6824      	ldr	r4, [r4, #0]
 800e62e:	4421      	add	r1, r4
 800e630:	1854      	adds	r4, r2, r1
 800e632:	42a3      	cmp	r3, r4
 800e634:	6011      	str	r1, [r2, #0]
 800e636:	d1e0      	bne.n	800e5fa <_free_r+0x26>
 800e638:	681c      	ldr	r4, [r3, #0]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	6053      	str	r3, [r2, #4]
 800e63e:	440c      	add	r4, r1
 800e640:	6014      	str	r4, [r2, #0]
 800e642:	e7da      	b.n	800e5fa <_free_r+0x26>
 800e644:	d902      	bls.n	800e64c <_free_r+0x78>
 800e646:	230c      	movs	r3, #12
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	e7d6      	b.n	800e5fa <_free_r+0x26>
 800e64c:	6825      	ldr	r5, [r4, #0]
 800e64e:	1961      	adds	r1, r4, r5
 800e650:	428b      	cmp	r3, r1
 800e652:	bf04      	itt	eq
 800e654:	6819      	ldreq	r1, [r3, #0]
 800e656:	685b      	ldreq	r3, [r3, #4]
 800e658:	6063      	str	r3, [r4, #4]
 800e65a:	bf04      	itt	eq
 800e65c:	1949      	addeq	r1, r1, r5
 800e65e:	6021      	streq	r1, [r4, #0]
 800e660:	6054      	str	r4, [r2, #4]
 800e662:	e7ca      	b.n	800e5fa <_free_r+0x26>
 800e664:	b003      	add	sp, #12
 800e666:	bd30      	pop	{r4, r5, pc}
 800e668:	200066e8 	.word	0x200066e8

0800e66c <__ssputs_r>:
 800e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e670:	688e      	ldr	r6, [r1, #8]
 800e672:	461f      	mov	r7, r3
 800e674:	42be      	cmp	r6, r7
 800e676:	680b      	ldr	r3, [r1, #0]
 800e678:	4682      	mov	sl, r0
 800e67a:	460c      	mov	r4, r1
 800e67c:	4690      	mov	r8, r2
 800e67e:	d82c      	bhi.n	800e6da <__ssputs_r+0x6e>
 800e680:	898a      	ldrh	r2, [r1, #12]
 800e682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e686:	d026      	beq.n	800e6d6 <__ssputs_r+0x6a>
 800e688:	6965      	ldr	r5, [r4, #20]
 800e68a:	6909      	ldr	r1, [r1, #16]
 800e68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e690:	eba3 0901 	sub.w	r9, r3, r1
 800e694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e698:	1c7b      	adds	r3, r7, #1
 800e69a:	444b      	add	r3, r9
 800e69c:	106d      	asrs	r5, r5, #1
 800e69e:	429d      	cmp	r5, r3
 800e6a0:	bf38      	it	cc
 800e6a2:	461d      	movcc	r5, r3
 800e6a4:	0553      	lsls	r3, r2, #21
 800e6a6:	d527      	bpl.n	800e6f8 <__ssputs_r+0x8c>
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7ff fe95 	bl	800e3d8 <_malloc_r>
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	b360      	cbz	r0, 800e70c <__ssputs_r+0xa0>
 800e6b2:	6921      	ldr	r1, [r4, #16]
 800e6b4:	464a      	mov	r2, r9
 800e6b6:	f7ff ff7f 	bl	800e5b8 <memcpy>
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6c4:	81a3      	strh	r3, [r4, #12]
 800e6c6:	6126      	str	r6, [r4, #16]
 800e6c8:	6165      	str	r5, [r4, #20]
 800e6ca:	444e      	add	r6, r9
 800e6cc:	eba5 0509 	sub.w	r5, r5, r9
 800e6d0:	6026      	str	r6, [r4, #0]
 800e6d2:	60a5      	str	r5, [r4, #8]
 800e6d4:	463e      	mov	r6, r7
 800e6d6:	42be      	cmp	r6, r7
 800e6d8:	d900      	bls.n	800e6dc <__ssputs_r+0x70>
 800e6da:	463e      	mov	r6, r7
 800e6dc:	6820      	ldr	r0, [r4, #0]
 800e6de:	4632      	mov	r2, r6
 800e6e0:	4641      	mov	r1, r8
 800e6e2:	f000 faab 	bl	800ec3c <memmove>
 800e6e6:	68a3      	ldr	r3, [r4, #8]
 800e6e8:	1b9b      	subs	r3, r3, r6
 800e6ea:	60a3      	str	r3, [r4, #8]
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	4433      	add	r3, r6
 800e6f0:	6023      	str	r3, [r4, #0]
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	f000 fab9 	bl	800ec70 <_realloc_r>
 800e6fe:	4606      	mov	r6, r0
 800e700:	2800      	cmp	r0, #0
 800e702:	d1e0      	bne.n	800e6c6 <__ssputs_r+0x5a>
 800e704:	6921      	ldr	r1, [r4, #16]
 800e706:	4650      	mov	r0, sl
 800e708:	f7ff ff64 	bl	800e5d4 <_free_r>
 800e70c:	230c      	movs	r3, #12
 800e70e:	f8ca 3000 	str.w	r3, [sl]
 800e712:	89a3      	ldrh	r3, [r4, #12]
 800e714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e718:	81a3      	strh	r3, [r4, #12]
 800e71a:	f04f 30ff 	mov.w	r0, #4294967295
 800e71e:	e7e9      	b.n	800e6f4 <__ssputs_r+0x88>

0800e720 <_svfiprintf_r>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	4698      	mov	r8, r3
 800e726:	898b      	ldrh	r3, [r1, #12]
 800e728:	061b      	lsls	r3, r3, #24
 800e72a:	b09d      	sub	sp, #116	; 0x74
 800e72c:	4607      	mov	r7, r0
 800e72e:	460d      	mov	r5, r1
 800e730:	4614      	mov	r4, r2
 800e732:	d50e      	bpl.n	800e752 <_svfiprintf_r+0x32>
 800e734:	690b      	ldr	r3, [r1, #16]
 800e736:	b963      	cbnz	r3, 800e752 <_svfiprintf_r+0x32>
 800e738:	2140      	movs	r1, #64	; 0x40
 800e73a:	f7ff fe4d 	bl	800e3d8 <_malloc_r>
 800e73e:	6028      	str	r0, [r5, #0]
 800e740:	6128      	str	r0, [r5, #16]
 800e742:	b920      	cbnz	r0, 800e74e <_svfiprintf_r+0x2e>
 800e744:	230c      	movs	r3, #12
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	f04f 30ff 	mov.w	r0, #4294967295
 800e74c:	e0d0      	b.n	800e8f0 <_svfiprintf_r+0x1d0>
 800e74e:	2340      	movs	r3, #64	; 0x40
 800e750:	616b      	str	r3, [r5, #20]
 800e752:	2300      	movs	r3, #0
 800e754:	9309      	str	r3, [sp, #36]	; 0x24
 800e756:	2320      	movs	r3, #32
 800e758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e760:	2330      	movs	r3, #48	; 0x30
 800e762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e908 <_svfiprintf_r+0x1e8>
 800e766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e76a:	f04f 0901 	mov.w	r9, #1
 800e76e:	4623      	mov	r3, r4
 800e770:	469a      	mov	sl, r3
 800e772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e776:	b10a      	cbz	r2, 800e77c <_svfiprintf_r+0x5c>
 800e778:	2a25      	cmp	r2, #37	; 0x25
 800e77a:	d1f9      	bne.n	800e770 <_svfiprintf_r+0x50>
 800e77c:	ebba 0b04 	subs.w	fp, sl, r4
 800e780:	d00b      	beq.n	800e79a <_svfiprintf_r+0x7a>
 800e782:	465b      	mov	r3, fp
 800e784:	4622      	mov	r2, r4
 800e786:	4629      	mov	r1, r5
 800e788:	4638      	mov	r0, r7
 800e78a:	f7ff ff6f 	bl	800e66c <__ssputs_r>
 800e78e:	3001      	adds	r0, #1
 800e790:	f000 80a9 	beq.w	800e8e6 <_svfiprintf_r+0x1c6>
 800e794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e796:	445a      	add	r2, fp
 800e798:	9209      	str	r2, [sp, #36]	; 0x24
 800e79a:	f89a 3000 	ldrb.w	r3, [sl]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f000 80a1 	beq.w	800e8e6 <_svfiprintf_r+0x1c6>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ae:	f10a 0a01 	add.w	sl, sl, #1
 800e7b2:	9304      	str	r3, [sp, #16]
 800e7b4:	9307      	str	r3, [sp, #28]
 800e7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800e7bc:	4654      	mov	r4, sl
 800e7be:	2205      	movs	r2, #5
 800e7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c4:	4850      	ldr	r0, [pc, #320]	; (800e908 <_svfiprintf_r+0x1e8>)
 800e7c6:	f7f1 fd43 	bl	8000250 <memchr>
 800e7ca:	9a04      	ldr	r2, [sp, #16]
 800e7cc:	b9d8      	cbnz	r0, 800e806 <_svfiprintf_r+0xe6>
 800e7ce:	06d0      	lsls	r0, r2, #27
 800e7d0:	bf44      	itt	mi
 800e7d2:	2320      	movmi	r3, #32
 800e7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d8:	0711      	lsls	r1, r2, #28
 800e7da:	bf44      	itt	mi
 800e7dc:	232b      	movmi	r3, #43	; 0x2b
 800e7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e8:	d015      	beq.n	800e816 <_svfiprintf_r+0xf6>
 800e7ea:	9a07      	ldr	r2, [sp, #28]
 800e7ec:	4654      	mov	r4, sl
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	f04f 0c0a 	mov.w	ip, #10
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7fa:	3b30      	subs	r3, #48	; 0x30
 800e7fc:	2b09      	cmp	r3, #9
 800e7fe:	d94d      	bls.n	800e89c <_svfiprintf_r+0x17c>
 800e800:	b1b0      	cbz	r0, 800e830 <_svfiprintf_r+0x110>
 800e802:	9207      	str	r2, [sp, #28]
 800e804:	e014      	b.n	800e830 <_svfiprintf_r+0x110>
 800e806:	eba0 0308 	sub.w	r3, r0, r8
 800e80a:	fa09 f303 	lsl.w	r3, r9, r3
 800e80e:	4313      	orrs	r3, r2
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	46a2      	mov	sl, r4
 800e814:	e7d2      	b.n	800e7bc <_svfiprintf_r+0x9c>
 800e816:	9b03      	ldr	r3, [sp, #12]
 800e818:	1d19      	adds	r1, r3, #4
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	9103      	str	r1, [sp, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	bfbb      	ittet	lt
 800e822:	425b      	neglt	r3, r3
 800e824:	f042 0202 	orrlt.w	r2, r2, #2
 800e828:	9307      	strge	r3, [sp, #28]
 800e82a:	9307      	strlt	r3, [sp, #28]
 800e82c:	bfb8      	it	lt
 800e82e:	9204      	strlt	r2, [sp, #16]
 800e830:	7823      	ldrb	r3, [r4, #0]
 800e832:	2b2e      	cmp	r3, #46	; 0x2e
 800e834:	d10c      	bne.n	800e850 <_svfiprintf_r+0x130>
 800e836:	7863      	ldrb	r3, [r4, #1]
 800e838:	2b2a      	cmp	r3, #42	; 0x2a
 800e83a:	d134      	bne.n	800e8a6 <_svfiprintf_r+0x186>
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	1d1a      	adds	r2, r3, #4
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	9203      	str	r2, [sp, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	bfb8      	it	lt
 800e848:	f04f 33ff 	movlt.w	r3, #4294967295
 800e84c:	3402      	adds	r4, #2
 800e84e:	9305      	str	r3, [sp, #20]
 800e850:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e918 <_svfiprintf_r+0x1f8>
 800e854:	7821      	ldrb	r1, [r4, #0]
 800e856:	2203      	movs	r2, #3
 800e858:	4650      	mov	r0, sl
 800e85a:	f7f1 fcf9 	bl	8000250 <memchr>
 800e85e:	b138      	cbz	r0, 800e870 <_svfiprintf_r+0x150>
 800e860:	9b04      	ldr	r3, [sp, #16]
 800e862:	eba0 000a 	sub.w	r0, r0, sl
 800e866:	2240      	movs	r2, #64	; 0x40
 800e868:	4082      	lsls	r2, r0
 800e86a:	4313      	orrs	r3, r2
 800e86c:	3401      	adds	r4, #1
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e874:	4825      	ldr	r0, [pc, #148]	; (800e90c <_svfiprintf_r+0x1ec>)
 800e876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e87a:	2206      	movs	r2, #6
 800e87c:	f7f1 fce8 	bl	8000250 <memchr>
 800e880:	2800      	cmp	r0, #0
 800e882:	d038      	beq.n	800e8f6 <_svfiprintf_r+0x1d6>
 800e884:	4b22      	ldr	r3, [pc, #136]	; (800e910 <_svfiprintf_r+0x1f0>)
 800e886:	bb1b      	cbnz	r3, 800e8d0 <_svfiprintf_r+0x1b0>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	3307      	adds	r3, #7
 800e88c:	f023 0307 	bic.w	r3, r3, #7
 800e890:	3308      	adds	r3, #8
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e896:	4433      	add	r3, r6
 800e898:	9309      	str	r3, [sp, #36]	; 0x24
 800e89a:	e768      	b.n	800e76e <_svfiprintf_r+0x4e>
 800e89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	e7a6      	b.n	800e7f4 <_svfiprintf_r+0xd4>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	3401      	adds	r4, #1
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f04f 0c0a 	mov.w	ip, #10
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b8:	3a30      	subs	r2, #48	; 0x30
 800e8ba:	2a09      	cmp	r2, #9
 800e8bc:	d903      	bls.n	800e8c6 <_svfiprintf_r+0x1a6>
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0c6      	beq.n	800e850 <_svfiprintf_r+0x130>
 800e8c2:	9105      	str	r1, [sp, #20]
 800e8c4:	e7c4      	b.n	800e850 <_svfiprintf_r+0x130>
 800e8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e7f0      	b.n	800e8b2 <_svfiprintf_r+0x192>
 800e8d0:	ab03      	add	r3, sp, #12
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <_svfiprintf_r+0x1f4>)
 800e8d8:	a904      	add	r1, sp, #16
 800e8da:	4638      	mov	r0, r7
 800e8dc:	f3af 8000 	nop.w
 800e8e0:	1c42      	adds	r2, r0, #1
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	d1d6      	bne.n	800e894 <_svfiprintf_r+0x174>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	065b      	lsls	r3, r3, #25
 800e8ea:	f53f af2d 	bmi.w	800e748 <_svfiprintf_r+0x28>
 800e8ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8f0:	b01d      	add	sp, #116	; 0x74
 800e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f6:	ab03      	add	r3, sp, #12
 800e8f8:	9300      	str	r3, [sp, #0]
 800e8fa:	462a      	mov	r2, r5
 800e8fc:	4b05      	ldr	r3, [pc, #20]	; (800e914 <_svfiprintf_r+0x1f4>)
 800e8fe:	a904      	add	r1, sp, #16
 800e900:	4638      	mov	r0, r7
 800e902:	f000 f879 	bl	800e9f8 <_printf_i>
 800e906:	e7eb      	b.n	800e8e0 <_svfiprintf_r+0x1c0>
 800e908:	0800ee14 	.word	0x0800ee14
 800e90c:	0800ee1e 	.word	0x0800ee1e
 800e910:	00000000 	.word	0x00000000
 800e914:	0800e66d 	.word	0x0800e66d
 800e918:	0800ee1a 	.word	0x0800ee1a

0800e91c <_printf_common>:
 800e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e920:	4616      	mov	r6, r2
 800e922:	4699      	mov	r9, r3
 800e924:	688a      	ldr	r2, [r1, #8]
 800e926:	690b      	ldr	r3, [r1, #16]
 800e928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e92c:	4293      	cmp	r3, r2
 800e92e:	bfb8      	it	lt
 800e930:	4613      	movlt	r3, r2
 800e932:	6033      	str	r3, [r6, #0]
 800e934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e938:	4607      	mov	r7, r0
 800e93a:	460c      	mov	r4, r1
 800e93c:	b10a      	cbz	r2, 800e942 <_printf_common+0x26>
 800e93e:	3301      	adds	r3, #1
 800e940:	6033      	str	r3, [r6, #0]
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	0699      	lsls	r1, r3, #26
 800e946:	bf42      	ittt	mi
 800e948:	6833      	ldrmi	r3, [r6, #0]
 800e94a:	3302      	addmi	r3, #2
 800e94c:	6033      	strmi	r3, [r6, #0]
 800e94e:	6825      	ldr	r5, [r4, #0]
 800e950:	f015 0506 	ands.w	r5, r5, #6
 800e954:	d106      	bne.n	800e964 <_printf_common+0x48>
 800e956:	f104 0a19 	add.w	sl, r4, #25
 800e95a:	68e3      	ldr	r3, [r4, #12]
 800e95c:	6832      	ldr	r2, [r6, #0]
 800e95e:	1a9b      	subs	r3, r3, r2
 800e960:	42ab      	cmp	r3, r5
 800e962:	dc26      	bgt.n	800e9b2 <_printf_common+0x96>
 800e964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e968:	1e13      	subs	r3, r2, #0
 800e96a:	6822      	ldr	r2, [r4, #0]
 800e96c:	bf18      	it	ne
 800e96e:	2301      	movne	r3, #1
 800e970:	0692      	lsls	r2, r2, #26
 800e972:	d42b      	bmi.n	800e9cc <_printf_common+0xb0>
 800e974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e978:	4649      	mov	r1, r9
 800e97a:	4638      	mov	r0, r7
 800e97c:	47c0      	blx	r8
 800e97e:	3001      	adds	r0, #1
 800e980:	d01e      	beq.n	800e9c0 <_printf_common+0xa4>
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	6922      	ldr	r2, [r4, #16]
 800e986:	f003 0306 	and.w	r3, r3, #6
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	bf02      	ittt	eq
 800e98e:	68e5      	ldreq	r5, [r4, #12]
 800e990:	6833      	ldreq	r3, [r6, #0]
 800e992:	1aed      	subeq	r5, r5, r3
 800e994:	68a3      	ldr	r3, [r4, #8]
 800e996:	bf0c      	ite	eq
 800e998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e99c:	2500      	movne	r5, #0
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	bfc4      	itt	gt
 800e9a2:	1a9b      	subgt	r3, r3, r2
 800e9a4:	18ed      	addgt	r5, r5, r3
 800e9a6:	2600      	movs	r6, #0
 800e9a8:	341a      	adds	r4, #26
 800e9aa:	42b5      	cmp	r5, r6
 800e9ac:	d11a      	bne.n	800e9e4 <_printf_common+0xc8>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	e008      	b.n	800e9c4 <_printf_common+0xa8>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4652      	mov	r2, sl
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	47c0      	blx	r8
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d103      	bne.n	800e9c8 <_printf_common+0xac>
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c8:	3501      	adds	r5, #1
 800e9ca:	e7c6      	b.n	800e95a <_printf_common+0x3e>
 800e9cc:	18e1      	adds	r1, r4, r3
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	2030      	movs	r0, #48	; 0x30
 800e9d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9d6:	4422      	add	r2, r4
 800e9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9e0:	3302      	adds	r3, #2
 800e9e2:	e7c7      	b.n	800e974 <_printf_common+0x58>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	4649      	mov	r1, r9
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	47c0      	blx	r8
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	d0e6      	beq.n	800e9c0 <_printf_common+0xa4>
 800e9f2:	3601      	adds	r6, #1
 800e9f4:	e7d9      	b.n	800e9aa <_printf_common+0x8e>
	...

0800e9f8 <_printf_i>:
 800e9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9fc:	7e0f      	ldrb	r7, [r1, #24]
 800e9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea00:	2f78      	cmp	r7, #120	; 0x78
 800ea02:	4691      	mov	r9, r2
 800ea04:	4680      	mov	r8, r0
 800ea06:	460c      	mov	r4, r1
 800ea08:	469a      	mov	sl, r3
 800ea0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea0e:	d807      	bhi.n	800ea20 <_printf_i+0x28>
 800ea10:	2f62      	cmp	r7, #98	; 0x62
 800ea12:	d80a      	bhi.n	800ea2a <_printf_i+0x32>
 800ea14:	2f00      	cmp	r7, #0
 800ea16:	f000 80d4 	beq.w	800ebc2 <_printf_i+0x1ca>
 800ea1a:	2f58      	cmp	r7, #88	; 0x58
 800ea1c:	f000 80c0 	beq.w	800eba0 <_printf_i+0x1a8>
 800ea20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea28:	e03a      	b.n	800eaa0 <_printf_i+0xa8>
 800ea2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea2e:	2b15      	cmp	r3, #21
 800ea30:	d8f6      	bhi.n	800ea20 <_printf_i+0x28>
 800ea32:	a101      	add	r1, pc, #4	; (adr r1, 800ea38 <_printf_i+0x40>)
 800ea34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea38:	0800ea91 	.word	0x0800ea91
 800ea3c:	0800eaa5 	.word	0x0800eaa5
 800ea40:	0800ea21 	.word	0x0800ea21
 800ea44:	0800ea21 	.word	0x0800ea21
 800ea48:	0800ea21 	.word	0x0800ea21
 800ea4c:	0800ea21 	.word	0x0800ea21
 800ea50:	0800eaa5 	.word	0x0800eaa5
 800ea54:	0800ea21 	.word	0x0800ea21
 800ea58:	0800ea21 	.word	0x0800ea21
 800ea5c:	0800ea21 	.word	0x0800ea21
 800ea60:	0800ea21 	.word	0x0800ea21
 800ea64:	0800eba9 	.word	0x0800eba9
 800ea68:	0800ead1 	.word	0x0800ead1
 800ea6c:	0800eb63 	.word	0x0800eb63
 800ea70:	0800ea21 	.word	0x0800ea21
 800ea74:	0800ea21 	.word	0x0800ea21
 800ea78:	0800ebcb 	.word	0x0800ebcb
 800ea7c:	0800ea21 	.word	0x0800ea21
 800ea80:	0800ead1 	.word	0x0800ead1
 800ea84:	0800ea21 	.word	0x0800ea21
 800ea88:	0800ea21 	.word	0x0800ea21
 800ea8c:	0800eb6b 	.word	0x0800eb6b
 800ea90:	682b      	ldr	r3, [r5, #0]
 800ea92:	1d1a      	adds	r2, r3, #4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	602a      	str	r2, [r5, #0]
 800ea98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e09f      	b.n	800ebe4 <_printf_i+0x1ec>
 800eaa4:	6820      	ldr	r0, [r4, #0]
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	0607      	lsls	r7, r0, #24
 800eaaa:	f103 0104 	add.w	r1, r3, #4
 800eaae:	6029      	str	r1, [r5, #0]
 800eab0:	d501      	bpl.n	800eab6 <_printf_i+0xbe>
 800eab2:	681e      	ldr	r6, [r3, #0]
 800eab4:	e003      	b.n	800eabe <_printf_i+0xc6>
 800eab6:	0646      	lsls	r6, r0, #25
 800eab8:	d5fb      	bpl.n	800eab2 <_printf_i+0xba>
 800eaba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eabe:	2e00      	cmp	r6, #0
 800eac0:	da03      	bge.n	800eaca <_printf_i+0xd2>
 800eac2:	232d      	movs	r3, #45	; 0x2d
 800eac4:	4276      	negs	r6, r6
 800eac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaca:	485a      	ldr	r0, [pc, #360]	; (800ec34 <_printf_i+0x23c>)
 800eacc:	230a      	movs	r3, #10
 800eace:	e012      	b.n	800eaf6 <_printf_i+0xfe>
 800ead0:	682b      	ldr	r3, [r5, #0]
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	1d19      	adds	r1, r3, #4
 800ead6:	6029      	str	r1, [r5, #0]
 800ead8:	0605      	lsls	r5, r0, #24
 800eada:	d501      	bpl.n	800eae0 <_printf_i+0xe8>
 800eadc:	681e      	ldr	r6, [r3, #0]
 800eade:	e002      	b.n	800eae6 <_printf_i+0xee>
 800eae0:	0641      	lsls	r1, r0, #25
 800eae2:	d5fb      	bpl.n	800eadc <_printf_i+0xe4>
 800eae4:	881e      	ldrh	r6, [r3, #0]
 800eae6:	4853      	ldr	r0, [pc, #332]	; (800ec34 <_printf_i+0x23c>)
 800eae8:	2f6f      	cmp	r7, #111	; 0x6f
 800eaea:	bf0c      	ite	eq
 800eaec:	2308      	moveq	r3, #8
 800eaee:	230a      	movne	r3, #10
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eaf6:	6865      	ldr	r5, [r4, #4]
 800eaf8:	60a5      	str	r5, [r4, #8]
 800eafa:	2d00      	cmp	r5, #0
 800eafc:	bfa2      	ittt	ge
 800eafe:	6821      	ldrge	r1, [r4, #0]
 800eb00:	f021 0104 	bicge.w	r1, r1, #4
 800eb04:	6021      	strge	r1, [r4, #0]
 800eb06:	b90e      	cbnz	r6, 800eb0c <_printf_i+0x114>
 800eb08:	2d00      	cmp	r5, #0
 800eb0a:	d04b      	beq.n	800eba4 <_printf_i+0x1ac>
 800eb0c:	4615      	mov	r5, r2
 800eb0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb12:	fb03 6711 	mls	r7, r3, r1, r6
 800eb16:	5dc7      	ldrb	r7, [r0, r7]
 800eb18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb1c:	4637      	mov	r7, r6
 800eb1e:	42bb      	cmp	r3, r7
 800eb20:	460e      	mov	r6, r1
 800eb22:	d9f4      	bls.n	800eb0e <_printf_i+0x116>
 800eb24:	2b08      	cmp	r3, #8
 800eb26:	d10b      	bne.n	800eb40 <_printf_i+0x148>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	07de      	lsls	r6, r3, #31
 800eb2c:	d508      	bpl.n	800eb40 <_printf_i+0x148>
 800eb2e:	6923      	ldr	r3, [r4, #16]
 800eb30:	6861      	ldr	r1, [r4, #4]
 800eb32:	4299      	cmp	r1, r3
 800eb34:	bfde      	ittt	le
 800eb36:	2330      	movle	r3, #48	; 0x30
 800eb38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb40:	1b52      	subs	r2, r2, r5
 800eb42:	6122      	str	r2, [r4, #16]
 800eb44:	f8cd a000 	str.w	sl, [sp]
 800eb48:	464b      	mov	r3, r9
 800eb4a:	aa03      	add	r2, sp, #12
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4640      	mov	r0, r8
 800eb50:	f7ff fee4 	bl	800e91c <_printf_common>
 800eb54:	3001      	adds	r0, #1
 800eb56:	d14a      	bne.n	800ebee <_printf_i+0x1f6>
 800eb58:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5c:	b004      	add	sp, #16
 800eb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	f043 0320 	orr.w	r3, r3, #32
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	4833      	ldr	r0, [pc, #204]	; (800ec38 <_printf_i+0x240>)
 800eb6c:	2778      	movs	r7, #120	; 0x78
 800eb6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	6829      	ldr	r1, [r5, #0]
 800eb76:	061f      	lsls	r7, r3, #24
 800eb78:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb7c:	d402      	bmi.n	800eb84 <_printf_i+0x18c>
 800eb7e:	065f      	lsls	r7, r3, #25
 800eb80:	bf48      	it	mi
 800eb82:	b2b6      	uxthmi	r6, r6
 800eb84:	07df      	lsls	r7, r3, #31
 800eb86:	bf48      	it	mi
 800eb88:	f043 0320 	orrmi.w	r3, r3, #32
 800eb8c:	6029      	str	r1, [r5, #0]
 800eb8e:	bf48      	it	mi
 800eb90:	6023      	strmi	r3, [r4, #0]
 800eb92:	b91e      	cbnz	r6, 800eb9c <_printf_i+0x1a4>
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	f023 0320 	bic.w	r3, r3, #32
 800eb9a:	6023      	str	r3, [r4, #0]
 800eb9c:	2310      	movs	r3, #16
 800eb9e:	e7a7      	b.n	800eaf0 <_printf_i+0xf8>
 800eba0:	4824      	ldr	r0, [pc, #144]	; (800ec34 <_printf_i+0x23c>)
 800eba2:	e7e4      	b.n	800eb6e <_printf_i+0x176>
 800eba4:	4615      	mov	r5, r2
 800eba6:	e7bd      	b.n	800eb24 <_printf_i+0x12c>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	6826      	ldr	r6, [r4, #0]
 800ebac:	6961      	ldr	r1, [r4, #20]
 800ebae:	1d18      	adds	r0, r3, #4
 800ebb0:	6028      	str	r0, [r5, #0]
 800ebb2:	0635      	lsls	r5, r6, #24
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	d501      	bpl.n	800ebbc <_printf_i+0x1c4>
 800ebb8:	6019      	str	r1, [r3, #0]
 800ebba:	e002      	b.n	800ebc2 <_printf_i+0x1ca>
 800ebbc:	0670      	lsls	r0, r6, #25
 800ebbe:	d5fb      	bpl.n	800ebb8 <_printf_i+0x1c0>
 800ebc0:	8019      	strh	r1, [r3, #0]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	6123      	str	r3, [r4, #16]
 800ebc6:	4615      	mov	r5, r2
 800ebc8:	e7bc      	b.n	800eb44 <_printf_i+0x14c>
 800ebca:	682b      	ldr	r3, [r5, #0]
 800ebcc:	1d1a      	adds	r2, r3, #4
 800ebce:	602a      	str	r2, [r5, #0]
 800ebd0:	681d      	ldr	r5, [r3, #0]
 800ebd2:	6862      	ldr	r2, [r4, #4]
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	f7f1 fb3a 	bl	8000250 <memchr>
 800ebdc:	b108      	cbz	r0, 800ebe2 <_printf_i+0x1ea>
 800ebde:	1b40      	subs	r0, r0, r5
 800ebe0:	6060      	str	r0, [r4, #4]
 800ebe2:	6863      	ldr	r3, [r4, #4]
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebec:	e7aa      	b.n	800eb44 <_printf_i+0x14c>
 800ebee:	6923      	ldr	r3, [r4, #16]
 800ebf0:	462a      	mov	r2, r5
 800ebf2:	4649      	mov	r1, r9
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	47d0      	blx	sl
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	d0ad      	beq.n	800eb58 <_printf_i+0x160>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	079b      	lsls	r3, r3, #30
 800ec00:	d413      	bmi.n	800ec2a <_printf_i+0x232>
 800ec02:	68e0      	ldr	r0, [r4, #12]
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	4298      	cmp	r0, r3
 800ec08:	bfb8      	it	lt
 800ec0a:	4618      	movlt	r0, r3
 800ec0c:	e7a6      	b.n	800eb5c <_printf_i+0x164>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	4632      	mov	r2, r6
 800ec12:	4649      	mov	r1, r9
 800ec14:	4640      	mov	r0, r8
 800ec16:	47d0      	blx	sl
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d09d      	beq.n	800eb58 <_printf_i+0x160>
 800ec1c:	3501      	adds	r5, #1
 800ec1e:	68e3      	ldr	r3, [r4, #12]
 800ec20:	9903      	ldr	r1, [sp, #12]
 800ec22:	1a5b      	subs	r3, r3, r1
 800ec24:	42ab      	cmp	r3, r5
 800ec26:	dcf2      	bgt.n	800ec0e <_printf_i+0x216>
 800ec28:	e7eb      	b.n	800ec02 <_printf_i+0x20a>
 800ec2a:	2500      	movs	r5, #0
 800ec2c:	f104 0619 	add.w	r6, r4, #25
 800ec30:	e7f5      	b.n	800ec1e <_printf_i+0x226>
 800ec32:	bf00      	nop
 800ec34:	0800ee25 	.word	0x0800ee25
 800ec38:	0800ee36 	.word	0x0800ee36

0800ec3c <memmove>:
 800ec3c:	4288      	cmp	r0, r1
 800ec3e:	b510      	push	{r4, lr}
 800ec40:	eb01 0402 	add.w	r4, r1, r2
 800ec44:	d902      	bls.n	800ec4c <memmove+0x10>
 800ec46:	4284      	cmp	r4, r0
 800ec48:	4623      	mov	r3, r4
 800ec4a:	d807      	bhi.n	800ec5c <memmove+0x20>
 800ec4c:	1e43      	subs	r3, r0, #1
 800ec4e:	42a1      	cmp	r1, r4
 800ec50:	d008      	beq.n	800ec64 <memmove+0x28>
 800ec52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec5a:	e7f8      	b.n	800ec4e <memmove+0x12>
 800ec5c:	4402      	add	r2, r0
 800ec5e:	4601      	mov	r1, r0
 800ec60:	428a      	cmp	r2, r1
 800ec62:	d100      	bne.n	800ec66 <memmove+0x2a>
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec6e:	e7f7      	b.n	800ec60 <memmove+0x24>

0800ec70 <_realloc_r>:
 800ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec74:	4680      	mov	r8, r0
 800ec76:	4614      	mov	r4, r2
 800ec78:	460e      	mov	r6, r1
 800ec7a:	b921      	cbnz	r1, 800ec86 <_realloc_r+0x16>
 800ec7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec80:	4611      	mov	r1, r2
 800ec82:	f7ff bba9 	b.w	800e3d8 <_malloc_r>
 800ec86:	b92a      	cbnz	r2, 800ec94 <_realloc_r+0x24>
 800ec88:	f7ff fca4 	bl	800e5d4 <_free_r>
 800ec8c:	4625      	mov	r5, r4
 800ec8e:	4628      	mov	r0, r5
 800ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec94:	f000 f81b 	bl	800ecce <_malloc_usable_size_r>
 800ec98:	4284      	cmp	r4, r0
 800ec9a:	4607      	mov	r7, r0
 800ec9c:	d802      	bhi.n	800eca4 <_realloc_r+0x34>
 800ec9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eca2:	d812      	bhi.n	800ecca <_realloc_r+0x5a>
 800eca4:	4621      	mov	r1, r4
 800eca6:	4640      	mov	r0, r8
 800eca8:	f7ff fb96 	bl	800e3d8 <_malloc_r>
 800ecac:	4605      	mov	r5, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d0ed      	beq.n	800ec8e <_realloc_r+0x1e>
 800ecb2:	42bc      	cmp	r4, r7
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	bf28      	it	cs
 800ecba:	463a      	movcs	r2, r7
 800ecbc:	f7ff fc7c 	bl	800e5b8 <memcpy>
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f7ff fc86 	bl	800e5d4 <_free_r>
 800ecc8:	e7e1      	b.n	800ec8e <_realloc_r+0x1e>
 800ecca:	4635      	mov	r5, r6
 800eccc:	e7df      	b.n	800ec8e <_realloc_r+0x1e>

0800ecce <_malloc_usable_size_r>:
 800ecce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecd2:	1f18      	subs	r0, r3, #4
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	bfbc      	itt	lt
 800ecd8:	580b      	ldrlt	r3, [r1, r0]
 800ecda:	18c0      	addlt	r0, r0, r3
 800ecdc:	4770      	bx	lr
	...

0800ece0 <_init>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	bf00      	nop
 800ece4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece6:	bc08      	pop	{r3}
 800ece8:	469e      	mov	lr, r3
 800ecea:	4770      	bx	lr

0800ecec <_fini>:
 800ecec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecee:	bf00      	nop
 800ecf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf2:	bc08      	pop	{r3}
 800ecf4:	469e      	mov	lr, r3
 800ecf6:	4770      	bx	lr
